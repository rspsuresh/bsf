<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2014 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Crm\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;

use Zend\Authentication\Result;
use Zend\Authentication\AuthenticationService;
use Zend\Authentication\Storage\Session as SessionStorage;
use Zend\Session\Container;

use Zend\Db\Adapter\Adapter;

use Zend\Authentication\Adapter\DbTable as AuthAdapter;

use Zend\Db\Sql\Where;
use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Expression;

use Application\View\Helper\Qualifier;

use PHPExcel;
use PHPExcel_IOFactory;
use Application\View\Helper\CommonHelper;

use DOMPDF;

class LeadController extends AbstractActionController
{
    /* Action construct Start */
    public function __construct()	{
        $this->bsf = new \BuildsuperfastClass();
        $this->auth = new AuthenticationService();
        if ($this->auth->hasIdentity()) {
            $this->identity = $this->auth->getIdentity();
        }
        $this->_view = new ViewModel();
    }
    /* Action construct End */

    public function entryAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Lead Entry");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $userName = $this->auth->getIdentity()->EmployeeName;
        $userId = $this->auth->getIdentity()->UserId;


        CommonHelper::CheckPowerUser($userId, $dbAdapter);
        if($viewRenderer->bPowerUser == false) {
            $bAns= CommonHelper::FindPermission($userId, 'Lead-Add', $dbAdapter);
            if($bAns== false){
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $sql     = new Sql($dbAdapter);
                $postParams = $request->getPost();

                if($postParams['mode']=='Mobile'){

                    $select = $sql->select();
                    $select->from(array('a' =>'Crm_Leads'))
                        ->columns(array('Mobile','LeadName'))
                        ->where(array("Mobile"=>$postParams['mobile']));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultLeads= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                }
                else{
                    $select = $sql->select();
                    $select->from(array('a' =>'Crm_CostPreferenceMaster'))
                        ->columns(array('CostPreferenceTo'))
                        ->where(array("CostPreferenceTo >= $postParams[CostFrom]"));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent(json_encode($resultLeads));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                $postParams = $request->getPost();

                try {
                    $leadDate = date('Y-M-d',strtotime($postParams['leadDate']));

                    $vip='0';
                    if(isset($postParams['VIP'])){
                        $vip=$postParams['VIP'];
                    }

                    $nri='0';
                    if(isset($postParams['NRI'])){
                        $nri=$postParams['NRI'];
                    }

                    $nextCallDate = date('Y-M-d',strtotime($postParams['nextCallDate']));
                    if($postParams['vehicleAllocation']){
                        $vehicleAllocation = $postParams['vehicleAllocation'];
                    } else {
                        $vehicleAllocation  = "";
                    }

                    //if followup type is sitevisit we have to show pickuptime
                    if(!empty($postParams['pickUpTime'])){
                        $pickUpTime  = $postParams['pickUpTime'];
                    } else {
                        $pickUpTime  = 0;
                    }
                    if($postParams['pickUpAddress']){
                        $pickUpAddress =  $this->bsf->isNullCheck($postParams['pickUpAddress'],'string');
                    } else {
                        $pickUpAddress = "";
                    }

                    if($postParams['refBuyerId']){
                        $refBuyerId = $this->bsf->isNullCheck($postParams['refBuyerId'],'number');
                    } else {
                        $refBuyerId = "";
                    }

                    //More Details
                    $select = $sql->insert('Crm_Leads');
                    $newData = array(
                        //Lead Date Entry
                        'LeadDate'  => $leadDate,
                        //Basic Details
                        'LeadName' =>$this->bsf->isNullCheck($postParams['leadName'],'string'),
                        'CallerSid' =>$this->bsf->isNullCheck($postParams['caller_sid'],'string'),
                        'Title' =>$this->bsf->isNullCheck($postParams['title'],'string'),
                        'LeadType' =>$this->bsf->isNullCheck($postParams['leadType'],'number'),
                        'LeaserType'  => $this->bsf->isNullCheck($postParams['leaserType'],'string'),
                        'CountryCode' =>$this->bsf->isNullCheck($postParams['countrycode'],'number'),
                        'Mobile'  => $this->bsf->isNullCheck($postParams['mobile'],'number'),
                        'Email'  =>$this->bsf->isNullCheck($postParams['email'],'string'),
                        //Reference entry
                        'RefBuyerId'=>$this->bsf->isNullCheck($refBuyerId,'number'),
                        'brokerId'=> $this->bsf->isNullCheck($postParams['brokerId'],'number'),
                        //status Entry
                        'StatusId'=>$this->bsf->isNullCheck($postParams['statusId'],'number'),
                        'Remarks'=>$this->bsf->isNullCheck($postParams['remarks'],'string'),
                        'VIP'=>$this->bsf->isNullCheck($vip,'number'),
                        'NRI'=>$this->bsf->isNullCheck($nri,'number'),
                        //Unit preference
                        'UnitTypeId'=>$this->bsf->isNullCheck($postParams['unitTypeId'],'number'),
                        'CostPreferenceFrom'=>$this->bsf->isNullCheck($postParams['costPreferenceFrom'],'number'),
                        'CostPreferenceTo'=>$this->bsf->isNullCheck($postParams['costPreferenceTo'],'number'),
                        'ExecutiveId'=>$this->bsf->isNullCheck($postParams['executiveId'],'number'),
                        'UserId'=>$this->auth->getIdentity()->UserId,
                        'CreatedDate'=>date('m-d-Y H:i:s'),
                    );

                    $select->values($newData);
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $leadId = $dbAdapter->getDriver()->getLastGeneratedValue();
                    $projectsId=$postParams['projectsId'];

                    $cityId=$postParams['PreCityId'];
                    $sourceId=$postParams['leadSourceId'];
                    if(count($projectsId) > 0){

                        foreach ($projectsId as $value){
                            $select = $sql->insert('Crm_LeadProjects');
                            $newData = array(
                                'LeadId' => $leadId,
                                'ProjectId'=> $value,
                            );
                            $select->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }}
                    if(count($cityId)>0) {
                        foreach ($cityId as $value) {
                            if (!is_numeric($value) && trim($value) != '') {
                                $otherName = trim($value);
                                // add new other cost
                                $insert = $sql->insert('WF_CityMaster')
                                    ->values(array(
                                        'CityName' => $otherName,
                                        'StateId' => 1,
                                        'CountryId' => 2
                                    ));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                $value = $dbAdapter->getDriver()->getLastGeneratedValue();

                            }

                            $insert = $sql->insert('Crm_LeadCity');
                            $newData = array(
                                'LeadId' => $leadId,
                                'CityId' => $value,
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    if(count($sourceId)>0) {
                        foreach ($sourceId as $value){

                            $lead = explode(',',$value);
                            $LeadSourceId = $lead[0];
                            $LeadSourceType = $lead[1];
                            $select = $sql->insert('Crm_LeadSource');
                            $newData = array(
                                'LeadId' => $leadId,
                                'LeadSourceId'=> $LeadSourceId,
                                'Name'=>$LeadSourceType
                            );
                            $select->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }}
                    if($leadId!=0) {
                        $select = $sql->insert('Crm_LeadFollowup');
                        $newData = array(
                            'FollowUpDate' => $leadDate,
                            'LeadId' => $leadId,
                            'ExecutiveId' => $this->bsf->isNullCheck($postParams['executiveId'], 'number'),
                            'Remarks' => $this->bsf->isNullCheck($postParams['remarks'], 'string'),
                            'NextCallDate' => $this->bsf->isNullCheck($nextCallDate, 'string'),
                            'StatusId' => $this->bsf->isNullCheck($postParams['statusId'], 'number'),
                            'NatureId' => $this->bsf->isNullCheck($postParams['natureId'], 'number'),
                            'CallTypeId' => 22,
                            'NextFollowUpTypeId' => $this->bsf->isNullCheck($postParams['nextFollowUpTypeId'], 'number'),
                            'NextFollowupRemarks' => $this->bsf->isNullCheck($postParams['nextfollowremarks'], 'string'),
                            'UnitTypeId' => $this->bsf->isNullCheck($postParams['unitTypeId'], 'number'),
                            'VehicleAllocation' => $this->bsf->isNullCheck($vehicleAllocation, 'string'),
                            'PickUpTime' => $this->bsf->isNullCheck($pickUpTime, 'string'),
                            'PickUpAddress' => $this->bsf->isNullCheck($pickUpAddress, 'string'),
                            'UserId' => $userId,
                            'ModifiedDate' => date('Y-m-d H:i:s'),
                        );
                        $select->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Lead-Add','N','Lead-Details',$leadId,0, 0, 'CRM','',$userId, 0 ,0);
                   if($postParams['email']!="" || $postParams['email']!= null){
                    //welcome mail
                    $mailData = array(

                        array(
                            'name' => 'USERNAME',
                            'content' => $postParams['leadName']
                        ),

                    );



                    // get kickoff documents projectwise and mail as attachment
                    $projectsId = trim(implode(',', $postParams['projectsId']));
                    if($projectsId !='' || $projectsId!=0){
                        $subQuery = $sql->select();
                        $subQuery->from("Proj_ProjectMaster")
                            ->columns(array('KickoffId'))
                            ->where("ProjectId IN ($projectsId)");

                        $select = $sql->select();
                        $select->from('KF_Documents')
                            ->columns(array('URL', 'DocumentName'))
                            ->where->expression('KickoffId IN ?', array($subQuery));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $documents  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        $attachments = array();
                        foreach($documents as $doc) {
                            if($doc['URL']!=''){
                                $url = $viewRenderer->basePath. 'public/' . $doc['URL'];
                                $attachment = file_get_contents($url);
                                $attachment_encoded = base64_encode($attachment);
                                $attachments[] = array(
                                    'name' => $doc['DocumentName'],
                                    'type' => mime_content_type($url),
                                    'content' => $attachment_encoded
                                );

                                 $update = $sql->update();
                                 $update->table('Crm_LeadFollowup');
                                 $update->set(array('URL'  => $doc['URL']));
                                 $update->where(array('EntryId'=>$followupentryid));
                                 $statement = $sql->getSqlStringForSqlObject($update);
                                 $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                             }}}
                    $sm = $this->getServiceLocator();
                    $config = $sm->get('application')->getConfig();
                    $viewRenderer->MandrilSendMail()->sendMailWithMultipleAttachment($postParams['email'],$config['general']['mandrilEmail'],'Lead - Project Kickoff Documents','crm_lead_project_documents', $attachments, $mailData);
                }} catch ( PDOException $e ) {
                    $connection->rollback();
                }
                $this->redirect()->toRoute('crm/register', array('controller' => 'lead', 'action' => 'register'));

            } else {
                $this->_view->CallerSid= $this->params()->fromRoute('CallerSid');

                //selecting values for buyer reference
                $select = $sql->select();
                $select->from('Crm_Leads')
                    ->columns(array('LeadId','LeadName'))
                    ->where(array('LeadType'=>1));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsRef = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for LeadType
                $select = $sql->select();
                $select->from('Crm_LeadTypeMaster')
                    ->columns(array('LeadTypeId','LeadTypeName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for Broker
                $select = $sql->select();
                $select->from('Crm_BrokerMaster')
                    ->columns(array('BrokerId','BrokerName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsBroker = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for Status
                $select = $sql->select();
                $select->from('Crm_StatusMaster')
                    ->columns(array('StatusId','Description'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for Nature
                $select = $sql->select();
                $select->from('Crm_NatureMaster')
                    ->columns(array('NatureId','Description'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_CallTypeMaster')
                    ->columns(array('CallTypeId','Description'))
                    ->where(array('Lead'=>'1'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for CallType
                $select = $sql->select();
                $select->from('Crm_CallTypeMaster')
                    ->columns(array('CallTypeId','Description'))
                    ->where(array('Lead'=>'1'))
                    ->where(array("Description NOT IN ('Block','Drop','Finalization','Pre-book','Proposal')"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCallnot  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for UnitType
                $select = $sql->select();
                $select->from('Crm_UnitTypeMaster')
                    ->columns(array('UnitTypeId','UnitTypeName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsUnitType = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for LeadProjects
                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId','ProjectName'))
                    ->order('ProjectId desc');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLeadProjects = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for LeadSource
                $select1 = $sql->select();
                $select1->from("Crm_LeadSourceMaster")
                    ->columns(array("Id"=>new expression("LeadSourceId"),"Name"=>new expression("LeadSourceName"),"Type"=>new expression("'L'")));

                $select2 = $sql->select();
                $select2->from("Crm_CampaignRegister")
                    ->columns(array("Id"=>new expression("CampaignId"),"Name"=>new expression("CampaignName + ' - ' + SourceName"),"Type"=>new expression("'C'")));
                $select2->combine($select1,'Union ALL');

                $select3 = $sql->select();
                $select3->from(array("g"=>$select2))
                    ->columns(array("Id" => "Id", "Type", "value" => "Name"));
                $statement = $sql->getSqlStringForSqlObject($select3);
                $this->_view->resultsLeadSource= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for Cost Preference
                $select = $sql->select();
                $select->from('Crm_CostPreferenceMaster')
                    ->columns(array('CostPreferenceId','CostPreferenceFrom','CostPreferenceTo'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCost  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for City
                $select = $sql->select();
                $select->from('WF_CityMaster')
                    ->columns(array('CityId','CityName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCity  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values for Executive
                $PositionTypeId=array(5,2);
                $sub = $sql->select();
                $sub->from(array('a'=>'WF_PositionMaster'))
                    ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
                    ->columns(array('PositionId'))
                    ->where(array("b.PositionTypeId"=>$PositionTypeId));

                $select = $sql->select();
                $select->from('WF_Users')
                    ->columns(array('UserId','EmployeeName','UserName'))
                    ->where->expression("PositionId IN ?",array($sub));
                $select->where(array("DeleteFlag"=>0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsExecutive = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->userId=$userId;
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function personalAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $leadId = $this->params()->fromRoute('leadId');

        //check whether the route value is exists or not
        $select = $sql->select();
        $select->from('Crm_LeadPersonalInfo')
            ->columns(array('LeadId'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $ld = 0;
        if(count($lid) > 0){
            $ld = $lid[0]['LeadId'];
            //print_r($ld ); die;
        }

        //Edit PersonalInfo
        $select = $sql->select();
        $select->from(array('a' => 'Crm_LeadPersonalInfo'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("NRI"), $select::JOIN_LEFT)
            ->columns(array("*",'leadDob'=>new Expression("CONVERT(varchar(10),DOB,105)"),'leadWeddingDate'=>new Expression("CONVERT(varchar(10),WeddingDate,105)"),'leadChildDob'=>new Expression("CONVERT(varchar(10),ChildDOB,105)")))
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsMain = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('Crm_PersonalInfoChild')
            ->columns(array("*",'ChildDob'=>new Expression("CONVERT(varchar(10),ChildDob,105)")))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsMainChild = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_PersonalInfoChild')
            ->columns(array('ChildCount'=>new Expression("COUNT(ChilId)")))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsChildcount = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();



        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



        //Edit NRIDetail
        $select = $sql->select();
        $select->from(array('a'=>'Crm_LeadNriInfo'))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsNri  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_LeadNriInfo')
            ->columns(array('LeadId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $resultsnridet  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from(array('a' => 'Crm_ProfessionMaster'))
            ->columns(array('ProfessionId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->response = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_ReligionMaster'))
            ->columns(array('ReligionId', 'ReligionName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->religion = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_NationalityMaster'))
            ->columns(array('NationalityId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->nationality = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName","LeadType"), $select::JOIN_LEFT)
            ->join(array("c"=>"Crm_LeadPersonalInfo"), "b.LeadId=c.LeadId", array("Photo"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_MaritalStatusMaster'))
            ->columns(array('MaritalId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseMarital = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('WF_CityMaster')
            ->columns(array('CityId','CityName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsCity   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $request = $this->getRequest();
        if($this->getRequest()->isXmlHttpRequest())	{
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        }
        else {
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();

                $files = $request->getFiles();
                //print_r($postParams);die;
                // lead Personal page params
                $photoUrl = "$leadId/";
                //echo $dir = $viewRenderer->basePath()."/uploads/crm/leadphotos/$leadId/";
                $dir = "public/uploads/crm/leadphotos/$leadId/";
                if(!is_dir($dir))
                    mkdir($dir, 0755, true);
                //$files  = $postParams['files'];
                //echo json_encode($files);
                $filter = new \Zend\Filter\File\Rename(array(
                    "target"    => $dir.$files['files']['name'],
                    "randomize" => true,
                ));
                $fname1 = $filter->filter($files['files']['tmp_name']);
                $fname= Str_replace("\\","/", $fname1);
                //$fileName = ;
                $postParams = $request->getPost();

                if($postParams['dob']){
                    $dob = date('Y-m-d',strtotime($postParams['dob']));
                } else {
                    $dob  = "";
                }

                $weddingDate  = $this->bsf->isNullCheck($postParams['weddingDate'],'string');
                $spouseName  = $this->bsf->isNullCheck($postParams['spouseName'],'string');
                $haveChild  = $this->bsf->isNullCheck($postParams['haveChild'],'string');
                $noOfChilds  = $this->bsf->isNullCheck($postParams['childs'],'string');

                // lead nri contact page params

                $nri  = $postParams['Nri'];
                $sex = $this->bsf->isNullCheck($postParams['sex'],'string');
                $personName  = $this->bsf->isNullCheck($postParams['personName'],'string');
                $address  = $this->bsf->isNullCheck($postParams['address'],'string');
                $city  = $this->bsf->isNullCheck($postParams['city'],'string');
                $state  = $this->bsf->isNullCheck($postParams['state'],'string');
                $country = $this->bsf->isNullCheck($postParams['country'],'string');
                $email  = $this->bsf->isNullCheck($postParams['email'],'string');
                $mobile  = $this->bsf->isNullCheck($postParams['mobile'],'string');

                $count = $postParams['childs'];

                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    if($ld == 0){
                        $insert  = $sql->insert('Crm_LeadPersonalInfo');
                        $newData = array(

                            'DOB'  =>$dob,
                            'Gender'   => $this->bsf->isNullCheck($postParams['sex'],'string'),
                            'Religion'  => $this->bsf->isNullCheck($postParams['religion'],'number'),
                            'NationalityId' =>$this->bsf->isNullCheck($postParams['nationality'],'number'),
                            'ProfessionId'  => $this->bsf->isNullCheck($postParams['profession'],'number'),
                            'Organization'  => $this->bsf->isNullCheck($postParams['organization'],'string'),
                            'Photo'  => $fname,
                            'FatherName'  =>$this->bsf->isNullCheck($postParams['fatherName'],'string'),
                            'MotherName'  =>$this->bsf->isNullCheck($postParams['motherName'],'string'),
                            'MaritalStatus'=>$this->bsf->isNullCheck($postParams['maritalStatus'],'number'),
                            'SpouseName'=>$spouseName,
                            'WeddingDate' =>date('Y-m-d',strtotime($postParams['weddingDate'])),
                            'HaveChild'=>$haveChild,
                            'NoOfChilds'=>$noOfChilds,
                            'LeadId' => $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s')
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array('NRI'  => $postParams['lead_nri_yes_no']));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                        foreach(range(1, $count) as $i){
                            if($postParams['ChildName_'.$i]){
                                $childName = $postParams['ChildName_'.$i];
                            } else {
                                $childName  = "";
                            }
                            if($postParams['Sex_'.$i]){
                                $childGender = $postParams['Sex_'.$i];
                            } else {
                                $childGender  = "";
                            }
                            if($postParams['DOB_'.$i]){
                                $childDob = $postParams['DOB_'.$i];
                            } else {
                                $childDob  = "";
                            }


                            $select = $sql->insert('Crm_PersonalInfoChild');
                            $newData = array(
                                'LeadId'=>$leadId,
                                'ChildName' => $childName,
                                'ChildSex'  => $childGender,
                                'ChildDob'	=> date('Y-m-d',strtotime($childDob)),
                            );
                            $select->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }


                    }
                    else{
                        $delete = $sql->delete();
                        $delete->from('Crm_PersonalInfoChild')
                            ->where(array('LeadId' => $leadId,));
                        $DelStatement = $sql->getSqlStringForSqlObject($delete);
                        $deleteProject = $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);

                        if($fname!=""){
                            $update = $sql->update();
                            $update->table('Crm_LeadPersonalInfo');
                            $update->set(array(
                                'Photo'  => $fname,
                            ));
                            $update->where(array('LeadId'=>$leadId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                        $update = $sql->update();
                        $update->table('Crm_LeadPersonalInfo');
                        $update->set(array(
                            'Gender'  => $this->bsf->isNullCheck($postParams['sex'],'string'),
                            'DOB'  =>$dob,
                            'Religion'  => $this->bsf->isNullCheck($postParams['religion'],'number'),
                            'NationalityId' => $this->bsf->isNullCheck($postParams['nationality'],'number'),
                            'ProfessionId'  => $this->bsf->isNullCheck($postParams['profession'],'number'),
                            'Organization'  => $this->bsf->isNullCheck($postParams['organization'],'string'),
                            //'Photo'  => $fname,
                            'FatherName'  =>$this->bsf->isNullCheck($postParams['fatherName'],'string'),
                            'MotherName'  =>$this->bsf->isNullCheck($postParams['motherName'],'string'),
                            'MaritalStatus'=>$this->bsf->isNullCheck($postParams['maritalStatus'],'number'),
                            'SpouseName'=>$spouseName,
                            'WeddingDate' =>date('Y-m-d',strtotime($postParams['weddingDate'])),
                            'HaveChild'=>$haveChild,
                            'NoOfChilds'=>$noOfChilds,
                            'LeadId' => $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s')
                        ));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array('NRI'  => $postParams['lead_nri_yes_no']));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        foreach(range(1, $count) as $i){
                            if($postParams['ChildName_'.$i]){
                                $childName = $postParams['ChildName_'.$i];
                            } else {
                                $childName  = "";
                            }
                            if($postParams['Sex_'.$i]){
                                $childGender = $postParams['Sex_'.$i];
                            } else {
                                $childGender  = "";
                            }
                            if($postParams['DOB_'.$i]){
                                $childDob = $postParams['DOB_'.$i];
                            } else {
                                $childDob  = "";
                            }
                            //$postParams['ChildName_'.$i];
                            //$postParams['Sex_'.$i];
                            //$postParams['DOB_'.$i];

                            $insert = $sql->insert('Crm_PersonalInfoChild');
                            $newData = array(
                                'LeadId'=>$leadId,
                                'ChildName' => $childName,
                                'ChildSex'  => $childGender,
                                'ChildDob'	=> date('Y-m-d',strtotime($childDob)),
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }


                    }
                    if(count($resultsnridet) > 0){
                        $update = $sql->update();
                        $cityName = $this->bsf->isNullCheck($postParams['city'],'string');
                        $stateName = $this->bsf->isNullCheck($postParams['state'],'string');
                        $countryName = $this->bsf->isNullCheck($postParams['country'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);


                        $update->table('Crm_LeadNriInfo');
                        $update->set(array(
                            'PersonName'  => $personName,
                            'Address'  => $address,
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 		=> $cityDetails['CountryId'],
                            'MobileNo'  => $mobile,
                            'Email'  => $email,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    }
                    else{
                        $cityName = $this->bsf->isNullCheck($postParams['city'],'string');
                        $stateName = $this->bsf->isNullCheck($postParams['state'],'string');
                        $countryName = $this->bsf->isNullCheck($postParams['country'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);
                        $insert      = $sql->insert('Crm_LeadNriInfo');
                        $newData     = array(
                            'PersonName'  => $personName,
                            'Address'  => $address,
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 		=> $cityDetails['CountryId'],
                            'MobileNo'  => $mobile,
                            'Email'  => $email,
                            'LeadId' => $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    }
                    $connection->commit();
                    if($postParams['saveExit']=='2') {
                        $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                    } else {
                        $this->redirect()->toRoute('crm/address', array('controller' => 'lead', 'action' => 'address', 'leadId' => $leadId));
                    }


                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function addressAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql     = new Sql($dbAdapter);
        $leadId = $this->params()->fromRoute('leadId');

        //check whether the route value is exists or not
        $select = $sql->select();
        $select->from('Crm_LeadAddress')
            ->columns(array('LeadId'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $ld = 0;
        if(count($lid) > 0){
            $ld = $lid[0]['LeadId'];
        }
        $select = $sql->select();
        $select->from(array("a"=>"Crm_LeadAddress"))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId,"AddressType"=>'P'));
     $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsPermanent = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_Leads'))
            //->join(array("b"=>"Crm_LeadPersonalInfo"), "a.LeadId=b.LeadId", array("NRI"), $select::JOIN_LEFT)
            ->columns(array('LeadId','LeadName','NRI'))
            ->where(array('a.LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>"Crm_LeadAddress"))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId,"AddressType"=>'O'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsOffice = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



        $select = $sql->select();
        $select->from(array("a"=>"Crm_LeadAddress"))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId,"AddressType"=>'N'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsNri = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array("a"=>"Crm_LeadAddress"))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId,"AddressType"=>'C'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultscomm = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('WF_CityMaster')
            ->columns(array('CityId','CityName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsCity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();
//                print_r($postParams);die;
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {

                    if($ld == 0){

                        //lead permanent address part

                        $cityName =$this->bsf->isNullCheck($postParams['permanentCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['permanentState'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['permanentCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $insert = $sql->insert('Crm_LeadAddress');
                        $newData = array(
                            'Address1' 		=> $this->bsf->isNullCheck($postParams['permanentAddress1'],'string'),
                            'Address2' 		=> $this->bsf->isNullCheck($postParams['permanentAddress2'],'string'),
                            'Locality' 		=> $this->bsf->isNullCheck($postParams['permanentLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'		=> $this->bsf->isNullCheck($postParams['permanentPinCode'],'number'),
                            'LandLine' 		=> $this->bsf->isNullCheck($postParams['permanentLandLine'],'number'),
                            'Mobile' 		=> $this->bsf->isNullCheck($postParams['permanentMobile'],'number'),
                            'Email' 		=> $this->bsf->isNullCheck($postParams['permanentEmail'],'string'),
                            'Fax' 			=> $this->bsf->isNullCheck($postParams['permanentFax'],'string'),
                            'PanNo' 		=> $this->bsf->isNullCheck($postParams['permanentPanNo'],'string'),
                            'LeadId'  		=> $leadId,
                            'AddressType' 	=>  $this->bsf->isNullCheck('p','string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                   $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        //lead office address part

                        $cityName =$this->bsf->isNullCheck($postParams['officeCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['officeState'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['officeCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);


                        $insert      = $sql->insert('Crm_LeadAddress');
                        $newData     = array(
                            'Address1'  => $this->bsf->isNullCheck($postParams['officeAddress1'],'string'),
                            'Address2'  => $this->bsf->isNullCheck($postParams['officeAddress2'],'string'),
                            'Locality'  => $this->bsf->isNullCheck($postParams['officeLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId'  	=> $cityDetails['StateId'],
                            'CountryId'   => $cityDetails['CountryId'],
                            'PinCode'   => $this->bsf->isNullCheck($postParams['officePinCode'],'number'),
                            'Mobile'    => $this->bsf->isNullCheck($postParams['officeMobile'],'number'),
                            'Email' 	=> $this->bsf->isNullCheck($postParams['officeEmail'],'string'),
                            'LandLine'  => $this->bsf->isNullCheck($postParams['officeLandLine'],'string'),
                            'Fax'  		=> $this->bsf->isNullCheck($postParams['officeFax'],'string'),
                            'PanNo'  	=> $this->bsf->isNullCheck($postParams['officePanNo'],'string'),
                            'LeadId'  	=> $leadId,
                            'AddressType'  =>$this->bsf->isNullCheck('O','string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                      $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

//                        //lead nri address part
//
//                        $cityNamee =$this->bsf->isNullCheck($postParams['nriCity'],'string');
//                        $stateName =$this->bsf->isNullCheck($postParams['nriState'],'string');
//                        $countryName = $this->bsf->isNullCheck($postParams['nriCountry'],'string');
//                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);
//
//                        $insert      = $sql->insert('Crm_LeadAddress');
//                        $newData     = array(
//                            'Address1'  => $this->bsf->isNullCheck($postParams['nriAddress1'],'string'),
//                            'Address2'  => $this->bsf->isNullCheck($postParams['nriAddress2'],'string'),
//                            'Locality' 	=> $this->bsf->isNullCheck($postParams['nriLocality'],'string'),
//                            'CityId' 		=> $cityDetails['CityId'],
//                            'StateId'  	=> $cityDetails['StateId'],
//                            'CountryId'   => $cityDetails['CountryId'],
//                            'PinCode'  	=> $this->bsf->isNullCheck($postParams['nriPinCode'],'number'),
//                            'Mobile'    => $this->bsf->isNullCheck($postParams['nriMobile'],'number'),
//                            'Email' 	=> $this->bsf->isNullCheck($postParams['nriEmail'],'string'),
//                            'LandLine'  => $this->bsf->isNullCheck($postParams['nriLandLine'],'string'),
//                            'Fax'  		=> $this->bsf->isNullCheck($postParams['nriFax'],'string'),
//                            'PanNo'  	=> $this->bsf->isNullCheck($postParams['nriPanNo'],'string'),
//                            'PassportNo'=> $this->bsf->isNullCheck($postParams['nriPassportno'],'string'),
//                            'LeadId'  => $leadId,
//                            'AddressType'  =>$this->bsf->isNullCheck('N','string'),
//                            'ModifiedDate'=>date('Y-m-d H:i:s'),
//                        );
//                        $insert->values($newData);
//                        $statement = $sql->getSqlStringForSqlObject($insert);
//                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        //lead communication address

                        $cityName =$this->bsf->isNullCheck($postParams['cCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['cState'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['cCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $insert      = $sql->insert('Crm_LeadAddress');
                        $newData     = array(
                            'Address1'  =>  $this->bsf->isNullCheck($postParams['cAddress1'],'string'),
                            'Address2'  =>  $this->bsf->isNullCheck($postParams['cAddress2'],'string'),
                            'Locality' 	=>  $this->bsf->isNullCheck($postParams['cLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId'  	=> $cityDetails['StateId'],
                            'CountryId'   => $cityDetails['CountryId'],
                            'PinCode'  	=>  $this->bsf->isNullCheck($postParams['cPinCode'],'number'),
                            'LandLine'  =>  $this->bsf->isNullCheck($postParams['cLandLine'],'number'),
                            'Mobile' 	=>  $this->bsf->isNullCheck($postParams['cMobile'],'string'),
                            'Email'  	=>  $this->bsf->isNullCheck($postParams['cEmail'],'string'),
                            'Fax'  		=>  $this->bsf->isNullCheck($postParams['cFax'],'string'),
                            'PanNo'  	=>  $this->bsf->isNullCheck($postParams['cPanNo'],'string'),
                            'LeadId'  	=> $leadId,
                            'AddressType'  =>  $this->bsf->isNullCheck('C','string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/bank', array('controller' => 'lead', 'action' =>'bank', 'leadId' => $leadId));
                        }

                    }
                    else{

                        // lead Permanent Address

                        $cityName =$this->bsf->isNullCheck($postParams['permanentCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['permanentState'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['permanentCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $update = $sql->update();
                        $update->table('Crm_LeadAddress');
                        $update->set(array(
                            'Address1' 		=> $this->bsf->isNullCheck($postParams['permanentAddress1'],'string'),
                            'Address2' 		=> $this->bsf->isNullCheck($postParams['permanentAddress2'],'string'),
                            'Locality' 		=> $this->bsf->isNullCheck($postParams['permanentLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'		=> $this->bsf->isNullCheck($postParams['permanentPinCode'],'number'),
                            'LandLine' 		=> $this->bsf->isNullCheck($postParams['permanentLandLine'],'number'),
                            'Mobile' 		=> $this->bsf->isNullCheck($postParams['permanentMobile'],'string'),
                            'Email' 		=> $this->bsf->isNullCheck($postParams['permanentEmail'],'string'),
                            'Fax' 			=> $this->bsf->isNullCheck($postParams['permanentFax'],'string'),
                            'PanNo' 		=> $this->bsf->isNullCheck($postParams['permanentPanNo'],'string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('LeadId'=>$leadId,"AddressType"=>'P'));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        // lead office Address

                        $cityName =$this->bsf->isNullCheck($postParams['officeCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['officeState'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['officeCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $update = $sql->update();
                        $update->table('Crm_LeadAddress');
                        $update->set(array(
                            'Address1'  => $this->bsf->isNullCheck($postParams['officeAddress1'],'string'),
                            'Address2'  => $this->bsf->isNullCheck($postParams['officeAddress2'],'string'),
                            'Locality'  => $this->bsf->isNullCheck($postParams['officeLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'   => $this->bsf->isNullCheck($postParams['officePinCode'],'string'),
                            'Mobile'    => $this->bsf->isNullCheck($postParams['officeMobile'],'string'),
                            'Email' 	=> $this->bsf->isNullCheck($postParams['officeEmail'],'string'),
                            'LandLine'  => $this->bsf->isNullCheck($postParams['officeLandLine'],'string'),
                            'Fax'  		=> $this->bsf->isNullCheck($postParams['officeFax'],'string'),
                            'PanNo'  	=> $this->bsf->isNullCheck($postParams['officePanNo'],'string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('LeadId'=>$leadId,"AddressType"=>'O'));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        // lead NRI Address

                        $cityNamee =$this->bsf->isNullCheck($postParams['nriCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['nriState'],'string');
                        $countryName = $this->bsf->isNullCheck($postParams['nriCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $update = $sql->update();
                        $update->table('Crm_LeadAddress');
                        $update->set(array(
                            'Address1'  => $this->bsf->isNullCheck($postParams['nriAddress1'],'string'),
                            'Address2'  => $this->bsf->isNullCheck($postParams['nriAddress2'],'string'),
                            'Locality' 	=> $this->bsf->isNullCheck($postParams['nriLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'  	=> $this->bsf->isNullCheck($postParams['nriPinCode'],'string'),
                            'Mobile'    => $this->bsf->isNullCheck($postParams['nriMobile'],'string'),
                            'Email' 	=> $this->bsf->isNullCheck($postParams['nriEmail'],'string'),
                            'LandLine'  => $this->bsf->isNullCheck($postParams['nriLandLine'],'string'),
                            'Fax'  		=> $this->bsf->isNullCheck($postParams['nriFax'],'string'),
                            'PanNo'  	=> $this->bsf->isNullCheck($postParams['nriPanNo'],'string'),
                            'PassportNo'=> $this->bsf->isNullCheck($postParams['nriPassportno'],'string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),

                        ));
                        $update->where(array('LeadId'=>$leadId,"AddressType"=>'N'));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        // lead Communication Address

                        $cityNamee =$this->bsf->isNullCheck($postParams['cCity'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['cState'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['cCountry'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $update = $sql->update();
                        $update->table('Crm_LeadAddress');
                        $update->set(array(
                            'Address1'  =>  $this->bsf->isNullCheck($postParams['cAddress1'],'string'),
                            'Address2'  =>  $this->bsf->isNullCheck($postParams['cAddress2'],'string'),
                            'Locality' 	=>  $this->bsf->isNullCheck($postParams['cLocality'],'string'),
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'  	=>  $this->bsf->isNullCheck($postParams['cPinCode'],'string'),
                            'LandLine'  =>  $this->bsf->isNullCheck($postParams['cLandLine'],'string'),
                            'Mobile' 	=>  $this->bsf->isNullCheck($postParams['cMobile'],'string'),
                            'Email'  	=>  $this->bsf->isNullCheck($postParams['cEmail'],'string'),
                            'Fax'  		=>  $this->bsf->isNullCheck($postParams['cFax'],'string'),
                            'PanNo'  	=>  $this->bsf->isNullCheck($postParams['cPanNo'],'string'),
                            'LeadId'  	=> $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('LeadId'=>$leadId,"AddressType"=>'C'));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/bank', array('controller' => 'lead', 'action' =>'bank', 'leadId' => $leadId));
                        }

                    }
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function bankAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql     = new Sql($dbAdapter);
        $leadId = $this->params()->fromRoute('leadId');

        //check whether the route value is exists or not
        $select = $sql->select();
        $select->from('Crm_LeadBankDetails')
            ->columns(array('LeadId'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $ld = 0;
        if(count($lid) > 0){
            $ld = $lid[0]['LeadId'];
        }
        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //Edit Bank Details
        $select = $sql->select();
        $select->from('Crm_LeadBankDetails')
            ->columns(array("*"))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBank = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $request = $this->getRequest();
        if($this->getRequest()->isXmlHttpRequest())	{
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        }
        else {
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();
                $need  = $postParams['Need'];
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    if($ld==0){
                        //lead bank insert
                        $insert = $sql->insert('Crm_LeadBankDetails');
                        $newData = array(
                            'BankName'  =>  $this->bsf->isNullCheck($postParams['bankName'],'string'),
                            'Branch'    =>  $this->bsf->isNullCheck($postParams['branch'],'string'),
                            'LoanNo'    =>  $this->bsf->isNullCheck($postParams['loanNo'],'string'),
                            'LoanAmount'=>  $this->bsf->isNullCheck($postParams['loanAmount'],'number'),
                            'InterestRate'  =>  $this->bsf->isNullCheck($postParams['interestRate'],'number'),
                            'ContactPerson'  =>  $this->bsf->isNullCheck($postParams['contactPerson'],'string'),
                            'ContactMobileNo'  =>  $this->bsf->isNullCheck($postParams['contactMobileNo'],'string'),
                            'Need' =>  $this->bsf->isNullCheck($postParams['need'],'number'),
                            'LeadId'=> $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/coa', array('controller' => 'lead', 'action' => 'coa', 'leadId' => $leadId));
                        }
                    }


                    else{
                        //lead bank update
                        $update = $sql->update();
                        $update->table('Crm_LeadBankDetails');
                        $update->set(array(
                            'BankName'  =>  $this->bsf->isNullCheck($postParams['bankName'],'string'),
                            'Branch'  =>  $this->bsf->isNullCheck($postParams['branch'],'string'),
                            'LoanNo' =>  $this->bsf->isNullCheck($postParams['loanNo'],'number'),
                            'LoanAmount'  =>  $this->bsf->isNullCheck($postParams['loanAmount'],'number'),
                            'InterestRate'  =>  $this->bsf->isNullCheck($postParams['interestRate'],'number'),
                            'ContactPerson'  =>  $this->bsf->isNullCheck($postParams['contactPerson'],'string'),
                            'ContactMobileNo'  =>  $this->bsf->isNullCheck($postParams['contactMobileNo'],'string'),
                            'Need' =>  $this->bsf->isNullCheck($postParams['need'],'number'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $cid=0;
                        $select = $sql->select();
                        $select->from('Crm_LeadCoApplicantInfo')
                            ->columns(array("CoAppId"))
                            ->where(array("LeadId"=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $coAppId = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        if(count($coAppId) > 0){
                            $cid = $coAppId[0]['CoAppId'];
                        }
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            if($cid > 0){
                                $this->redirect()->toRoute('crm/coa', array('controller' => 'lead', 'action' => 'coa', 'leadId' => $leadId,'coAppId' => $cid));
                            }else{
                                $this->redirect()->toRoute('crm/coa', array('controller' => 'lead', 'action' => 'coa', 'leadId' => $leadId));
                            }
                        }

                    }

                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function coaAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql     = new Sql($dbAdapter);
        $leadId = $this->params()->fromRoute('leadId');
        $coAppId = $this->params()->fromRoute('coAppId');
        //print_r($this->params()->fromRoute());die;
        $select = $sql->select();
        $select->from('Crm_LeadCoApplicantInfo')
            ->columns(array("*","coAppDob"=>new Expression("CONVERT(varchar(10),DOB,105)"),"oldWeddingDate"=>new Expression("CONVERT(varchar(10),WeddingDate,105)")))
            ->where(array("DeleteFlag"=>0,"LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $resultsMain=$this->_view->resultsMain = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $ld = 0;
        if(count($resultsMain) > 0){
            $ld = $resultsMain[0]['CoAppId'];
        }
        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        // print_r($resultscoa);die;

        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


        $select = $sql->select();
        $select->from(array("a"=>"Crm_LeadAddress"))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId,"CoAppId"=>$coAppId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsAddress = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from(array('a' => 'Crm_ProfessionMaster'))
            ->columns(array('ProfessionId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->response = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_ReligionMaster'))
            ->columns(array('ReligionId', 'ReligionName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->religion = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_NationalityMaster'))
            ->columns(array('NationalityId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->nationality = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_MaritalStatusMaster'))
            ->columns(array('MaritalId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseMarital = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('WF_CityMaster')
            ->columns(array('CityId','CityName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsCity   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $files   = $request->getFiles();
                $dir = "public/uploads/crm/leadphotos/$leadId/CoApplicants/";
                if(!is_dir($dir))
                    mkdir($dir, 0755, true);
                $postParams = $request->getPost();
                //Print_r($files);die;
                //$Photo  = $postParams['Photo'];
                //echo json_encode($files);
                $filter = new \Zend\Filter\File\Rename(array(
                    "target"    => $dir.$files['files']['name'],
                    "randomize" => true,
                ));
                $fname = $filter->filter($files['files']['tmp_name']);
                $fname = str_replace("\\","/",$fname);

                $postParams = $request->getPost();
                if($postParams['weddingDate']){
                    $weddingDate =date('Y-m-d',strtotime($postParams['weddingDate']));
                } else {
                    $weddingDate  = "";
                }
                if($postParams['dob']){
                    $dob =date('Y-m-d',strtotime($postParams['dob']));
                } else {
                    $dob  = "";
                }
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    if($ld==0)
                    {
                        $insert      = $sql->insert('Crm_LeadCoApplicantInfo');
                        $newData     = array(
                            'CoApplicantName' => $postParams['coApplicantName'],
                            'Gender' 	    => $this->bsf->isNullCheck($postParams['sex'],'string'),
                            'DOB'           =>$dob,
                            'Religion' 	    => $postParams['religion'],
                            'NationalityId' => $postParams['nationality'],
                            'ProfessionId'  => $postParams['profession'],
                            'Organization'  => $postParams['organization'],
                            'Photo' 	    => $fname,
                            'FatherName'    => $postParams['fatherName'],
                            'MotherName'    => $postParams['motherName'],
                            'MaritalStatus' =>$postParams['maritalStatus'],
                            'SpouseName'    =>$postParams['spouseName'],
                            'WeddingDate'   => $weddingDate,
                            'LeadId'        => $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                            'Title'        =>$postParams['title'],
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $coAppId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        // 'CoApplicant address Page;

                        $cityName =$this->bsf->isNullCheck($postParams['city'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['state'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['country'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $insert1      = $sql->insert('Crm_LeadAddress');
                        $newData1     = array(
                            'Address1'  => $postParams['address1'],
                            'Address2'  => $postParams['address2'],
                            'Locality'  => $postParams['locality'],
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'   => $postParams['pinCode'],
                            'LandLine'  => $postParams['landLine'],
                            'Mobile'    => $postParams['mobile'],
                            'Email'     => $postParams['email'],
                            'Fax'       => $postParams['fax'],
                            'PanNo'     => $postParams['panNo'],
                            'LeadId'    => $leadId,
                            'CoAppId'   => $coAppId,
                            'AddressType'=> 'COA',
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert1->values($newData1);
                        $statement1 = $sql->getSqlStringForSqlObject($insert1);
                        $dbAdapter->query($statement1, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/poa', array('controller' => 'lead', 'action' => 'poa', 'leadId' => $leadId));
                        }

                    }
                    else{

                        $update = $sql->update();
                        $update->table('Crm_LeadCoApplicantInfo');
                        $update->set(array(
                            'CoApplicantName' => $postParams['coApplicantName'],
                            'Gender'  =>  $this->bsf->isNullCheck($postParams['sex'],'string'),
                            'DOB'  => $dob,
                            'Religion'  => $postParams['religion'],
                            'NationalityId' => $postParams['nationality'],
                            'ProfessionId'  => $postParams['profession'],
                            'Organization'  => $postParams['organization'],
                            'FatherName'  => $postParams['fatherName'],
                            'MotherName'  => $postParams['motherName'],
                            'MaritalStatus'=>$postParams['maritalStatus'],
                            'SpouseName'=>$postParams['spouseName'],
                            'WeddingDate' => $weddingDate,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                            'Title'        =>$postParams['title'],

                        ));
                        $update->where(array('LeadId'=>$leadId,'coAppId'=>$coAppId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        if($fname!=""){
                            $update = $sql->update();
                            $update->table('Crm_LeadCoApplicantInfo');
                            $update->set(array(
                                'Photo'  => $fname,
                            ));
                            $update->where(array('LeadId'=>$leadId,'coAppId'=>$coAppId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        // co applicant address update

                        $cityName =$this->bsf->isNullCheck($postParams['city'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['state'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['country'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $update = $sql->update();
                        $update->table('Crm_LeadAddress');
                        $update->set(array(
                            'Address1'  => $postParams['address1'],
                            'Address2'  => $postParams['address2'],
                            'Locality'  => $postParams['locality'],
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'   => $postParams['pinCode'],
                            'LandLine'  => $postParams['landLine'],
                            'Mobile'    => $postParams['mobile'],
                            'Email'     => $postParams['email'],
                            'Fax'       => $postParams['fax'],
                            'PanNo'     => $postParams['panNo'],
                            'LeadId'    => $leadId,
                            'CoAppId'   => $coAppId,
                            'AddressType'=> 'COA',
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        //$select1->where(array('LeadId'=>$leadId,'coAppId'=>$coAppId));
                        $update->where(array('CoAppId'=> $coAppId,'LeadId' => $leadId,));
                        $statement1 = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement1, $dbAdapter::QUERY_MODE_EXECUTE);

                        $cid=0;
                        $select = $sql->select();
                        $select->from('Crm_LeadPOAInfo')
                            ->columns(array("POAId"))
                            ->where(array("LeadId"=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $poId = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        if(count($poId) > 0){
                            $poaId = $poId[0]['POAId'];
                        }
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/poa', array('controller' => 'lead', 'action' => 'poa', 'leadId' => $leadId,'poaId' => $poaId));
                        }
                    }
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function poaAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql     = new Sql($dbAdapter);
        //print_r($this->params()->fromRoute());die;
        $leadId = $this->params()->fromRoute('leadId');

        $select = $sql->select();
        $select->from('Crm_LeadPOAInfo')
            ->columns(array("*","DobDate"=>new Expression("CONVERT(varchar(10),DOB,105)"),"oldWeddingDate"=>new Expression("CONVERT(varchar(10),WeddingDate,105)")))
            ->where(array("LeadId"=>$leadId,"DeleteFlag"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $resultsMain=$this->_view->resultsMain  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $ld = 0;
        if(count($resultsMain) > 0){
            $ld = $resultsMain[0]['POAId'];
        }
        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



        $select = $sql->select();
        $select->from(array("a"=>"Crm_LeadAddress"))
            ->columns(array("*","City"=>new expression ("b.CityName"),"State"=>new expression ("c.StateName"),"Country"=> new expression ("d.CountryName")))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array(), $select::JOIN_LEFT)
            ->join(array("c"=>"WF_StateMaster"), "a.StateId=c.StateId", array(), $select::JOIN_LEFT)
            ->join(array("d"=>"WF_CountryMaster"), "a.CountryId=d.CountryId", array(), $select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId,"POAId"=> $ld,"AddressType"=>'POA'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsAddress  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_ProfessionMaster'))
            ->columns(array('ProfessionId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->response = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_ReligionMaster'))
            ->columns(array('ReligionId', 'ReligionName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->religion = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_NationalityMaster'))
            ->columns(array('NationalityId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->nationality = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_MaritalStatusMaster'))
            ->columns(array('MaritalId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseMarital = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('WF_CityMaster')
            ->columns(array('CityId','CityName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsCity   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();
                //print_r($postParams);
                //begin trans try block example starts

                if($postParams['weddingDate']){
                    $weddingDate =date('Y-m-d',strtotime( $postParams['weddingDate']));
                } else {
                    $weddingDate  = null;
                }

                if($postParams['dob']){
                    $dob = date('Y-m-d',strtotime($postParams['dob']));
                } else {
                    $dob  = null;
                }
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    if($ld==0){
                        $insert      = $sql->insert('Crm_LeadPOAInfo');
                        $newData     = array(
                            'ApplicantName' 	=> $postParams['pOAName'],
                            'Gender'  			=>  $this->bsf->isNullCheck($postParams['sex'],'string'),
                            'DOB'  				=> $dob,
                            'Religion'  		=> $postParams['religion'],
                            'NationalityId' 	=> $postParams['nationality'],
                            'ProfessionId'  	=> $postParams['profession'],
                            'Organization'  	=> $postParams['organization'],
                            'FatherName'  		=> $postParams['fatherName'],
                            'MotherName'  		=> $postParams['motherName'],
                            'MaritalStatus'		=> $postParams['maritalStatus'],
                            'SpouseName'		=> $postParams['spouseName'],
                            'WeddingDate' 		=> $weddingDate,
                            'Relation' 			=> $postParams['relation'],
                            'LeadId' 			=> $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $poaId = $dbAdapter->getDriver()->getLastGeneratedValue();
                        //echo $poaid ;die;

                        $cityName =$this->bsf->isNullCheck($postParams['city'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['state'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['country'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $insert1      = $sql->insert('Crm_LeadAddress');
                        $newData1     = array(
                            'Address1'  => $postParams['address1'],
                            'Address2'  => $postParams['address2'],
                            'Locality'  => $postParams['locality'],
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'  	=> $postParams['pinCode'],
                            'LandLine'  => $postParams['landLine'],
                            'Mobile' 	=> $postParams['mobile'],
                            'Email'  	=> $postParams['email'],
                            'Fax'  		=> $postParams['fax'],
                            'PanNo'  	=> $postParams['panNo'],
                            'LeadId' 	=> $leadId,
                            'POAId'		=> $poaId,
                            'AddressType'=>'POA',
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert1->values($newData1);
                        $statement1 = $sql->getSqlStringForSqlObject($insert1);
                        $dbAdapter->query($statement1, $dbAdapter::QUERY_MODE_EXECUTE);
                        $insert->values($newData);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/financial', array('controller' => 'lead', 'action' => 'financial', 'leadId' => $leadId,'poaid' => $poaId));
                        }

                    }
                    else{
                        $update = $sql->update();
                        $update->table('Crm_LeadPOAInfo');
                        $update->set(array(
                            'ApplicantName' 	=> $postParams['pOAName'],
                            'Gender'  			=> $this->bsf->isNullCheck($postParams['sex'],'string'),
                            'DOB'  				=> $dob,
                            'Religion'  		=> $postParams['religion'],
                            'NationalityId' 	=> $postParams['nationality'],
                            'ProfessionId'  	=> $postParams['profession'],
                            'Organization'  	=> $postParams['organization'],
                            'FatherName'  		=> $postParams['fatherName'],
                            'MotherName'  		=> $postParams['motherName'],
                            'MaritalStatus'		=> $postParams['maritalStatus'],
                            'SpouseName'		=> $postParams['spouseName'],
                            'WeddingDate' 		=> date('m-d-Y',strtotime($postParams['weddingDate'])),
                            'Relation' 			=> $postParams['relation'],
                            'LeadId' 			=> $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('POAId'=> $ld));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        // poa applicant address update

                        $cityName =$this->bsf->isNullCheck($postParams['city'],'string');
                        $stateName =$this->bsf->isNullCheck($postParams['state'],'string');
                        $countryName =$this->bsf->isNullCheck($postParams['country'],'string');
                        $cityDetails = $viewRenderer->commonHelper()->getCityDetails($cityName,$stateName,$countryName);

                        $update = $sql->update();
                        $update->table('Crm_LeadAddress');
                        $update->set(array(
                            'Address1'  => $postParams['address1'],
                            'Address2'  => $postParams['address2'],
                            'Locality'  => $postParams['locality'],
                            'CityId' 		=> $cityDetails['CityId'],
                            'StateId' 		=> $cityDetails['StateId'],
                            'CountryId' 	=> $cityDetails['CountryId'],
                            'PinCode'  	=> $postParams['pinCode'],
                            'LandLine'  => $postParams['landLine'],
                            'Mobile' 	=> $postParams['mobile'],
                            'Email'  	=> $postParams['email'],
                            'Fax'  		=> $postParams['fax'],
                            'PanNo'  	=> $postParams['panNo'],
                            'LeadId' => $leadId,
                            'AddressType'=>'POA',
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('POAId'=> $ld,'LeadId' => $leadId));
                        $statement1 = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement1, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/financial', array('controller' => 'lead', 'action' => 'financial', 'leadId' => $leadId,'poaid' => $ld));
                        }

                    }
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function financialAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql     = new Sql($dbAdapter);
        $leadId = $this->params()->fromRoute('leadId');

        $coAppId = $this->params()->fromRoute('coappid');
        $select = $sql->select();
        $select->from('Crm_LeadFinance')
            ->columns(array("*"))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsFinance  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();



        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Crm_LeadFinance')
            ->columns(array('LeadId'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $ld = 0;
        if(count($lid) > 0){
            $ld = $lid[0]['LeadId'];
        }

        $select = $sql->select();
        $select->from(array('a' => 'Crm_UnitTypeMaster'))
            ->columns(array('UnitTypeId', 'UnitTypeName'));
        $statement = $sql->getSqlStringForSqlObject($select);

        $this->_view->responseApartment = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_ProfessionMaster'))
            ->columns(array('ProfessionId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseEmployementType = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_LeadPersonalInfo'))
            ->columns(array('ProfessionId'))
            ->join(array( 'b' => 'Crm_ProfessionMaster'), 'b.ProfessionId=a.ProfessionId', array('Description'), $select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseprofesssion = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_IncomeMaster'))
            ->columns(array('IncomeId', 'IncomeFrom','IncomeTo'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseIncome = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Crm_ApartmentSizeMaster'))
            ->columns(array('ApartmentSizeId', 'ApartmentSizeFrom','ApartmentSizeTo'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseApartmentSize = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();
                if($postParams['apartmentSize']){
                    $ApartmentSize = $postParams['apartmentSize'];
                } else {
                    $ApartmentSize  = "";
                }
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    if($ld==0){
                        $insert      = $sql->insert('Crm_LeadFinance');
                        $newData     = array(
                            'Employment'  =>  $this->bsf->isNullCheck($postParams['employementType'],'number'),
                            'Income'  =>  $this->bsf->isNullCheck($postParams['yearlyIncome'],'number'),
                            'Apartment'=> $this->bsf->isNullCheck($postParams['appartment'],'string'),
                            'ApartmentSize'=> $this->bsf->isNullCheck($postParams['apartmentSize'],'number'),
                            'Stay' =>  $this->bsf->isNullCheck($postParams['stay'],'string'),
                            'GuestHouse'=> $this->bsf->isNullCheck($postParams['guestHouse'],'string'),
                            'Possess'=> $this->bsf->isNullCheck($postParams['possess'],'string'),
                            'LeadId' => $leadId,
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/requirement', array('controller' => 'lead', 'action' => 'requirement', 'leadId' => $leadId,'coappid' => $coAppId));
                        }

                    }else {
                        $update = $sql->update();
                        $update->table('Crm_LeadFinance');
                        $update->set(array(
                            'Employment'  =>  $this->bsf->isNullCheck($postParams['employementType'],'string'),
                            'Income'  =>  $this->bsf->isNullCheck($postParams['yearlyIncome'],'number'),
                            'Apartment'=> $this->bsf->isNullCheck($postParams['appartment'],'string'),
                            'ApartmentSize'=> $this->bsf->isNullCheck($postParams['apartmentSize'],'number'),
                            'Stay' =>  $this->bsf->isNullCheck($postParams['stay'],'string'),
                            'GuestHouse'=> $this->bsf->isNullCheck($postParams['guestHouse'],'string'),
                            'Possess'=> $this->bsf->isNullCheck($postParams['possess'],'string'),
                            'ModifiedDate'=>date('Y-m-d H:i:s'),
                        ));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/requirement', array('controller' => 'lead', 'action' => 'requirement', 'leadId' => $leadId,'coappid' => $coAppId));
                        }
                    }
                }   catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function requirementAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);



        $leadId = $this->params()->fromRoute('leadId');

        //selecting POA id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadPOAInfo"))
            ->columns(array('POAId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        //selecting coa Id//
        $select1 = $sql->select();
        $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
            ->columns(array('CoAppId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select1);
        $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Crm_LeadRequirement')
            ->columns(array("*"))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsMain  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //to check buyer or Lead
        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('Crm_LeadRequirement')
            ->columns(array('LeadId'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $ld = 0;
        if(count($lid) > 0){
            $ld = $lid[0]['LeadId'];
        }

        $pGroupName = new Container('pGroupName');
        $projectId = $pGroupName->project;

        //selecting values from LeadType Table
        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadProjects'))
            ->columns(array('LeadId'))
            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
            ->where(array('a.ProjectId' => $projectId))
            ->order('a.LeadId asc');
        $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'))
            ->where(array('LeadId'=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Crm_LeadFacility')
            ->columns(array('FacilityId'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsMulti  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $this->leadFacility = array();
        foreach($this->_view->resultsMulti as $this->resultsMulti) {
            $this->leadFacility[] = $this->resultsMulti['FacilityId'];
        }
        $this->_view->leadFacility = $this->leadFacility;

        $select = $sql->select();
        $select->from(array('a' => 'Crm_FacilityMaster'))
            ->columns(array('FacilityId', 'Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseFacility = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                //print_r($postParams);die;
                //Write your Normal form post code here
                $facility  = $postParams['Facility'];
                $booking  = $postParams['book'];
                //Print_r($booking);die;
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    if($ld==0){
                        $insert = $sql->insert('Crm_LeadRequirement');
                        $newData     = array(
                            'LeadId'=> $leadId,
                            'Remarks'  => $this->bsf->isNullCheck($postParams['Remarks'],'string'),
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        foreach ($postParams['Facility'] as $value){
                            $select = $sql->insert('Crm_LeadFacility');
                            $newData = array(
                                'LeadId' => $leadId,
                                'FacilityId'=> $this->bsf->isNullCheck('$value','number'),
                            );
                            $select->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        }  if($postParams['saveExit']=='2') {
                            $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                        } else {
                            $this->redirect()->toRoute('crm/register', array('controller' => 'lead', 'action' => 'register'));
                        }
                    }
                    else{
                        $delete = $sql->delete();
                        $delete->from('Crm_LeadFacility')
                            ->where(array('LeadId' => $leadId,));
                        $DelStatement = $sql->getSqlStringForSqlObject($delete);
                        $deleteProject = $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $update = $sql->update();
                        $update->table('Crm_LeadRequirement');
                        $update->set(array(

                            'Remarks'  => $postParams['Remarks'],
                        ));
                        $update->where(array('LeadId'=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        foreach ($postParams['Facility'] as $value){
                            $insert = $sql->insert('Crm_LeadFacility');
                            $newData  = array(
                                'LeadId' => $leadId,
                                'FacilityId'=> $value,
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    $connection->commit();
                    if($postParams['saveExit']=='2') {
                        $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                    } else {
                        $this->redirect()->toRoute('crm/register', array('controller' => 'lead', 'action' => 'register'));
                    }

                }   catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function registerAction() {
        // Login Authentication check
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Lead Register");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{

            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $superiorsUserList = $viewRenderer->commonHelper()->masterSuperior($this->auth->getIdentity()->UserId,$dbAdapter);
                $powerUser =$this->auth->getIdentity()->PowerUser;

                //Write your Ajax post code here
                $postParam = $request->getPost();

                $Type = $this->bsf->isNullCheck($this->params()->fromPost('type'),'string');
                $unCheckedColumnNames = $this->bsf->isNullCheck($this->params()->fromPost('unCheckedColumnNames'),'string');
                $userId = $this->auth->getIdentity()->UserId;

                if($Type == 'updateColumn') {

                    $select = $sql->select();
                    $select->from('WF_GridColumnTrans')
                        ->where(array("FunctionName"=>'LeadRegister','UserId'=>$userId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resCount = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if($resCount != 0) {
                        //update
                        $update = $sql->update();
                        $update->table('WF_GridColumnTrans')
                            ->set(array('ColumnName'=>$unCheckedColumnNames))
                            ->where(array('FunctionName' =>'LeadRegister','UserId'=>$userId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    } else {
                        //insert
                        $insert = $sql->insert();
                        $insert->into( 'WF_GridColumnTrans' )
                            ->values(array('FunctionName' => 'LeadRegister',
                                'UserId' => $userId,
                                'ColumnName' => $unCheckedColumnNames));
                        $stmt = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                }
                $tDate= date('Y-m-d', strtotime($postParam['tDate']))." 23:59:59";
                $fDate= date('Y-m-d', strtotime($postParam['fDate']))." 00:00:00";

                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('LeadId', 'LeadDate'=> new Expression("FORMAT(a.LeadDate,'dd-MM-yyyy')"),'LeadName','LeadType','StatusId','Mobile','VIP','Budget' => new Expression("CAST(a.CostPreferenceFrom As Varchar) + ' - ' + CAST(a.CostPreferenceTo As Varchar)"),'NRI','Converted'=>new Expression("Case When LeadConvert=1 then 'Yes' else 'No' End")))
                    ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>new Expression("isnull(c.Description,'')")),$select::JOIN_LEFT)
                    ->join(array("b"=>"Crm_LeadTypeMaster"), "a.LeadType=b.LeadTypeId", array("LeadTypeName"=>new Expression("isnull(b.LeadTypeName,'')")), $select::JOIN_LEFT)
                    ->join(array("e"=>"WF_Users"), "a.ExecutiveId=e.UserId", array("ExecutiveName" => new Expression("isnull(e.EmployeeName,'')")), $select::JOIN_LEFT)
                    ->join(array("o"=>"Crm_LeadFollowUp"), new Expression("o.LeadId=a.LeadId and o.Completed=0"), array("NextCallDate" => new Expression("FORMAT(o.NextCallDate,'dd-MM-yyyy')")), $select::JOIN_LEFT)
                    ->join(array("f"=>"WF_Users"), "a.UserId=f.UserId", array("CreatedBy" => new Expression("isnull(f.EmployeeName,'')")), $select::JOIN_LEFT)
//                   ->join(array("i"=>"Crm_LeadPersonalInfo"), "a.LeadId=i.LeadId", array('Photo'=>new Expression("isnull(i.Photo,'')")), $select::JOIN_LEFT)
                    ->join(array("j"=>"Crm_LeadCityView"), "a.LeadId=j.LeadId", array("CityName"=>new Expression("isnull(j.CityName,'')")), $select::JOIN_LEFT)
                    ->join(array("k"=>"Crm_LeadProjectView"), "a.LeadId=k.LeadId", array('Projects' => new Expression ("isnull(k.ProjectName,'')")), $select::JOIN_LEFT)
                    ->join(array("l"=>"Crm_LeadSourceView"), "a.LeadId=l.LeadId", array('SourceName'=>new Expression ("isnull(l.LeadSourceName,'')")), $select::JOIN_LEFT);
                $select->where(array("a.ExecutiveId" => $superiorsUserList));
                $select->where("a.LeadDate<= '$tDate' and a.LeadDate>= '$fDate' ");

                //For Supervisor show all UnAssign Lead detail
                //$select->where(array('a.ExecutiveId' => 0));
                //$select->where->or->nest
                //->in("a.ExecutiveId",  $superiorsUserList);
                $select->order('a.LeadId desc');
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

//                $icount = 0;
//                foreach ($results as $resu) {
//                    $leadid = $resu['LeadId'];
//
//                    //Lead Projects List Append
//                    $strCCName="";
//                    $selectMultiCC = $sql->select();
//                    $selectMultiCC->from(array("a"=>"Crm_LeadProjects"));
//                    $selectMultiCC->columns(array("ProjectId"),array("ProjectName"))
//                        ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiCC::JOIN_INNER);
//                    $selectMultiCC->where(array("a.LeadId"=>$leadid));
//                    $statementMultiCC = $sql->getSqlStringForSqlObject($selectMultiCC);
//                    $resultMultiCC = $dbAdapter->query($statementMultiCC, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $proj = array();
//                    if($resultMultiCC ){
//                        foreach($resultMultiCC as $multiCC){
//                            array_push($proj, $multiCC['ProjectName']);
//                        }
//                        $strCCName = implode(",", $proj);
//                    }
//                    $results[$icount]['Projects']=$strCCName;
//
//                    //Lead City list Append
//                    $strCTName="";
//                    $selectMultiCT = $sql->select();
//                    $selectMultiCT->from(array("a"=>"Crm_LeadCity"));
//                    $selectMultiCT->columns(array("CityId"),array("CityName"))
//                        ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array("CityName"), $selectMultiCT::JOIN_INNER);
//                    $selectMultiCT->where(array("a.LeadId"=>$leadid));
//                    $statementMultiCT = $sql->getSqlStringForSqlObject($selectMultiCT);
//                    $resultMultiCT = $dbAdapter->query($statementMultiCT, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $city = array();
//                    if($resultMultiCT ){
//                        foreach($resultMultiCT as $multiCT){
//                            array_push($city, $multiCT['CityName']);
//                        }
//                        $strCTName = implode(",", $city);
//                    }
//                    $results[$icount]['CityName']=$strCTName;
//
//                    //Lead source list append
//                    $strSourceName="";
//                    $selectMultiSource = $sql->select();
//                    $selectMultiSource->from(array("a"=>"Crm_LeadSource"));
//                    $selectMultiSource->columns(array("LeadSourceId"),array("LeadSourceId"))
//                        ->join(array("b"=>"Crm_LeadSourceMaster"), "a.LeadSourceId=b.LeadSourceId", array("LeadSourceName"), $selectMultiSource::JOIN_INNER);
//                    $selectMultiSource->where(array("a.LeadId"=>$leadid));
//                    $statementMultiSource = $sql->getSqlStringForSqlObject($selectMultiSource);
//                    $resultMultiSource = $dbAdapter->query($statementMultiSource, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $source = array();
//                    if($resultMultiSource ){
//                        foreach($resultMultiSource as $multiSource){
//                            array_push($source, $multiSource['LeadSourceName']);
//                        }
//                        $strSourceName = implode(",", $source);
//                    }
//                    $results[$icount]['SourceName']=$strSourceName;
//
//                    $selectLead = $sql->select();
//                    $selectLead ->from(array("a"=>"Crm_UnitBooking"));
//                    $selectLead ->columns(array("LeadId"));
//                    $selectLead->where(array("a.LeadId"=>$leadid));
//                    $statement = $sql->getSqlStringForSqlObject($selectLead);
//                    $arrLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $sConvert ='No';
//                    if (!empty($arrLead))  $sConvert ='Yes';
//
//                    $results[$icount]['Converted']=$sConvert;
//
//                    $icount=$icount+1;
//                }
                $this->_view->setTerminal(true);
                $response->setContent(json_encode($results));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
            } else {
                $fromDate = $this->params()->fromRoute('fromDate');
                $toDate = $this->params()->fromRoute('toDate');

                if($fromDate!=""){
                    $fromDate= strtotime(date('d-m-Y',strtotime($fromDate)));
                } else {
                    $fromDate=strtotime(date('d-m-Y',strtotime(date('d-m-Y') .' -1 month')));

                }
                if($toDate!=""){
                    $toDate= strtotime(date('d-m-Y',strtotime($toDate)));
                } else {
                    $toDate= strtotime(date('d-m-Y'));
                }
                if($toDate>=$fromDate) {
                    $this->_view->fromDate=date('d-m-Y',$fromDate);
                    $this->_view->toDate=date('d-m-Y',$toDate);
                } else {
                    $this->_view->fromDate=date('d-m-Y',$fromDate);
                    $this->_view->toDate=date('d-m-Y',$fromDate);
                }
                $userId = $this->auth->getIdentity()->UserId;

                $select = $sql->select();
                $select->from('WF_GridColumnTrans')
                    ->columns(array("ColumnName"))
                    ->where(array("FunctionName"=>'LeadRegister','UserId'=>$userId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $GridColumn = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $this->_view->GridColumn = $GridColumn;

                $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                //Common function
                $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
                return $this->_view;
            }

        }
    }

    public function editAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);


        if($this->getRequest()->isXmlHttpRequest())	{

            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $postParams = $request->getPost();
                $select = $sql->select();
                $select->from(array('a' =>'Crm_LeadProjects'))
                    ->columns(array('LeadId'))
                    ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
                    ->where(array('a.ProjectId' => $postParams['project']))
                    ->order('a.LeadId asc');
                $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent(json_encode($resultLeads));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $leadId = $postParams['leadId'];

                $pGroupName = new Container('pGroupName');
                $pGroupName->project = $postParams['projectId'];

                // Write your Normal form post code here
                $FeedId = $this->params()->fromQuery('FeedId');
                $AskId = $this->params()->fromQuery('AskId');
                if(isset($FeedId) && $FeedId!="") {
                    $this->redirect()->toRoute('crm/entry-edit', array('controller' => 'lead', 'action' => 'entry-edit', 'leadId' => $leadId), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                } else {
                    $this->redirect()->toRoute('crm/entry-edit', array('controller' => 'lead', 'action' => 'entry-edit', 'leadId' => $leadId));
                }
//				$this->redirect()->toRoute('crm/entry-edit', array('controller' => 'lead', 'action' => 'entry-edit', 'leadId' => $leadId));
            }
            else{


                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId','ProjectName'))
                    ->order('ProjectId desc');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function detailsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $userId = $this->auth->getIdentity()->UserId;
        $response = $this->getResponse();
        $request = $this->getRequest();
        // $request = $this->getRequest();
        if($this->getRequest()->isXmlHttpRequest())	{

            //$resp = array();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $detailId = $postParams['cid'];
                //Write your Ajax post code here
                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),'LeadName','LeadType','Mobile','BrokerId','RefBuyerId','Remarks','Email','ExecutiveId','UnitTypeId','VIP','NRI','CostPreferenceTo','CostPreferenceFrom'))
                    ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
                    ->join(array("f"=>"Crm_LeadTypeMaster"),"a.LeadType=f.LeadTypeId",array('LeadTypeId','LeadTypeName'),$select::JOIN_LEFT)
                    ->join(array("j"=>"WF_Users"), "a.ExecutiveId=j.UserId", array("UserName" => 'EmployeeName'), $select::JOIN_LEFT)
                    ->join(array("l"=>"Crm_LeadPersonalInfo"), "a.LeadId=l.LeadId", array("Photo"), $select::JOIN_LEFT)
                    ->where(array("a.LeadId"=>$detailId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resp = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array("a"=>'Crm_LeadFollowup'))
                    ->columns(array('NextCallDate'))
                    ->join(array("i"=>"Crm_CallTypeMaster"),"a.NextFollowUpTypeId=i.CallTypeId",array("NextCallType"=>"Description"),$select::JOIN_LEFT)
                    ->where(array("a.LeadId"=>$detailId))
                    ->where(array("a.Completed"=>0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->nextFollowupDetails = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $selectMultiProject = $sql->select();
                $selectMultiProject->from(array("a"=>"Crm_LeadProjects"));
                $selectMultiProject->columns(array("ProjectId"),array("ProjectName"))
                    ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiProject::JOIN_INNER);
                $selectMultiProject->where(array("a.Leadid"=>$detailId));
                $statementMultiProject = $sql->getSqlStringForSqlObject($selectMultiProject);
                $this->_view->resultMultiProject = $dbAdapter->query($statementMultiProject, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $selectMultiCT = $sql->select();
                $selectMultiCT->from(array("a"=>"Crm_LeadCity"));
                $selectMultiCT->columns(array("CityId"),array("CityName"))
                    ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array("CityName"), $selectMultiCT::JOIN_INNER);
                $selectMultiCT->where(array("a.LeadId"=>$detailId));
                $statementMultiCT = $sql->getSqlStringForSqlObject($selectMultiCT);
                $this->_view->resultMultiCT = $dbAdapter->query($statementMultiCT, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                //Multi select LeadSource.
                $selectMultiSource1 = $sql->select();
                $selectMultiSource1->from(array("a"=>"Crm_LeadSource"));
                $selectMultiSource1->columns(array("LeadName"=>new expression("b.LeadSourceName")))
                    ->join(array("b"=>"Crm_LeadSourceMaster"), "a.LeadSourceId=b.LeadSourceId", array(), $selectMultiSource1::JOIN_INNER);
                $selectMultiSource1->where(array("a.LeadId"=>$detailId,"a.Name"=>'L'));

                $selectMultiSource2 = $sql->select();
                $selectMultiSource2->from(array("a"=>"Crm_LeadSource"));
                $selectMultiSource2->columns(array("LeadName"=>new expression("b.CampaignName")))
                    ->join(array("b"=>"Crm_CampaignRegister"), "a.LeadSourceId=b.CampaignId", array(), $selectMultiSource2::JOIN_INNER);
                $selectMultiSource2->where(array("a.LeadId"=>$detailId,"a.Name"=>'C'));
                $selectMultiSource2->combine($selectMultiSource1,'Union ALL');

                $statementMultiSource = $sql->getSqlStringForSqlObject($selectMultiSource2);
                $this->_view->resultMultiSource = $dbAdapter->query($statementMultiSource, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $bAns = true;
                CommonHelper::CheckPowerUser($userId, $dbAdapter);
                if($viewRenderer->bPowerUser == false) {
                    $bAns = CommonHelper::FindPermission($userId, 'Lead-Modify', $dbAdapter);
                }
                $this->_view->leadEdit = $bAns;

                $this->_view->setTerminal(true);
                return $this->_view;
            }
        } else {
            if ($request->isPost()) {
                //Write your Normal form post code here
            }
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function fullDetailsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql     = new Sql($dbAdapter);

        $leadId = $this->params()->fromRoute('leadId');

        $select = $sql->select();
        $select->from('Crm_UnitBooking')
            ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_Leads'))
            ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),'UnitTypeId','RefBuyerId','BrokerId','LeadName','LeadType','BrokerId','RefBuyerId','StatusId','ExecutiveId','Mobile','Email','VIP','CostPreferenceFrom','CostPreferenceTo'))
            ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
            ->join(array("f"=>"Crm_LeadTypeMaster"),"a.LeadType=f.LeadTypeId",array('LeadTypeId','LeadTypeName'),$select::JOIN_LEFT)
            //->join(array("i"=>"Crm_NatureMaster"),"a.NatureId=i.NatureId",array("call"=>"Description"),$select::JOIN_LEFT)
            //->join(array("u"=>"Crm_NatureMaster"),"a.NextFollowUpTypeId=u.NatureId",array("Nature"=>"Description"),$select::JOIN_LEFT)
            ->join(array("j"=>"Crm_BrokerMaster"),"a.BrokerId=j.BrokerId",array("BrokerName"),$select::JOIN_LEFT)
            ->join(array("k"=>"WF_Users"),"a.ExecutiveId=k.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
            ->join(array("m"=>"Crm_LeadPersonalInfo"),"a.LeadId=m.LeadId",array('Photo'),$select::JOIN_LEFT)
            ->join(array("n"=>"Crm_StatusMaster"),"a.StatusId=n.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLead  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadFollowup'))
            ->columns(array('NextCallDate'))
            ->join(array("i"=>"Crm_CallTypeMaster"),"a.NextFollowUpTypeId=i.CallTypeId",array("NextCallType"=>"Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId))
            ->where(array("a.Completed"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->nextFollowupDetails = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        // multi project selection
        $selectMultiProject = $sql->select();
        $selectMultiProject->from(array("a"=>"Crm_LeadProjects"));
        $selectMultiProject->columns(array("ProjectId"),array("ProjectName"))
            ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiProject::JOIN_INNER);
        $selectMultiProject->where(array("a.Leadid"=>$leadId));
        $statementMultiProject = $sql->getSqlStringForSqlObject($selectMultiProject);
        $this->_view->resultMultiProject = $dbAdapter->query($statementMultiProject, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        // multi city selection
        $selectMultiCT = $sql->select();
        $selectMultiCT->from(array("a"=>"Crm_LeadCity"));
        $selectMultiCT->columns(array("CityId"),array("CityName"))
            ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array("CityName"), $selectMultiCT::JOIN_INNER);
        $selectMultiCT->where(array("a.LeadId"=>$leadId));
        $statementMultiCT = $sql->getSqlStringForSqlObject($selectMultiCT);
        $this->_view->resultMultiCT = $dbAdapter->query($statementMultiCT, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        // multi Source selection
        //Multi select LeadSource.
        $selectMultiSource1 = $sql->select();
        $selectMultiSource1->from(array("a"=>"Crm_LeadSource"));
        $selectMultiSource1->columns(array("LeadName"=>new expression("b.LeadSourceName")))
            ->join(array("b"=>"Crm_LeadSourceMaster"), "a.LeadSourceId=b.LeadSourceId", array(), $selectMultiSource1::JOIN_INNER);
        $selectMultiSource1->where(array("a.LeadId"=>$leadId,"a.Name"=>'L'));

        $selectMultiSource2 = $sql->select();
        $selectMultiSource2->from(array("a"=>"Crm_LeadSource"));
        $selectMultiSource2->columns(array("LeadName"=>new expression("b.CampaignName")))
            ->join(array("b"=>"Crm_CampaignRegister"), "a.LeadSourceId=b.CampaignId", array(), $selectMultiSource2::JOIN_INNER);
        $selectMultiSource2->where(array("a.LeadId"=>$leadId,"a.Name"=>'C'));
        $selectMultiSource2->combine($selectMultiSource1,'Union ALL');

        $statementMultiSource = $sql->getSqlStringForSqlObject($selectMultiSource2);
        $this->_view->resultMultiSource = $dbAdapter->query($statementMultiSource, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        //multi facility selection
        $selectMultiSource = $sql->select();
        $selectMultiSource->from(array("a"=>"Crm_LeadFacility"));
        $selectMultiSource->columns(array("FacilityId"),array("FacilityId"))
            ->join(array("b"=>"Crm_FacilityMaster"), "a.FacilityId=b.FacilityId", array("Description"), $selectMultiSource::JOIN_INNER);
        $selectMultiSource->where(array("a.LeadId"=>$leadId));
        $statementMultiSource = $sql->getSqlStringForSqlObject($selectMultiSource);
        $this->_view->resultMultiFacility = $dbAdapter->query($statementMultiSource, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadPersonalInfo'))
            ->columns(array('leadDob'=>new Expression("CONVERT(varchar(10),DOB,105)"),'LeadId','leadWeddingDate'=>new Expression("CONVERT(varchar(10),WeddingDate,105)"),'leadChildDob'=>new Expression("CONVERT(varchar(10),ChildDOB,105)"),'Religion','ProfessionId','Gender','NationalityId','Organization','FatherName','MotherName','MaritalStatus','SpouseName','ChildName','ChildSex'),
                array("National"=>"Description"),array("ReligionName"),array("Profession"=>"Description"),array("Marital"=>"Description"))
            ->join(array("b"=>"Crm_ReligionMaster"),"a.Religion=b.ReligionId",array("ReligionName"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_MaritalStatusMaster"),"a.MaritalStatus=e.MaritalId",array("Marital"=>"Description"),$select::JOIN_LEFT)
            ->join(array("d"=>"Crm_NationalityMaster"),"a.NationalityId=d.NationalityId",array("National"=>"Description"),$select::JOIN_LEFT)
            ->join(array("c"=>"Crm_ProfessionMaster"),"a.ProfessionId=c.ProfessionId",array("Profession"=>"Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsPersonal  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


        $select = $sql->select();
        $select->from('Crm_PersonalInfoChild')
            ->columns(array("*",'ChildDob'=>new Expression("CONVERT(varchar(10),ChildDob,105)")))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsMainChild = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_LeadBankDetails')
            ->columns(array('BankName','LeadId','Branch','LoanAmount','ContactPerson','LoanNo','InterestRate','ContactMobileNo'))
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsBank  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadFinance'))
            ->columns(array('Employment','Apartment','Stay','Income','ApartmentSize','GuestHouse','LeadId'),
                array("apart"=>"Description"),array("Employment"=>"Description"),array("IncomeId","IncomeFrom","IncomeTo"),array("ApartmentSizeId","ApartmentSizeFrom","ApartmentSizeTo"),array("Stay"=>"Description"),array("GuestHouse"=>"Description") )
            //->join(array("b"=>"Crm_Apartment"),"a.Apartment=b.ApartmentId",array("apart"=>"Description"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_ProfessionMaster"),"a.Employment=e.ProfessionId",array("Employment"=>"Description"),$select::JOIN_LEFT)
            ->join(array("d"=>"Crm_IncomeMaster"),"a.Income=d.IncomeId",array("IncomeId","IncomeFrom","IncomeTo"),$select::JOIN_LEFT)
            // ->join(array("f"=>"Crm_Stay"),"a.Stay=f.StayId",array("Stay"=>"Description"),$select::JOIN_LEFT)
            // ->join(array("g"=>"Crm_GuestHouse"),"a.GuestHouse=g.GuestHouseId",array("GuestHouse"=>"Description"),$select::JOIN_LEFT)
            ->join(array("c"=>"Crm_ApartmentSizeMaster"),"a.ApartmentSize=c.ApartmentSizeId",array("ApartmentSizeId","ApartmentSizeFrom","ApartmentSizeTo"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsFinance  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadRequirement'))
            ->columns(array('Facility','Remarks','LeadId'),
                array("Description"))
            ->join(array("b"=>"Crm_FacilityMaster"),"a.Facility=b.FacilityId",array("Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsRequirement  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadAddress'))
            ->columns(array('AddressType','LeadId','Address1','Address2','Locality','CityId','StateId','CountryId','PinCode','Mobile','LandLine','Fax','Email'),
                array("CityName"))
            ->join(array("b"=>"WF_CityMaster"),"a.CityId=b.CityId",array("CityName"),$select::JOIN_LEFT)
            ->where(array("AddressType"=>'P',"LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsPer = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadAddress'))
            ->columns(array('AddressType','Address1','LeadId','Address2','Locality','CityId','StateId','CountryId','PinCode','Mobile','LandLine','Fax','Email'),
                array("CityName"))
            ->join(array("b"=>"WF_CityMaster"),"a.CityId=b.CityId",array("CityName"),$select::JOIN_LEFT)
            ->where(array("AddressType"=>'O',"LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsOffice = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadNriInfo'))
            ->columns(array('LeadId','Address','CityId','StateId','CountryId','MobileNo','Email'),
                array("CityName"))
            ->join(array("b"=>"WF_CityMaster"),"a.CityId=b.CityId",array("CityName"),$select::JOIN_LEFT)
            ->where(array("LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsNRI = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadAddress'))
            ->columns(array('AddressType','Address1','LeadId','Address2','Locality','CityId','StateId','CountryId','PinCode','Mobile','LandLine','Fax','Email'),
                array("CityName"))
            ->join(array("b"=>"WF_CityMaster"),"a.CityId=b.CityId",array("CityName"),$select::JOIN_LEFT)
            ->where(array("AddressType"=>'C',"a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsComm = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadAddress'))
            ->columns(array('AddressType','Address1','Address2','Locality','CityId','StateId','CountryId','PinCode','Mobile','LandLine','Fax','Email'),
                array("CityName"))
            ->join(array("b"=>"WF_CityMaster"),"a.CityId=b.CityId",array("CityName"),$select::JOIN_LEFT)
            ->where(array("AddressType"=>'COA',"a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultscoapp = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadAddress'))
            ->columns(array('AddressType','Address1','Address2','Locality','CityId','StateId','CountryId','PinCode','Mobile','LandLine','Fax','Email'),
                array("CityName"))
            ->join(array("b"=>"WF_CityMaster"),"a.CityId=b.CityId",array("CityName"),$select::JOIN_LEFT)
            ->where(array("AddressType"=>'POA',"a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsapp = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadCoApplicantInfo'))
            ->columns(array('CoApplicantName','leadDob'=>new Expression("CONVERT(varchar(10),DOB,105)"),'leadWeddingDate'=>new Expression("CONVERT(varchar(10),WeddingDate,105)"),'Religion','ProfessionId','Gender','NationalityId','Organization','FatherName','MotherName','MaritalStatus','SpouseName'),
                array("National"=>"Description"),array("ReligionName"),array("Profession"=>"Description"),array("Marital"=>"Description"))
            ->join(array("b"=>"Crm_ReligionMaster"),"a.Religion=b.ReligionId",array("ReligionName"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_MaritalStatusMaster"),"a.MaritalStatus=e.MaritalId",array("Marital"=>"Description"),$select::JOIN_LEFT)
            ->join(array("d"=>"Crm_NationalityMaster"),"a.NationalityId=d.NationalityId",array("National"=>"Description"),$select::JOIN_LEFT)
            ->join(array("c"=>"Crm_ProfessionMaster"),"a.ProfessionId=c.ProfessionId",array("Profession"=>"Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsCOA = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadPOAInfo'))
            ->columns(array('ApplicantName','leadDob'=>new Expression("CONVERT(varchar(10),DOB,105)"),'leadWeddingDate'=>new Expression("CONVERT(varchar(10),WeddingDate,105)"),'Religion','ProfessionId','Gender','NationalityId','Organization','FatherName','MotherName','MaritalStatus','SpouseName'),
                array("National"=>"Description"),array("ReligionName"),array("Profession"=>"Description"),array("Marital"=>"Description"))
            ->join(array("b"=>"Crm_ReligionMaster"),"a.Religion=b.ReligionId",array("ReligionName"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_MaritalStatusMaster"),"a.MaritalStatus=e.MaritalId",array("Marital"=>"Description"),$select::JOIN_LEFT)
            ->join(array("d"=>"Crm_NationalityMaster"),"a.NationalityId=d.NationalityId",array("National"=>"Description"),$select::JOIN_LEFT)
            ->join(array("c"=>"Crm_ProfessionMaster"),"a.ProfessionId=c.ProfessionId",array("Profession"=>"Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsPOA = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadNriInfo'))
            ->columns(array('PersonName','Email','MobileNo','CityId','StateId','Address'))
            ->join(array("h"=>"WF_CityMaster"),"a.CityId=h.CityId",array('CityName'),$select::JOIN_LEFT)
            ->join(array("g"=>"WF_StateMaster"),"a.StateId=g.StateID",array('StateName'),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsnon = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $postParams = $request->getPost();
                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),'UnitTypeId','PickUpTime'=>new Expression("CONVERT(varchar(10),PickUpTime,100)"),'RefBuyerId','BrokerId','LeadName','LeadType','BrokerId','LeadSourceId','RefBuyerId','NextCallDate'=>new Expression("CONVERT(varchar(10),NextCallDate,105)"),'StatusId','NextFollowUpTypeId','ExecutiveId','Mobile','Email'),
                        array("ProjectName"),array("ExecutiveName"),array("state"=>"Description"),array("BrokerName"),array("Nat"=>"Description"),array("call"=>"Description"),array("next"=>"Description"),array("UnitTypeName"),array('LeadTypeId','LeadTypeName'),array('CostPreferenceId','CostPreferenceFrom','CostPreferenceTo'),array('CityId','CityName'),array('LeadSourceId','LeadSourceName'),array('Photo'),array('state'))
                    ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
                    ->join(array("f"=>"Crm_LeadTypeMaster"),"a.LeadType=f.LeadTypeId",array('LeadTypeId','LeadTypeName'),$select::JOIN_LEFT)
                    ->join(array("g"=>"Crm_CostPreferenceMaster"),"a.CostPreferenceId=g.CostPreferenceId",array('CostPreferenceId','CostPreferenceFrom','CostPreferenceTo'),$select::JOIN_LEFT)
                    ->join(array("i"=>"Crm_NatureMaster"),"a.NatureId=i.NatureId",array("call"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("j"=>"Crm_BrokerMaster"),"a.BrokerId=j.BrokerId",array("BrokerName"),$select::JOIN_LEFT)
                    ->join(array("k"=>"WF_Users"),"a.ExecutiveId=k.UserId",array("ExecutiveName" => 'EmployeeName'),$select::JOIN_LEFT)
                    ->join(array("m"=>"Crm_LeadPersonalInfo"),"a.LeadId=m.LeadId",array('Photo'),$select::JOIN_LEFT)
                    ->join(array("n"=>"Crm_StatusMaster"),"a.StatusId=n.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
                    ->where(array("a.LeadId"=>$leadId));
                //print_r($select);
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLead   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $this->_view->setTerminal(true);
                return $this->_view;

            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here

            }

            //begin trans try block example starts
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $connection->commit();
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
            //begin trans try block example ends

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function followupAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $userId = $this->auth->getIdentity()->UserId;


        $request = $this->getRequest();
        $postParams = $request->getPost();


        $leadDate = date('m-d-Y',strtotime($postParams['leadDate']));
        $statusId  = $postParams['statusId'];
        $natureId  = $postParams['natureId'];

        //followup3
        $nextFollowUpTypeId = $postParams['nextFollowUpTypeId'];
        if($postParams['vehicleAllocation']){
            $vehicleAllocation = $postParams['vehicleAllocation'];
        } else {
            $vehicleAllocation  = "";
        }
        //if followup type is sitevisit we have to show pickuptime
        if($postParams['pickUpTime']){
            $pickUpTime  = $postParams['pickUpTime'];
        } else {
            $pickUpTime  = "";
        }
        if($postParams['pickUpAddress']){
            $pickUpAddress = $postParams['pickUpAddress'];
        } else {
            $pickUpAddress = "";
        }
        $remarks=$postParams['remarks'];
        $executiveId=$postParams['actionRequiredBy'];
        $natureId=$postParams['natureId'];
        $entryId=$postParams['entryId'];
        $callTypeId=$postParams['callType'];

        //for blocking
        if($postParams['status']){
            $status  = $postParams['status'];
        } else {
            $status  = "";
        }
        if($postParams['customerType']){
            $customerType  = $postParams['customerType'];
        } else {
            $customerType  = "";
        }
        if($postParams['paymentOption']){
            $paymentOption  = $postParams['paymentOption'];
        } else {
            $paymentOption  = "";
        }
        if($postParams['constructionDiscount']){
            $constructionDiscount  = $postParams['constructionDiscount'];
        } else {
            $constructionDiscount  =0;
        }
        if($postParams['saleDeedDate']){
            $saleDeedDate  = date('Y-m-d',strtotime($postParams['saleDeedDate']));
        } else {
            $saleDeedDate  = 0;
        }
        if($postParams['commissionPercent']){
            $commissionPercent  = $postParams['commissionPercent'];
        } else {
            $commissionPercent  = 0;
        }
        if($postParams['commission']){
            $commission  = $postParams['commission'];
        } else {
            $commission  = 0;
        }
        if($postParams['P\proposalRate']){
            $proposalRate  = $postParams['P\proposalRate'];
        } else {
            $proposalRate  = 0;
        }
        if($postParams['commonRate']){
            $commonRate  = $postParams['commonRate'];
        } else {
            $commonRate  = 0;
        }
        if($this->getRequest()->isXmlHttpRequest())	{

            //$resp = array();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $sql     = new Sql($dbAdapter);
                $postParams = $request->getPost();


                $cid=$postParams['cid'];
                // echo $cid;die();
                // echo	$leadId = $this->params()->fromRoute('leadId');die();

                $insert  = $sql->insert('Crm_UnitBooking');
                $newData = array(
                    'Status'  => $status,
                    'CustomerType' => $customerType,
                    'PaymentOption' =>$paymentOption ,
                    //'ProjectId'=>$postParams['projectId'],
                    //'UnitNo'=>$postParams['unitNo'],
                    //'UnitTypeId' => $postParams['unitTypeId'],
                    'RegDate' =>date('Y-m-d',strtotime($postParams['regDate'])),
                    'SaleDeedDate' => $saleDeedDate,
                    'AdvAmount' => $postParams['advAmount'],
                    'ExecutiveId' => $postParams['executiveName'],
                    'BrokerId' => $postParams['brokerName'],
                    'CommissionPercent' =>$commissionPercent,
                    'Commission' => $commission,
                    'DiscountType'=>'',
                    //'ProposalRate'=>$proposalRate,
                    //'CommonRate'=>$commonRate,
                    //'ConstructionDiscount'=>$constructionDiscount,
                    'LeadId'=>$cid,

                );
                $insert->values($newData);
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                // $response = $this->getResponse()->setContent($resultsRes);
                // return $response;
            }
        } else {
            if ($request->isPost()) {
                // Print_r($postParams);die;
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    $leadId = $postParams['leadId'];
                    $projectId = $postParams['projectId'];
                    $nextCallDate = date('m-d-Y H:i:s',strtotime(str_replace("/","-",$postParams['nextCallDate'])));

                    $insert  = $sql->insert('Crm_LeadFollowup');
                    $newData = array(
                        'FollowUpDate'  => $leadDate,
                        'LeadId' => $leadId,
                        'NextCallDate' => $nextCallDate,
                        'ExecutiveId' => $executiveId,
                        'NextFollowUpTypeId' => $nextFollowUpTypeId,
                        'NatureId'=>$postParams['natureId'],
                        'NextFollowupRemarks'=>$postParams['nextfollowremarks'],
                        'VehicleAllocation'=>$vehicleAllocation,
                        'PickUpTime'=> $pickUpTime,
                        'PickUpAddress'=> $pickUpAddress,
                        'CallTypeId' => $callTypeId,
                        'ProjectsId'=>$this->bsf->isNullCheck($postParams['Projects_name'],'number'),
                        'StatusId' => $statusId,
                        'CallerSid'=>$this->bsf->isNullCheck($postParams['caller_sid'],'string'),
                        'Remarks' => $remarks,
                        'UserId'=>$this->auth->getIdentity()->UserId,
                        'ModifiedDate'=>date('m-d-Y H:i:s'),
                    );
                    $insert->values($newData);
                   $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $newEntryId = $dbAdapter->getDriver()->getLastGeneratedValue();



                    //Project update to LeadProjects table

                    $delete = $sql->delete();
                    $delete->from('Crm_LeadProjects')
                        ->where(array('LeadId' => $leadId,));
                    $DelStatement = $sql->getSqlStringForSqlObject($delete);
                    $deleteProject = $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);


                    foreach($postParams['ProjectsId'] as $arrproj){
                        $insert  = $sql->insert('Crm_LeadProjects');
                        $newData = array(
                            'LeadId'=>$leadId,
                            'ProjectId'=>$arrproj,
                        );
                        $insert->values($newData);
                      $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

//                    $select = $sql->select();
//                    $select->from('Crm_LeadProjects')
//                        ->columns(array("ProjectId"))
//                        ->where(array("LeadId"=>$leadId));
//                    $statement = $sql->getSqlStringForSqlObject($select);
//                    $resultproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $arrproj=[];
//                    foreach($resultproj as $proj){
//                        array_push($arrproj, $proj['ProjectId']);
//                    }
//                    if(!in_array($postParams['Projects_name'], $arrproj)){
//
//                        $insert  = $sql->insert('Crm_LeadProjects');
//                        $newData = array(
//                            'LeadId'=>$leadId,
//                            'ProjectId'=>$postParams['Projects_name'],
//                        );
//                        $insert->values($newData);
//                        $statement = $sql->getSqlStringForSqlObject($insert);
//                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//                    }


                    //updating status to Lead//
                    if($statusId>0||$statusId!='') {
                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'StatusId' => $statusId
                        ));
                        $update->where(array('LeadId' => $leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                    $update = $sql->update();
                    $update->table('Crm_LeadFollowup');
                    $update->set(array(
                        'Completed'  => 1,
                        'CompletedDate'  => date('Y-m-d H:i:s'),

                    ));
                    $update->where(array('EntryId'=>$entryId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $results2  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $connection->commit();

                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Lead-Followup-Add','N','Lead-Followup-Details',$newEntryId,0, 0, 'CRM','',$userId, 0 ,0);

                    $FeedId = $this->params()->fromQuery('FeedId');
                    $AskId = $this->params()->fromQuery('AskId');
                    if($callTypeId==3) {
                        if(isset($FeedId) && $FeedId!="") {
                            $this->redirect()->toRoute('crm/followup-page', array('controller' => 'lead', 'action' => 'followup-entry'), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                        } else {
                            $this->redirect()->toRoute('crm/followup-page', array('controller' => 'lead', 'action' => 'followup-entry'));
                        }
                    } else {
                        if(isset($FeedId) && $FeedId!="") {
                            $this->redirect()->toRoute('crm/followup-page', array('controller' => 'lead', 'action' => 'followup', 'leadId' => $leadId,'projectId' =>$projectId), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                        } else {

                            $this->redirect()->toRoute('crm/followup-page', array('controller' => 'lead', 'action' => 'followup', 'leadId' => $leadId,'projectId' =>$projectId));
                        }
                    }

                } catch (PDOException $e) {
                    $connection->rollback();
                }
            } else {
                $leadId = $this->bsf->isNullCheck($this->params()->fromRoute('leadId'), 'number');

                $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('projectId'), 'number');
                $this->_view->callSid = $this->bsf->isNullCheck($this->params()->fromRoute('callSid'), 'string');
//                $this->_view->CallTypeId = $this->params()->fromRoute('CallTypeId');
//                $this->_view->CallDate = $this->params()->fromRoute('Date');
                $PositionTypeId=array(5,2);

                $sub = $sql->select();
                $sub->from(array('a'=>'WF_PositionMaster'))
                    ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
                    ->columns(array('PositionId'))
                    ->where(array("b.PositionTypeId"=>$PositionTypeId));

                $select = $sql->select();
                $select->from('WF_Users')
                    ->columns(array("*"))
                    ->where->expression("PositionId IN ?",array($sub));
                $select->where(array("DeleteFlag"=>0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsUser = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $superiorsUserList = $viewRenderer->commonHelper()->masterSuperior($this->auth->getIdentity()->UserId,$dbAdapter);

                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('LeadId','LeadName'))
                    ->join(array("g"=>"Crm_LeadProjects"),"a.LeadId=g.LeadId",array(),$select::JOIN_LEFT);
                $select->where(array("a.ExecutiveId" =>$superiorsUserList ,'g.ProjectId'=>$projectId));
                $select->limit(2000);
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId','ProjectName'))
                ->order('ProjectId desc');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLeadProjects = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_UnitTypeMaster')
                    ->columns(array('UnitTypeId','UnitTypeName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsType = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('WF_Users')
                    ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'))
                    ->where->expression("PositionId IN ?",array($sub));
                $select->where(array("DeleteFlag"=>0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsExecutive = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $select = $sql->select();
                $select->from('Crm_BrokerMaster')
                    ->columns(array('BrokerId','BrokerName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsBroker = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_StatusMaster')
                    ->columns(array('StatusId','Description'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_CallTypeMaster')
                    ->columns(array('CallTypeId','Description'))
                    ->where(array("Lead"=>1))
                    ->where(array("Description NOT IN ('Fresh')"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCall = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_NatureMaster')
                    ->columns(array('NatureId','Description'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_UnitBooking')
                    ->columns(array("*"))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsMain  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),
                        'UnitTypeId','LeadName','LeaserType','ExecutiveId','Email','Mobile','VIP','TeleLeadId'),
                        array("ProjectName"),array("LeadTypeName"),array("ExecutiveName"),array("UnitTypeName"),array("state"=>"Description"),array("call"=>"Description"))
                    //->join(array("b"=>"Crm_LeadProjects"),"a.ProjectsId=b.ProjectsId",array("ProjectName"),$select::JOIN_LEFT)
                    ->join(array("g"=>"Crm_LeadTypeMaster"),"a.LeadType=g.LeadTypeId",array("LeadTypeName"),$select::JOIN_LEFT)
                    ->join(array("k"=>"WF_Users"),"a.ExecutiveId=k.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
                    ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
                    ->join(array("h"=>"Crm_LeadPersonalInfo"),"a.LeadId=h.LeadId",array("Photo"),$select::JOIN_LEFT)
                    ->where(array("a.LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $this->_view->responseLead=$responseLead;
                //multi project selection
                $select = $sql->select();
                $select->from('Crm_LeadProjects')
                    ->columns(array('ProjectId'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsMulti  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->leadProjects = array();
                foreach($this->_view->resultsMulti as $this->resultsMulti) {
                    $this->leadProjects[] = $this->resultsMulti['ProjectId'];
                }
                $this->_view->leadProjects = $this->leadProjects;

                $select = $sql->select();
                $select->from(array("a"=>'Crm_LeadFollowup'))
                    ->columns(array('EntryId','FollowUpDate'=>new Expression("CONVERT(varchar(10),FollowUpDate,105)"),'LeadId','UnitTypeId','CallTypeId','NatureId','Remarks','NextFollowupRemarks','CallerSid','NextCallDate'=>new Expression("CONVERT(varchar(10),NextCallDate,105)"),'ExecutiveId'),
                        array("call"),array("LeadName"),array("UserName"),array("Nature"),
                        array("next"),
                        array("UnitTypeName"),array("Photo"),array("state"=>"Description"))
                    ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("j"=>"Crm_NatureMaster"),"a.NatureId=j.NatureId",array("Nat"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("d"=>"Crm_CallTypeMaster"),"a.NextFollowUpTypeId=d.CallTypeId",array("Nature"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
                    ->join(array("f"=>"Crm_CallTypeMaster"),"a.CallTypeId=f.CallTypeId",array("call"=>"Description"),$select::JOIN_LEFT)
                    ->join(array("g"=>"WF_Users"),"a.ExecutiveId=g.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT);
                $select->where(array('a.LeadId'=>$leadId))
                    ->order("a.EntryId Desc");
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->responseFollow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                //$EntryId = $dbAdapter->getDriver()->getLastGeneratedValue();


                if(isset($responseLead) && intval($responseLead['TeleLeadId'])!=0) {
                    $select = $sql->select();
                    $select->from(array("a" => 'Tele_LeadFollowup'))
                        ->columns(array('EntryId', 'FollowUpDate' => new Expression("CONVERT(varchar(10),FollowUpDate,105)"), 'LeadId', 'NextFollowUpTypeId', 'CallTypeId', 'NatureId', 'Remarks', 'NextFollowupRemarks', 'nCallSid', 'NextCallDate' => new Expression("CONVERT(varchar(10),NextCallDate,105)"), 'ExecutiveId'),
                            array("call"), array("LeadName"),
                            array("next"),
                            array("UnitTypeName"), array("state" => "Description"))
                        ->join(array("c" => "Crm_StatusMaster"), "a.StatusId=c.StatusId", array("state" => "Description"), $select::JOIN_LEFT)
                        ->join(array("j" => "Crm_NatureMaster"), "a.NatureId=j.NatureId", array("Nat" => "Description"), $select::JOIN_LEFT)
                        //->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
                        ->join(array("g" => "WF_Users"), "a.ExecutiveId=g.UserId", array("UserName" => 'EmployeeName'), $select::JOIN_LEFT);
                    $select->where(array('a.LeadId' => $responseLead['TeleLeadId']))
                        ->order("a.EntryId Desc");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->tResponseFollow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                }
                $selectMultiProject = $sql->select();
                $selectMultiProject->from(array("a"=>"Crm_LeadProjects"));
                $selectMultiProject->columns(array("ProjectId"),array("ProjectName"))
                    ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiProject::JOIN_INNER);
                $selectMultiProject->where(array("a.LeadId"=>$leadId));
                $statementMultiProject = $sql->getSqlStringForSqlObject($selectMultiProject);
                $this->_view->resultMultiProject = $dbAdapter->query($statementMultiProject, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->leadId =$leadId;
                $this->_view->projectId=$projectId;
            }
        }
        //Common function
        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }


    public function followupDetailsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $entryId = $this->params()->fromRoute('EntryId');
        $userId = $this->auth->getIdentity()->UserId;

        $select = $sql->select();
        $select->from('Crm_LeadFollowup')
            ->columns(array('EntryId','LeadId'))
            ->where(array('EntryId' => $entryId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        // print_r($lid);
        if(count($lid) > 0){
            $ld = $lid['LeadId'];
        } else {
            $ld =0;
        }

        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_LeadFollowup')
            ->columns(array('EntryId','LeadId'))
            ->where(array('EntryId' => $entryId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Crm_UnitTypeMaster')
            ->columns(array('UnitTypeId','UnitTypeName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsUnit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_StatusMaster')
            ->columns(array('StatusId','Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_NatureMaster')
            ->columns(array('NatureId','Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('WF_Users')
            ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsExecutive = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Crm_CallTypeMaster')
            ->columns(array('CallTypeId','Description'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_Leads'))
            ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),
                'UnitTypeId','LeadName','LeaserType','ExecutiveId','Email','Mobile','VIP'),
                array("ProjectName"),array("LeadTypeName"),array("ExecutiveName"),array("UnitTypeName"),array("state"=>"Description"),array("call"=>"Description"))
            //->join(array("b"=>"Crm_LeadProjects"),"a.ProjectsId=b.ProjectsId",array("ProjectName"),$select::JOIN_LEFT)
            ->join(array("g"=>"Crm_LeadTypeMaster"),"a.LeadType=g.LeadTypeId",array("LeadTypeName"),$select::JOIN_LEFT)
            ->join(array("k"=>"WF_Users"),"a.ExecutiveId=k.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
            ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
            ->join(array("h"=>"Crm_LeadPersonalInfo"),"a.LeadId=h.LeadId",array("Photo"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$ld));
        $statement = $sql->getSqlStringForSqlObject($select);

        $this->_view->responseLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadFollowup'))
            ->columns(array('EntryId','FollowUpDate'=>new Expression("CONVERT(varchar(10),FollowUpDate,105)"),'NextFollowUpTypeId','LeadId','UnitTypeId','CallTypeId','CallerSid','NextFollowupRemarks','NatureId','StatusId','Remarks','NextFollowupRemarks','NextCallDate'=>new Expression("NextCallDate"),'ExecutiveId','VehicleAllocation','PickUpTime','NextFollowUpTypeId','PickUpAddress','LeadFlag'),
                array("LeadName"),array("ExecutiveName"),array("Nat"=>"Description"),array("Nature"=>"Description"),
                array("call"=>"Description"),array("next"=>"Description"),
                array("UnitTypeName"),array("state"=>"Description"))
            ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->join(array("d"=>"Crm_NatureMaster"),"a.NatureId=d.NatureId",array("Nat"=>"Description"),$select::JOIN_LEFT)
            ->join(array("h"=>"Crm_CallTypeMaster"),"a.NextFollowUpTypeId=h.CallTypeId",array("Nature"=>"Description"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
            ->join(array("f"=>"Crm_CallTypeMaster"),"a.CallTypeId=f.CallTypeId",array("call"=>"Description"),$select::JOIN_LEFT)
            ->join(array("g"=>"WF_Users"),"a.ExecutiveId=g.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
            ->where(array('a.EntryId' => $entryId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseFollow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


        $selectMultiProject = $sql->select();
        $selectMultiProject->from(array("a"=>"Crm_LeadProjects"));
        $selectMultiProject->columns(array("ProjectId"),array("ProjectName"))
            ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiProject::JOIN_INNER);
        $selectMultiProject->where(array("a.LeadId"=>$ld));
        $statementMultiProject = $sql->getSqlStringForSqlObject($selectMultiProject);
        $this->_view->resultMultiProject = $dbAdapter->query($statementMultiProject, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $request = $this->getRequest();
        $postParams = $request->getPost();
        $leadDate = date('m-d-Y',strtotime($postParams['LeadDate']));
        $leadId = $postParams['LeadId'];
        $statusId  = $postParams['StatusId'];
        $executiveId  = $postParams['ExecutiveId'];
        //$unitTypeId  = $postParams['UnitTypeId'];
        $nextCallDate = str_replace('/', '-', $postParams['NextCallDate']);
        if(strtotime($nextCallDate) == FALSE) {
            $nextCallDate = date('Y-m-d H:i:s');
        } else {
            $nextCallDate = date('Y-m-d H:i:s', strtotime($nextCallDate));
        }
        $leadFlag = $postParams['leadFlag'];
        //followup3
        $nextFollowUpTypeId = $postParams['nextFollowUpTypeId'];
        if($postParams['VehicleAllocation']){
            $vehicleAllocation = $postParams['VehicleAllocation'];
        } else {
            $vehicleAllocation  = "";
        }
        //if followup type is sitevisit we have to show pickuptime
        if($postParams['PickUpTime']){
            $pickUpTime  = $postParams['PickUpTime'];
        } else {
            $pickUpTime  = "";
        }
        if($postParams['PickUpAddress']){
            $pickUpAddress = $postParams['PickUpAddress'];
        } else {
            $pickUpAddress = "";
        }
        $callTypeId=$postParams['callType'];
        $natureId=$postParams['natureId'];
        $remarks=$postParams['Remarks'];
        if($this->getRequest()->isXmlHttpRequest())	{
            //$resp = array();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                //Write your Ajax post code here

                $this->_view->resp = "";
                $this->_view->setTerminal(true);
                return $this->_view;
            }
        } else {
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {

                    $update = $sql->update();
                    $update->table('Crm_LeadFollowup');
                    $update->set(array(
                        'FollowUpDate'  => $leadDate,
                        'NextCallDate' => $nextCallDate,
                        'ExecutiveId' => $executiveId,
                        'NatureId'=>$postParams['natureId'],
                        'NextFollowUpTypeId' => $nextFollowUpTypeId,
                        'NextFollowupRemarks'=>$postParams['nextfollowremarks'],
                        //'CallTypeId' => $callTypeId,
                        'StatusId' => $statusId,
                        'Remarks' => $remarks,
                        'CallerSid'=>$this->bsf->isNullCheck($postParams['caller_sid'],'string'),
                        'LeadId' => $ld,
                        'VehicleAllocation'=>$vehicleAllocation,
                        'PickUpTime'=>$pickUpTime,
                        'PickUpAddress'=> $pickUpAddress,
                    ));
                    $update->where(array('EntryId'=>$entryId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                    //updating status to Lead//
                    if($statusId>0||$statusId!='') {
                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'StatusId' => $statusId
                        ));
                        $update->where(array('LeadId' => $ld));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    if($leadFlag=="B") {
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Buyer-Followup-Modify','E','Buyer-Followup-Details',$entryId,0, 0, 'CRM','',$userId, 0 ,0);
                    } else {
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Lead-Followup-Modify','E','Lead-Followup-Details',$entryId,0, 0, 'CRM','',$userId, 0 ,0);
                    }
                    $this->redirect()->toRoute('crm/default', array('controller' => 'lead', 'action' => 'followup-register'));
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block example ends
                return $this->_view;
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function followupRegisterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        // $this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql     = new Sql($dbAdapter);
        $superiorsUserList = $viewRenderer->commonHelper()->masterSuperior($this->auth->getIdentity()->UserId,$dbAdapter);

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('FollowupId' => new expression('count(*)')));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->FollowupCount = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('FollowupId' => new expression('count(*)')));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->FollowupCount = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('CallTypeId' => new expression('count(CallTypeId)')))
            ->where(array('a.CallTypeId' => 4));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->Finalise = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('CallTypeId' => new expression('count(StatusId)')))
            ->where(array('a.StatusId' => 1));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->statushot = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('CallTypeId' => new expression('count(StatusId)')))
            ->where(array('a.StatusId' => 2));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->statuswarm = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('CallTypeId' => new expression('count(StatusId)')))
            ->where(array('a.StatusId' => 3));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->statuscold = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array('a' =>'Crm_LeadFollowup'))
            ->columns(array('CallTypeId' => new expression('count(CallTypeId)')))
            ->where(array('a.CallTypeId' => 3));
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $stmt = $sql->getSqlStringForSqlObject($select);
        $this->_view->drop = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadFollowup'))
            ->columns(array(new Expression("a.EntryId,CONVERT(varchar(10),a.FollowUpDate,105) as FollowUpDate,a.StatusId,a.CallTypeId,a.NextCallDate,a.NextFollowUpTypeId,'' Projects ,'' CityName,'' SourceName")),
                array("UserName"),array("state"=>"Description"),array("CallType"=>"Description"),array("Call"=>"Description"),array("Nature"=>"Description"),
                array("Nat"=>"Description"),array("CityId"),
                array("LeadId","LeadName","LeadType","VIP","Mobile"))
            ->join(array("c"=>"WF_Users"), "a.ExecutiveId=c.UserId", array("UserName" => 'EmployeeName'), $select::JOIN_LEFT)
            ->join(array("d"=>"Crm_StatusMaster"),"a.StatusId=d.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->join(array("k"=>"Crm_CallTypeMaster"),"a.NextFollowUpTypeId=k.CallTypeId",array("NextFollowUpType"=>"Description"),$select::JOIN_LEFT)
            ->join(array("f"=>"Crm_Leads"),"a.LeadId=f.LeadId",array("LeadId","LeadName","LeadType","Mobile","VIP"),$select::JOIN_LEFT)
            ->join(array("g"=>"Crm_CallTypeMaster"),"a.CallTypeId=g.CallTypeId",array("CallType"=>"Description"),$select::JOIN_LEFT)
            ->join(array("h"=>"Crm_NatureMaster"),"a.NatureId=h.NatureId",array("Nature"=>"Description"),$select::JOIN_LEFT)
            ->order('a.EntryId desc');
        $select->where(array("a.ExecutiveId" => $superiorsUserList));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $icount = 0;
        foreach ($results as $resu){
            $leadid = $resu['LeadId'];

            //Lead Projects List Append
            $strCCName="";
            $selectMultiCC = $sql->select();
            $selectMultiCC->from(array("a"=>"Crm_LeadProjects"));
            $selectMultiCC->columns(array("ProjectId"),array("ProjectName"))
                ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiCC::JOIN_INNER);
            $selectMultiCC->where(array("a.LeadId"=>$leadid));
            $statementMultiCC = $sql->getSqlStringForSqlObject($selectMultiCC);
            $resultMultiCC = $dbAdapter->query($statementMultiCC, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $proj = array();
            if($resultMultiCC ){
                foreach($resultMultiCC as $multiCC){
                    array_push($proj, $multiCC['ProjectName']);
                }
                $strCCName = implode(",", $proj);
            }
            $results[$icount]['Projects']=$strCCName;

            //Lead City list Append
            $strCTName="";
            $selectMultiCT = $sql->select();
            $selectMultiCT->from(array("a"=>"Crm_LeadCity"));
            $selectMultiCT->columns(array("CityId"),array("CityName"))
                ->join(array("b"=>"WF_CityMaster"), "a.CityId=b.CityId", array("CityName"), $selectMultiCT::JOIN_INNER);
            $selectMultiCT->where(array("a.LeadId"=>$leadid));
            $statementMultiCT = $sql->getSqlStringForSqlObject($selectMultiCT);
            $resultMultiCT = $dbAdapter->query($statementMultiCT, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $city = array();
            if($resultMultiCT ){
                foreach($resultMultiCT as $multiCT){
                    array_push($city, $multiCT['CityName']);
                }
                $strCTName = implode(",", $city);
            }
            $results[$icount]['CityName']=$strCTName;

            //Lead source list append
            $strSourceName="";
            $selectMultiSource = $sql->select();
            $selectMultiSource->from(array("a"=>"Crm_LeadSource"));
            $selectMultiSource->columns(array("LeadSourceId"),array("LeadSourceId"))
                ->join(array("b"=>"Crm_LeadSourceMaster"), "a.LeadSourceId=b.LeadSourceId", array("LeadSourceName"), $selectMultiSource::JOIN_INNER);
            $selectMultiSource->where(array("a.LeadId"=>$leadid));
            $statementMultiSource = $sql->getSqlStringForSqlObject($selectMultiSource);
            $resultMultiSource = $dbAdapter->query($statementMultiSource, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $source = array();
            if($resultMultiSource ){
                foreach($resultMultiSource as $multiSource){
                    array_push($source, $multiSource['LeadSourceName']);
                }
                $strSourceName = implode(",", $source);
            }
            $results[$icount]['SourceName']=$strSourceName;

            $icount=$icount+1;
        }
        $this->_view->results=$results;

        //Common function
        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function getcitydetailAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql     = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $sql     = new Sql($dbAdapter);
                $postParams = $request->getPost();
                $select = $sql->select();
                $select->from(array('a' => 'WF_CityMaster'))
                    ->join(array('b'=>'WF_StateMaster'), 'a.StateId=b.StateId', array('StateId', 'StateName'), $select:: JOIN_INNER)
                    ->join(array('c' => 'WF_CountryMaster'), 'a.CountryId=c.CountryId', array('CountryId', 'CountryName'), $select:: JOIN_INNER)
                    ->columns(array('CityId', 'CityName'),array('StateId', 'StateName'),array('CountryId', 'CountryName'))
                    ->where(array('a.CityId' => $postParams['cid']));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultsRes   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent(json_encode($resultsRes));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function entryEditAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql     = new Sql($dbAdapter);
        $leadId = $this->params()->fromRoute('leadId');
        $userId = $this->auth->getIdentity()->UserId;

        CommonHelper::CheckPowerUser($userId, $dbAdapter);
        if($viewRenderer->bPowerUser == false) {
            $bAns= CommonHelper::FindPermission($userId, 'Lead-Modify', $dbAdapter);
            if($bAns== false){
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $postParams = $request->getPost();
                //Print_r($postParams);die;
                $select = $sql->select();
                $select->from(array('a' =>'Crm_CostPreferenceMaster'))
                    ->columns(array('CostPreferenceTo'))
                    ->where(array("CostPreferenceTo >= $postParams[CostFrom]"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent(json_encode($resultLeads));
                //$response = $this->getResponse()->setContent($resultLeads);
                return $response;
            }
        }
        else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    //print_r($postParams);die;
                    if($postParams['leaserType']){
                        $leaserType = $postParams['leaserType'];
                    } else {
                        $leaserType  = "";
                    }
                    $vip='No';
                    if(isset($postParams['VIP']))
                        $vip=$postParams['VIP'];
                    $projectId = $postParams['projectId'];
                    $leadSourceId = $postParams['leadSourceId'];
                    $PreCityId = $postParams['PreCityId'];

                    if($postParams['refBuyerId']){
                        $refBuyerId = $postParams['refBuyerId'];
                    } else {
                        $refBuyerId = "";
                    }

                    $delete = $sql->delete();
                    $delete->from('Crm_LeadProjects')
                        ->where(array('LeadId' => $leadId,));
                    $DelStatement = $sql->getSqlStringForSqlObject($delete);
                    $deleteProject = $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Crm_LeadCity')
                        ->where(array('LeadId' => $leadId,));
                    $DelStatement = $sql->getSqlStringForSqlObject($delete);
                    $deleteCity = $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Crm_LeadSource')
                        ->where(array('LeadId' => $leadId));
                    $DelStatement = $sql->getSqlStringForSqlObject($delete);
                    $deleteSource= $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $update = $sql->update();
                    $update->table('Crm_Leads');

                    $update->set(array(
                        'LeadType' => $postParams['leadType'],
                        'LeadName' => $postParams['leadName'],
                        'Title' => $postParams['title'],
                        'LeaserType'  => $leaserType,
                        'RefBuyerId'=>$refBuyerId,
                        'CountryCode' => $postParams['countrycode'],
                        'Mobile'  =>$postParams['mobile'],
                        'brokerId'=>$postParams['brokerId'],
                        'Email'=>$this->bsf->isNullCheck($postParams['email'],'string'),
                        'UnitTypeId'=>$postParams['unitTypeId'],
                        'CostPreferenceFrom'=>$this->bsf->isNullCheck($postParams['costPreferenceFrom'],'number'),
                        'CostPreferenceTo'=>$this->bsf->isNullCheck($postParams['costPreferenceTo'],'number'),
                        'ExecutiveId'=>$postParams['executiveId'],
                    ));
                    $update->where(array('LeadId'=>$leadId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $resultUpdate = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    //print_r($postParams['ProjectsId']);die;
                    foreach ($postParams['ProjectsId'] as $value){
                        $select = $sql->insert('Crm_LeadProjects');
                        $newData = array(
                            'LeadId' => $leadId,
                            'ProjectId'=> $value,
                        );
                        $select->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                    foreach ($postParams['PreCityId'] as $value){
                        $select = $sql->insert('Crm_LeadCity');
                        $newData = array(
                            'LeadId' => $leadId,
                            'CityId'=> $value,
                        );
                        $select->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                    foreach ($postParams['LeadSourceId'] as $value){
                        $lead = explode(',',$value);
                        $LeadSourceId = $lead[0];
                        $LeadSourceType = $lead[1];
                        $select = $sql->insert('Crm_LeadSource');
                        $newData = array(
                            'LeadId' => $leadId,
                            'LeadSourceId'=> $LeadSourceId,
                            'Name'=>$LeadSourceType,
                        );
                        $select->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Lead-Modify','E','Lead-Details',$leadId,0, 0, 'CRM','',$userId, 0 ,0);
                    if($postParams['saveExit']=='2') {
                        $this->redirect()->toRoute('crm/edit', array('controller' => 'lead', 'action' => 'edit'));
                    } else {
                        $this->redirect()->toRoute('crm/personal', array('controller' => 'lead', 'action' => 'personal', 'leadId' => $leadId));
                    }
                } catch ( PDOException $e ) {
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
            } else {
                //selecting POA id//
                $select1 = $sql->select();
                $select1->from(array("a"=>"Crm_LeadPOAInfo"))
                    ->columns(array('POAId'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select1);
                $this->_view->resultspoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                //selecting coa Id//
                $select1 = $sql->select();
                $select1->from(array("a"=>"Crm_LeadCoApplicantInfo"))
                    ->columns(array('CoAppId'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select1);
                $this->_view->resultscoa= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                //check whether the route value is exists or not
                $select = $sql->select();
                $select->from('Crm_Leads')
                    ->columns(array('LeadId','LeadName'))
                    ->where(array('LeadId'=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $lid  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $select = $sql->select();
                $select->from('Crm_UnitBooking')
                    ->columns(array(new Expression('DISTINCT(LeadId) as LeadId')))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsBuyer  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                //selecting values for LeadName
                $select = $sql->select();
                $select->from('Crm_Leads')
                    ->columns(array("*",'LeaserType'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $leadmain=$dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->_view->resultsMain  = $leadmain;

                $dFromValue=0;
                if (!empty($leadmain)) {
                    $dFromValue = $leadmain[0]["CostPreferenceFrom"];
                }

                //selecting values for Broker
                $select = $sql->select();
                $select->from('Crm_BrokerMaster')
                    ->columns(array('BrokerId','BrokerName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsBroker = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //multi project selection
                $select = $sql->select();
                $select->from('Crm_LeadProjects')
                    ->columns(array('ProjectId'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsMulti  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->leadProjects = array();
                foreach($this->_view->resultsMulti as $this->resultsMulti) {
                    $this->leadProjects[] = $this->resultsMulti['ProjectId'];
                }
                $this->_view->leadProjects = $this->leadProjects;

                //multi source selection
                $select1 = $sql->select();
                $select1->from(array("a"=>"Crm_LeadSource"))
                    ->columns(array('LeadSourceId','Name'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select1);
                $this->_view->resultsSource= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                // $leadSources = array();
                // //$leadSourceType = array();

                // foreach($this->_view->resultsSource as $this->resultsSource) {
                // $leadSources[] = $this->resultsSource['LeadSourceId'];
                // //$leadSourceType[] = $this->resultsSource['Name'];
                // }
                // $this->_view->leadSources = $leadSources;
                // //$this->_view->leadSourceType = $leadSourceType;

                //multi city selection
                $select = $sql->select();
                $select->from('Crm_LeadCity')
                    ->columns(array('CityId'))
                    ->where(array("LeadId"=>$leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCity  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->leadCities = array();
                foreach($this->_view->resultsCity as $this->resultsCity) {
                    $this->leadCities[] = $this->resultsCity['CityId'];
                }
                $this->_view->leadCities = $this->leadCities;

                $pGroupName = new Container('pGroupName');
                $projectId = $pGroupName->project;

                //selecting values from LeadType Table
                $select = $sql->select();
                $select->from(array('a' =>'Crm_LeadProjects'))
                    ->columns(array('LeadId'))
                    ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"), $select::JOIN_LEFT)
                    ->where(array('a.ProjectId' => $projectId))
                    ->order('a.LeadId asc');
                $select->where(array("ExecutiveId" => $this->auth->getIdentity()->UserId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsRef = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



                //selecting reference name//
                $select = $sql->select();
                $select->from('Crm_Leads')
                    ->columns(array('LeadId','LeadName'))
                    ->where(array('LeadId not like ?'=> $leadId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsRefer = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values from LeadType Table
                $select = $sql->select();
                $select->from('Crm_LeadTypeMaster')
                    ->columns(array('LeadTypeId','LeadTypeName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                //selecting values from UnitType Table
                $select = $sql->select();
                $select->from('Crm_UnitTypeMaster')
                    ->columns(array('UnitTypeId','UnitTypeName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsUnitType = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values from LeadProjects Table
                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId','ProjectName'))
                    ->order('ProjectId desc');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsLeadProjects = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values from LeadSource Table
                $select1 = $sql->select();
                $select1->from("Crm_LeadSourceMaster")
                    ->columns(array("Id"=>new expression("LeadSourceId"),"Name"=>new expression("LeadSourceName"),"Type"=>new expression("'L'")));

                $select2 = $sql->select();
                $select2->from("Crm_CampaignRegister")
                    ->columns(array("Id"=>new expression("CampaignId"),"Name"=>new expression("CampaignName + ' - ' + SourceName"),"Type"=>new expression("'C'")));
                $select2->combine($select1,'Union ALL');

                $select3 = $sql->select();
                $select3->from(array("g"=>$select2))
                    //->columns(array("Id","Name","Type"));
                    ->columns(array("Id" => "Id", "Type", "value" => "Name"));
                $statement = $sql->getSqlStringForSqlObject($select3);
                $this->_view->resultsLeadSource= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values from CostPreference Table
                $select = $sql->select();
                $select->from('Crm_CostPreferenceMaster')
                    ->columns(array('CostPreferenceId','CostPreferenceFrom','CostPreferenceTo'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCost  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Crm_CostPreferenceMaster')
                    ->columns(array('CostPreferenceId','CostPreferenceFrom','CostPreferenceTo'))
                    ->where(array("CostPreferenceTo >= $dFromValue"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCostT  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values from CityMaster Table
                $select = $sql->select();
                $select->from('WF_CityMaster')
                    ->columns(array('CityId','CityName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsCity  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                //selecting values from Executive Table
                $select = $sql->select();
                $select->from('WF_Users')
                    ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsExecutive  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;

        }
    }

    public function socialAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        // $select = $sql->select();
        // $select->from('Crm_SocialLead')
        // ->columns(array('SocialId','FilePath'))
        // ->where(array("SocialId"=>$socialId));
        // $statement = $sql->getSqlStringForSqlObject($select);
        // $this->_view->resultsSocial  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $request = $this->getRequest();
        $postParams = $request->getPost();
        if($this->getRequest()->isXmlHttpRequest())	{
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        }
        else {
            if ($request->isPost()) {
                //Write your Normal form post code here
                $socialName = $postParams['socialName'];
                //$leadType  = $postParams['LeadType'];
                $phone = $postParams['phone'];
                $mailId = $postParams['mailId'];
                //$filePath = $postParams['FilePath'];

                $insert = $sql->insert('Crm_SocialLead');
                $newData = array(
                    'SocialName'  => $socialName,
                    //'LeadType'  => $leadType,
                    'PhoneNo' => $phone,
                    'Email' => $mailId,
                    //'FilePath ' => $filePath ,
                );
                $insert->values($newData);
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function followupHistoryAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $leadId = $this->params()->fromRoute('leadId');

        $select = $sql->select();
        $select->from('Crm_Leads')
            ->columns(array('LeadId','LeadName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadData = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from(array("a"=>'Crm_Leads'))
            ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),'StatusId','UnitTypeId','LeadType','LeadName','ExecutiveId','Email','Mobile','VIP',))
            ->join(array("f"=>"Crm_LeadTypeMaster"),"a.LeadType=f.LeadTypeId",array("LeadTypeName"),$select::JOIN_LEFT)
            ->join(array("k"=>"WF_Users"),"a.ExecutiveId=k.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
            ->join(array("h"=>"Crm_LeadPersonalInfo"),"a.LeadId=h.LeadId",array("Photo"),$select::JOIN_LEFT)
            ->join(array("i"=>"Crm_StatusMaster"),"a.StatusId=i.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->where(array('a.LeadId' => $leadId));

        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadFollowup'))
            ->columns(array('NextCallDate'=>new Expression("CONVERT(varchar(10),NextCallDate,105)"),'PickUpTime'))
            ->join(array("i"=>"Crm_CallTypeMaster"),"a.NextFollowUpTypeId=i.CallTypeId",array("NextCallType"=>"Description"),$select::JOIN_LEFT)
            ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->where(array("a.LeadId"=>$leadId))
            ->where(array("a.Completed"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->lastFollowdata = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

//        $select = $sql->select();
//        $select->from(array("a"=>'Crm_LeadFollowup'))
//            ->columns(array('EntryId','FollowUpDate'=>new Expression("CONVERT(varchar(10),FollowUpDate,105)"),'LeadId','UnitTypeId','CallTypeId','NextFollowupTypeId','StatusId','Remarks','CallerSid','NextCallDate'=>new Expression("CONVERT(varchar(10),NextCallDate,105)"),'ExecutiveId'),
//                array("LeadName"),array("UserName"),array("Nat"=>"Description"),
//                array("CallType"=>"Description"),array("next"=>"Description"),
//                array("UnitTypeName"),array("state"=>"Description"))
//            ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
//            ->join(array("d"=>"Crm_NatureMaster"),"a.NextFollowupTypeId=d.NatureId",array("Nat"=>"Description"),$select::JOIN_LEFT)
//            ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
//            ->join(array("f"=>"Crm_CallTypeMaster"),"a.CallTypeId=f.CallTypeId",array("CallType"=>"Description"),$select::JOIN_LEFT)
//            ->join(array("g"=>"WF_Users"),"a.ExecutiveId=g.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT);
//        $select->where(array("a.LeadId"=>$leadId,"a.Completed"=>0))
//            ->order("a.EntryId Desc");
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $this->_view->lastFollowdata = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from(array("a"=>'Crm_LeadFollowup'))
            ->columns(array('EntryId','DemandLetterId','Url','FollowUpDate','LeadId','UnitTypeId','CallTypeId','NextFollowupTypeId','StatusId','Remarks','CallerSid','NextCallDate'=>new Expression("CONVERT(varchar(10),NextCallDate,105)"),'ExecutiveId'),
                array("LeadName"),array("UserName"),array("Nat"=>"Description"),
                array("CallType"=>"Description"),array("next"=>"Description"),
                array("UnitTypeName"),array("state"=>"Description"))
            ->join(array("c"=>"Crm_StatusMaster"),"a.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
            ->join(array("d"=>"Crm_NatureMaster"),"a.NatureId=d.NatureId",array("Nat"=>"Description"),$select::JOIN_LEFT)
            ->join(array("e"=>"Crm_UnitTypeMaster"),"a.UnitTypeId=e.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
            ->join(array("f"=>"Crm_CallTypeMaster"),"a.CallTypeId=f.CallTypeId",array("CallType"=>"Description"),$select::JOIN_LEFT)
            ->join(array("g"=>"WF_Users"),"a.UserId=g.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
            ->join(array("h"=>"Crm_ProgressBillTrans"),new expression("a.DemandLetterId=h.ProgressBillTransId and h.CancelId=0"),array("DemandLetter","UnitId"),$select::JOIN_LEFT);
        $select->where(array("a.LeadId"=>$leadId))
            ->order("a.EntryId Desc");
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->responseFollowdata = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            $select = $sql->select();
            if ($request->isPost()) {
                $postData = $request->getPost();
                $files = $request->getFiles();

                $Type = $this->bsf->isNullCheck($postData['type'], 'string');

                if($Type == "ajaxloader") {
                    $urls = array();
                    foreach($files['file'] as $doc) {
                        if($doc['name']){
                            $dir = 'public/uploads/tmp/';
                            $filename = $this->bsf->uploadFile($dir, $doc);
                            if($filename) {
                                // update valid files only
                                $urls[] = $viewRenderer->basePath. 'public/uploads/tmp/'. $filename;
//                                $attachment = file_get_contents($url);
//                                $attachment_encoded = base64_encode($attachment);
//                                $attachments[] = array(
//                                    'name' => $doc['name'],
//                                    'type' => mime_content_type($url),
//                                    'content' =>$attachment_encoded
//                                );
                            }
                        }
                    }
                    $result['url'] = $urls;

                } else if($Type == "mailRequest") {
                    $ToMail = $this->bsf->isNullCheck($postData['to'], 'string');

                    $content = $this->bsf->isNullCheck($postData['compose-textarea'], 'string');
                    $subject= $this->bsf->isNullCheck($postData['subject'], 'string');

                    $mailData=$content;
                    $i=0;
                    $attachments=array();
                    if(isset($postData['fileattached']) && $postData['fileattached'] != '') {
                        foreach ($postData['fileattached'] as $url) {
                            $i++;
                            $attachment = file_get_contents($url);
                            $attachment_encoded = base64_encode($attachment);
                            $attachments[] = array(
                                'name' => 'attachment_' . $i,
                                'type' => mime_content_type($url),
                                'content' => $attachment_encoded
                            );
                        }
                    }
                    $recipients = array(array('email' => $ToMail,'type'=>'to'));
                    if(isset($postData['Cc']) && $postData['Cc'] != '') {
                        foreach($postData['Cc'] as $Ccdoc) {
                            $recipients[] = array('email' => $Ccdoc,'type' => 'cc');
                        }
                    }
                    if(isset($postData['Bcc']) && $postData['Bcc'] != '') {
                        foreach ($postData['Bcc'] as $Bccdoc) {
                            $recipients[] = array('email' => $Bccdoc, 'type' => 'bcc');
                        }
                    }
                    $sm = $this->getServiceLocator();
                    $config = $sm->get('application')->getConfig();
                    $viewRenderer->MandrilSendMail()->sendMailWithMultipleAttachmentWithoutTemplate($recipients,$config['general']['mandrilEmail'],$subject, $attachments, $mailData);
                }
                //Write your Ajax post code here
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('*'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $result['Leads'] = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent(json_encode($result));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here

            }

            //begin trans try block example starts
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $connection->commit();
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
            //begin trans try block example ends

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function followupEntryAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId','ProjectName'))
            ->where(array("DeleteFlag"=>0));
        $select->order("ProjectId Desc");
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsProjects = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $request = $this->getRequest();
        if($this->getRequest()->isXmlHttpRequest())	{
            $resp = array();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $sql     = new Sql($dbAdapter);
                $postParams = $request->getPost();

                $select = $sql->select();
                $select->from(array('a' =>'Crm_LeadProjects'))
                    ->columns(array('LeadId'))
                    ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"=>new expression("b.LeadName + ' - ' + b.Mobile")), $select::JOIN_LEFT)
                    ->where(array('a.ProjectId' => $postParams['ProjectId']))
                    ->order('a.LeadId asc');
                $select->where(array("b.ExecutiveId" => $this->auth->getIdentity()->UserId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent(json_encode($resultLeads));
                //$response = $this->getResponse()->setContent($resultLeads);
                return $response;
            }
        }
        else {
            if ($request->isPost()) {
                $postParams = $request->getPost();
                //Print_r($postParams);
                $leadId = $postParams['leadId'];
                $projectId = $postParams['ProjectId'];
                $FeedId = $this->params()->fromQuery('FeedId');
                $AskId = $this->params()->fromQuery('AskId');
                if((isset($FeedId) && $FeedId!="")) {
                    $this->redirect()->toRoute('crm/followup-page', array('controller' => 'lead', 'action' => 'followup', 'leadId' => $leadId,'projectId'=>$projectId), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                } else {
                    $this->redirect()->toRoute('crm/followup-page', array('controller' => 'lead', 'action' => 'followup', 'leadId' => $leadId,'projectId'=>$projectId));
                }
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }


    public function leadAllocationAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {

            }

            //begin trans try block example starts
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $connection->commit();
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
            //begin trans try block example ends
            $select = $sql->select();
            $select->from('CRM_Leads')
                ->columns(array('Count'=>new Expression("isnull(Count(LeadId),0)")));
            $select->where("ExecutiveId<>0");
            $statement = $sql->getSqlStringForSqlObject($select);
            $resultsLeadAssign  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $countLeadAssign = $resultsLeadAssign[0]['Count'];
            $this->_view->countLeadAssign =$countLeadAssign;

            $select = $sql->select();
            $select->from('CRM_Leads')
                ->columns(array('Count'=>new Expression("isnull(Count(LeadId),0)")));
            $select->where("ExecutiveId=0");
            $statement = $sql->getSqlStringForSqlObject($select);
            $resultsLeadUnAssign  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $countLeadUnAssign = $resultsLeadUnAssign[0]['Count'];
            $this->_view->countLeadUnAssign =$countLeadUnAssign;

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function allocationProjectwiseAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        //getting projects from Master//
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId','ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsLeadProjects = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $PositionTypeId=array(5,2);
        $sub = $sql->select();
        $sub->from(array('a'=>'WF_PositionMaster'))
            ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
            ->columns(array('PositionId'))
            ->where(array("b.PositionTypeId"=>$PositionTypeId));
        //getting executives from Master//
        $select = $sql->select();
        $select->from('WF_Users')
            ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'))
            ->where->expression("PositionId IN ?",array($sub));
        $select->where(array("DeleteFlag"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsExecutive  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                //Write your Normal form post code here
                $projectsId  = $postParams['projectsId'];
                $assigned    = $postParams['assigned'];
                $executiveId = $postParams['executiveId'];

                //begin trans try block starts
                try {
                    if($assigned==1) {
                        $select = $sql->select();
                        $select->from(array("a" => 'Crm_Leads'))
                            ->columns(array('*'), array("ProjectId"))
                            ->join(array("b" => "Crm_LeadProjects"), "a.LeadId=b.LeadId", array("ProjectId"), $select::JOIN_INNER);
                        $select->where(array("b.ProjectId" => $projectsId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $resultLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }
                    else if($assigned==0){
                        $select = $sql->select();
                        $select->from('Crm_Leads')
                            ->columns(array('LeadId'))
                            ->where("ExecutiveId='0' or  ExecutiveId = ''");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $resultLead  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }

                    $res = count($resultLead);
                    $NOE = count($executiveId);
                    $i=1;
                    if($res > 0){
                        foreach($resultLead as $lead){
                            $iqwe   = $i % $NOE;
                            $update = $sql->update();
                            $update->table('Crm_Leads');
                            $update ->set(array(
                                'ExecutiveId' =>$executiveId[$iqwe],
                            ));
                            $update->where(array('LeadId' =>$lead['LeadId']));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $i++;
                        }}
                    $this->redirect()->toRoute('crm/allocation-register', array('controller' => 'lead', 'action' => 'allocation-register'));
                } catch(PDOException $e){
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block ends
            }
            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }
    public function allocationExecutivewiseAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $PositionTypeId=array(5,2);
        $sub = $sql->select();
        $sub->from(array('a'=>'WF_PositionMaster'))
            ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
            ->columns(array('PositionId'))
            ->where(array("b.PositionTypeId"=>$PositionTypeId));
        //getting Executives from Master//
        $select = $sql->select();
        $select->from('WF_Users')
            ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'))
            ->where->expression("PositionId IN ?",array($sub));
        $select->where(array("DeleteFlag"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsExecutive  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $result="success";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                // Print_r($postParams); die;
                $postParams = $request->getPost();
                $executiveId = $postParams['executiveId'];
                $toexecutiveId = $postParams['executivesId'];

                $res = count($executiveId);
                $NOE = count($toexecutiveId);
                $i=1;
                if($NOE > 0) {
                    foreach ($executiveId as $exe) {
                        $iqwe = $i % $NOE;

                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'ExecutiveId'  =>$toexecutiveId[$iqwe],
                        ));
                        $update->where(array('ExecutiveId'=>$exe));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $i++;}  }
                $this->redirect()->toRoute('crm/allocation-register', array('controller' => 'lead', 'action' => 'allocation-register'));
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }
    public function allocationTeamwiseAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        //getting Executives from Master//
        $select = $sql->select();
        $select->from('WF_TeamMaster')
            ->columns(array('TeamId'=>'TeamId','TeamName' => 'TeamName'))
            ->where(array('DeleteFlag'=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsTeam = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $result="success";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();

                //Write your Normal form post code here
                $fromTeam = $postParams['teamId'];
                $toTeam = $postParams['teamsId'];

                //begin trans try block starts
                try {
                    $select = $sql->select();
                    $select->from(array("a"=>'Crm_Leads'))
                        ->columns(array("LeadId"))
                        ->where("ExecutiveId IN (select UserId from WF_UserTeamTrans where TeamId = '".$fromTeam."')");
                    $statement  = $sql->getSqlStringForSqlObject($select);
                    $resultLead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array("a"=>'WF_UserTeamTrans'))
                        ->columns(array('UserId'))
                        ->where(array("a.TeamId"=>$toTeam));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultuserto = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $res = count($resultLead);
                    $NOE = count($resultuserto);
                    $i=1;
                    if($NOE > 0) {
                        foreach ($resultLead as $lead) {
                            $iqwe = $i % $NOE;
                            $update = $sql->update();
                            $update->table('Crm_Leads');
                            $update->set(array(
                                'ExecutiveId' => $resultuserto[$iqwe]['UserId'],
                            ));
                            $update->where(array('LeadId' => $lead['LeadId']));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $i++;
                        }
                    }
                    $this->redirect()->toRoute('crm/allocation-register', array('controller' => 'lead', 'action' => 'allocation-register'));
                } catch(PDOException $e){
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                //begin trans try block ends
            }
            /*if ($request->isPost()) {
                $postParams = $request->getPost();
              //  Print_r($postParams); die;

                $teamId = $postParams['teamId'];
                $teamsId = $postParams['teamsId'];

                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();


                $select = $sql->select();
                $select->from(array("a"=>'WF_Users'))
                    ->join(array("b"=>"WF_UserTeamTrans"),"a.UserId=b.UserId",array(),$select::JOIN_INNER)
                    ->columns(array('UserId'))
                   ->where(array("b.TeamId"=>$teamId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultuserfrom = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array("a"=>'WF_TeamMaster'))
                   // ->join(array("b"=>"WF_UserTeamTrans"),"a.UserId=b.UserId",array(),$select::JOIN_INNER)
                  //  ->columns(array('UserId'))
                    ->where(array("a.TeamId"=>$teamsId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultuscnt = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array("a"=>'WF_Users'))
                    ->join(array("b"=>"WF_UserTeamTrans"),"a.UserId=b.UserId",array(),$select::JOIN_INNER)
                    ->columns(array('UserId'))
                    ->where(array("b.TeamId"=>$teamsId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $resultuserto = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $rest = count($resultuscnt);
                $resto = count($resultuserto);
                $NOE = count($resultuserfrom);

                $i=1;
                if($resto >0 && $NOE >0){
                    foreach($resultuserto as $res){
                       $arrres=$res['UserId'];
                        foreach($resultuserfrom as $lead){
                            $iqwe = $i % $rest;
                            $update = $sql->update();
                            $update->table('Crm_Leads');
                             $update->set(array(
                                'ExecutiveId' => $arrres
                                // 'ExecutiveId' => $arrres[$iqwe]
                             ));
                            $update->where(array('ExecutiveId' => $lead['UserId']));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $i++;
                            //echo $lead['UserId']. '-' .$iqwe. '-' .$arrres[$iqwe].'<br />';
                        }
                    }
                }

                $connection->commit();
                $this->redirect()->toRoute('crm/allocation-register', array('controller' => 'lead', 'action' => 'allocation-register'));
            }


            else{
                //getting Executives from Master//
                $select = $sql->select();
                $select->from('WF_TeamMaster')
                    ->columns(array('TeamId'=>'TeamId','TeamName' => 'TeamName'))
                    ->where(array('DeleteFlag'=>0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsTeam = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            }*/

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function allocationRegisterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $request = $this->getRequest();
        $response = $this->getResponse();

        /*Ajax Request*/
        if($request->isXmlHttpRequest()){
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $projectId = $postParams['projectId'];
                $executiveId = $postParams['executiveId'];

                //Write your Ajax post code here
                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array('LeadId','LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),'LeadName','StatusId'),
                        array("ProjectId"),array("state"))
                    ->join(array("b"=>"Crm_LeadProjects"),"a.LeadId=b.LeadId",array("ProjectId"),$select::JOIN_LEFT)
                    ->join(array("e"=>"proj_ProjectMaster"),"b.ProjectId=e.ProjectId",array("ProjectName"),$select::JOIN_INNER)
                    ->join(array("d"=>"WF_Users"),"a.ExecutiveId=d.UserId",array("UserName" => 'EmployeeName'),$select::JOIN_LEFT)
                    ->join(array("c"=>"Crm_CallTypeMaster"),"a.CallTypeId=c.CallTypeId",array("state"=>"Description"),$select::JOIN_LEFT)
                    ->where(array("b.ProjectId"=>$projectId,"a.ExecutiveId"=>$executiveId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->_view->setTerminal(true);
                $response->setContent(json_encode($results));
                return $response;
            }
        }
        $select = $sql->select();
        $select ->from(array("a"=>'Crm_Leads'))
            ->columns(array(new Expression('DISTINCT(a.ExecutiveId) as ExecutiveId')),
                array("UserName"))
            ->join(array("b"=>"WF_Users"), "a.ExecutiveId=b.UserId", array("UserName" => 'EmployeeName'), $select::JOIN_LEFT);
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        foreach($results as &$data){
            $executiveId=$data['ExecutiveId'];

            $allocationSelect = $sql->select();
            $allocationSelect ->from(array("a"=>'Crm_LeadProjects'))
                ->columns(array(new Expression("COUNT(a.LeadId) as NoOfLeads,a.ProjectId")), array("ProjectName"))
                ->join(array('b'=>'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array("ProjectName"), $select:: JOIN_INNER)
                ->where(array("a.LeadId IN (select Crm_Leads.LeadId from Crm_Leads where Crm_Leads.ExecutiveId =$executiveId)"))
                ->group(new expression('a.ProjectId,b.ProjectName'));
            $allocationStmt = $sql->getSqlStringForSqlObject($allocationSelect);
            $data['Detailed'] = $dbAdapter->query($allocationStmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }
        $this->_view->results = $results;

        return $this->_view;

    }

    public function allocationLeadbasedAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);



        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {

                $results  = '';

                $response->setContent(json_encode($results));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParams = $request->getPost();

                $executiveId = $postParams['executiveId'];
                $Lead_id = array_filter(explode(",", $postParams['LeadId']));
                foreach ($Lead_id as $value){

                    $update = $sql->update();
                    $update->table('Crm_Leads');

                    $update->set(array(
                        'ExecutiveId'  => $executiveId,

                    ));
                    $update->where(array('LeadId'=>$value));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                }

                $this->redirect()->toRoute('crm/allocation-register', array('controller' => 'lead', 'action' => 'allocation-register'));
            }
            else{

                $PositionTypeId=array(5,2);
                $sub = $sql->select();
                $sub->from(array('a'=>'WF_PositionMaster'))
                    ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
                    ->columns(array('PositionId'))
                    ->where(array("b.PositionTypeId"=>$PositionTypeId));
                //ExecutiveMaster//
                $select = $sql->select();
                $select->from('WF_Users')
                    ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'))
                    ->where->expression("PositionId IN ?",array($sub));
                $select->where(array("DeleteFlag"=>0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resultsExecutive  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select1 = $sql->select();
                $select1->from(array("a"=>'Crm_Leads'))
                    ->columns(array(new Expression("a.LeadId,CONVERT(varchar(10),a.LeadDate,105) as LeadDate,a.LeadName,a.StatusId,a.Mobile")))
                    //  ->join(array("k"=>"Crm_LeadProjectView"), "a.LeadId=k.LeadId", array('Projects' => new Expression ("isnull(k.ProjectName,'')")), $select::JOIN_LEFT)
                    ->join(array("e"=>"WF_Users"), "a.ExecutiveId=e.UserId", array( "UserName" => 'EmployeeName'), $select1::JOIN_LEFT);
                $statement = $sql->getSqlStringForSqlObject($select1);
                $this->_view->resultslead  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


            }

            //begin trans try block example starts
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $connection->commit();
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
            //begin trans try block example ends

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function leadVipbasedAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $PositionTypeId=array(5,2);
        $sub = $sql->select();
        $sub->from(array('a'=>'WF_PositionMaster'))
            ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
            ->columns(array('PositionId'))
            ->where(array("b.PositionTypeId"=>$PositionTypeId));
        //ExecutiveMaster//
        $select = $sql->select();
        $select->from('WF_Users')
            ->columns(array('UserId'=>'UserId','UserName' => 'EmployeeName'))
            ->where->expression("PositionId IN ?",array($sub));
        $select->where(array("DeleteFlag"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resultsExecutive  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {

                //Write your Ajax post code here
                $postParam = $request->getPost();
                $select = $sql->select();
                $select->from(array("a"=>'Crm_Leads'))
                    ->columns(array(new Expression("a.LeadId,CONVERT(varchar(10),a.LeadDate,105) as LeadDate,a.LeadName,a.StatusId,a.Mobile,a.VIP")))
                    ->join(array("k"=>"Crm_LeadProjectView"), "a.LeadId=k.LeadId", array('Projects' => new Expression ("isnull(k.ProjectName,'')")), $select::JOIN_LEFT)
                    ->join(array("e"=>"WF_Users"), "a.ExecutiveId=e.UserId", array("UserName"=> 'EmployeeName'), $select::JOIN_LEFT)
                    ->where(array("a.VIP"=>'1'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $icount = 0;
                foreach ($results as $resu){
                    $leadid = $resu['LeadId'];

                    //Lead Projects List Append
                    $strCCName="";
                    $selectMultiCC = $sql->select();
                    $selectMultiCC->from(array("a"=>"Crm_LeadProjects"));
                    $selectMultiCC->columns(array("ProjectId"),array("ProjectName"))
                        ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.projectId", array("ProjectName"), $selectMultiCC::JOIN_INNER);
                    $selectMultiCC->where(array("a.LeadId"=>$leadid));
                    $statementMultiCC = $sql->getSqlStringForSqlObject($selectMultiCC);
                    $resultMultiCC = $dbAdapter->query($statementMultiCC, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $proj = array();
                    if($resultMultiCC ){
                        foreach($resultMultiCC as $multiCC){
                            array_push($proj, $multiCC['ProjectName']);
                        }
                        $strCCName = implode(",",$proj);
                    }
                    $results[$icount]['Projects']=$strCCName;
                    $icount=$icount+1;
                }

                $response->setContent(json_encode($results));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $executiveId = $postParams['executiveId'];
                $Lead_id = array_filter(explode(",", $postParams['LeadId']));
                foreach ($Lead_id as $value){
                    $update = $sql->update();
                    $update->table('Crm_Leads');

                    $update->set(array(
                        'ExecutiveId'  => $executiveId,

                    ));
                    $update->where(array('LeadId'=>$value));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                }

                $this->redirect()->toRoute('crm/allocation-register', array('controller' => 'lead', 'action' => 'allocation-register'));
            }

            //begin trans try block example starts
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $connection->commit();
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
            //begin trans try block example ends

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function allocationDetailsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Lead Register");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $projectId = $postParams['projectId'];
                $executiveId = $postParams['executiveId'];

                //Write your Ajax post code here
                $select = $sql->select();
                $select->from(array("a"=>'Crm_LeadProjects'))
                    ->columns(array('LeadId'))
                    ->join(array("b"=>"Crm_Leads"),"a.LeadId=b.LeadId",array('LeadDate'=>new Expression("CONVERT(varchar(10),LeadDate,105)"),'LeadName','StatusId','ExecutiveId','UserId'),$select::JOIN_LEFT)
                    ->join(array("d"=>"WF_Users"),"b.UserId=d.UserId",array("CreatedBy" => 'EmployeeName'),$select::JOIN_LEFT)
                    ->join(array("c"=>"Crm_StatusMaster"),"b.StatusId=c.StatusId",array("state"=>"Description"),$select::JOIN_LEFT)
                    ->where(array("a.ProjectId"=>$projectId,"b.ExecutiveId"=>$executiveId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->setTerminal(true);
                $response->setContent(json_encode($results));
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function finalisationAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $call = $this->params()->fromRoute('Call');

        if($this->getRequest()->isXmlHttpRequest())	{
            $response->setStatusCode(405);
            $response->setContent('Method not allowed!');
            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postData = $request->getPost();
                //Print_r($postData); die;
                $connection = $dbAdapter->getDriver()->getConnection();
                // POST request
                $mode = $this->bsf->isNullCheck($postData['mode'], 'string');
                if($mode == 'add' ||$mode == 'save' ) {
                    try {
                        $connection->beginTransaction();

                        $project_id = $this->bsf->isNullCheck($postData['project_id'], 'number');
                        if ($project_id <= 0) {
                            throw new \Exception('Invalid Project-id!');
                        }

                        $leadId = $this->bsf->isNullCheck($postData['lead_id'], 'number');
                        if ($leadId == 0) {
                            $leadId = $this->bsf->isNullCheck($postData['leadid'], 'number');
                        }
                        if($mode == 'save'){
                            $iUnitId =  $this->bsf->isNullCheck($postData['unit_id'],'number');
                        }   else{
                            $iUnitId =  $this->bsf->isNullCheck($postData['unit_no'],'number');}
                        // Print_r($iUnitId);die;

                        if ($leadId <= 0) {
                            throw new \Exception('Invalid Lead-id!');
                        }

                        $bookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                        $nextCallDate = $this->bsf->isNullCheck($postData['nextCallDate'], 'string');
                        $bookingDate = str_replace('/', '-', $bookingDate);
                        if (strtotime($bookingDate) == FALSE) {
                            $bookingDate = date('Y-m-d');
                        } else {
                            $bookingDate = date('Y-m-d', strtotime($bookingDate));
                        }
                        $nextCallDate = str_replace('/', '-', $nextCallDate);
                        if(strtotime($nextCallDate) == FALSE) {
                            $nextCallDate = date('Y-m-d H:i:s');
                        } else {
                            $nextCallDate = date('Y-m-d H:i:s', strtotime($nextCallDate));
                        }
                        $userId = $this->auth->getIdentity()->UserId;


                        $select = $sql->select();
                        $select->from('Crm_LeadFollowup')
                            ->columns(array('EntryId'))
                            ->where(array('LeadId' =>$leadId))
                            ->order("EntryId desc");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $select = $sql->select();
                        $select->from(array('a' => 'KF_UnitMaster'))
                            ->columns(array('UnitTypeId','Status','ProjectId'))
                            ->where(array('a.UnitId' => $iUnitId, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $iUnitTypeId = 0;
                        if (!empty($unit)) $iUnitTypeId = $unit['UnitTypeId'];


//                        $select = $sql->select();
//                        $select->from(array('a' => 'KF_UnitMaster'))
//                            ->columns(array('UnitId'))
//                            ->join(array('b' => 'Crm_UnitTypeOtherCostTrans'), 'b.UnitTypeId=a.UnitTypeId', array('Amount' => new expression('SUM(Amount)')), $select::JOIN_LEFT)
//                            ->where(array('a.UnitId' => $postData['unit_no'], 'a.DeleteFlag' => 0))
//                            ->group(array('b.Amount', 'a.UnitId'));
//                        $stmt = $sql->getSqlStringForSqlObject($select);
//                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

//                        $select = $sql->select();
//                        $select->from( array( 'a' => 'Crm_UnitDetails' ) )
//                            ->columns(array('BaseAmt'))
//                            ->where( array( 'a.UnitId' => $postData['unit_no']) );
//                        $stmt = $sql->getSqlStringForSqlObject( $select );
//                        $base = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->current();

                        if (empty($unit)) {
                            throw new \Exception('Invalid Unit-no!');
                        }

                        if ($unit['Status'] == 'S') {

                            throw new \Exception('Unit sold-out!');
                        }

                        $update = $sql->update();
                        $update->table('Crm_LeadFollowup');
                        $update->set(array(
                            'Completed'  => 1,
                            'CompletedDate'  => date('Y-m-d H:i:s'),

                        ));
                        $update->where(array('EntryId'=>$entry['EntryId']));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $insert = $sql->insert();
                        $insert->into('Crm_LeadFollowup');
                        $insert->Values(array(
                            'UnitId' => $iUnitId,
                            'LeadId' => $leadId,
                            'FollowUpDate' => $bookingDate,
                            'ExecutiveId' => $userId,
                            'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
                            'NatureId' => $this->bsf->isNullCheck($postData['nature_id'], 'number'),
                            'NextFollowupRemarks' => $this->bsf->isNullCheck($postData['nextfollowremarks'], 'string'),
                            'VehicleAllocation' => $this->bsf->isNullCheck($postData['vehicleAllocation'], 'number'),
                            'PickUpAddress' => $this->bsf->isNullCheck($postData['pickUpAddress'], 'string'),
                            'PickUpTime' => $this->bsf->isNullCheck($postData['pickUpTime'], 'string'),
                            'NextCallDate' => $nextCallDate,
                            'CallTypeId' => 4,
                            'Remarks' => $this->bsf->isNullCheck($postData['remarks'], 'string'),
                            'UserId'=>$this->auth->getIdentity()->UserId,
                            'CallerSid' => $this->bsf->isNullCheck($call, 'string')
                        ));
                      $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();

                       if($unit['ProjectId']>0){
                        //Project update to LeadProjects table
                        $select = $sql->select();
                        $select->from('Crm_LeadProjects')
                            ->columns(array("ProjectId"))
                            ->where(array("LeadId"=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $resultproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        $arrproj=[];
                        foreach($resultproj as $proj){
                            array_push($arrproj, $proj['ProjectId']);
                        }
                        if(!in_array($unit['ProjectId'], $arrproj)){

                            $insert  = $sql->insert('Crm_LeadProjects');
                            $newData = array(
                                'LeadId'=>$leadId,
                                'ProjectId'=>$unit['ProjectId'],
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }}

                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'StatusId' =>1
                        ));
                        $update->where(array('LeadId' => $leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);



                        $postSaleExecutiveId = $postData['post_executive_id'];
                        if($postSaleExecutiveId==''|| $postSaleExecutiveId==0){
                            $postSaleExecutiveId=$userId;
                        }
                        $sVno = $this->bsf->isNullCheck($postData['booking_no'], 'string');

                        $aVNo = CommonHelper::getVoucherNo(807, date('Y-m-d', strtotime($postData['campaigndate'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true) $sVno = $aVNo["voucherNo"];

                        $arrValues = array(
                            'BookingNo' => $sVno,
                            'BookingDate' => $bookingDate,
                            'LeadId' => $leadId,
                            'UnitId' => $this->bsf->isNullCheck($iUnitId, 'number'),
                            'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                            'BookingName' => $this->bsf->isNullCheck($postData['registration_name'], 'string'),
                            'ExecutiveId' => $this->auth->getIdentity()->UserId,
                            'PostExecutiveId' => $postSaleExecutiveId,
                            'AdvAmount' => $this->bsf->isNullCheck($postData['adv_amount'], 'number'),
//                            'ProposalRate' => $this->bsf->isNullCheck($unit['Rate'], 'number'),
//                            'CommonRate' => $this->bsf->isNullCheck($unit['Rate'], 'number'),
                            'Rate' => $this->bsf->isNullCheck($postData['bookRate'], 'number'),
                            'CreatedDate' => date('Y-m-d H:i:s'),
                            'PaymentScheduleId' => $this->bsf->isNullCheck($postData['payment_schedule'], 'number'),
                            'FollowupEntryId' => $followupentryid
                        );

                        // Broker
                        $arrValues['BrokerId'] = $this->bsf->isNullCheck($postData['broker_id'], 'number');
                        $arrValues['CommissionPercent'] = $this->bsf->isNullCheck($postData['commission'], 'number');
                        $arrValues['Commission'] = $this->bsf->isNullCheck($postData['amount'], 'number');

                        // Loan
                        $arrValues['LoanProposalNo'] = $this->bsf->isNullCheck($postData['proposal_no'], 'string');
                        $arrValues['BankName'] = $this->bsf->isNullCheck($postData['bank_name'], 'string');
                        $arrValues['LoanAmt'] = $this->bsf->isNullCheck($postData['loan_amount'], 'number');
                        $arrValues['SanctionDate'] = NULL;

                        if ($postData['loan_yes_no'] == 'loan_yes') {
                            $arrValues['PaymentOption'] = 'L';
                            if ($postData['loan_approved_yes_no'] == 'loan_approved_yes') {
                                $arrValues['LoanApproval'] = 1;
                                $arrValues['SanctionDate'] = date('Y-m-d', strtotime($postData['sanction_date']));
                            } else {
                                $arrValues['LoanApproval'] = 0;
                            }
                        } else {
                            $arrValues['PaymentOption'] = 'O';
                        }

                        // Receipt Type
                        $select = $sql->select();
                        $select->from('Crm_ReceiptTypeMaster');
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        $arrAllReceiptTypes = array();
                        foreach ($arrResults as $result) {
                            $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                        }

                        // Discount
                        $discountBased = $this->bsf->isNullCheck($postData['discount_based'], 'string');
                        if($discountBased == "R"){
                            $discountBased ="N";
                        }
                        $referalType = $this->bsf->isNullCheck($postData['referalType'], 'string');
                        if($referalType == 'B') {
                            $referalTypeId = $this->bsf->isNullCheck($postData['buyerName'], 'number');
                        } else if($referalType == 'E') {
                            $referalTypeId = $this->bsf->isNullCheck($postData['employeeName'], 'number');
                        }
                        $planList = $this->bsf->isNullCheck($postData['plan_list'], 'number');
                        $arrValues['DiscountBased'] = $discountBased;
                        $arrValues['PlanId'] = $planList;
                        $arrValues['ReferalType'] = $referalType;
                        $arrValues['ReferalTypeId'] = $referalTypeId;

                        $arrValues['BaseAmount'] =  $this->bsf->isNullCheck($postData['bookBaseAmt'],'number');
                        $arrValues['LandAmount'] =  $this->bsf->isNullCheck($postData['bookLandAmt'],'number');
                        $arrValues['ConstructionAmount'] =  $this->bsf->isNullCheck($postData['bookConstructionAmt'],'number');
                        $arrValues['OtherCostAmount'] =  $this->bsf->isNullCheck($postData['bookOthercostAmt'],'number');
                        $arrValues['QualifierAmount'] =  $this->bsf->isNullCheck($postData['bookqualAmt'],'number');
                        $arrValues['NetAmount'] =  $this->bsf->isNullCheck($postData['booknetAmt'],'number');

                        $discountType = $this->bsf->isNullCheck($postData['discount_type'], 'string');
                        $arrValues['DiscountType'] = "";
                        $arrValues['LumpsumReceiptId'] =0;
                        $arrValues['Discount'] = 0;
                        if ($discountType !=""){
                            $arrValues['DiscountType'] = $discountType;
                            $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                            $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                        }

//                        if ($unitamt['Amount'] > 0) {
//                            $netAmt = $unit['NetAmt'] + $unitamt['Amount'];
//                        } else{
//                            $netAmt = $unit['NetAmt'];
//                        }
//
//                        $landAmt = $unit['LandAmount'];
//                        $constructionAmt = $unit['ConstructionAmount'];
//
//                        $arrValues['BaseAmount'] =  $landAmt + $constructionAmt;
//                        $arrValues['LandAmount'] =  $landAmt ;
//                        $arrValues['ConstructionAmount'] =  $constructionAmt;
//                        $arrValues['NetAmount'] =  $unit['NetAmt'];
//
//                        if(!is_null($discountType)) {
//                            $arrValues['DiscountType'] = $discountType;
//
//                            $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
//                            if($discountType == 'L' ) {
//                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
//
//                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
//                                    $constructionAmt -= $arrValues['Discount'];
//                                    $netAmt -= $arrValues['Discount'];
//
//                                } elseif($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
//                                    $landAmt -= $arrValues['Discount'];
//                                    $netAmt -= $arrValues['Discount'];
//
//                                } else {
//                                    $netAmt -= $arrValues['Discount'];
//                                    $constructionAmt =$netAmt-$landAmt;
//                                }
//                            } else if($discountType == 'R') {
//
//                                $netAmt =$unit['Rate']- $arrValues['Discount'];
//                                $netAmt= $netAmt * $unit['UnitArea'];
//                                $constructionAmt =$netAmt-$landAmt;
//
//                            } else if($discountType == 'P') {
//                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
//                                $dis =$netAmt*($arrValues['Discount']/100);
//
//                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
//                                    $dis =$constructionAmt*($arrValues['Discount']/100);
//                                    $constructionAmt -= $dis;
//                                    $netAmt -= $dis;
//
//                                } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
//                                    $dis =$landAmt*($arrValues['Discount']/100);
//                                    $landAmt -= $dis;
//                                    $netAmt -= $dis;
//                                } else {
//                                    $netAmt -= $dis;
//                                    $constructionAmt =$netAmt-$landAmt;
//
//                                }
//                            }
//                        }

                        $insert = $sql->insert();
                        $insert->into('Crm_UnitBooking')
                            ->values($arrValues);
                       $stmt = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        $bookingId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $update = $sql->update();
                        $update->table('Crm_Leads')
                            ->set(array('ExecutiveId' => $postSaleExecutiveId))
                            ->where(array('LeadId' => $leadId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitBlock'))
                            ->columns(array('UnitId'))
                            ->where(array('a.UnitId' => $iUnitId, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitblock = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        //Print_r($unit['UnitId']);die;

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitPreBooking'))
                            ->columns(array('UnitId'))
                            ->where(array('a.UnitId' => $iUnitId, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitPre = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        if($unitblock['UnitId']>0){
                            $update = $sql->update();
                            $update->table('Crm_UnitBlock')
                                ->set(array('DeleteFlag' => 1))
                                ->where(array('UnitId' => $unitblock['UnitId']));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        if($unitPre['UnitId']>0){
                            $update = $sql->update();
                            $update->table('Crm_UnitPreBooking')
                                ->set(array('DeleteFlag' => 1))
                                ->where(array('UnitId' => $unitPre['UnitId']));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $update = $sql->update();
                        $update->table('Crm_Leads')
                            ->set(array('LeadConvert' => 1))
                            ->where(array('LeadId' => $leadId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $OtherCostIds = implode(',',$postData['OtherCost']);
                        if($OtherCostIds == '')
                            $OtherCostIds = 0;

                        $delete = $sql->delete();
                        $delete->from('Crm_FinalisationOtherCostTrans')
                            ->where(array('UnitId' =>$postData['unit_no']));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                        $select = $sql->select();
                        $select->from('Crm_UnitTypeOtherCostTrans')
                            ->columns(array('UnitId' => new Expression("'$iUnitId'"), 'Area', 'Rate', 'Amount', 'OtherCostId', 'BookingId' => new Expression("'$bookingId'")))
                            ->where(array('UnitTypeId' => $iUnitTypeId))
                            ->where("OtherCostId IN ($OtherCostIds)");

                        $insert = $sql->insert();
                        $insert->into('Crm_FinalisationOtherCostTrans');
                        $insert->columns(array('UnitId','Area', 'Rate', 'Amount', 'OtherCostId','BookingId'));
                        $insert->Values($select);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $coAppCount = $this->bsf->isNullCheck($postData['coApp_count'], 'number');
                        for ($i = 1; $i <= $coAppCount; $i++) {
                            if ($postData['coApp_name_' . $i] != "") {
                                $coApplicantName = $this->bsf->isNullCheck($postData['coApp_name_' . $i], 'string');

                                $insert = $sql->insert();
                                $insert->into('Crm_CoApplicantTrans');
                                $insert->Values(array('CoApplicantName' => $coApplicantName
                                , 'BookingId' => $bookingId));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                        // other cost
//                        if(is_array($postData['other_cost']) && count($postData['other_cost']) > 0) {
//                            foreach($postData['other_cost'] as $otherCostId) {
//                                $insert = $sql->insert();
//                                $insert->into('Crm_FinalisationOtherCostTrans')
//                                    ->values(array('BookingId' => $bookingId, 'OtherCostId' => $otherCostId));
//                                $stmt = $sql->getSqlStringForSqlObject($insert);
//                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
//                            }
//                        }

                        // check list
                        if(is_array($postData['check_list']) && count($postData['check_list']) > 0) {
                            foreach($postData['check_list'] as $checkListId) {

                                $checkListDate = NULL;
                                if(strtotime($postData['check_list_date_'. $checkListId]) != FALSE) {
                                    $checkListDate = date('Y-m-d', strtotime($postData['check_list_date_'. $checkListId]));
                                }
                                $checkListExeId = $this->bsf->isNullCheck($postData['check_list_executive_id_'. $checkListId], 'number');

                                $insert = $sql->insert();
                                $insert->into('Crm_FinalisationCheckListTrans')
                                    ->values(array('BookingId' => $bookingId, 'CheckListId' => $checkListId,
                                        'SubmittedDate' => $checkListDate, 'ExecutiveId' => $checkListExeId));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        // payment custom schedule
                        $sch_cust_terms = $this->bsf->isNullCheck($postData['sch_cust_terms'], 'number');
                        $sch_cust_receipts = $this->bsf->isNullCheck($postData['sch_cust_receipts'], 'number');
                        if($sch_cust_terms != 0) {
                            // delete
                            $delete = $sql->delete();
                            $delete->from('Crm_PaymentScheduleUnitTrans')
                                ->where(array('BookingId' => $bookingId));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            $delete = $sql->delete();
                            $delete->from('Crm_PaymentScheduleUnitTrans')

                                ->where(array('UnitId' => $iUnitId));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            $delete = $sql->delete();
                            $delete->from('Crm_CustomPaymentScheduleDetails')
                                ->where(array('BookingId' => $bookingId));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            // custom payment schedule details
                            $insert = $sql->insert();
                            $insert->into('Crm_CustomPaymentScheduleDetails')
                                ->values(array('BookingId' => $bookingId, 'Period' => $this->bsf->isNullCheck($postData['sch-period'], 'string')
                                , 'FromMonth' => date('Y-m-d',strtotime('01-'.$postData['sch-from-month']))
                                ,'NoOfTerms' => $this->bsf->isNullCheck($postData['sch-no-terms'], 'number')
                                ,'Day' => $this->bsf->isNullCheck($postData['sch-day'], 'number')));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $iSortId=0;
                            for ($i = 0; $i < $sch_cust_terms; $i++) {
                                $sch_cust_date = $this->bsf->isNullCheck($postData['sch_cust_date_'.$i], 'date');
                                $sch_cust_desc = $this->bsf->isNullCheck($postData['sh_cust_desc_'.$i], 'string');

                                $schAmt = $this->bsf->isNullCheck($postData['CurAmt_'.$i], 'number');
                                $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_'.$i], 'number');
                                $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_'.$i], 'number');

                                if($sch_cust_desc == '' || $schAmt == 0)
                                    continue;
                                $iSortId = $iSortId+1;

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitTrans')
                                    ->values(array(
                                        'BookingId' => $bookingId,
                                        'SchDate' => date('Y-m-d', strtotime($sch_cust_date)),
                                        'TermDescription' => $sch_cust_desc,
                                        'Amount' => $schAmt,
                                        'QualAmount' =>  $schTaxAmt,
                                        'NetAmount' =>  $schNetAmt,
                                        'StageType' => 'C',
                                        'UnitId' => $iUnitId,
                                        'SortId' => $iSortId
                                    ));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();


                                for ($j = 0; $j < $sch_cust_receipts; $j++) {
                                    $receiptTypeId = $this->bsf->isNullCheck($postData['sch_cust_'.$i.'_receipttypeid_'.$j], 'number');
                                    $receiptType = $this->bsf->isNullCheck($postData['sch_cust_'.$i.'_receipttype_'.$j], 'string');

                                    $recAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_CurAmt_' . $j], 'number');
                                    $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TaxAmt_' . $j], 'number');
                                    $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_NetAmt_' . $j], 'number');

                                    if($receiptType == '' || $receiptTypeId == 0 ||$recAmt == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                        ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                            'UnitId' => $iUnitId,
                                            'ReceiptTypeId' => $receiptTypeId,
                                            'ReceiptType' => $receiptType,
                                            'Amount' => $recAmt,
                                            'QualAmount' => $recTaxAmt,
                                            'NetAmount' => $recNetAmt));
                                    $stmt = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_QualRefId_' . $j], 'number');
                                    $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_'.$qualRefId], 'number');

                                    for ($k = 1; $k <= $qualRowId; $k++) {
                                        $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                        $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                        $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                        $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                        $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                        $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                        $dCessPer = 0;
                                        $dEDPer = 0;
                                        $dHEdPer = 0;
                                        $dCessAmt = 0;
                                        $dEDAmt = 0;
                                        $dHEdAmt = 0;
                                        $dKKCessPer=0;
                                        $dSBCessPer=0;
                                        $dKKCessAmt=0;
                                        $dSBCessAmt =0;

                                        if ($iQualTypeId==1) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                            $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                            $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                            $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                            $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else if ($iQualTypeId==2) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                            $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                            $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else {
                                            $dTaxablePer = 100;
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                        }

                                        $insert = $sql->insert();
                                        $insert->into('Crm_PaymentScheduleQualifierTrans');
                                        $insert->Values(array('PSReceiptTypeTransId' => $recTransId,'UnitId' =>$iUnitId,
                                            'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                            'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCessPer,'SBCess'=>$dSBCessPer, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                            'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt, 'NetAmt'=>$dNetAmt));

                                        $statement = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }
                                }

                            }

                            // update unit
                            $update = $sql->update();
                            $update->table('KF_UnitMaster')
                                ->set(array('Status' => 'S'))
                                ->where(array('UnitId' => $iUnitId));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        } else {
                            // payment schedule details
                            $overAllQualAmt=0;
                            $shRowId = $this->bsf->isNullCheck($postData['shRowId'], 'number');
                            $delete = $sql->delete();
                            $delete->from('Crm_PaymentScheduleUnitTrans')
                                ->where(array('UnitId' => $iUnitId));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            for ($i = 1; $i <= $shRowId; $i++) {
                                $schdate = $this->bsf->isNullCheck($postData['schDate_'.$i], 'date');
                                $stageType = $this->bsf->isNullCheck($postData['stageType_'.$i], 'string');
                                $stageId = $this->bsf->isNullCheck($postData['stageId_'.$i], 'number');
                                $schRound = $this->bsf->isNullCheck($postData['schRound_'.$i], 'number');
                                $schAmt = $this->bsf->isNullCheck($postData['CurAmt_'.$i], 'number');
                                $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_'.$i], 'number');
                                $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_'.$i], 'number');
                                $schPer = $this->bsf->isNullCheck(rtrim($postData['shPer_'.$i],'%'), 'number');
                                $schSortId = $this->bsf->isNullCheck($postData['schSortId_'.$i], 'number');

                                $overAllQualAmt =$overAllQualAmt +$schTaxAmt;
//                                if($stageId == 0 || $schAmt == 0)
//                                    continue;

                                // get unit details
                                $UnitBlockId = 0;
                                $UnitFloorId = 0;
                                $selectUnit = $sql->select();
                                $selectUnit->from(array('a' => "KF_UnitMaster"))
                                    ->columns(array('FloorId', 'BlockId'))
                                    ->where("a.UnitId=" . $this->bsf->isNullCheck($postData['unit_no'], 'number'));
                                $statement = $statement = $sql->getSqlStringForSqlObject($selectUnit);
                                $unitMaster = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if ($unitMaster != FALSE) {
                                    $UnitBlockId = $unitMaster['BlockId'];
                                    $UnitFloorId = $unitMaster['FloorId'];
                                }

                                //stagecompletion update
                                $select = $sql->select();
                                $select->from(array('a' => 'KF_StageCompletion'))
                                    ->join(array('d' => 'KF_StageCompletionTrans'), 'a.StageCompletionId=d.StageCompletionId', array(), $select::JOIN_LEFT)
                                    ->columns(array('StagecompletionID'))
                                    ->where(array('a.UnitWise' => '1', 'd.UnitId' => $this->bsf->isNullCheck($iUnitId, 'number'), 'StageId' => $stageId, 'StageType' => $stageType));

                                $select1 = $sql->select();
                                $select1->from('KF_StageCompletion')
                                    ->columns(array('StagecompletionID'))
                                    ->where(array('StageId' => $stageId, 'StageType' => $stageType))
                                    ->where("((BlockId=$UnitBlockId and FloorId=$UnitFloorId) or (BlockId=$UnitBlockId and FloorId=0)) and UnitWise=0");

                                $select1->combine($select, 'Union ALL');

                                $select2 = $sql->select();
                                $select2->from(array("g" => $select1))
                                    ->columns(array("StageCompletionId"));
                                $stmt = $sql->getSqlStringForSqlObject($select2);
                                $stage = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                if ($stage != FALSE && ($stage['StageCompletionId'] != '' || $stage['StageCompletionId'] != 0)) {
                                    $stagecomplete = $stage['StageCompletionId'];
                                } else {
                                    $stagecomplete = 0;
                                }

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitTrans')
                                    ->values(array(
                                        'BookingId' => $bookingId,
                                        'SchDate' => date('Y-m-d', strtotime($schdate)),
                                        'StageId' => $stageId,
                                        'StageType' => $stageType,
                                        'Amount' => $schAmt,
                                        'QualAmount' =>  $schTaxAmt,
                                        'NetAmount' =>  $schNetAmt,
                                        'Percentage' =>  $schPer,
                                        'RoundOff' =>  $schRound,
                                        'UnitId' => $iUnitId,
                                        'SortId'=> $schSortId,
                                        'StageCompletionId' =>  $stagecomplete
                                    ));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                $recRowId = $this->bsf->isNullCheck($postData['refRowId_'.$i], 'number');
                                for ($j = 1; $j <= $recRowId; $j++) {
                                    $recType = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_Type_' . $j], 'string');
                                    $recTypeId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TypeId_' . $j], 'number');
                                    $recAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_CurAmt_' . $j], 'number');
                                    $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TaxAmt_' . $j], 'number');
                                    $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_NetAmt_' . $j], 'number');

                                    if($recType=='' || $recTypeId == 0 || $recAmt == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                        ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                            'UnitId' => $iUnitId,
                                            'ReceiptTypeId' => $recTypeId,
                                            'ReceiptType' => $recType,
                                            'Amount' => $recAmt,
                                            'QualAmount' => $recTaxAmt,
                                            'NetAmount' => $recNetAmt));
                                    $stmt = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_QualRefId_' . $j], 'number');
                                    $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_'.$qualRefId], 'number');

                                    for ($k = 1; $k <= $qualRowId; $k++) {
                                        $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                        $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                        $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                        $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                        $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                        $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                        $dCessPer = 0;
                                        $dEDPer = 0;
                                        $dHEdPer = 0;
                                        $dCessAmt = 0;
                                        $dEDAmt = 0;
                                        $dHEdAmt = 0;
                                        $dKKCessPer=0;
                                        $dSBCessPer=0;
                                        $dKKCessAmt=0;
                                        $dSBCessAmt =0;

                                        if ($iQualTypeId==1) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                            $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                            $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                            $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                            $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else if ($iQualTypeId==2) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                            $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                            $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else {
                                            $dTaxablePer = 100;
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                        }

                                        $insert = $sql->insert();
                                        $insert->into('Crm_PaymentScheduleQualifierTrans');
                                        $insert->Values(array('PSReceiptTypeTransId' => $recTransId,'UnitId' =>$iUnitId,
                                            'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                            'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCessPer,'SBCess'=>$dSBCessPer, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                            'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt, 'NetAmt'=>$dNetAmt));

                                        $statement = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }
                                }
                            }

                            // update unit
                            $update = $sql->update();
                            $update->table('KF_UnitMaster')
                                ->set(array('Status' => 'S'))
                                ->where(array('UnitId' => $iUnitId));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            $arrUnitDetailValues = array('QualifierAmount' => $overAllQualAmt);

                            // update unit detail if discount applied
                            if ($discountType !=""){
                                $arrUnitDetailValues['Discount'] = $arrValues['Discount'];
                                $arrUnitDetailValues['DiscountType'] = $arrValues['DiscountType'];

                                if(isset($arrValues['LumpsumReceiptId'])) {
                                    $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                                }
                            }
                            $update = $sql->update();
                            $update->table('Crm_UnitDetails')
                                ->set($arrUnitDetailValues)
                                ->where(array('UnitId' => $iUnitId));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                        $connection->commit();

                        $select = $sql->select();
                        $select->from( array( 'a' => 'BP_BuyerLoginDetails' ) )
                            ->columns(array('LoginId'))
                            ->where( array( 'a.LeadId' => $leadId,'a.DeleteFlag'=>0));
                        $stmt = $sql->getSqlStringForSqlObject( $select );
                        $checkBuyer = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                        $sm = $this->getServiceLocator();
                        $config = $sm->get('application')->getConfig();

                        $select = $sql->select();
                        $select->from( array('a' => 'Crm_UnitBooking'))
                            ->join(array("b"=>"Crm_Leads"),"a.LeadId=b.LeadId",array('LeadName','Email','Mobile'),$select::JOIN_LEFT)
                            ->join(array("d"=>"KF_UnitMaster"),"d.UnitId=a.UnitId",array("UnitNo"),$select::JOIN_LEFT)
                            ->join(array("c"=>"Proj_ProjectMaster"),"d.ProjectId=c.ProjectId",array("ProjectName"),$select::JOIN_LEFT)
                            ->join(array("e"=>"Crm_UnitDetails"),"a.UnitId=e.UnitId",array('*'),$select::JOIN_LEFT)
                            ->join(array("f"=>"KF_BLockMaster"),"d.BlockId=f.BlockId",array("BlockName"),$select::JOIN_LEFT)
                            ->join(array("g"=>"KF_FloorMaster"),"g.FloorId=d.FloorId",array("FloorName"),$select::JOIN_LEFT)
                            ->join(array("h"=>"KF_UnitTypeMaster"),"h.UnitTypeId=d.UnitTypeId",array("UnitTypeName"),$select::JOIN_LEFT)
                            ->join(array("i"=>"Crm_LeadAddress"),new expression("a.LeadId=i.LeadId and i.AddressType='P'"),array("Address1","PanNo"),$select::JOIN_LEFT)
                            ->join(array("k"=>"Crm_LeadAddress"),new expression("a.LeadId=k.LeadId and k.AddressType='COA'"),array("Address2"=>"Address1","Pan2"=>"PanNo"),$select::JOIN_LEFT)
                            ->join(array("l"=>"Crm_CarParkMaster"),new expression("d.ProjectId=l.ProjectId and d.BlockId=l.BlockId"),array("FacilityName"),$select::JOIN_LEFT)
                            ->join(array("m"=>"Crm_CarParkTypeMaster"),new expression("l.TypeId=m.TypeId "),array("TypeName"),$select::JOIN_LEFT)
                            ->join(array("j"=>"Crm_LeadCoApplicantInfo"),new expression("a.LeadId=j.LeadId"),array("CoApplicantName"),$select::JOIN_LEFT)
                            ->where(array("a.BookingId"=>$bookingId));
                     $stmt = $sql->getSqlStringForSqlObject($select);
                        $bookingform = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->current();
                       // Print_r($bookingform['Email']);die;
                        $sm = $this->getServiceLocator();
                        $config = $sm->get('application')->getConfig();
                        if($bookingform['Email']!='') {
                   //Print_r($bookingform['Email']);die;
                            $mailData = array(
                                array(
                                    'name' => 'LEADNAME',
                                    'content' => $bookingform['LeadName']
                                ),
                                array(
                                    'name' => 'UNITNO',
                                    'content' => $bookingform['UnitNo']
                                ),
                                array(
                                    'name' => 'SQRFEET',
                                    'content' => $bookingform['Area']
                                ),
                                array(
                                    'name' => 'PROJECTNAME',
                                    'content' =>$bookingform['ProjectName']
                                ),
                                 array(
                                     'name' => 'UNITTYPE',
                                     'content' => $bookingform['UnitTypeName']
                                 ),
                                array(
                                    'name' => 'UNITTYPE',
                                    'content' => $bookingform['UnitTypeName']
                                ),
                                array(
                                    'name' => 'BLOCKNAME',
                                    'content' =>$bookingform['BlockName']
                                ),
                                array(
                                    'name' => 'FLOORNAME',
                                    'content' =>$bookingform['FloorName']
                                ),
                                     array(
                                         'name' => 'DISCOUNTTYPE',
                                         'content' =>$bookingform['DiscountType']
                                     ),
                                array(
                                    'name' => 'DISCOUNTTYPE',
                                    'content' =>$bookingform['DiscountType']
                                ),
                                array(
                                    'name' => 'DISCOUNT',
                                    'content' =>$bookingform['Discount']
                                ),
                                array(
                                    'name' => 'NETAMOUNT',
                                    'content' =>$bookingform['NetAmount']
                                ),

                                array(
                                    'name' => 'ADVANCEAMOUNT',
                                    'content' =>$bookingform['AdvAmount']
                                ),
                                array(
                                    'name' => 'RATE',
                                    'content' =>$bookingform['Rate']
                                ),
                                array(
                                    'name' => 'LEADMOBILENUMBER',
                                    'content' =>$bookingform['Mobile']
                                ),
                                array(
                                    'name' => 'MAILID',
                                    'content' =>$bookingform['Email']
                                ),
                                array(
                                    'name' => 'ADDRESS',
                                    'content' =>$bookingform['Address1']
                                ),
                                array(
                                    'name' => 'PANNO',
                                    'content' =>$bookingform['Rate']
                                ),
                                array(
                                    'name' => 'CO-APPLICANTNAME',
                                    'content' =>$bookingform['CoApplicantName']
                                ),
                                array(
                                    'name' => 'CAR-PARK-TYPE-NAME',
                                    'content' =>$bookingform['TypeName']
                                ),
                                array(
                                    'name' => 'CAR-PARK-NAME',
                                    'content' =>$bookingform['FacilityName']
                                ),
                                array(
                                    'name' => 'COAPP-PANNO',
                                    'content' =>$bookingform['Pan2']
                                ),
                                array(
                                    'name' => 'COAPP-ADDRESS',
                                    'content' =>$bookingform['Address2']
                                ),
                                array(
                                    'name' => 'DATEOFBOOKING',
                                    'content' =>$bookingform['BookingDate']
                                )

                            );


                            $viewRenderer->MandrilSendMail()->sendMailTo($bookingform['Email'], $config['general']['mandrilEmail'], 'UnitBookingDetails', 'Crm_BookingForm', $mailData);

                        }
                        if(count($checkBuyer)==0) {
                            $select = $sql->select();
                            $select->from(array('a'=>'Crm_Leads'))
                                ->columns(array('Email','LeadName'))
                                ->where(array('a.LeadId' => $leadId));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $lead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            $userName=strtoupper(str_replace(' ','',$lead['LeadName'])).$leadId;
                            $password=$this->bsf->generateRandomString(7);

                            if($password==" ") {
                                $encryptPassword = $password;
                            } else {
                                $encryptPassword = $this->bsf->isNullCheck(CommonHelper::encodeString($password),'string');
                            }

                            $insert = $sql->insert();
                            $insert->into('BP_BuyerLoginDetails')
                                ->values(array('LeadId' => $leadId,
                                    'UserName' => $userName,
                                    'Password' => $encryptPassword,
                                    'CreatedDate' => date('Y-m-d H:i:s')));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                            if($lead['Email']!='') {

                                $mailData = array(
                                    array(
                                        'name' => 'LEADNAME',
                                        'content' => $lead['LeadName']
                                    ),
                                    array(
                                        'name' => 'USERNAME',
                                        'content' => $userName
                                    ),
                                    array(
                                        'name' => 'PASSWORD',
                                        'content' => $password
                                    )
                                );

                                $viewRenderer->MandrilSendMail()->sendMailTo($lead['Email'], $config['general']['mandrilEmail'], 'Login Details', 'Bp_LoginDetail', $mailData);

                            }

                        }






                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Finalization-Add','N','Finalization',$bookingId,0, 0, 'CRM','',$userId, 0 ,0);
                        if($postData['receipt_yes_no']==1 && $postData['checkreceipt']=='A') {
                            $this->redirect()->toRoute('crm/receipt', array('controller' => 'bill', 'action' => 'receipt',"mode"=>"final","id"=>$this->bsf->isNullCheck($iUnitId, 'number'),"aAmount"=>$this->bsf->isNullCheck($postData['adv_amount'], 'number')));
                        } else {
                            $this->redirect()->toRoute('crm/unit-fulldetails', array('controller' => 'project', 'action' => 'unit-fulldetails',"UnitDetailId"=>$this->bsf->isNullCheck($iUnitId, 'number')));
                        }
                    } catch(\Exception $ex) {
                        $this->_view->err = $ex->getMessage();
                        echo $ex->getMessage(); die;
                    }
                }
                else { // edit post
                    try {
                        $connection->beginTransaction();
                        $bookingId = $this->bsf->isNullCheck($postData['booking_id'], 'number');
                        if($bookingId <= 0) {
                            throw new \Exception('Invalid Unit!');
                        }

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitBooking'))
                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitTypeId', 'UnitArea'), $select::JOIN_LEFT)
                            ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                            ->where(array('a.BookingId' => $bookingId, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if(empty($unitBooking)) {
                            throw new \Exception('Unit booking not found!');
                        }

                        if($unitBooking['Approve'] == 'S') {
                            throw new \Exception('Unit Approved!');
                        }

                        $BookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                        $BookingDate = str_replace('/', '-', $BookingDate);
                        if(strtotime($BookingDate) == FALSE) {
                            $BookingDate = date('Y-m-d');
                        } else {
                            $BookingDate = date('Y-m-d', strtotime($BookingDate));
                        }

                        $arrValues = array(
                            'BookingNo' => $this->bsf->isNullCheck($postData['booking_no'], 'string'),
                            'BookingDate' => $BookingDate,
                            'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                            'BookingName' => $this->bsf->isNullCheck($postData['registration_name'], 'string'),
                            'PostExecutiveId' => $this->bsf->isNullCheck($postData['post_executive_id'], 'number'),
                            'AdvAmount' => $this->bsf->isNullCheck($postData['adv_amount'], 'number'),
                            'ModifiedDate' => date('Y-m-d H:i:s'),
                            'PaymentScheduleId' => $this->bsf->isNullCheck($postData['payment_schedule'], 'number')
                        );

                        // Loan
                        if($postData['loan_yes_no'] == 'loan_yes') {
                            $arrValues['PaymentOption'] = 'L';
                            if($postData['loan_approved_yes_no'] == 'loan_approved_yes') {
                                $arrValues['LoanApproval'] = 1;
                                $arrValues['LoanProposalNo'] = $this->bsf->isNullCheck($postData['proposal_no'], 'string');
                                $arrValues['BankName'] = $this->bsf->isNullCheck($postData['bank_name'], 'string');
                                $arrValues['LoanAmt'] = $this->bsf->isNullCheck($postData['loan_amount'], 'number');
                                $arrValues['SanctionDate'] = date('Y-m-d', strtotime($postData['sanction_date']));
                            } else {
                                $arrValues['LoanApproval'] = 0;
                                $arrValues['LoanProposalNo'] = '';
                                $arrValues['BankName'] = '';
                                $arrValues['LoanAmt'] = 0;
                                $arrValues['SanctionDate'] = NULL;
                            }
                        } else {
                            $arrValues['PaymentOption'] = 'O';
                            $arrValues['LoanApproval'] = 0;
                            $arrValues['LoanProposalNo'] = '';
                            $arrValues['BankName'] = '';
                            $arrValues['LoanAmt'] = 0;
                            $arrValues['SanctionDate'] = NULL;
                        }
                        // unit details
//                        $select = $sql->select();
//                        $select->from(array('a' => 'KF_UnitMaster'))
//                            ->join(array('b' => 'Crm_UnitDetails'), 'a.UnitId = b.UnitId', array('*'), $select::JOIN_LEFT)
//                            ->where(array('a.UnitId' => $unitBooking['UnitId'], 'a.DeleteFlag' => 0));
//                        $stmt = $sql->getSqlStringForSqlObject($select);
//                        $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

//                        $select = $sql->select();
//                        $select->from(array('a' => 'KF_UnitMaster'))
//                            ->columns(array('UnitId'))
//                            ->join(array('b' => 'Crm_UnitTypeOtherCostTrans'), 'b.UnitTypeId=a.UnitTypeId', array('Amount' => new expression('SUM(Amount)')), $select::JOIN_LEFT)
//                            ->where(array('a.UnitId' => $postData['unit_no'], 'a.DeleteFlag' => 0))
//                            ->group(array('b.Amount', 'a.UnitId'));
//                        $stmt = $sql->getSqlStringForSqlObject($select);
//                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        // Receipt Type
                        $select = $sql->select();
                        $select->from('Crm_ReceiptTypeMaster');
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        $arrAllReceiptTypes = array();
                        foreach($arrResults as $result) {
                            $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                        }

                        // Discount

                        $discountBased = $this->bsf->isNullCheck($postData['discount_based'], 'string');
                        if($discountBased == "R"){
                            $discountBased ="N";
                        }
                        $referalType = $this->bsf->isNullCheck($postData['referalType'], 'string');
                        $referalTypeId=0;
                        if($referalType == 'B') {
                            $referalTypeId = $this->bsf->isNullCheck($postData['buyerName'], 'number');
                        } else if($referalType == 'E') {
                            $referalTypeId = $this->bsf->isNullCheck($postData['employeeName'], 'number');
                        }
                        $planList = $this->bsf->isNullCheck($postData['plan_list'], 'number');
                        $arrValues['DiscountBased']=$discountBased;
                        $arrValues['PlanId']=$planList;
                        $arrValues['ReferalType'] = $referalType;
                        $arrValues['ReferalTypeId'] = $referalTypeId;

                        $arrValues['BaseAmount'] =  $this->bsf->isNullCheck($postData['bookBaseAmt'],'number');
                        $arrValues['LandAmount'] =  $this->bsf->isNullCheck($postData['bookLandAmt'],'number');
                        $arrValues['ConstructionAmount'] =  $this->bsf->isNullCheck($postData['bookConstructionAmt'],'number');
                        $arrValues['OtherCostAmount'] =  $this->bsf->isNullCheck($postData['bookOthercostAmt'],'number');
                        $arrValues['QualifierAmount'] =  $this->bsf->isNullCheck($postData['bookqualAmt'],'number');
                        $arrValues['NetAmount'] =  $this->bsf->isNullCheck($postData['booknetAmt'],'number');

                        $arrValues['DiscountType'] = '';
                        $arrValues['Discount'] = 0;
                        $arrValues['LumpsumReceiptId'] = 0;
                        $discountType = $this->bsf->isNullCheck($postData['discount_type'], 'string');
                        if ($discountType !=""){
                            $arrValues['DiscountType'] = $discountType;
                            $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                            $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                        }


//                        if ($unitamt['Amount'] > 0) {
//
//                            $netAmt = $unitDetail['NetAmt'] + $unitamt['Amount'];
//                        }
//                        else{
//                            $netAmt = $unitDetail['NetAmt'];
//                        }
//
//                        $landAmt = $unitDetail['LandAmount'];
//                        $constructionAmt = $unitDetail['ConstructionAmount'];
//                        $arrValues['DiscountType'] = '';
//                        $arrValues['Discount'] = 0;
//                        $arrValues['LumpsumReceiptId'] = 0;


//                        if(!is_null($discountType)) {
//                            $arrValues['DiscountType'] = $discountType;
//
//                            $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
//                            if($discountType == 'L' ) {
//                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
//
//                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
//                                    $constructionAmt -= $arrValues['Discount'];
//                                    $netAmt -= $arrValues['Discount'];
//
//                                } elseif($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
//                                    $landAmt -= $arrValues['Discount'];
//                                    $netAmt -= $arrValues['Discount'];
//
//                                } else {
//                                    $netAmt -= $arrValues['Discount'];
//                                    $constructionAmt =$netAmt-$landAmt;
//                                }
//                            } else if($discountType == 'R') {
//                                $netAmt =$unitDetail['Rate']- $arrValues['Discount'];
//                                $netAmt= $netAmt * $unitDetail['UnitArea'];
//                                $constructionAmt =$netAmt-$landAmt;
//                            } else if($discountType == 'P') {
//                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
//                                $dis =$netAmt*($arrValues['Discount']/100);
//
//                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
//                                    $dis =$constructionAmt*($arrValues['Discount']/100);
//                                    $constructionAmt -= $dis;
//                                    $netAmt -= $dis;
//
//                                } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
//                                    $dis =$landAmt*($arrValues['Discount']/100);
//                                    $landAmt -= $dis;
//                                    $netAmt -= $dis;
//                                } else {
//                                    $netAmt -= $dis;
//                                    $constructionAmt =$netAmt-$landAmt;
//                                }
//                            }
//                        }

                        $update = $sql->update();
                        $update->table('Crm_UnitBooking')
                            ->set($arrValues)
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Crm_CoApplicantTrans')
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $coAppCount = $this->bsf->isNullCheck($postData['coApp_count'], 'number');
                        for ($i = 1; $i <= $coAppCount; $i++) {
                            if ($postData['coApp_name_' . $i] != "") {
                                $coApplicantName = $this->bsf->isNullCheck($postData['coApp_name_' . $i], 'string');

                                $insert = $sql->insert();
                                $insert->into('Crm_CoApplicantTrans');
                                $insert->Values(array('CoApplicantName' => $coApplicantName
                                , 'BookingId' => $bookingId));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        // other cost
                        // delete
                        $delete = $sql->delete();
                        $delete->from('Crm_FinalisationOtherCostTrans')
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        if(is_array($postData['other_cost']) && count($postData['other_cost']) > 0) {
                            foreach($postData['other_cost'] as $otherCostId) {
                                $insert = $sql->insert();
                                $insert->into('Crm_FinalisationOtherCostTrans')
                                    ->values(array('BookingId' => $bookingId, 'OtherCostId' => $otherCostId));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        // check list
                        // delete
                        $delete = $sql->delete();
                        $delete->from('Crm_FinalisationCheckListTrans')
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        if(is_array($postData['check_list']) && count($postData['check_list']) > 0) {
                            foreach($postData['check_list'] as $checkListId) {

                                $checkListDate = NULL;
                                if(strtotime($postData['check_list_date_'. $checkListId]) != FALSE) {
                                    $checkListDate = date('Y-m-d', strtotime($postData['check_list_date_'. $checkListId]));
                                }
                                $checkListExeId = $this->bsf->isNullCheck($postData['check_list_executive_id_'. $checkListId], 'number');

                                $insert = $sql->insert();
                                $insert->into('Crm_FinalisationCheckListTrans')
                                    ->values(array('BookingId' => $bookingId, 'CheckListId' => $checkListId,
                                        'SubmittedDate' => $checkListDate, 'ExecutiveId' => $checkListExeId));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        // payment custom schedule
                        $sch_cust_terms = $this->bsf->isNullCheck($postData['sch_cust_terms'], 'number');
                        $sch_cust_receipts = $this->bsf->isNullCheck($postData['sch_cust_receipts'], 'number');
                        if($sch_cust_terms != 0) {
                            // delete
                            $delete = $sql->delete();
                            $delete->from('Crm_PaymentScheduleUnitTrans')
                                ->where(array('BookingId' => $bookingId));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            $delete = $sql->delete();
                            $delete->from('Crm_CustomPaymentScheduleDetails')
                                ->where(array('BookingId' => $bookingId));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            // custom payment schedule details
                            $insert = $sql->insert();
                            $insert->into('Crm_CustomPaymentScheduleDetails')
                                ->values(array('BookingId' => $bookingId, 'Period' => $this->bsf->isNullCheck($postData['sch-period'], 'string')
                                , 'FromMonth' => date('Y-m-d',strtotime('01-'.$postData['sch-from-month']))
                                ,'NoOfTerms' => $this->bsf->isNullCheck($postData['sch-no-terms'], 'number')
                                ,'Day' => $this->bsf->isNullCheck($postData['sch-day'], 'number')));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $iSortId=0;
                            for ($i = 0; $i < $sch_cust_terms; $i++) {
                                $sch_cust_date = $this->bsf->isNullCheck($postData['sch_cust_date_'.$i], 'date');
                                $sch_cust_desc = $this->bsf->isNullCheck($postData['sh_cust_desc_'.$i], 'string');

                                $schAmt = $this->bsf->isNullCheck($postData['CurAmt_'.$i], 'number');
                                $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_'.$i], 'number');
                                $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_'.$i], 'number');

                                if($sch_cust_desc == '' || $schAmt == 0)
                                    continue;
                                $iSortId = $iSortId+1;

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitTrans')
                                    ->values(array(
                                        'BookingId' => $bookingId,
                                        'SchDate' => date('Y-m-d', strtotime($sch_cust_date)),
                                        'TermDescription' => $sch_cust_desc,
                                        'Amount' => $schAmt,
                                        'QualAmount' =>  $schTaxAmt,
                                        'NetAmount' =>  $schNetAmt,
                                        'StageType' => 'C',
                                        'UnitId' => $unitBooking['UnitId'],
                                        'SortId' => $iSortId
                                    ));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                for ($j = 0; $j < $sch_cust_receipts; $j++) {
                                    $receiptTypeId = $this->bsf->isNullCheck($postData['sch_cust_'.$i.'_receipttypeid_'.$j], 'number');
                                    $receiptType = $this->bsf->isNullCheck($postData['sch_cust_'.$i.'_receipttype_'.$j], 'string');

                                    $recAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_CurAmt_' . $j], 'number');
                                    $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TaxAmt_' . $j], 'number');
                                    $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_NetAmt_' . $j], 'number');

                                    if($receiptType == '' || $receiptTypeId == 0 ||$recAmt == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                        ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                            'UnitId' => $unitBooking['UnitId'],
                                            'ReceiptTypeId' => $receiptTypeId,
                                            'ReceiptType' => $receiptType,
                                            'Amount' => $recAmt,
                                            'QualAmount' => $recTaxAmt,
                                            'NetAmount' => $recNetAmt));
                                    $stmt = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_QualRefId_' . $j], 'number');
                                    $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_'.$qualRefId], 'number');

                                    for ($k = 1; $k <= $qualRowId; $k++) {
                                        $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                        $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                        $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                        $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                        $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                        $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                        $dCessPer = 0;
                                        $dEDPer = 0;
                                        $dHEdPer = 0;
                                        $dCessAmt = 0;
                                        $dEDAmt = 0;
                                        $dHEdAmt = 0;
                                        $dKKCessPer=0;
                                        $dSBCessPer=0;
                                        $dKKCessAmt=0;
                                        $dSBCessAmt =0;

                                        if ($iQualTypeId==1) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                            $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                            $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                            $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                            $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else if ($iQualTypeId==2) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                            $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                            $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else {
                                            $dTaxablePer = 100;
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                        }

                                        $insert = $sql->insert();
                                        $insert->into('Crm_PaymentScheduleQualifierTrans');
                                        $insert->Values(array('PSReceiptTypeTransId' => $recTransId,'UnitId' =>$unitBooking['UnitId'],
                                            'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                            'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCessPer,'SBCess'=>$dSBCessPer, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                            'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt, 'NetAmt'=>$dNetAmt));

                                        $statement = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }
                                }
                            }
                        }
                        else {
                            // payment schedule details
                            $overAllQualAmt=0;
                            $shRowId = $this->bsf->isNullCheck($postData['shRowId'], 'number');
                            $delete = $sql->delete();
                            $delete->from('Crm_PaymentScheduleUnitTrans')
                                ->where(array('UnitId' => $unitBooking['UnitId']));
                            $stmt = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            for ($i = 1; $i <= $shRowId; $i++) {
                                $schdate = $this->bsf->isNullCheck($postData['schDate_'.$i], 'date');
                                $stageType = $this->bsf->isNullCheck($postData['stageType_'.$i], 'string');
                                $stageId = $this->bsf->isNullCheck($postData['stageId_'.$i], 'number');
                                $schRound = $this->bsf->isNullCheck($postData['schRound_'.$i], 'number');
                                $schAmt = $this->bsf->isNullCheck($postData['CurAmt_'.$i], 'number');
                                $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_'.$i], 'number');
                                $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_'.$i], 'number');
                                $schPer = $this->bsf->isNullCheck(rtrim($postData['shPer_'.$i],'%'), 'number');
                                $schSortId = $this->bsf->isNullCheck($postData['schSortId_'.$i], 'number');

                                $overAllQualAmt =$overAllQualAmt +$schTaxAmt;
                                if($stageId == 0 || $schAmt == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitTrans')
                                    ->values(array(
                                        'BookingId' => $bookingId,
                                        'SchDate' => date('Y-m-d', strtotime($schdate)),
                                        'StageId' => $stageId,
                                        'StageType' => $stageType,
                                        'Amount' => $schAmt,
                                        'QualAmount' =>  $schTaxAmt,
                                        'NetAmount' =>  $schNetAmt,
                                        'Percentage' =>  $schPer,
                                        'RoundOff' =>  $schRound,
                                        'UnitId' => $unitBooking['UnitId'],
                                        'SortId'=> $schSortId
                                    ));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                $recRowId = $this->bsf->isNullCheck($postData['refRowId_'.$i], 'number');
                                for ($j = 1; $j <= $recRowId; $j++) {
                                    $recType = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_Type_' . $j], 'string');
                                    $recTypeId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TypeId_' . $j], 'number');
                                    $recAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_CurAmt_' . $j], 'number');
                                    $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TaxAmt_' . $j], 'number');
                                    $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_NetAmt_' . $j], 'number');

                                    if($recType=='' || $recTypeId == 0 || $recAmt == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                        ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                            'UnitId' => $unitBooking['UnitId'],
                                            'ReceiptTypeId' => $recTypeId,
                                            'ReceiptType' => $recType,
                                            'Amount' => $recAmt,
                                            'QualAmount' => $recTaxAmt,
                                            'NetAmount' => $recNetAmt));
                                    $stmt = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_QualRefId_' . $j], 'number');
                                    $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_'.$qualRefId], 'number');

                                    for ($k = 1; $k <= $qualRowId; $k++) {
                                        $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                        $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                        $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                        $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                        $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                        $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                        $dCessPer = 0;
                                        $dEDPer = 0;
                                        $dHEdPer = 0;
                                        $dCessAmt = 0;
                                        $dEDAmt = 0;
                                        $dHEdAmt = 0;
                                        $dKKCessPer=0;
                                        $dSBCessPer=0;
                                        $dKKCessAmt=0;
                                        $dSBCessAmt =0;

                                        if ($iQualTypeId==1) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                            $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                            $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                            $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                            $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else if ($iQualTypeId==2) {
                                            $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                            $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                            $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                            $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                            $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                        } else {
                                            $dTaxablePer = 100;
                                            $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                            $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                            $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                            $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                        }

                                        $insert = $sql->insert();
                                        $insert->into('Crm_PaymentScheduleQualifierTrans');
                                        $insert->Values(array('PSReceiptTypeTransId' => $recTransId,'UnitId' =>$unitBooking['UnitId'],
                                            'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                            'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCessPer,'SBCess'=>$dSBCessPer, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                            'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt, 'NetAmt'=>$dNetAmt));

                                        $statement = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }
                                }
                            }

                            // update unit
                            $update = $sql->update();
                            $update->table('KF_UnitMaster')
                                ->set(array('Status' => 'S'))
                                ->where(array('UnitId' => $unitBooking['UnitId']));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            $arrUnitDetailValues = array('QualifierAmount' => $overAllQualAmt);

                            // update unit detail if discount applied
                            if(!is_null($discountType)) {

                                $arrUnitDetailValues['Discount'] = $arrValues['Discount'];
                                $arrUnitDetailValues['DiscountType'] = $arrValues['DiscountType'];

                                if(isset($arrValues['LumpsumReceiptId'])) {
                                    $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                                }
                            }
                            $update = $sql->update();
                            $update->table('Crm_UnitDetails')
                                ->set($arrUnitDetailValues)
                                ->where(array('UnitId' => $unitBooking['UnitId']));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Finalization-Modify','E','Finalization',$bookingId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);
                        $FeedId = $this->params()->fromQuery('FeedId');
                        $AskId = $this->params()->fromQuery('AskId');
                        if(isset($FeedId) && $FeedId!="") {
                            $this->redirect()->toRoute('crm/unit-fulldetails', array('controller' => 'project', 'action' => 'unit-fulldetails',"UnitDetailId"=>$unitBooking['UnitId']), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                        } else {
                            $this->redirect()->toRoute('crm/unit-fulldetails', array('controller' => 'project', 'action' => 'unit-fulldetails',"UnitDetailId"=>$unitBooking['UnitId']));
                        }
                    }
                    catch(PDOException $e){
                        $connection->rollback();
                    }
                }

            } else { // GET request
                try {
                    $mode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'), 'string');
                    $this->_view->mode = $mode;
                    if($mode == 'add') {
                        $leadId = $this->params()->fromRoute('leadId');
                        if(!is_numeric($leadId)) {
                            throw new \Exception('Invalid Lead-id!');
                        }
                        $this->_view->leadId = $leadId;

                        $CallTypeId = $this->bsf->isNullCheck($this->params()->fromRoute('CallTypeId'), 'number');
                        if($CallTypeId != 0) {
                            $this->_view->CallTypeId = $CallTypeId;
                        }

                        $bookingDate = $this->params()->fromRoute('Date');
                        if(strtotime($bookingDate) != FALSE) {
                            $this->_view->BookingDate = date('d-m-Y', strtotime($bookingDate));
                        }
                        // CoApp
                        $select = $sql->select();
                        $select->from('Crm_LeadCoApplicantInfo')
                            ->columns(array('CoAppId', 'CoApplicantName'))
                            ->where(array('DeleteFlag' => 0,'LeadId'=>$leadId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $this->_view->dCoApp = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    } else if ($mode == 'edit') {
                        try {
                            $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                            $bookingId = $this->params()->fromRoute('leadId');
                            if(!is_numeric($bookingId)) {
                                throw new \Exception('Invalid Booking-id!');
                            }

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_UnitBooking'))
                                ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo'), $select::JOIN_LEFT)
                                ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                                ->join(array('d' => 'Crm_BrokerMaster'), 'd.BrokerId=a.BrokerId', array('BrokerName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'WF_Users'), 'e.UserId=a.PostExecutiveId', array('ExecutiveName' => 'EmployeeName'), $select::JOIN_LEFT)
                                ->where(array('a.BookingId' => $bookingId, 'a.DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            if(empty($unitBooking)) {
                                throw new \Exception('Unit booking not found!');
                            }

                            if($unitBooking['Approve'] == 'Y') {
                                throw new \Exception('This Unit is already approved so not able to Edit!');
                            }
                            $this->_view->unitBooking = $unitBooking;

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_LeadFollowup'))
                                ->join(array('b' => 'Crm_NatureMaster'), 'a.NatureId=b.NatureId', array('NatureName' => 'Description'), $select::JOIN_LEFT)
                                ->columns(array('NextCallDate' => new Expression("a.NextCallDate"), "NextFollowupRemarks", "Remarks", "NextFollowUpTypeId", "NatureId", "PickUpTime", "PickUpAddress"))
                                ->where(array('UnitId' => $unitBooking['UnitId']));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $leadFollowUp = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            if($leadFollowUp != FALSE)
                                $this->_view->leadFollowUp = $leadFollowUp;

                            $select = $sql->select();
                            $select->from('Crm_CoApplicantTrans')
                                ->columns(array('CoApplicantName'))
                                ->where(array('BookingId' => $bookingId));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $this->_view->coAppDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            $select = $sql->select();
                            $select->from('Crm_PlanBasedDiscount')
                                ->columns(array('*'))
                                ->where(array("DeleteFlag"=>0));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $this->_view->planList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            //payment schedules
                            $select = $sql->select();
                            $select->from('Crm_PaymentSchedule')
                                ->where(array('ProjectId' => $unitBooking['ProjectId'], 'DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $this->_view->arrPaymentSchedules = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            // other costs
                            $subQuery = $sql->select();
                            $subQuery->from("Crm_FinalisationOtherCostTrans")
                                ->columns(array('OtherCostId'))
                                ->where(array( "BookingId" => $bookingId));

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_ProjectOtherCostTrans'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_LEFT)
                                ->columns(array('OtherCostId'))
                                ->where(array('a.ProjectId' => $unitBooking['ProjectId']));
                            $select->where->expression('a.OtherCostId NOT IN ?', array($subQuery));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $this->_view->arrNonSelectedOtherCosts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_ProjectOtherCostTrans'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_LEFT)
                                ->columns(array('OtherCostId'))
                                ->where(array('a.ProjectId' => $unitBooking['ProjectId']));
                            $select->where->expression('a.OtherCostId IN ?', array($subQuery));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $this->_view->arrSelectedOtherCosts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            // Brokers
                            $select = $sql->select();
                            $select->from('Crm_BrokerMaster')
                                ->columns(array('data' => 'BrokerId', 'value' => 'BrokerName'))
                                ->where(array('DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $this->_view->arrBrokers = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            // check list
                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_CheckListProjectTrans'))
                                ->join(array('b' => 'Crm_CheckListMaster'), 'b.CheckListId=a.CheckListId', array('CheckListName'), $select::JOIN_LEFT)
                                ->where(array('a.ProjectId' => $unitBooking['ProjectId'], 'a.DeleteFlag' => 0, 'a.CheckListTypeId' => 1));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $arrCheckList = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_FinalisationCheckListTrans'))
                                ->join(array('b' => 'WF_Users'), 'b.UserId=a.ExecutiveId', array('ExecutiveName' => 'EmployeeName'), $select::JOIN_LEFT)
                                ->where(array('BookingId' => $bookingId));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $arrSelectedCheckLists = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                            foreach($arrCheckList as &$checkList) {
                                $isFound = FALSE;
                                foreach($arrSelectedCheckLists as $selCheckList) {
                                    if($checkList['CheckListId'] == $selCheckList['CheckListId']) {
                                        $isFound = TRUE;
                                        $submittedDate = '';
                                        if(strtotime($selCheckList['SubmittedDate']) != FALSE) {
                                            $submittedDate = date('d-m-Y', strtotime($selCheckList['SubmittedDate']));
                                        }
                                        $checkList['Checked'] = 'Checked';
                                        $checkList['SubmittedDate'] = $submittedDate;
                                        $checkList['ExecutiveName'] = $selCheckList['ExecutiveName'];
                                        $checkList['ExecutiveId'] = $selCheckList['ExecutiveId'];
                                        break;
                                    }
                                }
                                if(!$isFound) {
                                    $checkList['Checked'] = '';
                                }
                            }
                            $this->_view->arrCheckList = $arrCheckList;

                            // Receipt Type
                            $select = $sql->select();
                            $select->from('Crm_ReceiptTypeMaster')
                                ->where(array('ReceiptType'=>'S'));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                            $this->_view->arrReceiptTypes = $arrResults;
                            $arrAllReceiptTypes = array();
                            foreach($arrResults as $result) {
                                $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                            }

                            // current payment schedule detail
                            $select1 = $sql->select();
                            $select1->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                                ->where(array('a.StageType' => 'S', 'BookingId' => $bookingId));

                            $select2 = $sql->select();
                            $select2->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                                ->where(array('a.StageType' => 'D', 'BookingId' => $bookingId));
                            $select2->combine($select1,'Union ALL');

                            $select3 = $sql->select();
                            $select3->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                                ->where(array('a.StageType' => 'O', 'BookingId' => $bookingId));
                            $select3->combine($select2,'Union ALL');

                            $select4 = $sql->select();
                            $select4->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                                ->where(array('a.StageType' => 'A', 'BookingId' => $bookingId));
                            $select4->combine($select3,'Union ALL');

                            $select5 = $sql->select();
                            $select5->from(array("g"=>$select4))
                                ->columns(array('*'))
                                ->where(array('BookingId' => $bookingId))
                                ->order("g.SortId ASC");
                            $stmt = $sql->getSqlStringForSqlObject($select5);
                            $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            if(!empty($arrPaymentScheduleDetails)) {
                                foreach($arrPaymentScheduleDetails as &$paymentSchedule) {
                                    // receipt type
                                    $select1 = $sql->select();
                                    $select1->from( array( 'a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans' ) )
                                        ->join( array( 'b' => 'Crm_ReceiptTypeMaster' ), 'a.ReceiptTypeId = b.ReceiptTypeId', array( 'ReceiptName' => 'ReceiptTypeName' ), $select1::JOIN_LEFT )
                                        ->where( array('a.PaymentScheduleUnitTransId' => $paymentSchedule[ 'PaymentScheduleUnitTransId' ] ) )
                                        ->where("a.ReceiptType IN ('C','L')");

                                    $select2 = $sql->select();
                                    $select2->from( array( 'a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans' ) )
                                        ->join( array( 'b' => 'Crm_DescriptionMaster' ), 'a.ReceiptTypeId = b.DescriptionId', array( 'ReceiptName' => 'DescriptionName' ), $select2::JOIN_LEFT )
                                        ->where( array( 'a.ReceiptType' => 'D', 'a.PaymentScheduleUnitTransId' => $paymentSchedule[ 'PaymentScheduleUnitTransId' ]) );
                                    $select2->combine( $select1, 'Union ALL' );

                                    $select3 = $sql->select();
                                    $select3->from( array( 'a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans' ) )
                                        ->join( array( 'b' => 'Crm_OtherCostMaster' ), 'a.ReceiptTypeId = b.OtherCostId', array( 'ReceiptName' => 'OtherCostName' ), $select3::JOIN_LEFT )
                                        ->where( array( 'a.ReceiptType' => 'O', 'a.PaymentScheduleUnitTransId' => $paymentSchedule[ 'PaymentScheduleUnitTransId' ] ) );
                                    $select3->combine( $select2, 'Union ALL' );

                                    $select4 = $sql->select();
                                    $select4->from( array( "g" => $select3 ) )
                                        ->columns( array( '*' ) )
                                        ->order("g.ReceiptTypeTransId ASC");

                                    $stmt = $sql->getSqlStringForSqlObject( $select4 );
                                    $arrReceiptTypes = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                    if(!empty($arrReceiptTypes)) {

                                        $iQualCount = 0;
                                        foreach($arrReceiptTypes as &$receipt) {

                                            switch($receipt['ReceiptType']) {
                                                case 'O':
                                                    $receipt['Type'] = 'O';
                                                    break;
                                                case 'S':
                                                    $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];;
                                                    break;
                                            }

                                            // qualifier
                                            $select = $sql->select();
                                            $select->from( array( 'a' => 'Crm_PaymentScheduleQualifierTrans' ) )
                                                ->columns(array( 'QualifierId', 'YesNo', 'RefId' => new Expression( "'R'+ rtrim(ltrim(str(TransId)))" ), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess','NetPer',
                                                    'ExpressionAmt', 'TaxableAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'TaxAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'SurChargeAmt' => new Expression( "CAST(0 As Decimal(18,2))" ),
                                                    'EDCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'HEDCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ),'SBCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ),'KKCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ),'NetAmt' => new Expression( "CAST(0 As Decimal(18,2))" ) ), $select::JOIN_LEFT )
                                                ->join( array( "b" => "Proj_QualifierMaster" ), "a.QualifierId=b.QualifierId", array( 'QualifierName', 'QualifierTypeId' ), $select::JOIN_INNER );
                                            $select->where(array('PSReceiptTypeTransId' => $receipt['ReceiptTypeTransId']));
                                            $statement = $sql->getSqlStringForSqlObject( $select );
                                            $qualList = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                            if ( !empty( $qualList ) ) {
                                                foreach($qualList as &$qual) {
                                                    $qual['BaseAmount'] = $receipt['Amount'];
                                                }

                                                $sHtml = Qualifier::getQualifier( $qualList );
                                                $iQualCount = $iQualCount + 1;
                                                $sHtml = str_replace( '__1', '_' . $iQualCount, $sHtml );
                                                $receipt[ 'qualHtmlTag' ] = $sHtml;
                                            }
                                        }

                                        $paymentSchedule['arrReceiptTypes'] = $arrReceiptTypes;
                                    }
                                }
                            }
                            if(count($arrPaymentScheduleDetails) > 0)
                                $this->_view->arrPaymentScheduleDetails = $arrPaymentScheduleDetails;

                            // custom payment schedule
                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('SchDate' => new Expression("FORMAT(a.SchDate,'dd-MM-yyyy')"), 'Amount', 'TermDescription','PaymentScheduleUnitTransId'))
                                ->where(array('a.BookingId' => $bookingId, 'a.StageType' => 'C'));
                            // ->order("g.SortId ASC");
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $arrCustomPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                            if(count($arrCustomPaymentScheduleDetails) != 0) {
                                foreach($arrCustomPaymentScheduleDetails as &$schedule) {
                                    $select1 = $sql->select();
                                    $select1->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('TypeName' => 'ReceiptTypeName', 'Type'), $select::JOIN_INNER)
                                        ->columns(array('Type' => 'ReceiptType', 'TypeId' => 'ReceiptTypeId', 'Amount', 'TransId' => 'ReceiptTypeTransId', 'PaymentScheduleUnitTransId'))
                                        ->where("a.ReceiptType != 'O' and a.PaymentScheduleUnitTransId =".$schedule['PaymentScheduleUnitTransId']);

                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('TypeName' => new Expression("b.OtherCostName"), 'Type'=> new Expression('a.ReceiptType')), $select::JOIN_INNER)
                                        ->columns(array('Type' => 'ReceiptType', 'TypeId' => 'ReceiptTypeId', 'Amount', 'TransId' => 'ReceiptTypeTransId', 'PaymentScheduleUnitTransId'))
                                        ->where("a.ReceiptType = 'O' and a.PaymentScheduleUnitTransId =".$schedule['PaymentScheduleUnitTransId']);
                                    $select->combine($select1, 'Union ALL');

                                    //  $selectAll = $sql->select();
                                    // $selectAll->from(array("g" => $select))
                                    //  ->order("")
                                    //   ->columns(array('*'));
                                    $stmt = $sql->getSqlStringForSqlObject($select);

                                    $schedule['Receipts'] = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                }
                                $this->_view->arrCustomPaymentScheduleDetails = $arrCustomPaymentScheduleDetails;

                                $select = $sql->select();
                                $select->from(array('a' => 'Crm_CustomPaymentScheduleDetails'))
                                    ->columns(array('FromMonth' => new Expression("FORMAT(a.FromMonth,'MM-yyyy')"), 'Period', 'NoOfTerms','Day'))
                                    ->where(array('a.BookingId' => $bookingId));
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $this->_view->paymentScheduleFormDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            }
                        } catch(\Exception $ex) {
                            $this->_view->err = $ex->getMessage();
                        }
                    }
                    // Executives

                    $select = $sql->select();
                    $select->from(array('a' => 'WF_LevelMaster'))
                        ->join(array('b' => 'Wf_Users'), 'a.LevelId=b.LevelId', array('UserId'), $select::JOIN_LEFT)
                        ->columns(array('Rate','Lumpsum','Percentage'))
                        ->where(array('b.UserId' =>$this->auth->getIdentity()->UserId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->discountLimit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $route= $this->params()->fromRoute('ProjectId');
                    $rout= $this->params()->fromRoute('UnitId');
                    $leadId = $this->params()->fromRoute('leadId');

                   // $PositionTypeId=array(5,2);
                    $sub = $sql->select();
                    $sub->from(array('a'=>'WF_Users'))
                       // ->join(array("b"=>"WF_PositionMaster"),"a.PositionId=b.PositionId",array(),$sub::JOIN_LEFT)
                        ->columns(array('PositionId'))
                        ->where(array("a.UserId"=>$this->auth->getIdentity()->UserId));
                    $statement = $sql->getSqlStringForSqlObject($sub);
                    $resultsExecutive= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $resultsExe=$resultsExecutive['PositionId'];


                    $select1 = $sql->select();
                    $select1->from('WF_Users')
                        ->columns(array('UserId'))
                        ->where("PositionId <= $resultsExe");
                    $select1->where(array("DeleteFlag"=>0));

                    $select = $sql->select();
                    $select->from(array('a' =>'Crm_LeadProjects'))
                        ->columns(array('LeadId'))
                        ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"=>new expression("b.LeadName + ' - ' + b.Mobile")), $select::JOIN_LEFT);

                    if($leadId!=0) {
                        $select->where(array('b.LeadId' => $leadId));
                        $select->order('a.LeadId asc');
                        $select->where->expression('b.ExecutiveId IN ?', array($select1));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $this->_view->result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    }else{
                        $select->where(array('a.ProjectId' => $route));
                        $select  ->order('a.LeadId asc');
                        $select->where(array("b.ExecutiveId" => $this->auth->getIdentity()->UserId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $this->_view->resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }

                    $select = $sql->select();
                    $select->from(array('a' =>'KF_UnitMaster'))
                        ->columns(array('UnitId','ProjectId','UnitNo'))
                        ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.ProjectId", array("ProjectName"), $select::JOIN_LEFT)
                        ->where(array('a.UnitId'=>$rout,'a.ProjectId' => $route));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $saveproj= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    if($saveproj['UnitId']>0){
                        $this->_view->saveproj = $saveproj;
                    }


                    $PositionTypeId=array(5,2);
                    $sub = $sql->select();
                    $sub->from(array('a'=>'WF_PositionMaster'))
                        ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
                        ->columns(array('PositionId'))
                        ->where(array("b.PositionTypeId"=>$PositionTypeId));

                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('data' => 'UserId', 'value' => 'EmployeeName'))
                        ->where(array('DeleteFlag' => 0))
                        ->where->expression("PositionId IN ?",array($sub));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Projects
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('DeleteFlag' => 0));
                    $select->order('ProjectId Desc');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Brokers
                    $select = $sql->select();
                    $select->from('Crm_BrokerMaster')
                        ->columns(array('data' => 'BrokerId', 'value' => 'BrokerName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrBrokers = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_PlanBasedDiscount')
                        ->columns(array('*'))
                        ->where(array("DeleteFlag"=>0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->planList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //Employee Names
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('UserId','EmployeeName','Mobile'))
                        ->where(array("DeleteFlag"=>0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->employeeList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_Leads'))
                        ->columns(array('BuyerId'=>new Expression("a.LeadId"),'Mobile','LeadName'))
                        ->where(array('a.DeleteFlag' => 0,'a.LeadConvert'=>1));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->buyerList = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Status
                    $select = $sql->select();
                    $select->from('Crm_StatusMaster')
                        ->columns(array('data' =>'StatusId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Nature
                    $select = $sql->select();
                    $select->from('Crm_NatureMaster')
                        ->columns(array('data' =>'NatureId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_CallTypeMaster')
                        ->columns(array('data' =>'CallTypeId','value' => 'Description'))
                        ->where(array("Description NOT IN ('Block','Drop','Finalization','Unit-Transfer','Proposal','Unit-Cancellation','Pre-Booking')"));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array('ReceiptType'=>'s'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;
                    $this->_view->leadId = $leadId;

                    $aVNo = CommonHelper::getVoucherNo(807, date('Y/m/d'), 0, 0, $dbAdapter, "");
                    $this->_view->genType = $aVNo["genType"];
                    if ($aVNo["genType"] == false)
                        $this->_view->svNo = "";
                    else
                        $this->_view->svNo = $aVNo["voucherNo"];


                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }
            //$route= $this->params()->fromRoute('ProjectId');



            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function postSaleDiscountAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $postData = $request->getPost();
                    // Print_r($postData); die;


                    $bookingId = $this->bsf->isNullCheck($postData['booking_id'], 'number');
                    $postsaleDiscountId = $this->bsf->isNullCheck($postData['postsaleDiscountId'], 'number');
                    $iUnitId= $this->bsf->isNullCheck($postData['unit_id'], 'number');



                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_PostSaleDiscountRegister'))
                       ->columns(array("PostSaleDiscountId"))
                        ->where(array('a.BookingId' => $bookingId))
                        ->order("PostSaleDiscountId desc");
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $postdiscount = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();


                    if($bookingId <= 0) {
                        throw new \Exception('Invalid Unit!');
                    }


                    $VocherDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                    $VocherDate = str_replace('/', '-', $VocherDate);
                    if (strtotime($VocherDate) == FALSE) {
                        $VocherDate = date('Y-m-d');
                    } else {
                        $VocherDate = date('Y-m-d', strtotime($VocherDate));
                    }

                    $sVno = $this->bsf->isNullCheck($postData['booking_no'], 'string');

                    $postPlanId = 0;
                    $postDiscountBased = $this->bsf->isNullCheck($postData['post_discount_based'], 'string');
                    $discount = 0;
                    $discountType = '';
                    $lumpsumtype = '';
                    $PostLumpsumReceiptId = 0;
                    $PostLumpsumReceiptType = '';

                    if ($postDiscountBased == 'P') {
                        $postPlanId = $this->bsf->isNullCheck($postData['post_plan_list'], 'number');
                    }

                    $discountType = $this->bsf->isNullCheck($postData['post_discount_type'], 'string');
                    if ($discountType == 'R') {
                        $discount = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                    } else if ($discountType == 'L') {
                        $lumpsumtype = $this->bsf->isNullCheck($postData['post_lumpsum_type'], 'string');
                        if ($lumpsumtype == 'O') {
                            $discount = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                        } else if ($lumpsumtype == 'R') {
                            $PostLumpsumReceiptId = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                            $PostLumpsumReceiptType = '';
                            if ($PostLumpsumReceiptId == 1) $PostLumpsumReceiptType = 'L';
                            if ($PostLumpsumReceiptId == 2) $PostLumpsumReceiptType = 'C';
                            $discount = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                        }
                    } else if ($discountType == 'P') {
                        $lumpsumtype = $this->bsf->isNullCheck($postData['post_lumpsum_type'], 'string');
                        if ($lumpsumtype == 'O') {
                            $discount = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                        } else if ($lumpsumtype == 'R') {
                            $PostLumpsumReceiptId = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                            $PostLumpsumReceiptType = '';
                            if ($PostLumpsumReceiptId == 1) $PostLumpsumReceiptType = 'L';
                            if ($PostLumpsumReceiptId == 2) $PostLumpsumReceiptType = 'C';
                            $discount = $this->bsf->isNullCheck($postData['post_discount'], 'number');
                        }
                    }

                    $prevRate = $this->bsf->isNullCheck($postData['prevRate'], 'number');
                    $prevBaseAmt = $this->bsf->isNullCheck($postData['prevBaseAmt'], 'number');
                    $prevLandAmt = $this->bsf->isNullCheck($postData['prevLandAmt'], 'number');
                    $prevConstructionAmt = $this->bsf->isNullCheck($postData['prevConstructionAmt'], 'number');
                    $prevOthercostAmt = $this->bsf->isNullCheck($postData['prevOthercostAmt'], 'number');
                    $prevGrossAmt = $this->bsf->isNullCheck($postData['prevGrossAmt'], 'number');
                    $prevqualAmt = $this->bsf->isNullCheck($postData['prevqualAmt'], 'number');
                    $prevnetAmt = $this->bsf->isNullCheck($postData['prevnetAmt'], 'number');

                    $curdisRate = $this->bsf->isNullCheck($postData['curdisRate'], 'number');
                    $curdisBaseAmt = $this->bsf->isNullCheck($postData['curdisBaseAmt'], 'number');
                    $curdisLandAmt = $this->bsf->isNullCheck($postData['curdisLandAmt'], 'number');
                    $curdisConstructionAmt = $this->bsf->isNullCheck($postData['curdisConstructionAmt'], 'number');
                    $curdisOthercostAmt = $this->bsf->isNullCheck($postData['curdisOthercostAmt'], 'number');
                    $curdisGrossAmt = $this->bsf->isNullCheck($postData['curdisGrossAmt'], 'number');
                    $curdisqualAmt = $this->bsf->isNullCheck($postData['curdisqualAmt'], 'number');
                    $curdisnetAmt = $this->bsf->isNullCheck($postData['curdisnetAmt'], 'number');

                    if ($postsaleDiscountId==0) {

                        $aVNo = CommonHelper::getVoucherNo(807, date('Y-m-d', strtotime($postData['booking_date'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true) $sVno = $aVNo["voucherNo"];

                        // add to post discount register
                        $insert = $sql->insert();
                        $insert->into('Crm_PostSaleDiscountRegister')
                            ->values(array('VocherNo' => $sVno,
                                'VocherDate' => $VocherDate,
                                'BookingId' => $bookingId,
                                'UnitId' => $iUnitId,
                                'PostDiscountBased' => $postDiscountBased,
                                'PostPlanId' => $postPlanId,
                                'PostDiscountType' => $discountType,
                                'PostLumpsumType' => $lumpsumtype,
                                'PostLumpsumReceiptType' => $PostLumpsumReceiptType,
                                'PostLumpsumReceiptId' => $PostLumpsumReceiptId,
                                'PostDiscount' => $discount,
                                'Rate' => $curdisRate,
                                'BaseAmount' => $curdisBaseAmt,
                                'LandAmount' => $curdisLandAmt,
                                'ConstructionAmount' => $curdisConstructionAmt,
                                'OtherCostAmount' => $curdisOthercostAmt,
                                'GrossAmount' => $curdisGrossAmt,
                                'QualifierAmount' => $curdisqualAmt,
                                'NetAmount' => $curdisnetAmt,
                                'PrevRate' => $prevRate,
                                'PrevBaseAmount' => $prevBaseAmt,
                                'PrevLandAmount' => $prevLandAmt,
                                'PrevConstructionAmount' => $prevConstructionAmt,
                                'PrevOtherCostAmount' => $prevOthercostAmt,
                                'PrevGrossAmount' => $prevGrossAmt,
                                'PrevQualifierAmount' => $prevqualAmt,
                                'PrevNetAmount' => $prevnetAmt,
                                'CreatedDate' => date('Y-m-d H:i:s')
                            ));
                        $stmt = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        $postsaleid = $dbAdapter->getDriver()->getLastGeneratedValue();

                           if($postdiscount['PostSaleDiscountId'] > 0 ){
                            $update  = $sql->update();
                            $update ->table('Crm_PostSaleDiscountRegister')
                                ->set(array('DistFlag' => 1
                                ))
                                ->where(array('PostSaleDiscountId' => $postdiscount['PostSaleDiscountId']));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    } else {

                        $update  = $sql->update();
                        $update ->table('Crm_PostSaleDiscountRegister')
                            ->set(array('VocherNo' => $sVno,
                                'VocherDate' => $VocherDate,
                                'BookingId' => $bookingId,
                                'UnitId' => $iUnitId,
                                'PostDiscountBased' => $postDiscountBased,
                                'PostPlanId' => $postPlanId,
                                'PostDiscountType' => $discountType,
                                'PostLumpsumType' => $lumpsumtype,
                                'PostLumpsumReceiptType' => $PostLumpsumReceiptType,
                                'PostLumpsumReceiptId' => $PostLumpsumReceiptId,
                                'PostDiscount' => $discount,
                                'Rate' => $curdisRate,
                                'BaseAmount' => $curdisBaseAmt,
                                'LandAmount' => $curdisLandAmt,
                                'ConstructionAmount' => $curdisConstructionAmt,
                                'OtherCostAmount' => $curdisOthercostAmt,
                                'GrossAmount' => $curdisGrossAmt,
                                'QualifierAmount' => $curdisqualAmt,
                                'NetAmount' => $curdisnetAmt,
                                'PrevRate' => $prevRate,
                                'PrevBaseAmount' => $prevBaseAmt,
                                'PrevLandAmount' => $prevLandAmt,
                                'PrevConstructionAmount' => $prevConstructionAmt,
                                'PrevOtherCostAmount' => $prevOthercostAmt,
                                'PrevGrossAmount' => $prevGrossAmt,
                                'PrevQualifierAmount' => $prevqualAmt,
                                'PrevNetAmount' => $prevnetAmt,
                                'CreatedDate' => date('Y-m-d H:i:s')
                            ))
                            ->where(array('PostSaleDiscountId' => $postsaleDiscountId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);



                        $postsaleid = $postsaleDiscountId;

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                            ->join(array('b' => 'Crm_PSDPaymentScheduleUnitTrans'), 'a.PSDPaymentScheduleUnitTransId= b.PSDPaymentScheduleUnitTransId', array('PaymentScheduleUnitTransId'), $select::JOIN_INNER)
                            ->columns(array('ReceiptTypeId','ReceiptType','DiscountAmount'))
                            ->where(array('b.PostSaleDiscountId' => $postsaleid));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $arrPSTrans = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        foreach ($arrPSTrans as $trans) {
                            $iPSId = $trans['PaymentScheduleUnitTransId'];
                            $iPSRId = $trans['ReceiptTypeId'];
                            $sPSRS = $trans['ReceiptType'];
                            $dDiscount = $trans['DiscountAmount'];

                            $update = $sql->update();
                            $update->table('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                ->set(array('Discount' => new Expression("Discount-$dDiscount")))
                                ->where(array('PaymentScheduleUnitTransId' => $iPSId,'ReceiptTypeId'=>$iPSRId,'ReceiptType'=>$sPSRS));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                            ->columns(array('PaymentScheduleUnitTransId','DiscountAmount'))
                            ->where(array('a.PostSaleDiscountId' => $postsaleid));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $arrPSTrans = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        foreach ($arrPSTrans as $trans) {
                            $iPSId = $trans['PaymentScheduleUnitTransId'];
                            $dDiscount = $trans['DiscountAmount'];

                            $update = $sql->update();
                            $update->table('Crm_PaymentScheduleUnitTrans')
                                ->set(array('Discount' => new Expression("Discount-$dDiscount")))
                                ->where(array('PaymentScheduleUnitTransId' => $iPSId));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $subQuery = $sql->select();
                        $subQuery->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                            ->join(array('b' => 'Crm_PSDPaymentScheduleUnitTrans'), 'a.PSDPaymentScheduleUnitTransId= b.PSDPaymentScheduleUnitTransId', array(), $subQuery::JOIN_INNER)
                            ->columns(array('ReceiptTypeTransId'))
                            ->where(array('b.PostSaleDiscountId' => $postsaleid));

                        $delete = $sql->delete();
                        $delete->from('Crm_PSDPaymentScheduleQualifierTrans')
                            ->where->expression('PSReceiptTypeTransId IN ?', array($subQuery));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $subQuery = $sql->select();
                        $subQuery->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                            ->columns(array('PSDPaymentScheduleUnitTransId'))
                            ->where(array('a.PostSaleDiscountId' => $postsaleid));

                        $delete = $sql->delete();
                        $delete->from('Crm_PSDPaymentScheduleUnitReceiptTypeTrans')
                            ->where->expression('PSDPaymentScheduleUnitTransId IN ?', array($subQuery));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Crm_PSDPaymentScheduleUnitTrans')
                            ->where(array('PostSaleDiscountId' => $postsaleid));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $shRowId = $this->bsf->isNullCheck($postData['shRowId'], 'number');
                    for ($i = 1; $i <= $shRowId; $i++) {
                        $iPSScheduleId = $this->bsf->isNullCheck($postData['psScheduleId_'.$i], 'number');
                        $schdate = $this->bsf->isNullCheck($postData['schDate_'.$i], 'date');
                        $stageType = $this->bsf->isNullCheck($postData['stageType_'.$i], 'string');
                        $stageId = $this->bsf->isNullCheck($postData['stageId_'.$i], 'number');
                        $schRound = $this->bsf->isNullCheck($postData['schRound_'.$i], 'number');
                        $schAmt = $this->bsf->isNullCheck($postData['schAmt_'.$i], 'number');
                        $disAmt = $this->bsf->isNullCheck($postData['schdis_'.$i], 'number');
                        $disschAmt = $this->bsf->isNullCheck($postData['CurAmt_'.$i], 'number');
                        $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_'.$i], 'number');
                        $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_'.$i], 'number');
                        $schPer = $this->bsf->isNullCheck(trim($postData['schPer_'.$i],'%'), 'number');
                        $schSortId = $this->bsf->isNullCheck($postData['schSortId_'.$i], 'number');
                        $desc = $this->bsf->isNullCheck($postData['desc_'.$i], 'string');





                        $insert = $sql->insert();
                        $insert->into('Crm_PSDPaymentScheduleUnitTrans')
                            ->values(array(
                                'PostSaleDiscountId' => $postsaleid,
                                'PaymentScheduleUnitTransId' =>$iPSScheduleId,
                                'BookingId' => $bookingId,
                                'SchDate' => date('Y-m-d', strtotime($schdate)),
                                'StageId' => $stageId,
                                'StageType' => $stageType,
                                'UnitId' => $iUnitId,
                                'PrevAmount' => $schAmt,
                                'TermDescription' => $desc,
                                'DiscountAmount' =>  $disAmt,
                                'Amount' => $disschAmt,
                                'QualAmount' =>  $schTaxAmt,
                                'NetAmount' =>  $schNetAmt,
                                'Percentage' =>  $schPer,
                                'RoundOff' =>  $schRound,
                                'SortId'=> $schSortId
                            ));
                        $stmt = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $update = $sql->update();
                        $update->table('Crm_PaymentScheduleUnitTrans')
                            ->set(array('Discount' => new Expression("Discount+$disAmt")))
                            ->where(array('PaymentScheduleUnitTransId' => $iPSScheduleId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                        $recRowId = $this->bsf->isNullCheck($postData['refRowId_'.$i], 'number');
                        for ($j = 1; $j <= $recRowId; $j++) {
                            $recType = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_receiptType_' . $j], 'string');
                            $recTypeId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_receiptTypeId_' . $j], 'number');
                            $recprevAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_shAmt_' . $j], 'number');
                            $recdisAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_disAmt_' . $j], 'number');
                            $recAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_CurAmt_' . $j], 'number');
                            $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TaxAmt_' . $j], 'number');
                            $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_NetAmt_' . $j], 'number');

                            if($recType=='' || $recTypeId == 0 || $recAmt == 0)
                                continue;

                            $insert = $sql->insert();
                            $insert->into('Crm_PSDPaymentScheduleUnitReceiptTypeTrans')
                                ->values(array('PSDPaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                    'ReceiptTypeId' => $recTypeId,
                                    'ReceiptType' => $recType,
                                    'PrevAmount' => $recprevAmt,
                                    'DiscountAmount' => $recdisAmt,
                                    'Amount' => $recAmt,
                                    'QualAmount' => $recTaxAmt,
                                    'UnitId' => $iUnitId,
                                    'NetAmount' => $recNetAmt));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                            $update = $sql->update();
                            $update->table('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                ->set(array('Discount' => new Expression("Discount+$disAmt")))
                                ->where(array('PaymentScheduleUnitTransId' => $iPSScheduleId,'ReceiptTypeId'=>$recTypeId,'ReceiptType'=>$recType));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                            $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_QualRefId_' . $j], 'number');
                            $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_'.$qualRefId], 'number');

                            for ($k = 1; $k <= $qualRowId; $k++) {
                                $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                $dCessPer = 0;
                                $dEDPer = 0;
                                $dHEdPer = 0;
                                $dCessAmt = 0;
                                $dEDAmt = 0;
                                $dHEdAmt = 0;
                                $dKKCessPer=0;
                                $dSBCessPer=0;
                                $dKKCessAmt=0;
                                $dSBCessAmt =0;

                                if ($iQualTypeId==1) {
                                    $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                    $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                    $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                    $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                    $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                    $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                    $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                    $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                    $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                    $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                    $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                    $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                } else if ($iQualTypeId==2) {
                                    $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                    $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                    $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                    $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                    $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                    $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                    $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                    $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                    $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                    $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                } else {
                                    $dTaxablePer = 100;
                                    $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                    $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                    $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                    $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                    $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                }

                                $insert = $sql->insert();
                                $insert->into('Crm_PSDPaymentScheduleQualifierTrans');
                                $insert->Values(array('PSReceiptTypeTransId' => $recTransId,
                                    'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                    'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCessPer,'SBCess'=>$dSBCessPer, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                    'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt, 'NetAmt'=>$dNetAmt));

                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                    }

                    $connection->commit();
                    $this->redirect()->toRoute('crm/unit-fulldetails', array('controller' => 'project', 'action' => 'unit-fulldetails',"UnitDetailId"=>$iUnitId));

                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                try {

                    $bookingId = $this->bsf->isNullCheck($this->params()->fromRoute('bookingId'),'number');
                    $postsaleDiscountId = $this->bsf->isNullCheck($this->params()->fromRoute('postsaleId'),'number');

                    if(!is_numeric($bookingId)) {
                        throw new \Exception('Invalid Booking-id!');
                    }

                    $select = $sql->select();
                    $select->from('Crm_PlanBasedDiscount')
                        ->columns(array('*'))
                        ->where(array("DeleteFlag" => 0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->planList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_FinalisationOtherCostTrans'))
                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostId','OtherCostName'), $select::JOIN_LEFT)
                        ->columns(array('Amount'))
                        ->where(array('a.BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrOtherCost = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array('ReceiptType' => 's'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;

                    $arrAllReceiptTypes = array();
                    foreach ($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }

                    $this->_view->postsaleDiscountId = $postsaleDiscountId;

                    if ($postsaleDiscountId ==0) {

                        $select = $sql->select();
                        $select->from('Crm_PostSaleDiscountRegister')
                            ->columns(array('mId' => new Expression("Max(PostSaleDiscountId)")))
                            ->where(array("BookingId" => $bookingId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $psreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $iPSDiscountId = 0;
                        if (!empty($psreg)) $iPSDiscountId = $this->bsf->isNullCheck($psreg['mId'], 'number');


                        if ($iPSDiscountId ==0) {
                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_UnitBooking'))
                                ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitArea','UnitTypeId'), $select::JOIN_LEFT)
                                ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectName','ProjectId'), $select::JOIN_LEFT)
                                ->join(array('d' => 'KF_BlockMaster'), 'b.BlockId=d.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'KF_FloorMaster'), 'b.FloorId=e.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                ->join(array('f' => 'KF_UnitTypeMaster'), 'b.UnitTypeId=f.UnitTypeId', array('UnitTypeName'), $select::JOIN_LEFT)
                                ->join(array('g' => 'Crm_PaymentSchedule'), 'a.PaymentScheduleId=g.PaymentScheduleId', array('PaymentScheduleId', 'PaymentSchedule'), $select::JOIN_LEFT)
                                ->columns(array('BookingId', 'UnitId', 'CustomerType', 'Rate', 'BaseAmount', 'AdvAmount', 'LandAmount', 'ConstructionAmount', 'OtherCostAmount',
                                    'QualifierAmount', 'NetAmount',
                                    'DisRate' => new Expression("'0'"), 'DisBaseAmount' => new Expression("'0'"),
                                    'DisLandAmount' => new Expression("'0'"), 'DisConstructionAmount' => new Expression("'0'"), 'DisOtherCostAmount' => new Expression("'0'"),
                                    'DisQualifierAmount' => new Expression("'0'"), 'DisNetAmount' => new Expression("'0'"),
                                    'PostPlanId' => new Expression("'0'"), 'PostDiscountBased' => new Expression("''"),
                                    'PostDiscountType' => new Expression("''"), 'PostDiscount' => new Expression("'0'"), 'PostLumpsumReceiptType' => new Expression("''"), 'PostLumpsumReceiptId' => new Expression("'0'")))
                                ->where(array('a.BookingId' => $bookingId, 'a.DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            if (empty($unitBooking)) {
                                throw new \Exception('Unit booking not found!');
                            }

                            $this->_view->unitBooking = $unitBooking;

                            $aVNo = CommonHelper::getVoucherNo(817, date('Y/m/d'), 0, 0, $dbAdapter, "");
                            $this->_view->genType = $aVNo["genType"];

                            if ($aVNo["genType"] == false)
                                $this->_view->svNo = "";
                            else
                                $this->_view->svNo = $aVNo["voucherNo"];

                            // current payment schedule detail
                            $select1 = $sql->select();
                            $select1->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                                ->where(array('a.StageType' => 'S', 'BookingId' => $bookingId));

                            $select2 = $sql->select();
                            $select2->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                                ->where(array('a.StageType' => 'D', 'BookingId' => $bookingId));
                            $select2->combine($select1, 'Union ALL');

                            $select3 = $sql->select();
                            $select3->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                                ->where(array('a.StageType' => 'O', 'BookingId' => $bookingId));
                            $select3->combine($select2, 'Union ALL');



                            $select4 = $sql->select();
                            $select4->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                                ->where(array('a.StageType' => 'A', 'BookingId' => $bookingId));
                            $select4->combine($select3, 'Union ALL');

                            $select6 = $sql->select();
                            $select6->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                ->columns(array('*' ))
                                ->join(array('b' => 'Crm_UnitBooking'), 'a.BookingId = b.BookingId', array('StageName' => new Expression("a.TermDescription")), $select4::JOIN_LEFT)
                                ->where(array('a.StageType' => 'C', 'a.BookingId' => $bookingId));
                            $select6->combine($select4,'Union ALL');

                            $select5 = $sql->select();
                            $select5->from(array("g" => $select6))
                                ->columns(array('*'))
                                ->where(array('BookingId' => $bookingId))
                                ->order("g.SortId ASC");
                            $stmt = $sql->getSqlStringForSqlObject($select5);
                            $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            if (!empty($arrPaymentScheduleDetails)) {

                                foreach ($arrPaymentScheduleDetails as &$paymentSchedule) {
                                    // receipt type
                                    $select1 = $sql->select();
                                    $select1->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName'), $select1::JOIN_LEFT)
                                        ->where(array('a.PaymentScheduleUnitTransId' => $paymentSchedule['PaymentScheduleUnitTransId']))
                                        ->where("a.ReceiptType IN ('C','L')");

                                    $select2 = $sql->select();
                                    $select2->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName'), $select2::JOIN_LEFT)
                                        ->where(array('a.ReceiptType' => 'D', 'a.PaymentScheduleUnitTransId' => $paymentSchedule['PaymentScheduleUnitTransId']));
                                    $select2->combine($select1, 'Union ALL');

                                    $select3 = $sql->select();
                                    $select3->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName'), $select3::JOIN_LEFT)
                                        ->where(array('a.ReceiptType' => 'O', 'a.PaymentScheduleUnitTransId' => $paymentSchedule['PaymentScheduleUnitTransId']));
                                    $select3->combine($select2, 'Union ALL');

                                    $select4 = $sql->select();
                                    $select4->from(array("g" => $select3))
                                        ->columns(array('*'))
                                        ->order("g.ReceiptTypeTransId ASC");

                                    $stmt = $sql->getSqlStringForSqlObject($select4);
                                    $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    if (!empty($arrReceiptTypes)) {
                                        foreach ($arrReceiptTypes as &$receipt) {
                                            switch ($receipt['ReceiptType']) {
                                                case 'O':
                                                    $receipt['Type'] = 'O';
                                                    break;
                                                case 'S':
                                                    $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];;
                                                    break;
                                            }

                                            // qualifier
                                            $select = $sql->select();
                                            $select->from(array('a' => 'Crm_PaymentScheduleQualifierTrans'))
                                                ->columns(array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(TransId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'SBCess', 'KKCess', 'NetPer',
                                                    'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                                                    'EDCessAmt', 'HEDCessAmt', 'SBCessAmt', 'KKCessAmt', 'NetAmt'), $select::JOIN_LEFT)
                                                ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                            $select->where(array('PSReceiptTypeTransId' => $receipt['ReceiptTypeTransId']));
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                            if (!empty($qualList)) {
                                                foreach ($qualList as &$qual) {
                                                    $qual['BaseAmount'] = $receipt['Amount'];
                                                }

                                                $sHtml = Qualifier::getQualifier($qualList);
//                                        $iQualCount = $iQualCount + 1;
//                                        $sHtml = str_replace( '__1', '_' . $iQualCount, $sHtml );
                                                $receipt['qualHtmlTag'] = $sHtml;
                                            }
                                        }

                                        $paymentSchedule['arrReceiptTypes'] = $arrReceiptTypes;
                                    }
                                }
                            }

                            $this->_view->arrPaymentScheduleDetails = $arrPaymentScheduleDetails;
                        } else {
                            $select = $sql->select();
                            $select->from(array('p' => 'Crm_PostSaleDiscountRegister'))
                                ->join(array('a' => 'Crm_UnitBooking'), 'p.BookingId=a.BookingId', array('BookingId', 'UnitId', 'CustomerType','AdvAmount'), $select::JOIN_LEFT)
                                ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitArea','UnitTypeId'), $select::JOIN_LEFT)
                                ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectName','ProjectId'), $select::JOIN_LEFT)
                                ->join(array('d' => 'KF_BlockMaster'), 'b.BlockId=d.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'KF_FloorMaster'), 'b.FloorId=e.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                ->join(array('f' => 'KF_UnitTypeMaster'), 'b.UnitTypeId=f.UnitTypeId', array('UnitTypeName'), $select::JOIN_LEFT)
                                ->join(array('g' => 'Crm_PaymentSchedule'), 'a.PaymentScheduleId=g.PaymentScheduleId', array('PaymentScheduleId', 'PaymentSchedule'), $select::JOIN_LEFT)
                                ->columns(array('Rate'=>new Expression('p.Rate'), 'BaseAmount'=>new Expression('p.BaseAmount'),  'LandAmount'=>new Expression('p.LandAmount'), 'ConstructionAmount'=>new Expression('p.ConstructionAmount'), 'OtherCostAmount'=>new Expression('p.OtherCostAmount'),
                                    'QualifierAmount'=>new Expression('p.QualifierAmount'), 'NetAmount'=>new Expression('p.NetAmount'),
                                    'DisRate' => new Expression("'0'"), 'DisBaseAmount' => new Expression("'0'"),
                                    'DisLandAmount' => new Expression("'0'"), 'DisConstructionAmount' => new Expression("'0'"), 'DisOtherCostAmount' => new Expression("'0'"),
                                    'DisQualifierAmount' => new Expression("'0'"), 'DisNetAmount' => new Expression("'0'"),
                                    'PostPlanId' => new Expression("'0'"), 'PostDiscountBased' => new Expression("''"),
                                    'PostDiscountType' => new Expression("''"), 'PostDiscount' => new Expression("'0'"), 'PostLumpsumReceiptType' => new Expression("''"), 'PostLumpsumReceiptId' => new Expression("'0'")))
                                ->where(array('p.PostSaleDiscountId' => $iPSDiscountId));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            if (empty($unitBooking)) {
                                throw new \Exception('Unit booking not found!');
                            }

                            $this->_view->unitBooking = $unitBooking;

                            $aVNo = CommonHelper::getVoucherNo(817, date('Y/m/d'), 0, 0, $dbAdapter, "");
                            $this->_view->genType = $aVNo["genType"];

                            if ($aVNo["genType"] == false)
                                $this->_view->svNo = "";
                            else
                                $this->_view->svNo = $aVNo["voucherNo"];

                            // current payment schedule detail
                            $select1 = $sql->select();
                            $select1->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                                ->where(array('a.StageType' => 'S', 'PostSaleDiscountId' => $iPSDiscountId));

                            $select2 = $sql->select();
                            $select2->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                                ->where(array('a.StageType' => 'D', 'PostSaleDiscountId' => $iPSDiscountId));
                            $select2->combine($select1, 'Union ALL');

                            $select3 = $sql->select();
                            $select3->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                                ->where(array('a.StageType' => 'O', 'PostSaleDiscountId' => $iPSDiscountId));
                            $select3->combine($select2, 'Union ALL');

                            $select4 = $sql->select();
                            $select4->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                                ->columns(array('*'))
                                ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                                ->where(array('a.StageType' => 'A', 'PostSaleDiscountId' => $iPSDiscountId));
                            $select4->combine($select3, 'Union ALL');

                            $select5 = $sql->select();
                            $select5->from(array("g" => $select4))
                                ->columns(array('*'))
                                ->where(array('PostSaleDiscountId' => $iPSDiscountId))
                                ->order("g.SortId ASC");
                            $stmt = $sql->getSqlStringForSqlObject($select5);
                            $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            if (!empty($arrPaymentScheduleDetails)) {

                                foreach ($arrPaymentScheduleDetails as &$paymentSchedule) {
                                    // receipt type
                                    $select1 = $sql->select();
                                    $select1->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName'), $select1::JOIN_LEFT)
                                        ->where(array('a.PSDPaymentScheduleUnitTransId' => $paymentSchedule['PSDPaymentScheduleUnitTransId']))
                                        ->where("a.ReceiptType IN ('C','L')");

                                    $select2 = $sql->select();
                                    $select2->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName'), $select2::JOIN_LEFT)
                                        ->where(array('a.ReceiptType' => 'D', 'a.PSDPaymentScheduleUnitTransId' => $paymentSchedule['PSDPaymentScheduleUnitTransId']));
                                    $select2->combine($select1, 'Union ALL');

                                    $select3 = $sql->select();
                                    $select3->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName'), $select3::JOIN_LEFT)
                                        ->where(array('a.ReceiptType' => 'O', 'a.PSDPaymentScheduleUnitTransId' => $paymentSchedule['PSDPaymentScheduleUnitTransId']));
                                    $select3->combine($select2, 'Union ALL');

                                    $select4 = $sql->select();
                                    $select4->from(array("g" => $select3))
                                        ->columns(array('*'))
                                        ->order("g.ReceiptTypeTransId ASC");

                                    $stmt = $sql->getSqlStringForSqlObject($select4);
                                    $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    if (!empty($arrReceiptTypes)) {
                                        foreach ($arrReceiptTypes as &$receipt) {
                                            switch ($receipt['ReceiptType']) {
                                                case 'O':
                                                    $receipt['Type'] = 'O';
                                                    break;
                                                case 'S':
                                                    $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];;
                                                    break;
                                            }

                                            // qualifier
                                            $select = $sql->select();
                                            $select->from(array('a' => 'Crm_PSDPaymentScheduleQualifierTrans'))
                                                ->columns(array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(TransId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'SBCess', 'KKCess', 'NetPer',
                                                    'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                                                    'EDCessAmt', 'HEDCessAmt', 'SBCessAmt', 'KKCessAmt', 'NetAmt'), $select::JOIN_LEFT)
                                                ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                            $select->where(array('PSReceiptTypeTransId' => $receipt['ReceiptTypeTransId']));
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                            if (!empty($qualList)) {
                                                foreach ($qualList as &$qual) {
                                                    $qual['BaseAmount'] = $receipt['Amount'];
                                                }

                                                $sHtml = Qualifier::getQualifier($qualList);
//                                        $iQualCount = $iQualCount + 1;
//                                        $sHtml = str_replace( '__1', '_' . $iQualCount, $sHtml );
                                                $receipt['qualHtmlTag'] = $sHtml;
                                            }
                                        }

                                        $paymentSchedule['arrReceiptTypes'] = $arrReceiptTypes;
                                    }
                                }
                            }
                            $this->_view->arrPaymentScheduleDetails = $arrPaymentScheduleDetails;
                        }
                    }
                    else {

                        $select = $sql->select();
                        $select->from(array('p' => 'Crm_PostSaleDiscountRegister'))
                            ->join(array('a' => 'Crm_UnitBooking'), 'p.BookingId=a.BookingId', array('BookingId', 'UnitId', 'CustomerType','AdvAmount'), $select::JOIN_LEFT)
                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitArea','UnitTypeId'), $select::JOIN_LEFT)
                            ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectName','ProjectId'), $select::JOIN_LEFT)
                            ->join(array('d' => 'KF_BlockMaster'), 'b.BlockId=d.BlockId', array('BlockName'), $select::JOIN_LEFT)
                            ->join(array('e' => 'KF_FloorMaster'), 'b.FloorId=e.FloorId', array('FloorName'), $select::JOIN_LEFT)
                            ->join(array('f' => 'KF_UnitTypeMaster'), 'b.UnitTypeId=f.UnitTypeId', array('UnitTypeName'), $select::JOIN_LEFT)
                            ->join(array('g' => 'Crm_PaymentSchedule'), 'a.PaymentScheduleId=g.PaymentScheduleId', array('PaymentScheduleId', 'PaymentSchedule'), $select::JOIN_LEFT)
                            ->columns(array('VocherNo','Rate'=>new Expression('PrevRate'), 'BaseAmount'=>new Expression('PrevBaseAmount'),  'LandAmount'=>new Expression('PrevLandAmount'), 'ConstructionAmount'=>new Expression('PrevConstructionAmount'), 'OtherCostAmount'=>new Expression('PrevOtherCostAmount'),
                                'QualifierAmount'=>new Expression('PrevQualifierAmount'), 'NetAmount'=>new Expression('PrevNetAmount'),
                                'DisRate'=>new Expression('p.Rate'), 'DisBaseAmount'=>new Expression('p.BaseAmount'),
                                'DisLandAmount'=>new Expression('p.LandAmount'), 'DisConstructionAmount'=>new Expression('p.ConstructionAmount'), 'DisOtherCostAmount'=>new Expression('p.OtherCostAmount'),
                                'DisQualifierAmount'=>new Expression('p.QualifierAmount'), 'DisNetAmount'=>new Expression('p.NetAmount'),
                                'PostPlanId','PostDiscountBased',
                                'PostDiscountType', 'PostDiscount','PostLumpsumReceiptType', 'PostLumpsumReceiptId'))
                            ->where(array('p.PostSaleDiscountId' => $postsaleDiscountId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        if (empty($unitBooking)) {
                            throw new \Exception('Unit booking not found!');
                        }

                        $this->_view->unitBooking = $unitBooking;

                        $aVNo = CommonHelper::getVoucherNo(817, date('Y/m/d'), 0, 0, $dbAdapter, "");
                        $this->_view->genType = $aVNo["genType"];

                        $this->_view->svNo = $unitBooking["VocherNo"];

                        // current payment schedule detail
                        $select1 = $sql->select();
                        $select1->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                            ->columns(array('*'))
                            ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                            ->where(array('a.StageType' => 'S', 'PostSaleDiscountId' => $postsaleDiscountId));

                        $select2 = $sql->select();
                        $select2->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                            ->columns(array('*'))
                            ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                            ->where(array('a.StageType' => 'D', 'PostSaleDiscountId' => $postsaleDiscountId));
                        $select2->combine($select1, 'Union ALL');

                        $select3 = $sql->select();
                        $select3->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                            ->columns(array('*'))
                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                            ->where(array('a.StageType' => 'O', 'PostSaleDiscountId' => $postsaleDiscountId));
                        $select3->combine($select2, 'Union ALL');

                        $select4 = $sql->select();
                        $select4->from(array('a' => 'Crm_PSDPaymentScheduleUnitTrans'))
                            ->columns(array('*'))
                            ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                            ->where(array('a.StageType' => 'A', 'PostSaleDiscountId' => $postsaleDiscountId));
                        $select4->combine($select3, 'Union ALL');

                        $select5 = $sql->select();
                        $select5->from(array("g" => $select4))
                            ->columns(array('*'))
                            ->where(array('PostSaleDiscountId' => $postsaleDiscountId))
                            ->order("g.SortId ASC");
                        $stmt = $sql->getSqlStringForSqlObject($select5);
                        $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        if (!empty($arrPaymentScheduleDetails)) {

                            foreach ($arrPaymentScheduleDetails as &$paymentSchedule) {
                                // receipt type
                                $select1 = $sql->select();
                                $select1->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                                    ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName'), $select1::JOIN_LEFT)
                                    ->where(array('a.PSDPaymentScheduleUnitTransId' => $paymentSchedule['PSDPaymentScheduleUnitTransId']))
                                    ->where("a.ReceiptType IN ('C','L')");

                                $select2 = $sql->select();
                                $select2->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                                    ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName'), $select2::JOIN_LEFT)
                                    ->where(array('a.ReceiptType' => 'D', 'a.PSDPaymentScheduleUnitTransId' => $paymentSchedule['PSDPaymentScheduleUnitTransId']));
                                $select2->combine($select1, 'Union ALL');

                                $select3 = $sql->select();
                                $select3->from(array('a' => 'Crm_PSDPaymentScheduleUnitReceiptTypeTrans'))
                                    ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName'), $select3::JOIN_LEFT)
                                    ->where(array('a.ReceiptType' => 'O', 'a.PSDPaymentScheduleUnitTransId' => $paymentSchedule['PSDPaymentScheduleUnitTransId']));
                                $select3->combine($select2, 'Union ALL');

                                $select4 = $sql->select();
                                $select4->from(array("g" => $select3))
                                    ->columns(array('*'))
                                    ->order("g.ReceiptTypeTransId ASC");

                                $stmt = $sql->getSqlStringForSqlObject($select4);
                                $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                if (!empty($arrReceiptTypes)) {
                                    foreach ($arrReceiptTypes as &$receipt) {
                                        switch ($receipt['ReceiptType']) {
                                            case 'O':
                                                $receipt['Type'] = 'O';
                                                break;
                                            case 'S':
                                                $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];;
                                                break;
                                        }

                                        // qualifier
                                        $select = $sql->select();
                                        $select->from(array('a' => 'Crm_PSDPaymentScheduleQualifierTrans'))
                                            ->columns(array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(TransId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'SBCess', 'KKCess', 'NetPer',
                                                'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                                                'EDCessAmt', 'HEDCessAmt', 'SBCessAmt', 'KKCessAmt', 'NetAmt'), $select::JOIN_LEFT)
                                            ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                        $select->where(array('PSReceiptTypeTransId' => $receipt['ReceiptTypeTransId']));
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                        if (!empty($qualList)) {
                                            foreach ($qualList as &$qual) {
                                                $qual['BaseAmount'] = $receipt['Amount'];
                                            }

                                            $sHtml = Qualifier::getQualifier($qualList);
//                                        $iQualCount = $iQualCount + 1;
//                                        $sHtml = str_replace( '__1', '_' . $iQualCount, $sHtml );
                                            $receipt['qualHtmlTag'] = $sHtml;
                                        }
                                    }

                                    $paymentSchedule['arrReceiptTypes'] = $arrReceiptTypes;
                                }
                            }
                        }
                        $this->_view->arrPaymentScheduleDetails = $arrPaymentScheduleDetails;
                    }

                    $select = $sql->select();
                    $select->from('Crm_ProjectDetail')
                        ->columns(array('Include'))
                        ->where(array("projectId"=>$unitBooking['ProjectId']));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $include = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $unitamt=array();
                    $untld=0.00;
                    if($include['Include'] == 0 ){
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                            ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                            ->where(array('a.UnitTypeId' => $unitBooking['UnitTypeId']));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    } else {

                        $select = $sql->select();
                        $select->from('Crm_ProjectOtherCostTrans')
                            ->columns(array('OtherCostId'))
                            ->where('OtherCostId IN (1,2)')
                            ->where(array("projectId"=>$unitBooking['ProjectId']));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $projectother = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        if(count($projectother) == 0 ) {

                            $select = $sql->select();
                            $select->from('Crm_ProjectDetail')
                                ->columns(array('LRegistrationValue', 'CRegistrationValue'))
                                ->where(array("projectId" => $unitBooking['ProjectId']));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $projectDetail = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            $otherCostId=array();
                            if (count($projectDetail['LRegistrationValue']) > 0 && count($projectDetail['CRegistrationValue'])==0 ) {
                                $otherCostId=array(1);
                            }
                            else if (count($projectDetail['LRegistrationValue']) == 0 && count($projectDetail['CRegistrationValue'])> 0 ) {
                                $otherCostId=array(2);


                            }
                            else if(count($projectDetail['LRegistrationValue']) > 0 && count($projectDetail['CRegistrationValue'])> 0 ){
                                $otherCostId=array(1,2);

                            }
                            $select = $sql->select();
                            $select->from('Crm_UnitType')
                                ->columns(array('LandRegAmount', 'ConsRegAmount'))
                                ->where(array("projectId" => $unitBooking['ProjectId']))
                                ->where(array('UnitTypeId' => $unitBooking['UnitTypeId']));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $proj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            $untld  =$proj['ConsRegAmount']+ $proj['LandRegAmount'];
                        }}
                    $this->_view->untld = $untld;
                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function finalisationEditAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here
                    $postData = $request->getPost();
                    $planId = $this->bsf->isNullCheck($postData['PlanId'], 'number');

                    if($planId == 0) {
                        throw new \Exception('Invalid Plan Id!');
                    }
                    $select = $sql->select();
                    $select->from('Crm_PlanBasedDiscount')
                        ->columns(array('*'))
                        ->where(array("DeleteFlag"=>0,"PlanId"=>$planId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent(json_encode($result));
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $connection->rollback();
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $postData = $request->getPost();

                    $bookingId = $this->bsf->isNullCheck($postData['booking_id'], 'number');
                    if($bookingId <= 0) {
                        throw new \Exception('Invalid Unit!');
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitTypeId', 'UnitArea'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                        ->where(array('a.BookingId' => $bookingId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if(empty($unitBooking)) {
                        throw new \Exception('Unit booking not found!');
                    }

                    if($unitBooking['Approve'] == 'S') {
                        throw new \Exception('Unit Approved!');
                    }

                    $BookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                    $BookingDate = str_replace('/', '-', $BookingDate);
                    if(strtotime($BookingDate) == FALSE) {
                        $BookingDate = date('Y-m-d');
                    } else {
                        $BookingDate = date('Y-m-d', strtotime($BookingDate));
                    }

                    $arrValues = array(
                        'BookingNo' => $this->bsf->isNullCheck($postData['booking_no'], 'string'),
                        'BookingDate' => $BookingDate,
                        'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                        'BookingName' => $this->bsf->isNullCheck($postData['registration_name'], 'string'),
                        'PostExecutiveId' => $this->bsf->isNullCheck($postData['executive_id'], 'number'),
                        'AdvAmount' => $this->bsf->isNullCheck($postData['adv_amount'], 'number'),
                        'ModifiedDate' => date('Y-m-d H:i:s'),
                        'PaymentScheduleId' => $this->bsf->isNullCheck($postData['payment_schedule'], 'number')
                    );

                    // Loan
                    if($postData['loan_yes_no'] == 'loan_yes') {
                        $arrValues['PaymentOption'] = 'L';
                        if($postData['loan_approved_yes_no'] == 'loan_approved_yes') {
                            $arrValues['LoanApproval'] = 1;
                            $arrValues['LoanProposalNo'] = $this->bsf->isNullCheck($postData['proposal_no'], 'string');
                            $arrValues['BankName'] = $this->bsf->isNullCheck($postData['bank_name'], 'string');
                            $arrValues['LoanAmt'] = $this->bsf->isNullCheck($postData['loan_amount'], 'number');
                            $arrValues['SanctionDate'] = date('Y-m-d', strtotime($postData['sanction_date']));
                        } else {
                            $arrValues['LoanApproval'] = 0;
                            $arrValues['LoanProposalNo'] = '';
                            $arrValues['BankName'] = '';
                            $arrValues['LoanAmt'] = 0;
                            $arrValues['SanctionDate'] = NULL;
                        }
                    } else {
                        $arrValues['PaymentOption'] = 'O';
                        $arrValues['LoanApproval'] = 0;
                        $arrValues['LoanProposalNo'] = '';
                        $arrValues['BankName'] = '';
                        $arrValues['LoanAmt'] = 0;
                        $arrValues['SanctionDate'] = NULL;
                    }
                    // unit details
                    $select = $sql->select();
                    $select->from(array('a' => 'KF_UnitMaster'))
                        ->join(array('b' => 'Crm_UnitDetails'), 'a.UnitId = b.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array('a.UnitId' => $unitBooking['UnitId'], 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $select = $sql->select();
                    $select->from(array('a' => 'KF_UnitMaster'))
                        ->columns(array('UnitId'))
                        ->join(array('b' => 'Crm_UnitTypeOtherCostTrans'), 'b.UnitTypeId=a.UnitTypeId', array('Amount' => new expression('SUM(Amount)')), $select::JOIN_LEFT)
                        ->where(array('a.UnitId' => $unitBooking['UnitId'], 'a.DeleteFlag' => 0))
                        ->group(array('b.Amount', 'a.UnitId'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrAllReceiptTypes = array();
                    foreach($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }

                    // Discount

                    $discountBased = $this->bsf->isNullCheck($postData['discount_based'], 'string');
                    if($discountBased == "R"){
                        $discountBased ="N";
                    }
                    $referalType = $this->bsf->isNullCheck($postData['referalType'], 'string');
                    if($referalType == 'B') {
                        $referalTypeId = $this->bsf->isNullCheck($postData['buyerName'], 'number');
                    } else if($referalType == 'E') {
                        $referalTypeId = $this->bsf->isNullCheck($postData['employeeName'], 'number');
                    }
                    $planList = $this->bsf->isNullCheck($postData['plan_list'], 'number');
                    $arrValues['DiscountBased']=$discountBased;
                    $arrValues['PlanId']=$planList;
                    $arrValues['ReferalType'] = $referalType;
                    $arrValues['ReferalTypeId'] = $referalTypeId;
                    $discountType = $this->bsf->isNullCheck($postData['discount_type'], 'string');
                    if ($unitamt['Amount'] > 0) {

                        $netAmt = $unitDetail['NetAmt'] + $unitamt['Amount'];
                    }
                    else{
                        $netAmt = $unitDetail['NetAmt'];
                    }

                    $landAmt = $unitDetail['LandAmount'];
                    $constructionAmt = $unitDetail['ConstructionAmount'];
                    $arrValues['DiscountType'] = '';
                    $arrValues['Discount'] = 0;
                    $arrValues['LumpsumReceiptId'] = 0;
                    if(!is_null($discountType)) {
                        $arrValues['DiscountType'] = $discountType;
                        $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                        if($discountType == 'L' ) {
                            $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');

                            if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                $constructionAmt -= $arrValues['Discount'];
                                $netAmt -= $arrValues['Discount'];

                            } elseif($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                $landAmt -= $arrValues['Discount'];
                                $netAmt -= $arrValues['Discount'];

                            } else {
                                $netAmt -= $arrValues['Discount'];
                                $constructionAmt =$netAmt-$landAmt;
                            }
                        } else if($discountType == 'R') {

                            $netAmt =$unitDetail['Rate']- $arrValues['Discount'];
                            $netAmt= $netAmt * $unitDetail['UnitArea'];
                            $constructionAmt =$netAmt-$landAmt;

                        } else if($discountType == 'P') {
                            $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                            $dis =$netAmt*($arrValues['Discount']/100);

                            if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                $dis =$constructionAmt*($arrValues['Discount']/100);
                                $constructionAmt -= $dis;
                                $netAmt -= $dis;

                            } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                $dis =$landAmt*($arrValues['Discount']/100);
                                $landAmt -= $dis;
                                $netAmt -= $dis;
                            } else {
                                $netAmt -= $dis;
                                $constructionAmt =$netAmt-$landAmt;

                            }
                        }
                    }
                    $update = $sql->update();
                    $update->table('Crm_UnitBooking')
                        ->set($arrValues)
                        ->where(array('BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Crm_CoApplicantTrans')
                        ->where(array('BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    $coAppCount = $this->bsf->isNullCheck($postData['coApp_count'], 'number');
                    for ($i = 1; $i <= $coAppCount; $i++) {
                        if ($postData['coApp_name_' . $i] != "") {
                            $coApplicantName = $this->bsf->isNullCheck($postData['coApp_name_' . $i], 'string');

                            $insert = $sql->insert();
                            $insert->into('Crm_CoApplicantTrans');
                            $insert->Values(array('CoApplicantName' => $coApplicantName
                            , 'BookingId' => $bookingId));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    // other cost
                    // delete
                    $delete = $sql->delete();
                    $delete->from('Crm_FinalisationOtherCostTrans')
                        ->where(array('BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    if(is_array($postData['other_cost']) && count($postData['other_cost']) > 0) {
                        foreach($postData['other_cost'] as $otherCostId) {
                            $insert = $sql->insert();
                            $insert->into('Crm_FinalisationOtherCostTrans')
                                ->values(array('BookingId' => $bookingId, 'OtherCostId' => $otherCostId));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    // check list
                    // delete
                    $delete = $sql->delete();
                    $delete->from('Crm_FinalisationCheckListTrans')
                        ->where(array('BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    if(is_array($postData['check_list']) && count($postData['check_list']) > 0) {
                        foreach($postData['check_list'] as $checkListId) {

                            $checkListDate = NULL;
                            if(strtotime($postData['check_list_date_'. $checkListId]) != FALSE) {
                                $checkListDate = date('Y-m-d', strtotime($postData['check_list_date_'. $checkListId]));
                            }
                            $checkListExeId = $this->bsf->isNullCheck($postData['check_list_executive_id_'. $checkListId], 'number');

                            $insert = $sql->insert();
                            $insert->into('Crm_FinalisationCheckListTrans')
                                ->values(array('BookingId' => $bookingId, 'CheckListId' => $checkListId,
                                    'SubmittedDate' => $checkListDate, 'ExecutiveId' => $checkListExeId));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    // custom payment schedule
                    $sch_cust_terms = $this->bsf->isNullCheck($postData['sch_cust_terms'], 'number');
                    if($sch_cust_terms != 0) {
                        // delete
                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleUnitTrans')
                            ->where(array('UnitId' =>  $unitBooking['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        for ($i = 0; $i < $sch_cust_terms; $i++) {
                            $sch_cust_date = $this->bsf->isNullCheck($postData['sch_cust_date_'.$i], 'date');
                            $sch_cust_desc = $this->bsf->isNullCheck($postData['sh_cust_desc_'.$i], 'string');
                            $sch_cust_amount = $this->bsf->isNullCheck($postData['sh_cust_amount_'.$i], 'number');

                            if($sch_cust_desc == '' || $sch_cust_amount == 0)
                                continue;

                            $insert = $sql->insert();
                            $insert->into('Crm_PaymentScheduleUnitTrans')
                                ->values(array(
                                    'BookingId' => $bookingId,
                                    'SchDate' => date('Y-m-d', strtotime($sch_cust_date)),
                                    'TermDescription' => $sch_cust_desc,
                                    'Amount' => $sch_cust_amount,
                                    'StageType' => 'C',
                                    'UnitId' => $unitBooking['UnitId']
                                ));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    else {
                        // payment schedule details
                        $select1 = $sql->select();
                        $select1->from(array('a' => 'Crm_PaymentScheduleDetail'))
                            ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                            ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                            ->where("a.StageType = 'S'");

                        $select2 = $sql->select();
                        $select2->from(array('a' => 'Crm_PaymentScheduleDetail'))
                            ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                            ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                            ->where("a.StageType = 'D'");
                        $select2->combine($select1,'Union ALL');

                        $select3 = $sql->select();
                        $select3->from(array('a' => 'Crm_PaymentScheduleDetail'))
                            ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                            ->where("a.StageType = 'O'");
                        $select3->combine($select2,'Union ALL');

                        $select4 = $sql->select();
                        $select4->from(array('a' => 'Crm_PaymentScheduleDetail'))
                            ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                            ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                            ->where("a.StageType = 'A'");
                        $select4->combine($select3,'Union ALL');

                        $select5 = $sql->select();
                        $select5->from(array("g"=>$select4))
                            ->columns(array('*'))
                            ->join(array('d' => 'Crm_PaymentSchedule'), 'g.PaymentScheduleId=d.PaymentScheduleId', array('*'), $select5::JOIN_LEFT)
                            ->where(array('d.PaymentScheduleId' => $arrValues['PaymentScheduleId'], 'd.DeleteFlag' => 0))
                            ->order("g.PaymentScheduleDetailId ASC");
                        $stmt = $sql->getSqlStringForSqlObject($select5);
                        $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        // project details
                        $select = $sql->select();
                        $select->from('Crm_ProjectDetail')
                            ->where(array('ProjectId' => $unitBooking['ProjectId']))
                            ->limit(1);
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $projectDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if(empty($projectDetail)) {
                            throw new \Exception('Project detail not found!');
                        }

                        // Project Other cost
                        $select = $sql->select();
                        $select->from('Crm_ProjectOtherCostTrans')
                            ->where(array('ProjectId' => $unitBooking['ProjectId']));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $arrResult = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        $arrProjectOtherCost = array();
                        if(!empty($arrResult)) {
                            foreach($arrResult as $otherCost) {
                                $arrProjectOtherCost[$otherCost['OtherCostId']] = $otherCost['Amount'];
                            }
                        }

                        $startDate = NULL;
                        $arrStagesEndDate = array();
                        $arrDescriptionsEndDate = array();
                        $arrOtherCostsEndDate = array();

                        // delete
                        $subQuery = $sql->select();
                        $subQuery->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                            ->join(array('b' => 'Crm_PaymentScheduleUnitTrans'), 'a.PaymentScheduleUnitTransId = b.PaymentScheduleUnitTransId', array(), $subQuery::JOIN_INNER)
                            ->columns(array('ReceiptTypeTransId'))
                            ->where(array('b.BookingId' => $bookingId));

                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleQualifierTrans')
                            ->where->expression('PSReceiptTypeTransId IN ?', $subQuery );
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $subQuery = $sql->select();
                        $subQuery->from('Crm_PaymentScheduleUnitTrans')
                            ->columns(array('PaymentScheduleUnitTransId'))
                            ->where(array('BookingId' => $bookingId));

                        if(!empty($arrPaymentSchUnitTransIds)) {
                            $delete = $sql->select();
                            $delete->from( 'Crm_PaymentScheduleUnitTrans' )
                                ->where->expression( 'PaymentScheduleUnitTransId IN ?', $subQuery );
                            $stmt = $sql->getSqlStringForSqlObject( $delete );
                            $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                        }


                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleUnitReceiptTypeTrans')
                            ->where(array('UnitId' => $unitDetail['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleUnitTrans')
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $overAllQualAmt = 0;
                        foreach($arrPaymentScheduleDetails as &$psDetail) {

                            $PaymentScheduleDate = date( 'd-m-Y', strtotime($BookingDate));
                            if($psDetail['DateFrom'] != '') {
                                // date from
                                switch($psDetail['DateFrom']) {
                                    case 'F':
                                        $startDate = $arrValues['BookingDate'];
                                        break;
                                    case 'S':
                                        $startDate = $projectDetail['StartDate'];
                                        break;
                                    case 'E':
                                        $startDate = $projectDetail['EndDate'];
                                        break;
                                    case ( preg_match( '/[\d]+/', $psDetail[ 'DateFrom' ] ) ? TRUE : FALSE ):
                                        $arrMatches = array();
                                        preg_match_all('/([\d]+)#([a-z]+)/i', $psDetail[ 'DateFrom' ], $arrMatches);
                                        if($arrMatches[2][0] == 'S') {
                                            $startDate = $arrStagesEndDate[$arrMatches[1][0]];
                                        } elseif($arrMatches[2][0] == 'D') {
                                            $startDate = $arrDescriptionsEndDate[$arrMatches[1][0]];
                                        } elseif($arrMatches[2][0] == 'O') {
                                            $startDate = $arrOtherCostsEndDate[$arrMatches[1][0]];
                                        }
                                        break;
                                    default:
                                        $startDate = NULL;
                                }

                                // Date After Before
                                $dateSign = NULL;
                                if($psDetail['DateAfterBefore'] == 1) {
                                    $dateSign = '+';
                                } elseif($psDetail['DateAfterBefore'] == 2) {
                                    $dateSign = '-';
                                }

                                // duration type
                                $durationType = NULL;
                                if($psDetail['DurationType'] == 1) {
                                    // day
                                    $durationType = 'days';
                                } elseif($psDetail['DurationType'] == 2) {
                                    // month
                                    $durationType = 'months';
                                }

                                if(strtotime($startDate) != FALSE) {
                                    $PaymentScheduleDate = date( 'd-m-Y', strtotime( $startDate . $dateSign . $psDetail[ 'DurationDays' ] . ' ' . $durationType ) );
                                } else {
                                    $PaymentScheduleDate = NULL;
                                }
                            } else {
                                $PaymentScheduleDate = NULL;
                            }
                            $psDetail['PaymentScheduleDate'] = $PaymentScheduleDate;

                            // stage type
                            switch ( $psDetail['StageType'] ) {
                                case 'O':
                                    $select = $sql->select();
                                    if($unitDetail['UnitTypeId'] == 0) {
                                        // project other cost trans
                                        $select->from('Crm_ProjectOtherCostTrans')
                                            ->where(array('ProjectId' => $projectDetail['ProjectId'], 'OtherCostId' => $psDetail['StageId']));
                                    } else {
                                        // unittype other cost trans
                                        $select->from('Crm_UnitTypeOtherCostTrans')
                                            ->where(array('UnitTypeId' => $unitDetail['UnitTypeId'], 'OtherCostId' => $psDetail['StageId']));
                                    }
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $result = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                    if(!empty($result)) {
                                        $psDetail['schedule_amt'] = $result['Amount'];
                                    } else {
                                        $psDetail['schedule_amt'] = 0;
                                    }
                                    $arrOtherCostsEndDate[$psDetail['StageId']] = $PaymentScheduleDate;
                                    break;
                                case 'A':
                                    if($psDetail['Percentage'] != 0) {
                                        $psDetail['schedule_amt'] = ($netAmt * floatval($psDetail['Percentage'])) / 100;
                                    } else {
                                        $psDetail['schedule_amt'] = floatval($psDetail['Amount']);
                                    }
                                    $netAmt -= $psDetail['schedule_amt'];
                                    $PaymentScheduleDate = date( 'd-m-Y', strtotime($BookingDate));
                                    break;
                                case 'D':
                                    $arrDescriptionsEndDate[$psDetail['StageId']] = $PaymentScheduleDate;
                                    $psDetail['schedule_amt'] = ($netAmt * floatval($psDetail['Percentage'])) / 100;
                                    break;
                                case 'S':
                                    $arrStagesEndDate[$psDetail['StageId']] = $PaymentScheduleDate;
                                    $psDetail['schedule_amt'] = ($netAmt * floatval($psDetail['Percentage'])) / 100;
                                    break;
                            }

                            $schDate = NULL;
                            if(strtotime($PaymentScheduleDate) != FALSE) {
                                $schDate = date('Y-m-d', strtotime($PaymentScheduleDate));
                            }
                            $insert = $sql->insert();
                            $insert->into('Crm_PaymentScheduleUnitTrans')
                                ->values(array(
                                    'BookingId' => $bookingId,
                                    'SchDate' => $schDate,
                                    'RoundOff' => $psDetail['RoundOff'],
                                    'Percentage' => $psDetail['Percentage'],
                                    'Amount' => $psDetail['schedule_amt'],
                                    'StageType' => $psDetail['StageType'],
                                    'StageId' => $psDetail['StageId'],
                                    'UnitId' => $unitDetail['UnitId']
                                ));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                            $stageTotQualAmt = 0;
                            $stageTotNetAmt = 0;

                            if($psDetail['StageType'] == 'A') {
                                // advance amt doesn't have receipts
                                $update = $sql->update();
                                $update->table('Crm_PaymentScheduleUnitTrans')
                                    ->set(array('QualAmount' => $stageTotQualAmt, 'NetAmount' => $psDetail['schedule_amt']))
                                    ->where(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId));
                                $stmt = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                                continue;
                            }

                            // receipt type
                            $select1 = $sql->select();
                            $select1->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName'), $select1::JOIN_LEFT)
                                ->where(array('a.ReceiptType' => 'S', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));

                            $select2 = $sql->select();
                            $select2->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName'), $select2::JOIN_LEFT)
                                ->where(array('a.ReceiptType' => 'D', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));
                            $select2->combine($select1,'Union ALL');

                            $select3 = $sql->select();
                            $select3->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName'), $select3::JOIN_LEFT)
                                ->where(array('a.ReceiptType' => 'O', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));
                            $select3->combine($select2,'Union ALL');

                            $select4 = $sql->select();
                            $select4->from(array("g"=>$select3))
                                ->columns(array('*'))
                                ->order("g.SortId ASC");

                            $stmt = $sql->getSqlStringForSqlObject($select4);
                            $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            $scheduleAmt = $psDetail['schedule_amt'];
                            $curReceiptType = '';
                            $otherCostAmt = 0;
                            foreach($arrReceiptTypes as $receiptType) {

                                switch($receiptType['ReceiptType']) {
                                    case 'O':
                                        $receiptType['Amount'] = $arrProjectOtherCost[$receiptType['ReceiptTypeId']];
                                        $receiptType['Type'] = 'O';
                                        break;
                                    case 'S':
                                        $receiptType['Type'] = $arrAllReceiptTypes[$receiptType['ReceiptTypeId']];;
                                        break;
                                }

                                $curAmt = 0;
                                if($curReceiptType == '') {
                                    $curReceiptType = $receiptType['Type'];
                                    if($curReceiptType == 'O') {
                                        $otherCostAmt = floatval($receiptType['Amount']);
                                    }
                                }

                                switch($curReceiptType) {
                                    case 'L' :
                                        if ($landAmt <= 0) {
                                            $curAmt = 0;
                                            $curReceiptType = '';
                                        } else if ($psDetail['schedule_amt'] <= $landAmt) {
                                            $curAmt = $scheduleAmt;
                                            $landAmt -= $scheduleAmt;
                                            $scheduleAmt = 0;
                                        } else if ($scheduleAmt > $landAmt) {
                                            $curAmt = $landAmt;
                                            $scheduleAmt -= $landAmt;
                                            $landAmt = 0;
                                            $curReceiptType = '';
                                        }
                                        break;
                                    case 'C':
                                        if($landAmt <= 0) {
                                            if ($constructionAmt <= 0) {
                                                $curAmt = 0;
                                                $curReceiptType = '';
                                            } else if ($scheduleAmt <= $constructionAmt) {
                                                $curAmt = $scheduleAmt;
                                                $constructionAmt -= $scheduleAmt;
                                                $scheduleAmt = 0;
                                            } else if ($scheduleAmt > $constructionAmt) {
                                                $curAmt = $constructionAmt;
                                                $scheduleAmt -= $constructionAmt;
                                                $constructionAmt = 0;
                                                $curReceiptType = '';
                                            }
                                        }
                                        break;
                                    default:
                                        if($curReceiptType == $receiptType['Type']) {
                                            if($otherCostAmt <= 0) {
                                                $curAmt = 0;
                                                $curReceiptType = '';
                                            } else if($scheduleAmt <= $otherCostAmt) {
                                                $curAmt = $scheduleAmt;
                                                $otherCostAmt -= $scheduleAmt;
                                                $scheduleAmt = 0;
                                            } else if($scheduleAmt > $otherCostAmt) {
                                                $curAmt = $otherCostAmt;
                                                $scheduleAmt -= $otherCostAmt;
                                                $otherCostAmt = 0;
                                                $curReceiptType = '';
                                            }
                                        }
                                        break;
                                }

                                if($psDetail['StageType'] == 'O') {
                                    $curAmt = floatval ($psDetail['schedule_amt']);
                                }

                                if(!is_numeric($curAmt)) {
                                    $curAmt = 0;
                                }

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                    ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                        'UnitId' => $unitDetail['UnitId'],
                                        'ReceiptTypeId' => $receiptType['ReceiptTypeId'],
                                        'ReceiptType' => $receiptType['ReceiptType'],
                                        'Amount' => $curAmt));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $psReceiptTypeTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                // Qualifier Calculations
                                if($curAmt > 0) {

                                    $select = $sql->select();
                                    $select->from(array('c' => 'Crm_QualifierSettings'))
                                        ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                            array( 'QualifierId', 'YesNo', 'RefId' => new Expression( "'R'+ rtrim(ltrim(str(RefId)))" ), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'NetPer', 'BaseAmount' => new Expression("$curAmt"),
                                                'ExpressionAmt' => new Expression("$curAmt"), 'TaxableAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'TaxAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'SurChargeAmt' => new Expression( "CAST(0 As Decimal(18,2))" ),
                                                'EDCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'HEDCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'NetAmt' => new Expression( "CAST(0 As Decimal(18,2))" ) ), $select::JOIN_LEFT)
                                        ->join( array( "b" => "Proj_QualifierMaster" ), "a.QualifierId=b.QualifierId", array( 'QualifierName', 'QualifierTypeId' ), $select::JOIN_INNER );
                                    $select->where(array('QualSetType' => $receiptType['ReceiptType'], 'QualSetTypeId' => $receiptType['ReceiptTypeId']))
                                        ->order('SortOrder ASC');
                                    $statement = $sql->getSqlStringForSqlObject( $select );
                                    $arrQualList = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                                    $qualTotAmt = 0;
                                    foreach($arrQualList as $qualList) {
                                        if($qualList['QualifierTypeId']==1){

                                            $tdstype = 11;
                                            $date = date('Y/m/d');

                                            $sql = new Sql($dbAdapter);
                                            $select = $sql->select();
                                            $select->from ('FA_QualPeriod')
                                                ->columns(array('PeriodId'));
                                            $select->where("QualType='T' and ((TDate is not null and FDate <= '$date' and TDate >= '$date') or
                                        (TDate is null and FDate <= '$date'))");
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $period = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                            $iPeriodId=0;
                                            if (!empty($period)) $iPeriodId = $period['PeriodId'];

                                            $select = $sql->select();
                                            $select->from ('FA_TDSSetting')
                                                ->columns(array('TaxablePer','TaxPer','SurCharge','EDCess','HEDCess','NetTax'));
                                            $select->where("TDSTypeId=$tdstype and PeriodId = $iPeriodId");
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $tds = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                            if (!empty($tds)) {
                                                $qualList['TaxablePer'] = $tds['TaxablePer'];
                                                $qualList['TaxPer'] = $tds['TaxPer'];
                                                $qualList['SurCharge'] = $tds['SurCharge'];
                                                $qualList['EDCess'] = $tds['EDCess'];
                                                $qualList['HEDCess'] = $tds['HEDCess'];
                                                $qualList['NetTax'] = $tds['NetTax'];
                                            }

                                        }
                                        else if($qualList['QualifierTypeId']==2){
                                            $worktype ='F';
                                            $date = date('Y/m/d');
                                            $sql = new Sql($dbAdapter);
                                            $select = $sql->select();
                                            $select->from ('FA_QualPeriod')
                                                ->columns(array('PeriodId'));
                                            $select->where("QualType='S' and ((TDate is not null and FDate <= '$date' and TDate >= '$date') or
                                                (TDate is null and FDate <= '$date'))");
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $period = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                            $iPeriodId=0;
                                            if (!empty($period)) $iPeriodId = $period['PeriodId'];

                                            $select = $sql->select();
                                            $select->from ('FA_ServiceTaxSetting')
                                                ->columns(array('TaxablePer','TaxPer','SurCharge','EDCess','HEDCess','NetTax','ReversePer','SBCess'));
                                            $select->where("WorkType='$worktype' and PeriodId = $iPeriodId");
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $sT = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                            if (!empty($tds)) {
                                                $qualList['TaxablePer'] = $sT['TaxablePer'];
                                                $qualList['TaxPer'] = $sT['TaxPer'];
                                                $qualList['SurCharge'] = $sT['SurCharge'];
                                                $qualList['EDCess'] = $sT['EDCess'];
                                                $qualList['HEDCess'] = $sT['HEDCess'];
                                                $qualList['NetTax'] = $sT['NetTax'];
                                                $qualList['ReversePer'] = $sT['ReversePer'];
                                                $qualList['SBCess'] = $sT['SBCess'];
                                            }
                                        }
                                        $psQualTransValues = array(
                                            'PSReceiptTypeTransId' => $psReceiptTypeTransId,
//                                            'PaymentScheduleId' => $psDetail['PaymentScheduleId'],
//                                            'PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
//                                            'UnitId' => $unitDetail['UnitId'],
//                                            'ReceiptTypeId' => $receiptType['ReceiptTypeId'],
//                                            'ReceiptType' => $receiptType['ReceiptType'],
                                            'QualifierId' => $qualList['QualifierId'],
                                            'YesNo' => $qualList['YesNo'],
                                            'Expression' => $qualList['Expression'],
                                            'ExpPer' => $qualList['ExpPer'],
                                            'TaxablePer' => $qualList['TaxablePer'],
                                            'TaxPer' => $qualList['TaxPer'],
                                            'Sign' => $qualList['Sign'],
                                            'SurCharge' => $qualList['SurCharge'],
                                            'EDCess' => $qualList['EDCess'],
                                            'HEDCess' => $qualList['HEDCess']

                                        );

                                        $netPer = $qualList['TaxPer'] + ($qualList['TaxPer'] * ($qualList['SurCharge'] + $qualList['EDCess'] + $qualList['HEDCess']))/100;
                                        $psQualTransValues['NetPer'] = $netAmt;
                                        $psQualTransValues['ExpressionAmt'] = $netAmt;
                                        $psQualTransValues['TaxableAmt'] = $curAmt * ($qualList['TaxablePer'] / 100);
                                        $psQualTransValues['TaxAmt'] =  $psQualTransValues['TaxableAmt'] * ($qualList['TaxPer']/100);
                                        $CessAmt =  $psQualTransValues['TaxAmt'] * ($qualList['SurCharge']/100);
                                        $EDAmt =  $psQualTransValues['TaxAmt']* ($qualList['EDCess']/100);
                                        $HEDAmt =  $psQualTransValues['TaxAmt']* ($qualList['HEDCess']/100);
                                        $NetAmt = $psQualTransValues['TaxAmt'] + $CessAmt + $EDAmt + $EDAmt;
                                        $psQualTransValues['SurChargeAmt'] = $CessAmt;
                                        $psQualTransValues['EDCessAmt'] = $EDAmt;
                                        $psQualTransValues['HEDCessAmt'] = $HEDAmt;
                                        $psQualTransValues['NetAmt'] = $NetAmt;

                                        $qualTotAmt += $NetAmt;

                                        $insert = $sql->insert();
                                        $insert->into('Crm_PaymentScheduleQualifierTrans')
                                            ->values($psQualTransValues);
                                        $stmt = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                                    }

                                    $curRecNetAmt = $curAmt + $qualTotAmt;
                                    $update = $sql->update();
                                    $update->table('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                        ->set(array('QualAmount' => $qualTotAmt, 'NetAmount' => $curRecNetAmt))
                                        ->where(array('ReceiptTypeTransId' => $psReceiptTypeTransId));
                                    $stmt = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );

                                    $stageTotQualAmt += $qualTotAmt;
                                    $stageTotNetAmt += $curRecNetAmt;
                                }
                            }

                            $update = $sql->update();
                            $update->table('Crm_PaymentScheduleUnitTrans')
                                ->set(array('QualAmount' => $stageTotQualAmt, 'NetAmount' => $stageTotNetAmt))
                                ->where(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );

                            $overAllQualAmt += $stageTotQualAmt;
                        }

                        // update unit
                        $update = $sql->update();
                        $update->table('KF_UnitMaster')
                            ->set(array('Status' => 'S'))
                            ->where(array('UnitId' => $unitBooking['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $arrUnitDetailValues = array('QualifierAmount' => $overAllQualAmt);

                        // update unit detail if discount applied
                        if(!is_null($discountType)) {

                            $arrUnitDetailValues['Discount'] = $arrValues['Discount'];
                            $arrUnitDetailValues['DiscountType'] = $arrValues['DiscountType'];

                            if(isset($arrValues['LumpsumReceiptId'])) {
                                $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                            }

                        }

                        $update = $sql->update();
                        $update->table('Crm_UnitDetails')
                            ->set($arrUnitDetailValues)
                            ->where(array('UnitId' => $unitDetail['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Finalization-Modify','E','Finalization',$bookingId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);
                    $FeedId = $this->params()->fromQuery('FeedId');
                    $AskId = $this->params()->fromQuery('AskId');
                    if(isset($FeedId) && $FeedId!="") {
                        $this->redirect()->toRoute('crm/unit-fulldetails', array('controller' => 'project', 'action' => 'unit-fulldetails',"UnitDetailId"=>$unitBooking['UnitId']), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                    } else {
                        $this->redirect()->toRoute('crm/unit-fulldetails', array('controller' => 'project', 'action' => 'unit-fulldetails',"UnitDetailId"=>$unitBooking['UnitId']));
                    }
                }
                catch(PDOException $e){
                    $connection->rollback();
                }

            } else {
                // GET request

                try {

                    $bookingId = $this->params()->fromRoute('bookingId');
                    if(!is_numeric($bookingId)) {
                        throw new \Exception('Invalid Booking-id!');
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Crm_BrokerMaster'), 'd.BrokerId=a.BrokerId', array('BrokerName'), $select::JOIN_LEFT)
                        ->join(array('e' => 'WF_Users'), 'e.UserId=a.PostExecutiveId', array('ExecutiveName' => 'EmployeeName'), $select::JOIN_LEFT)
                        ->where(array('a.BookingId' => $bookingId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if(empty($unitBooking)) {
                        throw new \Exception('Unit booking not found!');
                    }

                    if($unitBooking['Approve'] == 'S') {
                        throw new \Exception('Unit Approved!');
                    }
                    $this->_view->unitBooking = $unitBooking;

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();

                    $select = $sql->select();
                    $select->from('Crm_CoApplicantTrans')
                        ->columns(array('CoApplicantName'))
                        ->where(array('BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->coAppDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_PlanBasedDiscount')
                        ->columns(array('*'))
                        ->where(array("DeleteFlag"=>0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->planList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //Employee Names
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('*'))
                        ->where(array("DeleteFlag"=>0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->employeeList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'WF_Users'), 'a.LeadId=b.UserId', array('UserName'), $select::JOIN_INNER)
                        ->columns(array('BuyerId'=>new Expression("distinct(a.LeadId)")))
                        ->where(array('a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->buyerList = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //payment schedules
                    $select = $sql->select();
                    $select->from('Crm_PaymentSchedule')
                        ->where(array('ProjectId' => $unitBooking['ProjectId'], 'DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrPaymentSchedules = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // other costs
                    $subQuery = $sql->select();
                    $subQuery->from("Crm_FinalisationOtherCostTrans")
                        ->columns(array('OtherCostId'))
                        ->where(array( "BookingId" => $bookingId));

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_ProjectOtherCostTrans'))
                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_LEFT)
                        ->columns(array('OtherCostId'))
                        ->where(array('a.ProjectId' => $unitBooking['ProjectId']));
                    $select->where->expression('a.OtherCostId NOT IN ?', array($subQuery));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrNonSelectedOtherCosts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_ProjectOtherCostTrans'))
                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_LEFT)
                        ->columns(array('OtherCostId'))
                        ->where(array('a.ProjectId' => $unitBooking['ProjectId']));
                    $select->where->expression('a.OtherCostId IN ?', array($subQuery));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrSelectedOtherCosts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Brokers
                    $select = $sql->select();
                    $select->from('Crm_BrokerMaster')
                        ->columns(array('data' => 'BrokerId', 'value' => 'BrokerName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrBrokers = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // check list
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_CheckListProjectTrans'))
                        ->join(array('b' => 'Crm_CheckListMaster'), 'b.CheckListId=a.CheckListId', array('CheckListName'), $select::JOIN_LEFT)
                        ->where(array('a.ProjectId' => $unitBooking['ProjectId'], 'a.DeleteFlag' => 0, 'a.CheckListTypeId' => 1));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrCheckList = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_FinalisationCheckListTrans'))
                        ->join(array('b' => 'WF_Users'), 'b.UserId=a.ExecutiveId', array('ExecutiveName' => 'EmployeeName'), $select::JOIN_LEFT)
                        ->where(array('BookingId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrSelectedCheckLists = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    foreach($arrCheckList as &$checkList) {
                        $isFound = FALSE;
                        foreach($arrSelectedCheckLists as $selCheckList) {
                            if($checkList['CheckListId'] == $selCheckList['CheckListId']) {
                                $isFound = TRUE;
                                $submittedDate = '';
                                if(strtotime($selCheckList['SubmittedDate']) != FALSE) {
                                    $submittedDate = date('d-m-Y', strtotime($selCheckList['SubmittedDate']));
                                }
                                $checkList['Checked'] = 'Checked';
                                $checkList['SubmittedDate'] = $submittedDate;
                                $checkList['ExecutiveName'] = $selCheckList['ExecutiveName'];
                                $checkList['ExecutiveId'] = $selCheckList['ExecutiveId'];
                                break;
                            }
                        }
                        if(!$isFound) {
                            $checkList['Checked'] = '';
                        }
                    }
                    $this->_view->arrCheckList = $arrCheckList;
                    // Executives
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('data' => 'UserId', 'value' => 'EmployeeName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array('ReceiptType'=>'S'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;
                    $arrAllReceiptTypes = array();
                    foreach($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }

                    // current payment schedule detail
                    $select1 = $sql->select();
                    $select1->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                        ->columns(array('*'))
                        ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                        ->where(array('a.StageType' => 'S', 'BookingId' => $bookingId));

                    $select2 = $sql->select();
                    $select2->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                        ->columns(array('*'))
                        ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                        ->where(array('a.StageType' => 'D', 'BookingId' => $bookingId));
                    $select2->combine($select1,'Union ALL');

                    $select3 = $sql->select();
                    $select3->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                        ->columns(array('*'))
                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                        ->where(array('a.StageType' => 'O', 'BookingId' => $bookingId));
                    $select3->combine($select2,'Union ALL');

                    $select4 = $sql->select();
                    $select4->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                        ->columns(array('*'))
                        ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                        ->where(array('a.StageType' => 'A', 'BookingId' => $bookingId));
                    $select4->combine($select3,'Union ALL');

                    $select5 = $sql->select();
                    $select5->from(array("g"=>$select4))
                        ->columns(array('*'))
                        ->where(array('BookingId' => $bookingId));

                    $stmt = $sql->getSqlStringForSqlObject($select5);
                    $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    if(!empty($arrPaymentScheduleDetails)) {

                        foreach($arrPaymentScheduleDetails as &$paymentSchedule) {
                            // receipt type
                            $select1 = $sql->select();
                            $select1->from( array( 'a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans' ) )
                                ->join( array( 'b' => 'Crm_ReceiptTypeMaster' ), 'a.ReceiptTypeId = b.ReceiptTypeId', array( 'ReceiptName' => 'ReceiptTypeName' ), $select1::JOIN_LEFT )
                                ->where( array( 'a.ReceiptType' => 'S', 'a.PaymentScheduleUnitTransId' => $paymentSchedule[ 'PaymentScheduleUnitTransId' ] ) );

                            $select2 = $sql->select();
                            $select2->from( array( 'a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans' ) )
                                ->join( array( 'b' => 'Crm_DescriptionMaster' ), 'a.ReceiptTypeId = b.DescriptionId', array( 'ReceiptName' => 'DescriptionName' ), $select2::JOIN_LEFT )
                                ->where( array( 'a.ReceiptType' => 'D', 'a.PaymentScheduleUnitTransId' => $paymentSchedule[ 'PaymentScheduleUnitTransId' ]) );
                            $select2->combine( $select1, 'Union ALL' );

                            $select3 = $sql->select();
                            $select3->from( array( 'a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans' ) )
                                ->join( array( 'b' => 'Crm_OtherCostMaster' ), 'a.ReceiptTypeId = b.OtherCostId', array( 'ReceiptName' => 'OtherCostName' ), $select3::JOIN_LEFT )
                                ->where( array( 'a.ReceiptType' => 'O', 'a.PaymentScheduleUnitTransId' => $paymentSchedule[ 'PaymentScheduleUnitTransId' ] ) );
                            $select3->combine( $select2, 'Union ALL' );

                            $select4 = $sql->select();
                            $select4->from( array( "g" => $select3 ) )
                                ->columns( array( '*' ) )
                                ->order("g.ReceiptTypeTransId ASC");

                            $stmt = $sql->getSqlStringForSqlObject( $select4 );
                            $arrReceiptTypes = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            if(!empty($arrReceiptTypes)) {

                                $iQualCount = 0;
                                foreach($arrReceiptTypes as &$receipt) {

                                    switch($receipt['ReceiptType']) {
                                        case 'O':
                                            $receipt['Type'] = 'O';
                                            break;
                                        case 'S':
                                            $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];;
                                            break;
                                    }

                                    // qualifier
                                    $select = $sql->select();
                                    $select->from( array( 'a' => 'Crm_PaymentScheduleQualifierTrans' ) )
                                        ->columns(array( 'QualifierId', 'YesNo', 'RefId' => new Expression( "'R'+ rtrim(ltrim(str(TransId)))" ), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'NetPer',
                                            'ExpressionAmt', 'TaxableAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'TaxAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'SurChargeAmt' => new Expression( "CAST(0 As Decimal(18,2))" ),
                                            'EDCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'HEDCessAmt' => new Expression( "CAST(0 As Decimal(18,2))" ), 'NetAmt' => new Expression( "CAST(0 As Decimal(18,2))" ) ), $select::JOIN_LEFT )
                                        ->join( array( "b" => "Proj_QualifierMaster" ), "a.QualifierId=b.QualifierId", array( 'QualifierName', 'QualifierTypeId' ), $select::JOIN_INNER );
                                    $select->where(array('PSReceiptTypeTransId' => $receipt['ReceiptTypeTransId']));
                                    $statement = $sql->getSqlStringForSqlObject( $select );
                                    $qualList = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                    if ( !empty( $qualList ) ) {
                                        foreach($qualList as &$qual) {
                                            $qual['BaseAmount'] = $receipt['Amount'];
                                        }

                                        $sHtml = Qualifier::getQualifier( $qualList );
                                        $iQualCount = $iQualCount + 1;
                                        $sHtml = str_replace( '__1', '_' . $iQualCount, $sHtml );
                                        $receipt[ 'qualHtmlTag' ] = $sHtml;
                                    }
                                }

                                $paymentSchedule['arrReceiptTypes'] = $arrReceiptTypes;
                            }
                        }
                    }
                    if(count($arrPaymentScheduleDetails) > 0)
                        $this->_view->arrPaymentScheduleDetails = $arrPaymentScheduleDetails;

                    // custom payment schedule
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                        ->columns(array('SchDate' => new Expression("FORMAT(a.SchDate,'dd-MM-yyyy')"), 'Amount', 'TermDescription','PaymentScheduleUnitTransId'))
                        ->where(array('a.BookingId' => $bookingId, 'a.StageType' => 'C'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrCustomPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    if(count($arrCustomPaymentScheduleDetails) != 0) {
                        foreach($arrCustomPaymentScheduleDetails as &$schedule) {
                            $select1 = $sql->select();
                            $select1->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('TypeName' => 'ReceiptTypeName', 'Type'), $select::JOIN_INNER)
                                ->columns(array('Type' => 'ReceiptType', 'TypeId' => 'ReceiptTypeId', 'Amount', 'TransId' => 'ReceiptTypeTransId', 'PaymentScheduleUnitTransId'))
                                ->where("a.ReceiptType != 'O' and a.PaymentScheduleUnitTransId =".$schedule['PaymentScheduleUnitTransId']);

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('TypeName' => new Expression("b.OtherCostName"), 'Type'=> new Expression('a.ReceiptType')), $select::JOIN_INNER)
                                ->columns(array('Type' => 'ReceiptType', 'TypeId' => 'ReceiptTypeId', 'Amount', 'TransId' => 'ReceiptTypeTransId', 'PaymentScheduleUnitTransId'))
                                ->where("a.ReceiptType == 'O' and a.PaymentScheduleUnitTransId =".$schedule['PaymentScheduleUnitTransId']);
                            $select->combine($select1, 'Union ALL');

                            $selectAll = $sql->select();
                            $selectAll->from(array("g" => $select))
                                ->order("")
                                ->columns(array('*'));
                            $stmt = $sql->getSqlStringForSqlObject($selectAll);

                            $schedule['Receipts'] = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        }

                        $this->_view->arrCustomPaymentScheduleDetails = $arrCustomPaymentScheduleDetails;
                    }
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    // AJAX Request
    public function unitsAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    $postParams = $request->getPost();
                    $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number' );
                    $LeadId = $this->bsf->isNullCheck($this->params()->fromPost('Lead_Id'), 'number' );
                    $mode = $this->bsf->isNullCheck($this->params()->fromPost('mode'), 'string' );

                    $subQuery = $sql->select();
                    $subQuery->from("Crm_UnitCancellation")
                        ->columns(array('UnitId'))
                        ->where(array( "LeadId" => $LeadId));




                    if($ProjectId == 0) {
                        throw new \Exception('Invalid Project-id!');
                    }
                    if($mode =='final') {

                        $select1 = $sql->select();
                        $select1->from('KF_UnitMaster')
                            ->columns(array('UnitId', 'UnitNo'))
                            ->where(array('Status' => 'U', 'ProjectId' => $ProjectId));

                        $select2 = $sql->select();
                        $select2->from(array('a' => 'Crm_UnitBlock'))
                            ->columns(array('UnitId'))
                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId = b.UnitId', array('UnitNo'), $select2::JOIN_INNER)
                            ->where(array('a.LeadId' => $LeadId, 'a.DeleteFlag' => 0, 'b.ProjectId' => $ProjectId,'a.ExecutiveId'=>$userId));
                        $select2->where("b.Status IN ('U','B')");

                        $select2->combine($select1, 'Union ALL');

                        $select3 = $sql->select();
                        $select3->from(array('a' => 'Crm_UnitPreBooking'))
                            ->columns(array('UnitId'))
                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId = b.UnitId', array('UnitNo'), $select3::JOIN_INNER)
                            ->where(array('a.LeadId' => $LeadId, 'a.DeleteFlag' => 0, 'b.ProjectId' => $ProjectId,'a.ExecutiveId'=>$userId));
                        $select3->where("b.Status IN ('U','P')");
                        $select3->combine($select2, 'Union ALL');


                        $select4 = $sql->select();
                        $select4->from(array("g" => $select3))
                            ->columns(array('UnitNo', 'UnitId'));
                        $select4->group(new Expression('g.UnitNo,g.UnitId'));
                        $select4->where->expression('UnitId NOT IN ?', array($subQuery));
                        $stmt = $sql->getSqlStringForSqlObject($select4);
                        $arrUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }
                    else {
                        $select1 = $sql->select();
                        $select1->from('KF_UnitMaster')
                            ->columns(array('UnitId', 'UnitNo'))
                            ->where(array('Status' => 'U', 'ProjectId' => $ProjectId));
                        $select1->where->expression('UnitId NOT IN ?', array($subQuery));
                        $stmt = $sql->getSqlStringForSqlObject($select1);
                        $arrUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }

                    $result =  json_encode(array('units' => $arrUnits));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }
    public function unitreceiptsAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here
                    $UnitId = $this->bsf->isNullCheck($this->params()->fromPost('UnitId'), 'number' );
                    $old = $this->bsf->isNullCheck($this->params()->fromPost('old'), 'number' );
                    $lead = $this->bsf->isNullCheck($this->params()->fromPost('lead'), 'number' );


                    // receipts
                    $select = $sql->select();
                    $select->from('Crm_ReceiptRegister')
                        ->where(array('UnitId' => $old,'LeadId'=>$lead));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrReceipts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $result =  json_encode(array(
                        'receipts' => $arrReceipts));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function unitdetailAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here
                    $UnitId = $this->bsf->isNullCheck($this->params()->fromPost('UnitId'), 'number' );
                    $old = $this->bsf->isNullCheck($this->params()->fromPost('old'), 'number' );
                    $lead = $this->bsf->isNullCheck($this->params()->fromPost('lead'), 'number' );
                    $leadId = $this->bsf->isNullCheck($this->params()->fromPost('LeadId'), 'number' );
                    $RequestFrom = $this->bsf->isNullCheck($this->params()->fromPost('RequestFrom'), 'string' );


                    if($UnitId == 0) {
                        throw new \Exception('Invalid Unit-id!');
                    }
//                    if($RequestFrom == 'finalisation') {
//                        throw new \Exception('Invalid Lead-id!');
//                    }

                    $prebook=array();
                    $prebook['AdvAmount']=0;
                    $prebook['Discount']=0;
                    $prebook['DiscountType']='';

                    $iUnitTypeId=0;
                    if($RequestFrom == 'finalisation') {

                        $select = $sql->select();
                        $select->from('Crm_UnitBlock')
                            ->columns(array('*'))
                            ->where(array('UnitId' =>$UnitId,'LeadId'=>$leadId,'DeleteFlag'=>0));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $block  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $select = $sql->select();
                        $select->from('Crm_UnitProposal')
                            ->columns(array('*'))
                            ->where(array('UnitId' =>$UnitId,'LeadId'=>$leadId,'DeleteFlag'=>0));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $proposal  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $select = $sql->select();
                        $select->from('Crm_UnitPreBooking')
                            ->columns(array('*'))
                            ->where(array('UnitId' =>$UnitId,'LeadId'=>$leadId,'DeleteFlag'=>0));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $prebookdet  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        if(count($block['BlockId']) > 0){
                            $select = $sql->select();
                            $select->from(array('a' => 'KF_UnitMaster'))
                                ->join(array('b' => 'Crm_UnitBlock'), new expression("b.UnitId=a.UnitId and b.DeleteFlag=0"), array('NetAmt'=>'NetAmount','LeadId','LandAmount'=>'LandAmount','BaseAmt'=>'BaseAmount','ConstructionAmount'=>'ConstructionAmount','GrossAmount'=>'GrossAmount','Rate'=>'BRate','QualifierAmount'=>'QualAmount','Discount'), $select::JOIN_LEFT)
                                ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                ->join(array('g' => 'crm_UnitDetails'), 'g.UnitId=a.UnitId', array('GuideLinevalue','AdvPercent','IntPercent','CarpetArea','UDSLandArea','AdvAmount','FacingId','MarketLandValue','OtherCostAmt'), $select::JOIN_LEFT)
                                ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=g.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                ->columns(array('UnitId', 'UnitNo','ProjectId','UnitTypeId'))
                                ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            $prebook['Discount']=$block['Discount'];
                            $prebook['DiscountType']=$block['DiscountType'];
                            $prebook['Name']='block';
                        }
                        else if(count($prebookdet['PreBookingId']) > 0){
                            $select = $sql->select();
                            $select->from(array('a' => 'KF_UnitMaster'))
                                ->join(array('b' => 'Crm_UnitPreBooking'), new expression("b.UnitId=a.UnitId and b.DeleteFlag=0"), array('NetAmt'=>'NetAmount','LeadId','LandAmount'=>'LandAmount','BaseAmt'=>'BaseAmount','ConstructionAmount'=>'ConstructionAmount','GrossAmount'=>'GrossAmount','Rate'=>'PRate','QualifierAmount'=>'QualAmount','Discount'), $select::JOIN_LEFT)
                                ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                ->join(array('g' => 'crm_UnitDetails'), 'g.UnitId=a.UnitId', array('GuideLinevalue','AdvPercent','IntPercent','AdvAmount','UDSLandArea','CarpetArea','FacingId','MarketLandValue','OtherCostAmt'), $select::JOIN_LEFT)
                                ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=g.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                ->columns(array('UnitId', 'UnitNo','ProjectId','UnitTypeId'))
                                ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            $prebook['AdvAmount']=$prebookdet['AdvAmount'];
                            $prebook['Discount']=$prebookdet['Discount'];
                            $prebook['DiscountType']=$prebookdet['DiscountType'];
                            $prebook['Name']='prebook';
                        }
                        else if(count($proposal['ProposalId']) > 0){
                            $select = $sql->select();
                            $select->from(array('a' => 'KF_UnitMaster'))
                                ->join(array('b' => 'Crm_UnitProposal'), new expression("b.UnitId=a.UnitId and b.DeleteFlag=0"), array('NetAmt'=>'NetAmount','LeadId','LandAmount'=>'LandAmount','BaseAmt'=>'BaseAmount','ConstructionAmount'=>'ConstructionAmount','GrossAmount'=>'GrossAmount','Rate'=>'PRate','AdvAmount'=>'AdvAmnt','QualifierAmount'=>'QualAmount','Discount'), $select::JOIN_LEFT)
                                ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                ->join(array('g' => 'crm_UnitDetails'), 'g.UnitId=a.UnitId', array('GuideLinevalue','AdvPercent','IntPercent','CarpetArea','FacingId','MarketLandValue','OtherCostAmt','UDSLandArea'), $select::JOIN_LEFT)
                                ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=g.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                ->columns(array('UnitId', 'UnitNo', 'ProjectId','UnitTypeId'))
                                ->where(array('a.UnitId' => $UnitId, 'b.LeadId'=>$leadId,'a.DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            $prebook['Discount'] = $proposal['Discount'];
                            $prebook['DiscountType'] = $proposal['DiscountType'];
                            $prebook['Name'] = 'proposal';

                        }
                        else {

                            $select = $sql->select();
                            $select->from(array('a' => 'KF_UnitMaster'))
                                ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                                ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=b.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                ->columns(array('UnitId', 'ProjectId', 'UnitNo',  'UnitTypeId'))
                                ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        }
                        if (!empty($unitDetail)) $iUnitTypeId = $unitDetail['UnitTypeId'];

                        // get proposal discount
                        $unitDetail['RateDiscount'] = 0;
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitProposal'))
                            ->columns(array('Discount'))
                            ->where(array('a.UnitId' => $UnitId, 'a.LeadId' => $lead, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $proposal = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if($proposal != FALSE)
                            $unitDetail['RateDiscount'] = $proposal['Discount'];
                        else {
                            // if no proposal discount, get campaign discount
                            $subQuery = $sql->select();
                            $subQuery->from('Crm_LeadSource')
                                ->columns(array('LeadSourceId'))
                                ->where(array('LeadId' => $lead, 'Name' =>'C'));

                            $select = $sql->select();
                            $select->from('Crm_CampaignRegister')
                                ->columns(array('DiscountRate'))
                                ->where->expression('CampaignId IN ?', array($subQuery));
                            $select->where("DiscountFrom >= '".date('Y-m-d')."' AND DiscountTo <= '".date('Y-m-d')."'");
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $campaign = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            if($campaign != FALSE)
                                $unitDetail['RateDiscount'] = $campaign['DiscountRate'];
                        }

                    } else {
                        $select = $sql->select();
                        $select->from(array('a' => 'KF_UnitMaster'))
                            ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                            ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                            ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                            ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName'), $select::JOIN_LEFT)
                            ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=b.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                            ->columns(array('UnitId', 'ProjectId','UnitNo', 'UnitArea','UnitTypeId'))
                            ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        if (!empty($unitDetail)) $iUnitTypeId = $unitDetail['UnitTypeId'];

                    }

                    $select = $sql->select();
                    $select->from('Crm_ProjectDetail')
                        ->columns(array('Include'))
                        ->where(array("projectId"=>$unitDetail['ProjectId']));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $include = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $unitamt=array();
                    $untld=0.00;
                    if($include['Include'] == 0 ){
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                            ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                            ->where(array('a.UnitTypeId' => $iUnitTypeId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    } else {

                        $select = $sql->select();
                        $select->from('Crm_ProjectOtherCostTrans')
                            ->columns(array('OtherCostId'))
                            ->where('OtherCostId IN (1,2)')
                            ->where(array("projectId"=>$unitDetail['ProjectId']));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $projectother = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        if(count($projectother) == 0 ) {

                            $select = $sql->select();
                            $select->from('Crm_ProjectDetail')
                                ->columns(array('LRegistrationValue', 'CRegistrationValue'))
                                ->where(array("projectId" => $unitDetail['ProjectId']));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $projectDetail = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            $otherCostId=array();
                            if (count($projectDetail['LRegistrationValue']) > 0 && count($projectDetail['CRegistrationValue'])==0 ) {
                                $otherCostId=array(1);
                            }
                            else if (count($projectDetail['LRegistrationValue']) == 0 && count($projectDetail['CRegistrationValue'])> 0 ) {
                                $otherCostId=array(2);


                            }
                            else if(count($projectDetail['LRegistrationValue']) > 0 && count($projectDetail['CRegistrationValue'])> 0 ){
                                $otherCostId=array(1,2);

                            }
                            $select = $sql->select();
                            $select->from('Crm_UnitType')
                                ->columns(array('LandRegAmount', 'ConsRegAmount'))
                                ->where(array("projectId" => $unitDetail['ProjectId']))
                                ->where(array('UnitTypeId' => $iUnitTypeId));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $proj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            $untld  =$proj['ConsRegAmount']+ $proj['LandRegAmount'];
                        }

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                            ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                            ->where(array('a.UnitTypeId' => $iUnitTypeId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    }
                    // receipts
                    $select = $sql->select();
                    $select->from('Crm_ReceiptRegister')
                        ->where(array('UnitId' => $old,'LeadId'=>$lead));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrReceipts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $result =  json_encode(array('unit_detail' => $unitDetail,
                        'receipts' => $arrReceipts,'unitamt'=>$unitamt,'prebook'=>$prebook,'land'=>$untld));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function othercostAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number' );
                    if($ProjectId == 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    // other costs
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_ProjectOtherCostTrans'))
                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_LEFT)
                        ->columns(array('OtherCostId'))
                        ->where(array('a.ProjectId' => $ProjectId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $result =  json_encode(array('other_costs' => $arrUnits));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function checklistAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number' );
                    if($ProjectId == 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    // check list
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_CheckListProjectTrans'))
                        ->join(array('b' => 'Crm_CheckListMaster'), 'b.CheckListId=a.CheckListId', array('CheckListName'), $select::JOIN_LEFT)
                        ->where(array('a.ProjectId' => $ProjectId, 'a.DeleteFlag' => 0, 'a.CheckListTypeId' => 1)); // 1- Finalization check list
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrCheckLists = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $result =  json_encode(array('check_lists' => $arrCheckLists));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function paymentschedulesAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number' );
                    if($ProjectId == 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    // payment schedules
                    $select = $sql->select();
                    $select->from('Crm_PaymentSchedule')
                        ->where(array('ProjectId' => $ProjectId, 'DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrPaymentSchedules = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $result =  json_encode(array('payment_schedules' => $arrPaymentSchedules));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function paymentscheduledetailAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {
                try {

                    $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number' );
                    $OtherCostIds=$this->params()->fromPost('OtherCostIds');

                    if($OtherCostIds == ""){ $OtherCostIds =0;}
                    else{
                        $OtherCostIds = trim(implode(',',$this->params()->fromPost('OtherCostIds')));
                    }



                    if($ProjectId == 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    $PaymentScheduleId = $this->bsf->isNullCheck($this->params()->fromPost('PaymentScheduleId'), 'number' );
                    if($PaymentScheduleId == 0) {
                        throw new \Exception('Invalid ProjectSchedule-id!');
                    }

                    $iUnitId = $this->bsf->isNullCheck($this->params()->fromPost('UnitId'), 'number' );

                    if($iUnitId == 0) {
                        throw new \Exception('Invalid Unit-id!');
                    }

                    $BookingId = $this->bsf->isNullCheck($this->params()->fromPost('BookingId'), 'number' );
                    $Type = $this->bsf->isNullCheck($this->params()->fromPost('Type'), 'string' );
                    $GrossAmt = $this->bsf->isNullCheck($this->params()->fromPost('GrossAmt'), 'number' );



                    $iUnitTypeId=0;
                    $select = $sql->select();
                    $select->from('KF_UnitMaster')
                        ->columns(array('UnitTypeId'))
                        ->where(array("UnitId" => $iUnitId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitype = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($unitype)) $iUnitTypeId = $unitype['UnitTypeId'];

                    switch($Type) {
                        case 'custom':
                            $select1 = $sql->select();
                            $select1->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->columns(array('PaymentScheduleId', 'TypeId' => 'ReceiptTypeId', 'SortId','ReceiptType'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('TypeName' => new Expression("b.OtherCostName"), 'Type'=> new Expression('a.ReceiptType'),'TaxablePer'), $select1::JOIN_INNER)
                                ->where(array("a.ReceiptType" => 'O', "a.PaymentScheduleId" => $PaymentScheduleId));

//                    $select2 = $sql->select();
//                    $select2->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
//                        ->columns(array('PaymentScheduleId','ReceiptTypeId','ReceiptType','SortId'))
//                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptTypeName' => new Expression("b.OtherCostName")), $select2::JOIN_INNER)
//                        ->join(array('c' => 'Crm_UnitTypeOtherCostTrans'), 'c.OtherCostId = b.OtherCostId', array("Amount"), $select2::JOIN_INNER)
//                        ->where(array("a.ReceiptType" => 'O',"a.PaymentScheduleId"=>$PaymentScheduleId,"c.UnitTypeId"=>$iUnitTypeId));
//                    $stmt = $sql->getSqlStringForSqlObject($select2);
//                    $other = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->columns(array('PaymentScheduleId', 'TypeId' => 'ReceiptTypeId', 'SortId','ReceiptType'))
                                ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('TypeName' => 'ReceiptTypeName', 'Type','TaxablePer'), $select::JOIN_INNER)
                                ->where("a.ReceiptType != 'O' AND a.PaymentScheduleId=$PaymentScheduleId");
                            $select->combine($select1, 'Union ALL');

                            $selectAll = $sql->select();
                            $selectAll->from(array("g" => $select))
                                ->order('SortId')
                                ->columns(array('*'));
                            $stmt = $sql->getSqlStringForSqlObject($selectAll);
                            $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            foreach ($arrPaymentScheduleDetails as &$receiptType) {

                                $taxablePer = $receiptType['TaxablePer'];
                                $select = $sql->select();
                                $select->from(array('c' => 'Crm_QualifierSettings'))
                                    ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                        array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(a.QualifierId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess','NetPer', 'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                                            'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                            'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"),'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"),'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                $select->where(array('c.QualSetType' => $receiptType['ReceiptType'], 'c.QualSetTypeId' => $receiptType['TypeId'],'a.QualType' => 'C'))
                                    ->order('SortOrder ASC');
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                if (!empty($qualList)) {
                                    foreach ($qualList as &$list) {
                                        if ($list['QualifierTypeId'] == 1 && $GrossAmt > 5000000) {

                                            $tdstype = 11;
                                            $date = date('Y/m/d');
                                            $tds = CommonHelper::getTDSSetting($tdstype, $date, $dbAdapter);
                                            $list['TaxablePer'] = $tds["TaxablePer"];
                                            $list['TaxPer'] = $tds["TaxPer"];
                                            $list['SurCharge'] = $tds["SurCharge"];
                                            $list['EDCess'] = $tds["EDCess"];
                                            $list['HEDCess'] = $tds["HEDCess"];
                                            $list['NetPer'] = $tds["NetTax"];
                                        } else if ($list['QualifierTypeId'] == 2) {

                                            $tdstype = 'F';
                                            $date = date('Y/m/d');
                                            $tds = CommonHelper::getSTSetting($tdstype, $date, $dbAdapter);
                                            $list['TaxablePer'] = $taxablePer;
                                            $list['TaxPer'] = $tds["TaxPer"];
                                            $list['KKCess'] = $tds["KKCess"];
                                            $list['SBCess'] = $tds["SBCess"];
                                            $list['NetPer'] = $tds["NetTax"];
                                        } else {

                                            $list['TaxablePer'] = 0;
                                            $list['TaxPer'] = 0;
                                            $list['SurCharge'] = 0;
                                            $list['EDCess'] = 0;
                                            $list['HEDCess'] = 0;
                                            $list['NetPer'] = 0;
                                        }

                                    }
                                    $sHtml = Qualifier::getQualifier($qualList);
                                    $receiptType['HtmlTag'] = $sHtml;
                                }
                            }

                            //add Extra othercost//

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->columns(array('ReceiptTypeId'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array(), $select::JOIN_INNER)
                                ->where(array("a.ReceiptType" => 'O',"a.PaymentScheduleId"=>$PaymentScheduleId));
                            //  ->where("a.ReceiptTypeId IN ($OtherCostIds)");

                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $othercost = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                            $other=array();
                            $resother=array();

                            foreach($othercost as $o){
                                array_push($other, $o['ReceiptTypeId']);
                            }


                            //return array_map('intval', explode(",", '1,2,3,4,5,6,7,8,9'));
                            $st=trim(strval($OtherCostIds));

                            $othercost= explode(",", $st);


                            if(count($othercost) > count($other) )  {

                                $resother=array_diff($othercost,$other);
                            }

                            else{
                                $resother=array_diff($other,$othercost);
                            }


                            //  Print_r($resother);die;

                            if(count($resother) > 0){
                                $otherres= implode(',',$resother);


                                //  if($otherres != "" || count($otherres) > 0){

                                $select = $sql->select();
                                $select->from(array('a' => 'Crm_OtherCostMaster'))
                                    ->columns(array('StageName' => new Expression("a.OtherCostName")))
                                    ->join(array('b' => 'Crm_UnitTypeOtherCostTrans'), 'a.OtherCostId = b.OtherCostId', array('PaymentScheduleId'=>new Expression("$PaymentScheduleId"), 'PaymentScheduleDetailId'=>new Expression("'0'"), 'StageId'=>new Expression("b.OtherCostId"), 'StageType'=>new Expression("'O'"), 'DateFrom'=> new Expression("''"), 'DateAfterBefore'=> new Expression("''"), 'DurationType'=> new Expression("''"), 'DurationDays'=> new Expression("''"), 'Date'=> new Expression("''"), 'RoundOff'=> new Expression("'0'"), 'Percentage'=> new Expression("'100'"), 'Amount','SortId'=>new Expression("'100'")), $select::JOIN_INNER)
                                    ->where(array("b.UnitTypeId"=>$iUnitTypeId))
                                    ->where("a.OtherCostId IN ($otherres)");
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $other = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                foreach ($other as &$psDetail) {
                                    $select4 = $sql->select();
                                    $select4->from(array('a' => 'Crm_OtherCostMaster'))
                                        ->columns(array('ReceiptType' => new Expression("'O'"), 'ReceiptTypeId' => new Expression("OtherCostId"), 'ReceiptName' => 'OtherCostName', 'TaxablePer'))
                                        ->where(array('a.OtherCostId' => $psDetail['StageId']));
                                    $stmt = $sql->getSqlStringForSqlObject($select4);
                                    $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    foreach ($arrReceiptTypes as &$receiptType) {

                                        $taxablePer = $receiptType['TaxablePer'];
                                        if ($receiptType['ReceiptType'] == 'O') {
                                            // $receiptType[ 'Amount' ] = $arrProjectOtherCost[ $otherCost[ 'OtherCostId' ] ];
                                            $receiptType['TypeId'] = 'O';
                                        }

                                        $select = $sql->select();
                                        $select->from(array('c' => 'Crm_QualifierSettings'))
                                            ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                                array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(a.QualifierId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'KKCess', 'SBCess', 'NetPer', 'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                                                    'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                                    'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                            ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                        $select->where(array('c.QualSetType' => $receiptType['ReceiptType'], 'c.QualSetTypeId' => $receiptType['ReceiptTypeId'], 'a.QualType' => 'C'))
                                            ->order('SortOrder ASC');
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                                        if (!empty($qualList)) {
                                            foreach ($qualList as &$list) {
                                                if ($list['QualifierTypeId'] == 1 && $GrossAmt > 5000000) {

                                                    $tdstype = 11;
                                                    $date = date('Y/m/d');
                                                    $tds = CommonHelper::getTDSSetting($tdstype, $date, $dbAdapter);
                                                    $list['TaxablePer'] = $tds["TaxablePer"];
                                                    $list['TaxPer'] = $tds["TaxPer"];
                                                    $list['SurCharge'] = $tds["SurCharge"];
                                                    $list['EDCess'] = $tds["EDCess"];
                                                    $list['HEDCess'] = $tds["HEDCess"];
                                                    $list['NetPer'] = $tds["NetTax"];
                                                } else if ($list['QualifierTypeId'] == 2) {

                                                    $tdstype = 'F';
                                                    $date = date('Y/m/d');
                                                    $tds = CommonHelper::getSTSetting($tdstype, $date, $dbAdapter);
                                                    $list['TaxablePer'] = $taxablePer;
                                                    $list['TaxPer'] = $tds["TaxPer"];
                                                    $list['KKCess'] = $tds["KKCess"];
                                                    $list['SBCess'] = $tds["SBCess"];
                                                    $list['NetPer'] = $tds["NetTax"];
                                                } else {

                                                    $list['TaxablePer'] = 0;
                                                    $list['TaxPer'] = 0;
                                                    $list['SurCharge'] = 0;
                                                    $list['EDCess'] = 0;
                                                    $list['HEDCess'] = 0;
                                                    $list['NetPer'] = 0;
                                                }

                                            }
                                            $sHtml = Qualifier::getQualifier($qualList);
                                            $receiptType['HtmlTag'] = $sHtml;

                                        }
                                    }

                                    $psDetail['arrReceiptTypes'] = $arrReceiptTypes;


                                }

                            }
                            else{
                                $other=[];
                            }


                            $result = json_encode(array('payment_schedule_detail' => $arrPaymentScheduleDetails,'othercostadd'=>$other));
                            $this->_view->setTerminal(true);
                            $response->getHeaders()->addHeaderLine('Content-Type', 'application/json');
                            $response->setStatusCode(200);
                            $response->setContent($result);
                            break;
                        default:
                            $select2 = $sql->select();

                            $select2->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                ->columns(array('PaymentScheduleId','ReceiptTypeId','ReceiptType','SortId'))
                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptTypeName' => new Expression("b.OtherCostName")), $select2::JOIN_INNER)
                                ->join(array('c' => 'Crm_UnitTypeOtherCostTrans'), 'b.OtherCostId = c.OtherCostId', array("Amount"), $select2::JOIN_INNER)
                                ->where(array("a.ReceiptType" => 'O',"a.PaymentScheduleId"=>$PaymentScheduleId,"c.UnitTypeId"=>$iUnitTypeId))
                                ->where("a.ReceiptTypeId IN ($OtherCostIds)");

                            $stmt = $sql->getSqlStringForSqlObject($select2);
                            $other = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            // check shedule already exists
                            $select = $sql->select();
                            $select->from('Crm_PaymentScheduleUnitTrans')
                                ->where(array('UnitId' => $iUnitId));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $arrPaymentScheduleUnitTrans = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            // Receipt Type
                            $select = $sql->select();
                            $select->from('Crm_ReceiptTypeMaster');
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                            if ($BookingId != 0 && !empty($arrPaymentScheduleUnitTrans)) {
                                // payment schedule exists

                                $arrAllReceiptTypes = array();
                                foreach ($arrResults as $result) {
                                    $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                                }

//                                $select0 = $sql->select();
//                                $select0->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
//                                    ->columns(array('PaymentScheduleUnitTransId','UnitId','StageType','StageId,SchDate,Amount,QualAmount,NetAmount,BillAmount,PaidAmount,StageCompleted,BillPassed,BookingId,RoundOff,Percentage,StageCompletionId,TermDescription))
//                                    ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select0::JOIN_LEFT)
//                                    ->where(array('a.StageType' => 'S', 'BookingId' => $BookingId));

                                $select1 = $sql->select();
                                $select1->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                    ->columns(array('*'))
                                    ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                                    ->where(array('a.StageType' => 'S', 'BookingId' => $BookingId));

                                $select2 = $sql->select();
                                $select2->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                    ->columns(array('*'))
                                    ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                                    ->where(array('a.StageType' => 'D', 'BookingId' => $BookingId));
                                $select2->combine($select1, 'Union ALL');

                                $select3 = $sql->select();
                                $select3->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                    ->columns(array('*'))
                                    ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                                    ->where(array('a.StageType' => 'O', 'BookingId' => $BookingId));
                                $select3->combine($select2, 'Union ALL');

                                $select4 = $sql->select();
                                $select4->from(array('a' => 'Crm_PaymentScheduleUnitTrans'))
                                    ->columns(array('*'))
                                    ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                                    ->where(array('a.StageType' => 'A', 'BookingId' => $BookingId));
                                $select4->combine($select3, 'Union ALL');

                                $select5 = $sql->select();
                                $select5->from(array("g" => $select4))
                                    ->columns(array('*'))
                                    ->where(array('BookingId' => $BookingId));

                                $stmt = $sql->getSqlStringForSqlObject($select5);
                                $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                if (!empty($arrPaymentScheduleDetails)) {
                                    $iQualCount = 0;
                                    foreach ($arrPaymentScheduleDetails as &$paymentSchedule) {

                                        // receipt type
                                        $select1 = $sql->select();
                                        $select1->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                            ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName'), $select1::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'S', 'a.PaymentScheduleUnitTransId' => $paymentSchedule['PaymentScheduleUnitTransId']));

                                        $select2 = $sql->select();
                                        $select2->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                            ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName'), $select2::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'D', 'a.PaymentScheduleUnitTransId' => $paymentSchedule['PaymentScheduleUnitTransId']));
                                        $select2->combine($select1, 'Union ALL');

                                        $select3 = $sql->select();
                                        $select3->from(array('a' => 'Crm_PaymentScheduleUnitReceiptTypeTrans'))
                                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName'), $select3::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'O', 'a.PaymentScheduleUnitTransId' => $paymentSchedule['PaymentScheduleUnitTransId']));
                                        $select3->combine($select2, 'Union ALL');

                                        $select4 = $sql->select();
                                        $select4->from(array("g" => $select3))
                                            ->columns(array('*'))
                                            ->order("g.ReceiptTypeTransId ASC");

                                        $stmt = $sql->getSqlStringForSqlObject($select4);
                                        $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                        if (!empty($arrReceiptTypes)) {


                                            foreach ($arrReceiptTypes as &$receipt) {

                                                switch ($receipt['ReceiptType']) {
                                                    case 'O':
                                                        $receipt['Type'] = 'O';
                                                        break;
                                                    case 'S':
                                                        $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];
                                                        break;
                                                }

                                                // qualifier
                                                $select = $sql->select();
                                                $select->from(array('a' => 'Crm_PaymentScheduleQualifierTrans'))
                                                    ->columns(array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(TransId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'NetPer',
                                                        'ExpressionAmt', 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                                        'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                                $select->where(array('PSReceiptTypeTransId' => $receipt['ReceiptTypeTransId']));
                                                $statement = $sql->getSqlStringForSqlObject($select);
                                                $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                                if (!empty($qualList)) {
                                                    foreach ($qualList as &$qual) {
                                                        $qual['BaseAmount'] = $receipt['Amount'];
                                                    }

                                                    $sHtml = Qualifier::getQualifier($qualList);
                                                    $iQualCount = $iQualCount + 1;
                                                    $sHtml = str_replace('__1', '_' . $iQualCount, $sHtml);
                                                    $receipt['qualHtmlTag'] = $sHtml;
                                                }
                                            }

                                            $paymentSchedule['arrReceiptTypes'] = $arrReceiptTypes;
                                        }
                                    }
                                }

                            } else {


                                $BookingDate = $this->bsf->isNullCheck($this->params()->fromPost('BookingDate'), 'string');
                                $BookingDate = str_replace('/', '-', $BookingDate);
                                if (strtotime($BookingDate) == FALSE) {
                                    throw new \Exception('Invalid Booking-date!');
                                }

                                // project details
                                $select = $sql->select();
                                $select->from('Crm_ProjectDetail')
                                    ->where(array('ProjectId' => $ProjectId))
                                    ->limit(1);
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $projectDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (empty($projectDetail)) {
                                    throw new \Exception('Project detail not found!');
                                }
                                //adding landregistration and construction registration in paymentschedule if include option  in set//
                                $select = $sql->select();
                                $select->from('Crm_ProjectDetail')
                                    ->columns(array('Include'))
                                    ->where(array("projectId"=> $ProjectId));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $include = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                $land=0.00;
                                $const=0.00;
                                if($include['Include'] > 0 ) {
                                    $select = $sql->select();
                                    $select->from('Crm_ProjectOtherCostTrans')
                                        ->columns(array('OtherCostId'))
                                        ->where('OtherCostId IN (1,2)')
                                        ->where(array("projectId" => $ProjectId));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $projectother = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    if(count($projectother) == 0 ) {

                                        $select = $sql->select();
                                        $select->from('Crm_ProjectDetail')
                                            ->columns(array('LRegistrationValue', 'CRegistrationValue'))
                                            ->where(array("projectId" =>$ProjectId));
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $projectDetail = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                        $otherCostId=array();
                                        if (count($projectDetail['LRegistrationValue']) > 0 && count($projectDetail['CRegistrationValue'])==0 ) {
                                            $otherCostId=array(1);
                                        }
                                        else if (count($projectDetail['LRegistrationValue']) == 0 && count($projectDetail['CRegistrationValue'])> 0 ) {
                                            $otherCostId=array(2);


                                        }
                                        else if(count($projectDetail['LRegistrationValue']) > 0 && count($projectDetail['CRegistrationValue'])> 0 ){
                                            $otherCostId=array(1,2);

                                        }


                                        $select = $sql->select();
                                        $select->from('Crm_UnitType')
                                            ->columns(array('LandRegAmount', 'ConsRegAmount'))
                                            ->where(array("projectId" => $ProjectId))
                                            ->where(array('UnitTypeId' => $iUnitTypeId));
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $proj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                        $land=$proj['LandRegAmount'];
                                        $const=$proj['ConsRegAmount'];
                                        $select1 = $sql->select();
                                        $select1->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select1::JOIN_INNER)
                                            ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                                            ->where(array('a.UnitTypeId' => $iUnitTypeId));


                                        $select = $sql->select();
                                        $select->from(array('a' => 'Crm_OtherCostMaster'))
                                            ->columns(array('OtherCostId','Amount'=>new Expression("1-1"), 'Area'=>new Expression("1-1"), 'Rate'=>new Expression("1-1") ,'OtherCostName'))
                                            ->where(array('a.OtherCostId' => $otherCostId));
                                        $select->combine($select1, 'Union ALL');

                                        $stmt = $sql->getSqlStringForSqlObject($select);
                                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                        foreach($unitamt as &$unt){

                                            if($unt['OtherCostId']==1){
                                                $unt['Amount']  = $proj['LandRegAmount'];
                                            }


                                            if($unt['OtherCostId']==2){
                                                $unt['Amount']  = $proj['ConsRegAmount'];
                                            }

                                        }

                                    }//projcount close
                                }


                                // unit info
                                $select = $sql->select();
                                $select->from(array('a' => 'KF_UnitMaster'))
                                    ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                                    ->where(array('a.UnitId' => $iUnitId));
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $unit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (empty($unit)) {
                                    throw new \Exception('Invalid Unit-id!');
                                }

                                $select = $sql->select();
                                $select->from(array('a' => 'Crm_UnitDetails'))
                                    ->columns(array('BaseAmt'))
                                    ->where(array('a.UnitId' => $iUnitId));
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $base = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();


                                $subQuery = $sql->select();
                                $subQuery->from('Crm_PaymentScheduleReceiptTrans')
                                    ->columns(array('ReceiptTypeId'))
                                    ->where(array('PaymentScheduleId' => $PaymentScheduleId,'ReceiptType'=>'O'));

                                // payment schedule detail list

                                $select = $sql->select();
                                $select->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                    ->columns(array('PaymentScheduleId', 'PaymentScheduleDetailId', 'StageId', 'StageType', 'DateFrom', 'DateAfterBefore', 'DurationType', 'DurationDays', 'Date', 'RoundOff', 'Percentage', 'Amount','SortId'))
                                    ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select::JOIN_LEFT)
                                    ->where("a.StageType = 'A' and a.PaymentScheduleId = $PaymentScheduleId");
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $arrcheck = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                $unitproj=$unit['ProjectId'];
                                $unittype=$unit['UnitTypeId'];


                                // payment schedule detail list


//                                $select0 = $sql->select();
//                                $select0->from(array('a' => 'Crm_PaymentScheduleDetail'))
//                                    ->columns(array('PaymentScheduleId', 'PaymentScheduleDetailId', 'StageId', 'StageType', 'DateFrom', 'DateAfterBefore', 'DurationType', 'DurationDays', 'Date', 'RoundOff', 'Percentage', 'Amount','SortId','StageName'=>new Expression ("'Advance'")))
//                                    ->where("a.StageType = 'A' and a.PaymentScheduleId = $PaymentScheduleId");

                                $select1 = $sql->select();
                                $select1->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                    ->columns(array('PaymentScheduleId', 'PaymentScheduleDetailId', 'StageId', 'StageType', 'DateFrom', 'DateAfterBefore', 'DurationType', 'DurationDays', 'Date', 'RoundOff', 'Percentage', 'Amount','SortId'))
                                    ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                                    ->where("a.StageType = 'S' and a.PaymentScheduleId = $PaymentScheduleId");
//                                $select1->combine($select0, 'Union ALL');

                                $select2 = $sql->select();
                                $select2->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                    ->columns(array('PaymentScheduleId', 'PaymentScheduleDetailId', 'StageId', 'StageType', 'DateFrom', 'DateAfterBefore', 'DurationType', 'DurationDays', 'Date', 'RoundOff', 'Percentage', 'Amount','SortId'))
                                    ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                                    ->where("a.StageType = 'D' and a.PaymentScheduleId = $PaymentScheduleId");
                                $select2->combine($select1, 'Union ALL');

                                $select3 = $sql->select();
                                $select3->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                    ->columns(array('PaymentScheduleId', 'PaymentScheduleDetailId', 'StageId', 'StageType', 'DateFrom', 'DateAfterBefore', 'DurationType', 'DurationDays', 'Date', 'RoundOff', 'Percentage', 'Amount','SortId'))
                                    ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                                    ->where("a.StageType = 'O' and a.PaymentScheduleId = $PaymentScheduleId");
                                $select3->combine($select2, 'Union ALL');



                                if($include['Include'] > 0 && count($projectother)==0 ) {
                                    $select6 = $sql->select();
                                    $select6->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                                        ->columns(array('PaymentScheduleId'=>new Expression("$PaymentScheduleId"), 'PaymentScheduleDetailId'=>new Expression("'0'"), 'StageId'=>new Expression("a.OtherCostId"), 'StageType'=>new Expression("'O'"), 'DateFrom'=> new Expression("''"), 'DateAfterBefore'=> new Expression("''"), 'DurationType'=> new Expression("''"), 'DurationDays'=> new Expression("''"), 'Date'=> new Expression("''"), 'RoundOff'=> new Expression("'0'"), 'Percentage'=> new Expression("'100'"), 'Amount'=> new Expression("'0'"),'SortId'=>new Expression("'100'")))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select6::JOIN_LEFT);
                                    $select6->where->expression('a.OtherCostId NOT IN ?', array($subQuery));
                                    $select6->where("a.OtherCostId IN ($OtherCostIds)");
                                    $select6->where("a.UnitTypeId = $iUnitTypeId");

                                    $select7 = $sql->select();
                                    $select7->from(array('a' => 'Crm_OtherCostMaster'))
                                        ->columns(array('PaymentScheduleId' => new Expression("$PaymentScheduleId"), 'PaymentScheduleDetailId' => new Expression("'0'"), 'StageId' => new Expression("a.OtherCostId"), 'StageType' => new Expression("'O'"), 'DateFrom' => new Expression("''"), 'DateAfterBefore' => new Expression("''"), 'DurationType' => new Expression("''"), 'DurationDays' => new Expression("''"), 'Date' => new Expression("''"), 'RoundOff' => new Expression("'0'"), 'Percentage' => new Expression("'100'"), 'Amount' => new Expression("'0'"), 'SortId' => new Expression("'100'"), 'StageName' => new Expression("a.OtherCostName")))
                                        ->where(array('a.OtherCostId' => array(1, 2)));
                                    $select7->combine($select6, 'Union ALL');

                                    $select6 = $sql->select();
                                    $select6->from(array("l" => $select7));
                                    $select6->combine($select3, 'Union ALL');

                                }
                                else {
                                    $select6 = $sql->select();
                                    $select6->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                                        ->columns(array('PaymentScheduleId' => new Expression("$PaymentScheduleId"), 'PaymentScheduleDetailId' => new Expression("'0'"), 'StageId' => new Expression("a.OtherCostId"), 'StageType' => new Expression("'O'"), 'DateFrom' => new Expression("''"), 'DateAfterBefore' => new Expression("''"), 'DurationType' => new Expression("''"), 'DurationDays' => new Expression("''"), 'Date' => new Expression("''"), 'RoundOff' => new Expression("'0'"), 'Percentage' => new Expression("'100'"), 'Amount' => new Expression("'0'"), 'SortId' => new Expression("'100'")))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select6::JOIN_LEFT);
                                    $select6->where->expression('a.OtherCostId NOT IN ?', array($subQuery));
                                    $select6->where("a.OtherCostId IN ($OtherCostIds)");
                                    $select6->where("a.UnitTypeId = $iUnitTypeId");
                                    $select6->combine($select3, 'Union ALL');
                                }


                                if(count($arrcheck['PaymentScheduleId'])==''||count($arrcheck['PaymentScheduleId'])==0 ) {
                                    $select4 = $sql->select();
                                    $select4->from(array('a' => 'Crm_UnitType'))
                                        ->columns(array('PaymentScheduleId' => new Expression("$PaymentScheduleId"), 'PaymentScheduleDetailId' => new Expression("'0'"), 'StageId' => new Expression("'0'"), 'StageType' => new Expression("'A'"), 'DateFrom' => new Expression("''"), 'DateAfterBefore' => new Expression("''"), 'DurationType' => new Expression("''"), 'DurationDays' => new Expression("''"), 'Date' => new Expression("''"), 'RoundOff' => new Expression("'0'"), 'Percentage' => new Expression("'0'"), 'Amount' => 'AdvAmount', 'SortId' => new Expression("'0'"), 'StageName' => new Expression("'Booking Advance'")))
                                        ->where("a.ProjectId=$unitproj and a.UnitTypeId = $unittype");
                                    $select4->combine($select6, 'Union ALL');

                                }
                                else{
                                    $select4 = $sql->select();
                                    $select4->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                        ->columns(array('PaymentScheduleId', 'PaymentScheduleDetailId', 'StageId', 'StageType', 'DateFrom', 'DateAfterBefore', 'DurationType', 'DurationDays', 'Date', 'RoundOff', 'Percentage', 'Amount','SortId'))
                                        ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                                        ->where("a.StageType = 'A' and a.PaymentScheduleId = $PaymentScheduleId");
                                    $select4->combine($select6, 'Union ALL');
                                }

                                $select5 = $sql->select();
                                $select5->from(array("g" => $select4))
                                    ->columns(array('*'))
                                    ->join(array('d' => 'Crm_PaymentSchedule'), 'g.PaymentScheduleId=d.PaymentScheduleId', array('*'), $select5::JOIN_LEFT)
                                    ->where(array('d.PaymentScheduleId' => $PaymentScheduleId, 'd.DeleteFlag' => 0))
                                    ->order("g.SortId ASC");

                                $stmt = $sql->getSqlStringForSqlObject($select5);
                                $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                // Project Other cost
                                $select = $sql->select();
                                $select->from('Crm_UnitTypeOtherCostTrans')
                                    ->where(array('UnitTypeId' => $iUnitTypeId));
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $arrResult = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                $arrProjectOtherCost = array();
                                if (!empty($arrResult)) {
                                    foreach ($arrResult as $otherCost) {
                                        $arrProjectOtherCost[$otherCost['OtherCostId']] = $otherCost['Amount'];
                                    }
                                }

                                $arrAllReceiptTypes = array();
                                foreach ($arrResults as $result) {
                                    $amount = 0;
                                    if ($result['Type'] == 'L') {
                                        $amount = $unit['LandAmount'];
                                    } elseif ($result['Type'] == 'C') {
                                        $amount = $unit['ConstructionAmount'];
                                    }
                                    $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                                }

                                $startDate = NULL;
                                $arrStagesEndDate = array();
                                $arrDescriptionsEndDate = array();
                                $arrOtherCostsEndDate = array();
                                $iQualCount = 0;
                                foreach ($arrPaymentScheduleDetails as &$psDetail) {

                                    // date from
                                    $PaymentScheduleDate = date('d-m-Y', strtotime($BookingDate));
                                    if ($psDetail['DateFrom'] != '') {

                                        switch ($psDetail['DateFrom']) {
                                            case 'F':
                                                $startDate = $BookingDate;
                                                break;
                                            case 'S':
                                                $startDate = $projectDetail['StartDate'];
                                                break;
                                            case 'E':
                                                $startDate = $projectDetail['EndDate'];
                                                break;
                                            case (preg_match('/[\d]+/', $psDetail['DateFrom']) ? TRUE : FALSE):
                                                $arrMatches = array();
                                                preg_match_all('/([\d]+)#([a-z]+)/i', $psDetail['DateFrom'], $arrMatches);
                                                if ($arrMatches[2][0] == 'S') {
                                                    $startDate = $arrStagesEndDate[$arrMatches[1][0]];
                                                } elseif ($arrMatches[2][0] == 'D') {
                                                    $startDate = $arrDescriptionsEndDate[$arrMatches[1][0]];
                                                } elseif ($arrMatches[2][0] == 'O') {
                                                    $startDate = $arrOtherCostsEndDate[$arrMatches[1][0]];
                                                }
                                                break;
                                            default:
                                                $startDate = '';
                                        }

                                        // Date After Before
                                        $dateSign = NULL;
                                        if ($psDetail['DateAfterBefore'] == 1) {
                                            $dateSign = '+';
                                        } elseif ($psDetail['DateAfterBefore'] == 2) {
                                            $dateSign = '-';
                                        }

                                        // duration type
                                        $durationType = NULL;
                                        if ($psDetail['DurationType'] == 1) {
                                            // day
                                            $durationType = 'days';
                                        } elseif ($psDetail['DurationType'] == 2) {
                                            // month
                                            $durationType = 'months';
                                        }

                                        if (strtotime($startDate) != FALSE) {
                                            $PaymentScheduleDate = date('d-m-Y', strtotime($startDate . $dateSign . $psDetail['DurationDays'] . ' ' . $durationType));
                                        } else {
                                            $PaymentScheduleDate = NULL;
                                        }
                                    } else {
                                        $PaymentScheduleDate = NULL;
                                    }
                                    $psDetail['PaymentScheduleDate'] = $PaymentScheduleDate;

                                    if ($psDetail['StageType'] == 'A') {
                                        $psDetail['PaymentScheduleDate'] = date('d-m-Y', strtotime($BookingDate));
                                        //  continue;
                                    }
                                    // stage type
                                    switch ($psDetail['StageType']) {
                                        case 'O':
                                            $select = $sql->select();
                                            if ($unit['UnitTypeId'] == 0) {
                                                // project other cost trans
                                                $select->from('Crm_ProjectOtherCostTrans')
                                                    ->where(array('ProjectId' => $projectDetail['ProjectId'], 'OtherCostId' => $psDetail['StageId']));
                                            } else {
                                                // unittype other cost trans
                                                $select->from('Crm_UnitTypeOtherCostTrans')
                                                    ->where(array('UnitTypeId' => $unit['UnitTypeId'], 'OtherCostId' => $psDetail['StageId']));
                                            }
                                            $stmt = $sql->getSqlStringForSqlObject($select);
                                            $result = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                            if (!empty($result)) {
                                                $psDetail['schedule_amt'] = $result['Amount'];
                                            } else {
                                                $psDetail['schedule_amt'] = 0;

                                                if($psDetail['StageId']==1 && $psDetail['StageType']=='O'){
                                                    $psDetail['schedule_amt'] = $land;
                                                }
                                                if($psDetail['StageId']==2 && $psDetail['StageType']=='O'){
                                                    $psDetail['schedule_amt'] = $const;
                                                }
                                            }
                                            $arrOtherCostsEndDate[$psDetail['StageId']] = $PaymentScheduleDate;
                                            break;
                                        case 'S':
                                            $arrStagesEndDate[$psDetail['StageId']] = $PaymentScheduleDate;
                                            break;
                                        case 'D':
                                            $arrDescriptionsEndDate[$psDetail['StageId']] = $PaymentScheduleDate;
                                            break;
                                    }

                                    if ($psDetail['PaymentScheduleDetailId'] != 0) {

                                        $select1 = $sql->select();
                                        $select1->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                            ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName', 'TaxablePer'), $select1::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'S', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));

                                        $select2 = $sql->select();
                                        $select2->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                            ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName', 'TaxablePer' => new Expression("'0'")), $select2::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'D', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));
                                        $select2->combine($select1, 'Union ALL');

                                        $select3 = $sql->select();
                                        $select3->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName', 'TaxablePer'), $select3::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'O', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));
                                        $select3->combine($select2, 'Union ALL');

                                        $select4 = $sql->select();
                                        $select4->from(array("g" => $select3))
                                            ->columns(array('*'))
                                            ->order("g.SortId ASC");
                                    }else if($psDetail['PaymentScheduleDetailId'] == 0 && $psDetail['StageType']=='A'){

                                        $select4 = $sql->select();
                                        $select4->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                            ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName', 'TaxablePer'), $select4::JOIN_LEFT)
                                            ->where(array('a.ReceiptType' => 'S'));

                                    }
                                    else {

                                        $select4 = $sql->select();
                                        $select4->from(array('a' => 'Crm_OtherCostMaster'))
                                            ->columns(array('ReceiptType' => new Expression("'O'"), 'ReceiptTypeId' => new Expression("OtherCostId"), 'ReceiptName' => 'OtherCostName', 'TaxablePer'))
                                            ->where(array('a.OtherCostId' => $psDetail['StageId']));

                                    }


                                    $stmt = $sql->getSqlStringForSqlObject($select4);
                                    $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    // qualifier

                                    foreach ($arrReceiptTypes as &$receiptType) {

                                        $taxablePer = $receiptType['TaxablePer'];
                                        if ($receiptType['ReceiptType'] == 'S') {
                                            $receiptType['TypeId'] = $arrAllReceiptTypes[$receiptType['ReceiptTypeId']];

                                        } elseif ($receiptType['ReceiptType'] == 'O') {
                                            // $receiptType[ 'Amount' ] = $arrProjectOtherCost[ $otherCost[ 'OtherCostId' ] ];
                                            $receiptType['TypeId'] = 'O';
                                        }

                                        $select = $sql->select();
                                        $select->from(array('c' => 'Crm_QualifierSettings'))
                                            ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                                array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(a.QualifierId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess','NetPer', 'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                                                    'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                                    'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"),'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"),'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                            ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                        $select->where(array('c.QualSetType' => $receiptType['ReceiptType'], 'c.QualSetTypeId' => $receiptType['ReceiptTypeId'],'a.QualType' => 'C'))
                                            ->order('SortOrder ASC');
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

//                                        $select = $sql->select();
//                                        $select->from(array("a" => "Proj_QualifierTrans"))
//                                            ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER)
//                                            ->columns(array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(RefId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'NetPer',
//                                                'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
//                                                'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")));
//                                        $select->where(array('a.QualType' => 'C'));
//                                        $statement = $sql->getSqlStringForSqlObject($select);
//                                        $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                        if (!empty($qualList)) {
                                            foreach ($qualList as &$list) {
                                                if ($list['QualifierTypeId'] == 1 && $GrossAmt > 5000000) {

                                                    $tdstype = 11;
                                                    $date = date('Y/m/d');
                                                    $tds = CommonHelper::getTDSSetting($tdstype, $date, $dbAdapter);
                                                    $list['TaxablePer'] = $tds["TaxablePer"];
                                                    $list['TaxPer'] = $tds["TaxPer"];
                                                    $list['SurCharge'] = $tds["SurCharge"];
                                                    $list['EDCess'] = $tds["EDCess"];
                                                    $list['HEDCess'] = $tds["HEDCess"];
                                                    $list['NetPer'] = $tds["NetTax"];
                                                } else if ($list['QualifierTypeId'] == 2) {

                                                    $tdstype = 'F';
                                                    $date = date('Y/m/d');
                                                    $tds = CommonHelper::getSTSetting($tdstype, $date, $dbAdapter);
                                                    $list['TaxablePer'] = $taxablePer;
                                                    $list['TaxPer'] = $tds["TaxPer"];
                                                    $list['KKCess'] = $tds["KKCess"];
                                                    $list['SBCess'] = $tds["SBCess"];
                                                    $list['NetPer'] = $tds["NetTax"];
                                                } else {

                                                    $list['TaxablePer'] = 0;
                                                    $list['TaxPer'] = 0;
                                                    $list['SurCharge'] = 0;
                                                    $list['EDCess'] = 0;
                                                    $list['HEDCess'] = 0;
                                                    $list['NetPer'] = 0;
                                                }

                                            }
                                            $sHtml = Qualifier::getQualifier($qualList);
                                            $iQualCount = $iQualCount + 1;
                                            $sHtml = str_replace('__1', '_' . $iQualCount, $sHtml);
                                            $receiptType['HtmlTag'] = $sHtml;
                                        }
                                    }

                                    $psDetail['arrReceiptTypes'] = $arrReceiptTypes;
                                }

                            }


                            $result = json_encode(array('payment_schedule_detail' => $arrPaymentScheduleDetails, 'other' => $other,'land'=>$land,'const'=>$const));
                            $this->_view->setTerminal(true);
                            $response->getHeaders()->addHeaderLine('Content-Type', 'application/json');
                            $response->setStatusCode(200);
                            $response->setContent($result);
                            break;
                    }
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function checkbookingnoAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $BookingNo = $this->bsf->isNullCheck($this->params()->fromPost('BookingNo'), 'string' );
                    if(is_null($BookingNo) || $BookingNo == '') {
                        throw new \Exception('Invalid Booking-No!');
                    }

                    // check list
                    $select = $sql->select();
                    $select->from('Crm_UnitBooking')
                        ->where(array('BookingNo' => $BookingNo, 'DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $isNotFound = false;
                    if(empty($unitBooking)) {
                        $isNotFound = true;
                    }
                    $result =  json_encode(array('unit_booking' => $isNotFound));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    public function blockAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $this->_view->CallTypeId = $this->params()->fromRoute('CallTypeId');
        $this->_view->dat = $this->params()->fromRoute('Date');
        $call = $this->params()->fromRoute('Call');
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    $postData = $request->getPost();
                    //print_r($postData);die;
                    $project_id = $this->bsf->isNullCheck($postData['project_id'], 'number');
                    if($project_id <= 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    $leadId = $this->bsf->isNullCheck($postData['lead_id'], 'number');

                    if ($leadId == 0 && $postData['leadid']!=0) {
                        $leadId = $this->bsf->isNullCheck($postData['leadid'], 'number');
                    }


                    $bookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                    $nextCallDate = $this->bsf->isNullCheck($postData['nextCallDate'], 'string');
                    $discounttype = $this->bsf->isNullCheck($postData['discount_type'], 'string');
                    $bookingDate = str_replace('/', '-', $bookingDate);
                    if(strtotime($bookingDate) == FALSE) {
                        $bookingDate = date('Y-m-d');
                    } else {
                        $bookingDate = date('Y-m-d', strtotime($bookingDate));
                    }

                    $nextCallDate = str_replace('/', '-', $nextCallDate);
                    if(strtotime($nextCallDate) == FALSE) {
                        $nextCallDate = date('Y-m-d H:i:s');
                    } else {
                        $nextCallDate = date('Y-m-d H:i:s', strtotime($nextCallDate));
                    }
                    $select = $sql->select();
                    $select->from('Crm_LeadFollowup')
                        ->columns(array('EntryId'))
                        ->where(array('LeadId' =>$leadId))
                        ->order("EntryId desc");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $update = $sql->update();
                    $update->table('Crm_LeadFollowup');
                    $update->set(array(
                        'Completed'  => 1,
                        'CompletedDate'  => date('Y-m-d H:i:s'),

                    ));
                    $update->where(array('EntryId'=>$entry['EntryId']));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $insert = $sql->insert();
                    $insert->into('Crm_LeadFollowup');
                    $insert->Values(array(
                        'UnitId' => $this->bsf->isNullCheck($postData['unit_no'], 'number'),
                        'LeadId' => $leadId,
                        'FollowUpDate' => $bookingDate,
                        'ExecutiveId'=>$userId,
                        'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
                        'StatusId'=>$this->bsf->isNullCheck($postData['status_id'], 'number'),
                        'NatureId'=>$this->bsf->isNullCheck($postData['nature_id'], 'number'),
                        'NextFollowupRemarks'=>$this->bsf->isNullCheck($postData['nextfollowremarks'], 'string'),
                        'VehicleAllocation'=>$this->bsf->isNullCheck($postData['vehicleAllocation'], 'number'),
                        'PickUpAddress'=>$this->bsf->isNullCheck($postData['pickUpAddress'], 'string'),
                        'PickUpTime'=>$this->bsf->isNullCheck($postData['pickUpTime'], 'string'),
                        'NextCallDate'=>$nextCallDate,
                        'CallTypeId'=>$this->bsf->isNullCheck($postData['CallTypeId'], 'number'),
                        'Remarks' =>$this->bsf->isNullCheck($postData['remarks'], 'string'),
                        'UserId'=>$this->auth->getIdentity()->UserId,
                        'CallerSid'=>$this->bsf->isNullCheck($call, 'string')

                    ));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();



                    //Project update to LeadProjects table
                    $select = $sql->select();
                    $select->from('Crm_LeadProjects')
                        ->columns(array("ProjectId"))
                        ->where(array("LeadId"=>$leadId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrproj=[];
                    foreach($resultproj as $proj){
                        array_push($arrproj, $proj['ProjectId']);
                    }
                    if(!in_array($project_id, $arrproj)){

                        $insert  = $sql->insert('Crm_LeadProjects');
                        $newData = array(
                            'LeadId'=>$leadId,
                            'ProjectId'=>$project_id,
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $statusId=$this->bsf->isNullCheck($postData['status_id'], 'number');

                    //updating status to Lead//
                    if($statusId>0||$statusId!='') {
                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'StatusId' => $statusId
                        ));
                        $update->where(array('LeadId' => $leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }


                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrAllReceiptTypes = array();
                    foreach($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }
                    // Print_r($postData['unit_no']);die;
                    foreach ($postData['unit_no'] as $value) {
                        $select = $sql->select();
                        $select->from(array('a' => 'KF_UnitMaster'))
                            ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                            ->where(array('a.UnitId' => $value, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                            ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                            ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                            ->where(array('a.UnitTypeId' => $unit['UnitTypeId']));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        $sumother=0;

                        foreach($unitamt as $unitVal){
                            $sumother +=$unitVal['Amount'];
                        }

                        if(empty($unit)) {
                            throw new \Exception('Invalid Unit-no!');
                        }
                        if (!empty($unit)) $iUnitTypeId = $unit['UnitTypeId'];




                        $Date = $this->bsf->isNullCheck($postData['date'], 'string');
                        // Print_r($Date);die;

                        $validupto = $this->bsf->isNullCheck($postData['valid_upto'], 'string');
                        $validupto = str_replace('/', '-', $validupto);
                        if(strtotime($validupto) == FALSE) {
                            $validupto = date('Y-m-d');
                        } else {
                            $validupto = date('Y-m-d', strtotime($validupto));
                        }

                        $sVno= $this->bsf->isNullCheck($postData['booking_no'], 'string');
                        $aVNo = CommonHelper::getVoucherNo(823, date('Y-m-d', strtotime($bookingDate)), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true) {
                            $sVno = $aVNo["voucherNo"];
                        }

                        $arrValues = array(
                            'BlockNo' => $sVno,
                            'BookingDate' => $bookingDate,
                            'LeadId' => $leadId,
                            'UnitId' => $value,
                            'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                            'ExecutiveId' => $userId,
                            'Rate' => $this->bsf->isNullCheck($unit['Rate'], 'number'),
                            'ValidUpto' => $validupto,
                            'CreatedDate' => date('Y-m-d H:i:s'),
                            'FollowupId'=>$followupentryid,
                        );

                        $netAmt = $unit['NetAmt'];
                        $discountType= $this->bsf->isNullCheck($postData['discount_type'], 'string');
                        $landAmt = $unit['LandAmount'];
                        $constructionAmt = $unit['ConstructionAmount'];
                        $arrValues['BRate'] = $unit['Rate'];

                        if(!is_null($discountType)) {
                            $arrValues['DiscountType'] = $discountType;


                            $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                            if($discountType == 'L' ) {

                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');

                                if($arrValues['LumpsumReceiptId'] == 'C') {
                                    $constructionAmt -= $arrValues['Discount'];
                                    $netAmt -= $arrValues['Discount'];

                                } else if($arrValues['LumpsumReceiptId']== 'L') {
                                    $landAmt -= $arrValues['Discount'];
                                    $netAmt -= $arrValues['Discount'];

                                } else {
                                    $netAmt -= $arrValues['Discount'];
                                    $constructionAmt =$netAmt-$landAmt;

                                }
                            } else if($discountType == 'R') {

                                $rate =$unit['Rate']- $arrValues['Discount'];

                                $netAmt= $rate * $unit['UnitArea'];
                                $constructionAmt =$netAmt-$landAmt;
                                $arrValues['BRate'] = $rate;

                            } else if($discountType == 'P') {
                                $arrValues['BRate'] = $unit['Rate'];
                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                                $dis =$netAmt*($arrValues['Discount']/100);

                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                    $dis =$constructionAmt*($arrValues['Discount']/100);
                                    $constructionAmt -= $dis;
                                    $netAmt -= $dis;

                                } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                    $dis =$landAmt*($arrValues['Discount']/100);
                                    $landAmt -= $dis;
                                    $netAmt -= $dis;
                                } else {
                                    $netAmt -= $dis;
                                    $constructionAmt =$netAmt-$landAmt;

                                }
                            }
                        }
                        $arrValues['BaseAmount'] =  $arrValues['BRate'] * $unit['UnitArea'];
                        $arrValues['LandAmount'] =  $landAmt ;
                        $arrValues['ConstructionAmount'] =  $constructionAmt;
                        $arrValues['NetAmount'] =  $netAmt ;
                        $arrValues['AdvAmnt'] =  $unit['AdvAmount'];
                        $arrValues['QualAmount'] =  $unit['QualifierAmount'];
                        $arrValues['GrossAmount'] =  $landAmt + $constructionAmt+ $sumother;


                        if($arrValues['BRate']>0) {
                            $insert = $sql->insert();
                            $insert->into('Crm_UnitBlock')
                                ->values($arrValues);
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $bookingId = $dbAdapter->getDriver()->getLastGeneratedValue();
                        }
                        // project details
                        $select = $sql->select();
                        $select->from('Crm_ProjectDetail')
                            ->where(array('ProjectId' => $unit['ProjectId']))
                            ->limit(1);
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $projectDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if(empty($projectDetail)) {
                            throw new \Exception('Project detail not found!');
                        }

                        // update unit
                        $update = $sql->update();
                        $update->table('KF_UnitMaster')
                            ->set(array('Status' => 'B'))
                            ->where(array('UnitId' => $value));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        // update unit detail if discount applied
                        // update unit detail if discount applied
                        if (!is_null($discounttype)) {

                            $arrUnitDetailValues = array(
                                'Discount' => $arrValues['Discount'],
                                'DiscountType' => $arrValues['DiscountType'],
                            );

                            if (isset($arrValues['LumpsumReceiptId'])) {
                                $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                            }
                            $update = $sql->update();
                            $update->table('Crm_UnitDetails')
                                ->set($arrUnitDetailValues)
                                ->where(array('UnitId' => $value));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Block-Add','N','Crm-Block',$bookingId,0, 0, 'CRM','',$userId, 0 ,0);
                    $select = $sql->select();
                    $select->from(array('a'=>'Crm_Leads'))
                        ->columns(array('Email','LeadName'))
                        ->where(array('a.LeadId' => $leadId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $lead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $select = $sql->select();
                    $select->from(array('a'=>'KF_UnitMaster'))
                        ->columns(array('UnitNo'))
                        ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                        ->where(array('a.UnitId' => $postData['unit_no']));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $unitnoproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $proj = array();
                    if($unitnoproj ){
                        foreach($unitnoproj as $unitnoproj){
                            array_push($proj, $unitnoproj['UnitNo']);
                        }
                        $resproj = implode(",", $proj);

                    }


                    if($lead['Email']!='') {

                        $mailData = array(
                            array(
                                'name' => 'LEADNAME',
                                'content' => $lead['LeadName']
                            ),
                            array(
                                'name' => 'UNITNO',
                                'content' => $resproj
                            ),
                            array(
                                'name' => 'PROJECTNAME',
                                'content' => $unitnoproj['ProjectName']
                            ),
                            array(
                                'name' => 'VALIDDATE',
                                'content' =>$validupto
                            )
                        );
                        $sm = $this->getServiceLocator();
                        $config = $sm->get('application')->getConfig();

                        $viewRenderer->MandrilSendMail()->sendMailTo($lead['Email'], $config['general']['mandrilEmail'], 'block Alert Notification', 'Crm_Blockalerts', $mailData);

                    }


                    $this->redirect()->toRoute('crm/default', array('controller' => 'lead', 'action' => 'block-register'));

                } catch(PDOException $e){
                    $connection->rollback();
                }

            } else {
                // GET request

                try {

                    $leadId = $this->params()->fromRoute('leadId');
                    if(!is_numeric($leadId)) {
                        throw new \Exception('Invalid Lead-id!');
                    }
                    $this->_view->leadId = $leadId;

                    // Projects
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('DeleteFlag' => 0))
                        ->order("ProjectId desc");
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array("ReceiptType"=>'S'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;
                    //selecting values for Status
                    $select = $sql->select();
                    $select->from('Crm_StatusMaster')
                        ->columns(array('data' =>'StatusId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Nature
                    $select = $sql->select();
                    $select->from('Crm_NatureMaster')
                        ->columns(array('data' =>'NatureId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_CallTypeMaster')
                        ->columns(array('data' =>'CallTypeId','value' => 'Description'))
                        ->where(array("Lead"=>1))
                        ->where(array("Description NOT IN ('Fresh')"));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $userId = $this->auth->getIdentity()->UserId;

                    $select = $sql->select();
                    $select->from(array('a' => 'WF_LevelMaster'))
                        ->join(array('b' => 'Wf_Users'), 'a.LevelId=b.LevelId', array('UserId'), $select::JOIN_LEFT)
                        ->columns(array('Rate','Lumpsum','Percentage'))
                        ->where(array('b.UserId' =>$this->auth->getIdentity()->UserId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->discountLimit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $route= $this->params()->fromRoute('ProjectId');
                    $rout= $this->params()->fromRoute('UnitId');
                    $select = $sql->select();
                    $select->from(array('a' =>'Crm_LeadProjects'))
                        ->columns(array('LeadId'))
                        ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"=>new expression("b.LeadName + ' - ' + b.Mobile")), $select::JOIN_LEFT)
                        ->where(array('a.ProjectId' => $route))
                        ->order('a.LeadId asc');
                    $select->where(array("b.ExecutiveId" => $this->auth->getIdentity()->UserId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' =>'KF_UnitMaster'))
                        ->columns(array('UnitId','ProjectId','UnitNo'))
                        ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.ProjectId", array("ProjectName"), $select::JOIN_LEFT)
                        ->where(array('a.UnitId'=>$rout,'a.ProjectId' => $route));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $saveproj= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    if($saveproj['UnitId']>0){
                        $this->_view->saveproj = $saveproj;
                    }

                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array("*"))
                        ->where(array("UserId"=>$userId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->resultsUser = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $aVNo = CommonHelper::getVoucherNo(823, date('Y/m/d'), 0, 0, $dbAdapter, "");
                    $this->_view->genType = $aVNo["genType"];
                    if ($aVNo["genType"] == false)
                        $this->_view->svNo = "";
                    else
                        $this->_view->svNo = $aVNo["voucherNo"];

                    //Executive Name//
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('UserId','EmployeeName'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }
    public function blockEditAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $postData = $request->getPost();
                    //Print_r($postData);die;
                    $bookingId = $this->bsf->isNullCheck($postData['booking_id'], 'number');
                    if($bookingId <= 0) {
                        throw new \Exception('Invalid Unit!');
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBlock'))
                        ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitTypeId', 'UnitArea'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                        ->where(array('a.BlockId' => $bookingId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if(empty($unitBooking)) {
                        throw new \Exception('Unit booking not found!');
                    }

                    if($unitBooking['Approve'] == 'S') {
                        throw new \Exception('Unit Approved!');
                    }

                    $BookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                    $BookingDate = str_replace('/', '-', $BookingDate);
                    if(strtotime($BookingDate) == FALSE) {
                        $BookingDate = date('Y-m-d');
                    } else {
                        $BookingDate = date('Y-m-d', strtotime($BookingDate));
                    }
                    $validupto = $this->bsf->isNullCheck($postData['valid_upto'], 'string');
                    $validupto = str_replace('/', '-', $validupto);
                    if(strtotime($validupto) == FALSE) {
                        $validupto = date('Y-m-d');
                    } else {
                        $validupto = date('Y-m-d', strtotime($validupto));
                    }


                    $arrValues = array(
                        'BlockNo' => $this->bsf->isNullCheck($postData['booking_no'], 'string'),
                        'BookingDate' => $BookingDate,
                        'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                        'ModifiedDate' => date('Y-m-d H:i:s'),
                        'ExecutiveId' => $userId,
                        'ValidUpto' => $validupto,

                    );


                    // unit details
                    $select = $sql->select();
                    $select->from(array('a' => 'KF_UnitMaster'))
                        ->join(array('b' => 'Crm_UnitDetails'), 'a.UnitId = b.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array('a.UnitId' => $unitBooking['UnitId']));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrAllReceiptTypes = array();
                    foreach($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }

                    $netAmt = $unit['NetAmt'];
                    $discountType= $this->bsf->isNullCheck($postData['discount_type'], 'string');
                    $landAmt = $unit['LandAmount'];
                    $constructionAmt = $unit['ConstructionAmount'];
                    $arrValues['BRate'] = $unit['Rate'];

                    if(!is_null($discountType)) {
                        $arrValues['DiscountType'] = $discountType;

                        $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                        if($discountType == 'L' ) {
                            $arrValues['BRate'] = $unit['Rate'];
                            $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');

                            if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                $constructionAmt -= $arrValues['Discount'];
                                $netAmt -= $arrValues['Discount'];

                            } elseif($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                $landAmt -= $arrValues['Discount'];
                                $netAmt -= $arrValues['Discount'];

                            } else {
                                $netAmt -= $arrValues['Discount'];
                                $constructionAmt =$netAmt-$landAmt;

                            }
                        } else if($discountType == 'R') {

                            $rate =$unit['Rate']- $arrValues['Discount'];
                            $netAmt= $rate * $unit['UnitArea'];
                            $constructionAmt =$netAmt-$landAmt;
                            $arrValues['BRate'] = $rate;

                        } else if($discountType == 'P') {
                            $arrValues['BRate'] = $unit['Rate'];
                            $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                            $dis =$netAmt*($arrValues['Discount']/100);

                            if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                $dis =$constructionAmt*($arrValues['Discount']/100);
                                $constructionAmt -= $dis;
                                $netAmt -= $dis;

                            } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                $dis =$landAmt*($arrValues['Discount']/100);
                                $landAmt -= $dis;
                                $netAmt -= $dis;
                            } else {
                                $netAmt -= $dis;
                                $constructionAmt =$netAmt-$landAmt;

                            }
                        }
                    }
                    $arrValues['BaseAmount'] =  $landAmt + $constructionAmt;
                    $arrValues['LandAmount'] =  $landAmt ;
                    $arrValues['ConstructionAmount'] =  $constructionAmt;
                    $arrValues['NetAmount'] =  $netAmt;
                    $arrValues['AdvAmnt'] =  $unit['AdvAmount'];
                    $arrValues['QualAmount'] =  $unit['QualifierAmount'];
                    $arrValues['GrossAmount'] =  $landAmt + $constructionAmt;

                    $update = $sql->update();
                    $update->table('Crm_UnitBlock')
                        ->set($arrValues)
                        ->where(array('BlockId' => $bookingId));
                    $stmt = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    if($postData['unit_no']!=""){
                        $update = $sql->update();
                        $update->table('Crm_UnitBlock');
                        $update->set(array(
                            'UnitId' => $this->bsf->isNullCheck($postData['unit_no'], 'number'),
                        ));
                        $update->where(array('BlockId'=>$bookingId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $results2   = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    // // project details
                    // $select = $sql->select();
                    // $select->from('Crm_ProjectDetail')
                    // ->where(array('ProjectId' => $unitBooking['ProjectId']))
                    // ->limit(1);
                    // $stmt = $sql->getSqlStringForSqlObject($select);
                    // $projectDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    // if(empty($projectDetail)) {
                    // throw new \Exception('Project detail not found!');
                    // }
                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;


                    // update unit
                    $update = $sql->update();
                    $update->table('KF_UnitMaster')
                        ->set(array('Status' => 'B'))
                        ->where(array('UnitId' => $unitBooking['UnitId']));
                    $stmt = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update unit detail if discount applied
                    if(!is_null($discountType)) {

                        $arrUnitDetailValues = array(
                            'Discount' => $arrValues['Discount'],
                            'DiscountType' => $arrValues['DiscountType'],
                        );

                        if(isset($arrValues['LumpsumReceiptId'])) {
                            $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                        }
                        $update = $sql->update();
                        $update->table('Crm_UnitDetails')
                            ->set($arrUnitDetailValues)
                            ->where(array('UnitId' => $unitBooking['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Block-Modify','E','Crm-Block',$bookingId,0, 0, 'CRM','',$userId, 0 ,0);
                    $FeedId = $this->params()->fromQuery('FeedId');
                    $AskId = $this->params()->fromQuery('AskId');
                    if(isset($FeedId) && $FeedId!="") {
                        $this->redirect()->toRoute('crm/block-register', array('controller' => 'lead', 'action' => 'block-register'), array('query'=>array('AskId'=>$AskId,'FeedId'=>$FeedId,'type'=>'feed')));
                    } else {
                        $this->redirect()->toRoute('crm/block-register', array('controller' => 'lead', 'action' => 'block-register'));
                    }
//                    $this->redirect()->toRoute('crm/block-register', array('controller' => 'lead', 'action' => 'block-register'));

                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {

                    $bookingId = $this->params()->fromRoute('bookingId');
                    if(!is_numeric($bookingId)) {
                        throw new \Exception('Invalid Booking-id!');
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBlock'))
                        ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ProjectMaster'), 'b.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                        ->where(array('a.BlockId' => $bookingId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if(empty($unitBooking)) {
                        throw new \Exception('Unit booking not found!');
                    }

                    if($unitBooking['Approve'] == 'S') {
                        throw new \Exception('Unit Approved!');
                    }
                    $this->_view->unitBooking = $unitBooking;



                    // Projects
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('KF_UnitMaster')
                        ->columns(array('UnitId', 'UnitNo'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrunit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                    // Executives
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('data' => 'UserId', 'value' => 'EmployeeName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;
                    $arrAllReceiptTypes = array();
                    foreach($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }
                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function getLeadFieldDataAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                try {
                    $mode = $this->bsf->isNullCheck($this->params()->fromPost('mode'), 'string' );

                    if($mode=="title") {
                        //Write your Ajax post code here
                        $uploadedFile = $request->getFiles();
                        $postData = $request->getPost();

                        if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                            $response->setContent('Invalid File Format');
                            $response->setStatusCode(400);
                            return $response;
                        }
                        $file_csv = "public/uploads/crm/leadregister/";
                        if(!is_dir($file_csv)) {
                            mkdir($file_csv, 0755, true);
                        }
                        $file_csv = "public/uploads/crm/leadregister/" . md5(time()) . ".csv";
                        $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                        $data = array();
                        $file = fopen($file_csv, "r");

                        $icount = 0;
                        while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {

                            if ($icount == 0) {
                                foreach ($xlData as $j => $value) {
                                    if($value!="") {
                                        $data[] = array('Field' => $value);
                                    }
                                }
                            } else {
                                break;
                            }
                            $icount = $icount + 1;
                        }


                        // delete csv file
                        fclose($file);
                        unlink($file_csv);
                    } else if($mode=="body") {
                        $uploadedFile = $request->getFiles();
                        $postData = $request->getPost();
                        if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                            $response->setContent('Invalid File Format');
                            $response->setStatusCode(400);
                            return $response;
                        }
                        $file_csv = "public/uploads/crm/leadregister/";
                        if(!is_dir($file_csv)) {
                            mkdir($file_csv, 0755, true);
                        }
                        $file_csv = "public/uploads/crm/leadregister/" . md5(time()) . ".csv";
                        $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                        $data = array();
                        $file = fopen($file_csv, "r");

                        $icount = 0;
                        $RType = $postData['arrHeader'];
                        $bValid = true;

                        while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {

                            if ($icount == 0) {
                                if(isset($xlData)) {
                                    foreach (json_decode($RType) as $k) {
                                        foreach ($xlData as $j => $value) {
                                            if (trim($value) != "") {
                                                $bFound = false;
                                                $sField = "";

                                                if (trim($value) == trim($k->efield)) {
                                                    $sField = $k->field;
                                                    $bFound = true;
//                                                    break;
                                                }
                                                if ($bFound == true) {
                                                    if (trim($sField) == "LeadName") {
                                                        $col_1 = intval($j);
                                                    }
                                                    if (trim($sField) == "LeadDate") {
                                                        $col_2 = intval($j);
                                                    }
                                                    if (trim($sField) == "Executive") {
                                                        $col_3 = intval($j);
                                                    }
                                                    if (trim($sField) == "Mobile") {
                                                        $col_4 = intval($j);
                                                    }
                                                    if (trim($sField) == "EmailAddress") {
                                                        $col_5 = intval($j);
                                                    }
                                                    if (trim($sField) == "Source") {
                                                        $col_6 = intval($j);
                                                    }
                                                    if (trim($sField) == "ProjectName") {
                                                        $col_7 = intval($j);
                                                    }
                                                    if (trim($sField) == "LeadType") {
                                                        $col_8 = intval($j);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {

                                $LeadName="";
                                $LeadDate="";
                                $Executive="";
                                $Mobile="";
                                $EmailAddress="";
                                $Source="";
                                $ProjectName="";
                                $LeadType="";
                                if (isset($col_1) && !is_null($col_1) && trim($col_1)!="" && isset($xlData[$col_1])) {
                                    $LeadName =$this->bsf->isNullCheck(trim($xlData[$col_1]),'string');
                                }
                                if (isset($col_2) && !is_null($col_2) && trim($col_2)!="" && isset($xlData[$col_2])) {
                                    $LeadDate =$this->bsf->isNullCheck(trim($xlData[$col_2]),'string');
                                }
                                if (isset($col_3) && !is_null($col_3) && trim($col_3)!="" && isset($xlData[$col_3])) {
                                    $Executive = $this->bsf->isNullCheck(trim($xlData[$col_3]),'string');
                                }
                                if (isset($col_4) && !is_null($col_4) && trim($col_4)!="" && isset($xlData[$col_4])) {
                                    $Mobile = $this->bsf->isNullCheck(trim($xlData[$col_4]),'string');
                                }
                                if (isset($col_5) && !is_null($col_5) && trim($col_5)!="" && isset($xlData[$col_5])) {
                                    $EmailAddress = $this->bsf->isNullCheck(trim($xlData[$col_5]),'string');
                                }
                                if (isset($col_6) && !is_null($col_6) && trim($col_6)!="" && isset($xlData[$col_6])) {
                                    $Source = $this->bsf->isNullCheck(trim($xlData[$col_6]),'string');
                                }
                                if (isset($col_7) && !is_null($col_7) && trim($col_7)!="" && isset($xlData[$col_7])) {
                                    $ProjectName = $this->bsf->isNullCheck(trim($xlData[$col_7]),'string');
                                }
                                if (isset($col_8) && !is_null($col_8) && trim($col_8)!="" && isset($xlData[$col_8])) {
                                    $LeadType = $this->bsf->isNullCheck(trim($xlData[$col_8]),'string');
                                }

                                if($LeadName!="" || $LeadDate!="" || $Executive!="" || $Mobile!="" || $EmailAddress!="" || $Source!="" || $ProjectName!="" || $LeadType!="") {
                                    $data[] = array('Valid' => $bValid, 'LeadName' => $LeadName, 'LeadDate' => $LeadDate, 'Executive' => $Executive, 'Mobile' => $Mobile, 'EmailAddress' => $EmailAddress,
                                        'Source' => $Source,'ProjectName' => $ProjectName,'LeadType'=>$LeadType);
                                }
                            }
                            $icount++;
                        }

                        if ($bValid == false) {
                            $data[] = array('Valid' => $bValid);
                        }
                        // delete csv file
                        fclose($file);
                        unlink($file_csv);
                    } else {
                        $postData = $request->getPost();
                        $rowCount = $postData['rowCount'];
                        $data = array();
                        for ($i = 0; $i <= $rowCount; $i++) {

                            $leadName = $this->bsf->isNullCheck(trim($postData['excellead_' . $i]), 'string');
                            $leadDate = $this->bsf->isNullCheck(trim($postData['exceldate_' . $i]), 'string');
                            $executive = $this->bsf->isNullCheck(trim($postData['excelexecutive_' . $i]), 'string');
                            $mobile = $this->bsf->isNullCheck(trim($postData['excelmobile_' . $i]), 'string');
                            $email = $this->bsf->isNullCheck(trim($postData['excelemail_' . $i]), 'string');
                            $source= $this->bsf->isNullCheck(trim($postData['excelsource_' . $i]), 'string');
                            $projectName = $this->bsf->isNullCheck(trim($postData['excelproject_' . $i]), 'string');
                            $leadType = $this->bsf->isNullCheck(trim($postData['excelleadtype_' . $i]), 'string');
                            if($leadName=="" && $leadDate=="" && $executive=="" && $mobile == "" && $email == "" && $source=="" && $projectName=="" && $leadType=="") {
                                continue;
                            }
                            $error=0;
                            if ($leadName == "") {
                                $leadArray = array($leadName, 1);
                                $dateArray = array($leadDate, 0);
                                $mobileArray = array($mobile, 0);
                                $emailArray = array($email, 0);
                                $executiveArray = array($executive, 0);
                                $sourceArray = array($source, 0);
                                $projectNameArray = array($projectName, 0);
                                $leadTypeArray = array($leadType, 0);
                                $error = 1;
                            } else {
                                $leadArray = array($leadName, 0);
                            }
                            $select = $sql->select();
                            $select->from('Crm_Leads')
                                ->columns(array('LeadId'));
                            $select->where(array('Mobile' => $mobile,'DeleteFlag'=>0));
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $cMobile= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                            if ($mobile == "" || count($cMobile)>0) {
                                $mobileArray = array($mobile, 1);
                                $dateArray = array($leadDate, 0);
                                $emailArray = array($email, 0);
                                $executiveArray = array($executive, 0);
                                $sourceArray = array($source, 0);
                                $projectNameArray = array($projectName, 0);
                                $leadTypeArray = array($leadType, 0);
                                $error = 1;
                            } else {
                                $mobileArray = array($mobile, 0);
                            }
                            if ($email == "") {
                                $emailArray = array($email, 1);
                                $dateArray = array($leadDate, 0);
                                $executiveArray = array($executive, 0);
                                $sourceArray = array($source, 0);
                                $projectNameArray = array($projectName, 0);
                                $leadTypeArray = array($leadType, 0);
                                $error = 1;
                            } else {
                                $emailArray = array($email, 0);
                            }
                            if ($error == 0) {

                                if($executive!="") {

                                    $PositionTypeId=array(5,2);
                                    $sub = $sql->select();
                                    $sub->from(array('a'=>'WF_PositionMaster'))
                                        ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
                                        ->columns(array('PositionId'))
                                        ->where(array("b.PositionTypeId"=>$PositionTypeId));

                                    $select = $sql->select();
                                    $select->from('WF_Users')
                                        ->columns(array('UserId'))
                                        ->where->expression("PositionId IN ?",array($sub));
                                    $select->where(array('EmployeeName' => $executive,'DeleteFlag'=>0));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $resultsExe= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    if($resultsExe != "") {
                                        $exeId = $resultsExe['UserId'];
                                    } else {
                                        $exeId=0;
                                    }
                                } else {
                                    $exeId=0;
                                }
                                if($source!="") {
                                    $select = $sql->select();
                                    $select->from('Crm_CampaignRegister')
                                        ->columns(array('CampaignName', 'CampaignId'))
                                        ->where(array('CampaignName' => $source, 'DeleteFlag' => 0));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $sourceCCheck = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    if(count($sourceCCheck)>0) {
                                        $sourceId= $sourceCCheck[0]['CampaignId'];
                                        $sourceType="C";
                                    } else {

                                        $select = $sql->select();
                                        $select->from('Crm_LeadSourceMaster')
                                            ->columns(array('LeadSourceId', 'LeadSourceName'))
                                            ->where(array('LeadSourceName' => $source, 'DeleteFlag' => 0));
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $sourceLCheck = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                        if(count($sourceLCheck)>0) {
                                            $sourceId= $sourceLCheck[0]['LeadSourceId'];
                                            $sourceType="L";
                                        } else {
                                            $insert = $sql->insert();
                                            $insert->into('Crm_LeadSourceMaster');
                                            $insert->Values(array(
                                                'LeadSourceName' => $source,
                                                'CreatedDate' => date('Y-m-d H:i:s')));
                                            $statement = $sql->getSqlStringForSqlObject($insert);
                                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                            $sourceId = $dbAdapter->getDriver()->getLastGeneratedValue();
                                            $sourceType="L";
                                        }
                                    }
                                } else {
                                    $sourceId=0;
                                    $sourceType="";
                                }
                                if($projectName!="") {
                                    $select = $sql->select();
                                    $select->from('Proj_ProjectMaster')
                                        ->columns(array('ProjectName', 'ProjectId'))
                                        ->where(array('ProjectName' => $projectName, 'DeleteFlag' => 0));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $projCheck = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    if(count($projCheck)>0) {
                                        $projectId= $projCheck[0]['ProjectId'];

                                    } else {
                                        $projectId=0;
                                    }
                                } else {
                                    $projectId=0;
                                }
                                $leadTypeId=1;
                                if($leadType!="") {
                                    $leadTyp = strtolower($leadType);
                                    if($leadTyp=='buyer') {
                                        $leadTypeId=1;
                                    } else if($leadTyp=='leaser') {
                                        $leadTypeId=2;
                                    } else if($leadTyp=='investor'){
                                        $leadTypeId=3;
                                    }
                                }
                                $lDate=date('Y-m-d H:i:s');
                                if(strtotime(str_replace('/','-',$leadDate)!=false)) {
                                    $lDate=date('Y-m-d H:i:s', strtotime(str_replace('/','-',$leadDate)));
                                }
                                $insert = $sql->insert();
                                $insert->into('Crm_Leads');
                                $insert->Values(array(
                                    'LeadName' => $leadName,
                                    'LeadDate' => $lDate,
                                    'UserId'=>$this->auth->getIdentity()->UserId,
                                    'Mobile' => $mobile,
                                    'Email' => $email,
                                    'ExecutiveId' => $exeId,
                                    'CreatedDate' => date('Y-m-d H:i:s'),
                                    'LeadType' =>$leadTypeId
                                ));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                $leadId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                $insert = $sql->insert();
                                $insert->into('Crm_LeadSource');
                                $insert->Values(array(
                                    'LeadId' => $leadId,
                                    'LeadSourceId' => $sourceId,
                                    'Name' => $sourceType,
                                    'ModifiedDate' => date('Y-m-d H:i:s'),
                                    'DeleteFlag'=>0
                                ));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                if($projectId!=0) {
                                    $insert = $sql->insert();
                                    $insert->into('Crm_LeadProjects');
                                    $insert->Values(array(
                                        'LeadId' => $leadId,
                                        'ProjectId' => $projectId,
                                        'ModifiedDate' => date('Y-m-d H:i:s'),
                                        'DeleteFlag'=>0
                                    ));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                }
                            } else {
                                $data[] = array('LeadName' => $leadArray, 'LeadDate' => $dateArray, 'Executive' => $executiveArray, 'Mobile' => $mobileArray, 'EmailAddress' => $emailArray,
                                    'Source' => $sourceArray,'ProjectName' => $projectNameArray,'LeadType'=>$leadTypeArray);
                            }
                        }

                    }
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent(json_encode($data));

                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        }
    }

//    public function uploadLeadDataAction()
//    {
//        if (!$this->auth->hasIdentity()) {
//            if ($this->getRequest()->isXmlHttpRequest()) {
//                echo "session-expired";
//                exit();
//            } else {
//                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
//            }
//        }
//
//        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
//        $sql = new Sql($dbAdapter);
//
//        if ($this->getRequest()->isXmlHttpRequest()) {
//            $request = $this->getRequest();
//            $response = $this->getResponse();
//            if ($request->isPost()) {
//                $uploadedFile = $request->getFiles();
//
//                $postData = $request->getPost();
//
//                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
//                    $response->setContent('Invalid File Format');
//                    $response->setStatusCode(400);
//                    return $response;
//                }
//
//                try {
//                    $file_csv = "public/uploads/crm/tmp/" . md5(time()) . ".csv";
//
//                    $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);
//
//                    $data = array();
//                    $file = fopen($file_csv, "r");
//
//
//                    $icount = 0;
//                    $bValid = true;
//
//                    while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
//                        if ($icount != 0) {
//                            for($i=1;$i<=5;$i++) {
//                                //echo '-->'.$xlData[$postData['imField_'.$i]];
//                            }
//
//                            $insert = $sql->insert('Crm_Leads');
//                            $newData = array(
//                                'LeadName'		=>	$xlData[$postData['imField_1']],
//                                'LeadDate'		=>	date('m-d-Y H:i:s'),
//                                //'LeadType'		=>	$xlData[$postData['imField_3']],
//                                'Mobile'		=>	$xlData[$postData['imField_4']],
//                                'Email'			=>	$xlData[$postData['imField_5']],
//                                'CreatedDate'	=>	date('m-d-Y H:i:s')
//                            );
//                            $insert->values($newData);
//                            $statement = $sql->getSqlStringForSqlObject($insert);
//                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//                        }
//                        $icount = $icount + 1;
//                    }
//
//                    if ($bValid == false) {
//
//                        $data[] = array('Valid' => $bValid);
//                    }
//
//                    // delete csv file
//                    fclose($file);
//                    unlink($file_csv);
//                } catch (Exception $ex) {
//                    $data[] = array('Valid' => $bValid);
//                }
//
//                $response->setContent(json_encode($data));
//                return $response;
//            }
//        }
//    }

    function _convertXLStoCSV($infile, $outfile)
    {
        $fileType = PHPExcel_IOFactory::identify($infile);
        $objReader = PHPExcel_IOFactory::createReader($fileType);

        $objReader->setReadDataOnly(true);
        $objPHPExcel = $objReader->load($infile);
        $objPHPExcel->setActiveSheetIndex(0);

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');
        $objWriter->save($outfile);
    }

    function _validateUploadFile($file)
    {
        $ext = pathinfo($file['file']['name'], PATHINFO_EXTENSION);
        $mime_types = array('application/octet-stream', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/plain', 'application/csv', 'text/comma-separated-values', 'application/excel');
        $exts = array('csv', 'xls', 'xlsx');
        if (!in_array($file['file']['type'], $mime_types) || !in_array($ext, $exts))
            return false;

        return true;
    }

    public function unitTransferAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    $postData = $request->getPost();
                    // var_dump($postData);die;
                    $project_id = $this->bsf->isNullCheck($postData['project_id'], 'number');
                    if ($project_id <= 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    $leadId = $this->bsf->isNullCheck($postData['lead_id'], 'number');
                    if($leadId <= 0) {
                        throw new \Exception('Invalid Lead-id!');
                    }

                    $bookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');
                    $bookingDate = str_replace('/', '-', $bookingDate);
                    if(strtotime($bookingDate) == FALSE) {
                        $bookingDate = date('Y-m-d');
                    } else {
                        $bookingDate = date('Y-m-d', strtotime($bookingDate));
                    }
                    $userId = $this->auth->getIdentity()->UserId;


                    $nextCallDate = $this->bsf->isNullCheck($postData['nextCallDate'], 'string');
                    $nextCallDate = str_replace('/', '-', $nextCallDate);
                    if(strtotime($nextCallDate) == FALSE) {
                        $nextCallDate = date('Y-m-d');
                    } else {
                        $nextCallDate = date('Y-m-d', strtotime($nextCallDate));
                    }

                    // transfer
                    $oldUnitId = $this->bsf->isNullCheck($postData['unit_id'], 'number');


                    $select = $sql->select();
                    $select->from('Crm_UnitBooking')
                        ->where(array('UnitId' => $oldUnitId, 'LeadId' => $leadId,'DeleteFlag'=>0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $oldUnitBooking = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $update = $sql->update();
                    $update->table('Crm_UnitBooking')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('UnitId' => $oldUnitId, 'LeadId' => $leadId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $update = $sql->update();
                    $update->table('KF_UnitMaster')
                        ->set(array('Status' => 'U'))
                        ->where(array('UnitId' => $oldUnitId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // reset old unit receipts to new unit
//                    $update = $sql->update();
//                    $update->table('Crm_ReceiptRegister')
//                        ->set(array('UnitId' =>$postData['unit_no']))
//                        ->where(array('UnitId' => $oldUnitId));
//                    $stmt = $sql->getSqlStringForSqlObject($update);
//                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    $select = $sql->select();
                    $select->from('Crm_LeadFollowup')
                        ->columns(array('EntryId'))
                        ->where(array('LeadId' =>$leadId))
                        ->order("EntryId desc");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $update = $sql->update();
                    $update->table('Crm_LeadFollowup');
                    $update->set(array(
                        'Completed'  => 1,
                        'CompletedDate'  => date('Y-m-d H:i:s'),

                    ));
                    $update->where(array('EntryId'=>$entry['EntryId']));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $insert = $sql->insert();
                    $insert->into('Crm_LeadFollowup');
                    $insert->Values(array(
                        'UnitId' =>$postData['unit_no'],
                        'LeadId' => $leadId,
                        'FollowUpDate' => $bookingDate,
                        'ExecutiveId' => $userId,
                        'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
                        'NatureId' => $this->bsf->isNullCheck($postData['nature_id'], 'number'),
                        'NextFollowupRemarks' => $this->bsf->isNullCheck($postData['nextfollowremarks'], 'string'),
                        'VehicleAllocation' => $this->bsf->isNullCheck($postData['vehicleAllocation'], 'number'),
                        'PickUpAddress' => $this->bsf->isNullCheck($postData['pickUpAddress'], 'string'),
                        'PickUpTime' => $this->bsf->isNullCheck($postData['pickUpTime'], 'string'),
                        'NextCallDate' => $nextCallDate,
                        'CallTypeId' => 10,
                        'Remarks' => $this->bsf->isNullCheck($postData['remarks'], 'string'),
                        'UserId'=>$this->auth->getIdentity()->UserId,
                        // 'CallerSid' => $this->bsf->isNullCheck($call, 'string')
                    ));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();



                    //updating status to Lead//

                    $update = $sql->update();
                    $update->table('Crm_Leads');
                    $update->set(array(
                        'StatusId' => 1
                    ));
                    $update->where(array('LeadId' => $leadId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                    $select = $sql->select();
                    $select->from(array('a' => 'KF_UnitMaster'))
                        ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array('a.UnitId' => $postData['unit_no'], 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    if($unit['ProjectId'] > 0) {
                    //Project update to LeadProjects table
                    $select = $sql->select();
                    $select->from('Crm_LeadProjects')
                        ->columns(array("ProjectId"))
                        ->where(array("LeadId"=>$leadId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrproj=[];
                    foreach($resultproj as $proj){
                        array_push($arrproj, $proj['ProjectId']);
                    }
                    if(!in_array($unit['ProjectId'], $arrproj)){

                        $insert  = $sql->insert('Crm_LeadProjects');
                        $newData = array(
                            'LeadId'=>$leadId,
                            'ProjectId'=>$unit['ProjectId'],
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }}



                    if(empty($unit)) {
                        throw new \Exception('Invalid Unit-no!');
                    }

                    if($unit['Status'] == 'S') {
                        throw new \Exception('Unit sold-out!');
                    }
                    $iUnitTypeId = 0;
                    if (!empty($unit)) $iUnitTypeId = $unit['UnitTypeId'];

                    $postSaleExecutiveId = $postData['post_executive_id'];
                    if($postSaleExecutiveId==''|| $postSaleExecutiveId==0){
                        $postSaleExecutiveId=$userId;
                    }
                    $sVno = $this->bsf->isNullCheck($postData['booking_no'], 'string');

                    $aVNo = CommonHelper::getVoucherNo(807, date('Y-m-d', strtotime($postData['campaigndate'])), 0, 0, $dbAdapter, "I");
                    if ($aVNo["genType"] == true) $sVno = $aVNo["voucherNo"];

                    $arrValues = array(
                        'BookingNo' => $sVno,
                        'BookingDate' => $bookingDate,
                        'LeadId' => $leadId,
                        'UnitId' => $this->bsf->isNullCheck($postData['unit_no'], 'number'),
                        'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                        'BookingName' => $this->bsf->isNullCheck($postData['registration_name'], 'string'),
                        'ExecutiveId' => $this->auth->getIdentity()->UserId,
                        'PostExecutiveId' => $postSaleExecutiveId,
                        'AdvAmount' => $this->bsf->isNullCheck($postData['adv_amount'], 'number'),
//                            'ProposalRate' => $this->bsf->isNullCheck($unit['Rate'], 'number'),
//                            'CommonRate' => $this->bsf->isNullCheck($unit['Rate'], 'number'),
                        'Rate' => $this->bsf->isNullCheck($postData['bookRate'], 'number'),
                        'CreatedDate' => date('Y-m-d H:i:s'),
                        'PaymentScheduleId' => $this->bsf->isNullCheck($postData['payment_schedule'], 'number'),
                        'FollowupEntryId' => $followupentryid
                    );

                    // Broker
                    $arrValues['BrokerId'] = $this->bsf->isNullCheck($postData['broker_id'], 'number');
                    $arrValues['CommissionPercent'] = $this->bsf->isNullCheck($postData['commission'], 'number');
                    $arrValues['Commission'] = $this->bsf->isNullCheck($postData['amount'], 'number');

                    // Loan
                    $arrValues['LoanProposalNo'] = $this->bsf->isNullCheck($postData['proposal_no'], 'string');
                    $arrValues['BankName'] = $this->bsf->isNullCheck($postData['bank_name'], 'string');
                    $arrValues['LoanAmt'] = $this->bsf->isNullCheck($postData['loan_amount'], 'number');
                    $arrValues['SanctionDate'] = NULL;

                    if ($postData['loan_yes_no'] == 'loan_yes') {
                        $arrValues['PaymentOption'] = 'L';
                        if ($postData['loan_approved_yes_no'] == 'loan_approved_yes') {
                            $arrValues['LoanApproval'] = 1;
                            $arrValues['SanctionDate'] = date('Y-m-d', strtotime($postData['sanction_date']));
                        } else {
                            $arrValues['LoanApproval'] = 0;
                        }
                    } else {
                        $arrValues['PaymentOption'] = 'O';
                    }

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrAllReceiptTypes = array();
                    foreach ($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }

                    // Discount
                    $discountBased = $this->bsf->isNullCheck($postData['discount_based'], 'string');
                    if($discountBased == "R"){
                        $discountBased ="N";
                    }
                    $referalType = $this->bsf->isNullCheck($postData['referalType'], 'string');
                    if($referalType == 'B') {
                        $referalTypeId = $this->bsf->isNullCheck($postData['buyerName'], 'number');
                    } else if($referalType == 'E') {
                        $referalTypeId = $this->bsf->isNullCheck($postData['employeeName'], 'number');
                    }
                    $planList = $this->bsf->isNullCheck($postData['plan_list'], 'number');
                    $arrValues['DiscountBased'] = $discountBased;
                    $arrValues['PlanId'] = $planList;
                    $arrValues['ReferalType'] = $referalType;
                    $arrValues['ReferalTypeId'] = $referalTypeId;

                    $arrValues['BaseAmount'] =  $this->bsf->isNullCheck($postData['bookBaseAmt'],'number');
                    $arrValues['LandAmount'] =  $this->bsf->isNullCheck($postData['bookLandAmt'],'number');
                    $arrValues['ConstructionAmount'] =  $this->bsf->isNullCheck($postData['bookConstructionAmt'],'number');
                    $arrValues['OtherCostAmount'] =  $this->bsf->isNullCheck($postData['bookOthercostAmt'],'number');
                    $arrValues['QualifierAmount'] =  $this->bsf->isNullCheck($postData['bookqualAmt'],'number');
                    $arrValues['NetAmount'] =  $this->bsf->isNullCheck($postData['booknetAmt'],'number');

                    $discountType = $this->bsf->isNullCheck($postData['discount_type'], 'string');
                    $arrValues['DiscountType'] = "";
                    $arrValues['LumpsumReceiptId'] =0;
                    $arrValues['Discount'] = 0;
                    if ($discountType !=""){
                        $arrValues['DiscountType'] = $discountType;
                        $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                        $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                    }



                    $insert = $sql->insert();
                    $insert->into('Crm_UnitBooking')
                        ->values($arrValues);
                    $stmt = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    $bookingId = $dbAdapter->getDriver()->getLastGeneratedValue();
//
//                    $updateUnit = $sql->update();
//                    $updateUnit->table('Crm_UnitBooking')
//                        ->set(array('OtherCharges' => $this->bsf->isNullCheck($postData['othercharges'], 'number')))
//                        ->where(array('BookingId' => $bookingId));
//                   $stmt = $sql->getSqlStringForSqlObject($updateUnit);
//                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    // Transfer
                    $insert = $sql->insert();
                    $insert->into('Crm_UnitTransfer')
                        ->values(array('RefNo' => $sVno,
                            'RefDate' => $bookingDate,
                            'OldUnitId' => $oldUnitId,
                            'NewUnitId' => $postData['unit_no'],
                            'BookingId' => $bookingId,
                            'OldBookingId' => $oldUnitBooking['BookingId'],
                            'LeadId' => $leadId,
                            'CreatedDate' => date('Y-m-d H:i:s')
                        ));
                    $stmt = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    $transferId = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $coAppCount = $this->bsf->isNullCheck($postData['coApp_count'], 'number');
                    for ($i = 1; $i <= $coAppCount; $i++) {
                        if ($postData['coApp_name_' . $i] != "") {
                            $coApplicantName = $this->bsf->isNullCheck($postData['coApp_name_' . $i], 'string');

                            $insert = $sql->insert();
                            $insert->into('Crm_CoApplicantTrans');
                            $insert->Values(array('CoApplicantName' => $coApplicantName
                            , 'BookingId' => $transferId));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }


                    // reset old unit paid amt
                    $iUnitId=$this->bsf->isNullCheck($postData['unit_no'],'number');
                    //echo $iUnitId;die;

                    $update = $sql->update();
                    $update->table('Crm_Leads')
                        ->set(array('ExecutiveId' => $postSaleExecutiveId))
                        ->where(array('LeadId' => $leadId));
                    $stmt = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBlock'))
                        ->columns(array('UnitId'))
                        ->where(array('a.UnitId' => $iUnitId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitblock = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    //Print_r($unit['UnitId']);die;

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitPreBooking'))
                        ->columns(array('UnitId'))
                        ->where(array('a.UnitId' => $iUnitId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitPre = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    if($unitblock['UnitId']>0){
                        $update = $sql->update();
                        $update->table('Crm_UnitBlock')
                            ->set(array('DeleteFlag' => 1))
                            ->where(array('UnitId' => $unitblock['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    if($unitPre['UnitId']>0){
                        $update = $sql->update();
                        $update->table('Crm_UnitPreBooking')
                            ->set(array('DeleteFlag' => 1))
                            ->where(array('UnitId' => $unitPre['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $update = $sql->update();
                    $update->table('Crm_Leads')
                        ->set(array('LeadConvert' => 1))
                        ->where(array('LeadId' => $leadId));
                    $stmt = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    $OtherCostIds = implode(',',$postData['OtherCost']);
                    if($OtherCostIds == '')
                        $OtherCostIds = 0;

                    $delete = $sql->delete();
                    $delete->from('Crm_FinalisationOtherCostTrans')
                        ->where(array('UnitId' =>$postData['unit_no']));
                    $stmt = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                    $select = $sql->select();
                    $select->from('Crm_UnitTypeOtherCostTrans')
                        ->columns(array('UnitId' => new Expression("'$iUnitId'"), 'Area', 'Rate', 'Amount', 'OtherCostId', 'BookingId' => new Expression("'$bookingId'")))
                        ->where(array('UnitTypeId' => $iUnitTypeId))
                        ->where("OtherCostId IN ($OtherCostIds)");

                    $insert = $sql->insert();
                    $insert->into('Crm_FinalisationOtherCostTrans');
                    $insert->columns(array('UnitId','Area', 'Rate', 'Amount', 'OtherCostId','BookingId'));
                    $insert->Values($select);
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $coAppCount = $this->bsf->isNullCheck($postData['coApp_count'], 'number');
                    for ($i = 1; $i <= $coAppCount; $i++) {
                        if ($postData['coApp_name_' . $i] != "") {
                            $coApplicantName = $this->bsf->isNullCheck($postData['coApp_name_' . $i], 'string');

                            $insert = $sql->insert();
                            $insert->into('Crm_CoApplicantTrans');
                            $insert->Values(array('CoApplicantName' => $coApplicantName
                            , 'BookingId' => $bookingId));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
// other cost
//                        if(is_array($postData['other_cost']) && count($postData['other_cost']) > 0) {
//                            foreach($postData['other_cost'] as $otherCostId) {
//                                $insert = $sql->insert();
//                                $insert->into('Crm_FinalisationOtherCostTrans')
//                                    ->values(array('BookingId' => $bookingId, 'OtherCostId' => $otherCostId));
//                                $stmt = $sql->getSqlStringForSqlObject($insert);
//                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
//                            }
//                        }

                    // check list
                    if(is_array($postData['check_list']) && count($postData['check_list']) > 0) {
                        foreach($postData['check_list'] as $checkListId) {

                            $checkListDate = NULL;
                            if(strtotime($postData['check_list_date_'. $checkListId]) != FALSE) {
                                $checkListDate = date('Y-m-d', strtotime($postData['check_list_date_'. $checkListId]));
                            }
                            $checkListExeId = $this->bsf->isNullCheck($postData['check_list_executive_id_'. $checkListId], 'number');

                            $insert = $sql->insert();
                            $insert->into('Crm_FinalisationCheckListTrans')
                                ->values(array('BookingId' => $bookingId, 'CheckListId' => $checkListId,
                                    'SubmittedDate' => $checkListDate, 'ExecutiveId' => $checkListExeId));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    // payment custom schedule
                    $sch_cust_terms = $this->bsf->isNullCheck($postData['sch_cust_terms'], 'number');
                    $sch_cust_receipts = $this->bsf->isNullCheck($postData['sch_cust_receipts'], 'number');

                    if($sch_cust_terms != 0) {
                        // delete
                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleUnitTrans')
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleUnitTrans')
                            ->where(array('UnitId' => $iUnitId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Crm_CustomPaymentScheduleDetails')
                            ->where(array('BookingId' => $bookingId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                        // custom payment schedule details
                        $insert = $sql->insert();
                        $insert->into('Crm_CustomPaymentScheduleDetails')
                            ->values(array('BookingId' => $bookingId, 'Period' => $this->bsf->isNullCheck($postData['sch-period'], 'string')
                            , 'FromMonth' => date('Y-m-d',strtotime('01-'.$postData['sch-from-month']))
                            ,'NoOfTerms' => $this->bsf->isNullCheck($postData['sch-no-terms'], 'number')
                            ,'Day' => $this->bsf->isNullCheck($postData['sch-day'], 'number')));
                        $stmt = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iSortId=0;
                        for ($i = 0; $i < $sch_cust_terms; $i++) {
                            $sch_cust_date = $this->bsf->isNullCheck($postData['sch_cust_date_'.$i], 'date');
                            $sch_cust_desc = $this->bsf->isNullCheck($postData['sh_cust_desc_'.$i], 'string');

                            $schAmt = $this->bsf->isNullCheck($postData['CurAmt_'.$i], 'number');
                            $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_'.$i], 'number');
                            $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_'.$i], 'number');

                            if($sch_cust_desc == '' || $schAmt == 0)
                                continue;
                            $iSortId = $iSortId+1;

                            $insert = $sql->insert();
                            $insert->into('Crm_PaymentScheduleUnitTrans')
                                ->values(array(
                                    'BookingId' => $bookingId,
                                    'SchDate' => date('Y-m-d', strtotime($sch_cust_date)),
                                    'TermDescription' => $sch_cust_desc,
                                    'Amount' => $schAmt,
                                    'QualAmount' =>  $schTaxAmt,
                                    'NetAmount' =>  $schNetAmt,
                                    'StageType' => 'C',
                                    'UnitId' => $iUnitId,
                                    'SortId' => $iSortId
                                ));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                            for ($j = 0; $j < $sch_cust_receipts; $j++) {
                                $receiptTypeId = $this->bsf->isNullCheck($postData['sch_cust_'.$i.'_receipttypeid_'.$j], 'number');
                                $receiptType = $this->bsf->isNullCheck($postData['sch_cust_'.$i.'_receipttype_'.$j], 'string');

                                $recAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_CurAmt_' . $j], 'number');
                                $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_TaxAmt_' . $j], 'number');
                                $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_NetAmt_' . $j], 'number');

                                if($receiptType == '' || $receiptTypeId == 0 ||$recAmt == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                    ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                        'UnitId' => $iUnitId,
                                        'ReceiptTypeId' => $receiptTypeId,
                                        'ReceiptType' => $receiptType,
                                        'Amount' => $recAmt,
                                        'QualAmount' => $recTaxAmt,
                                        'NetAmount' => $recNetAmt));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_'.$i . '_QualRefId_' . $j], 'number');
                                $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_'.$qualRefId], 'number');

                                for ($k = 1; $k <= $qualRowId; $k++) {
                                    $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                    $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                    $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                    $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                    $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                    $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                    $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                    $dCessPer = 0;
                                    $dEDPer = 0;
                                    $dHEdPer = 0;
                                    $dCessAmt = 0;
                                    $dEDAmt = 0;
                                    $dHEdAmt = 0;
                                    $dKKCessPer=0;
                                    $dSBCessPer=0;
                                    $dKKCessAmt=0;
                                    $dSBCessAmt =0;

                                    if ($iQualTypeId==1) {
                                        $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                        $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                        $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                        $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                        $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                        $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                        $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                        $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                        $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                        $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                        $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                        $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                    } else if ($iQualTypeId==2) {
                                        $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                        $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                        $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                        $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                        $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                        $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                        $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                        $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                        $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                        $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                    } else {
                                        $dTaxablePer = 100;
                                        $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                        $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                        $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                    }

                                    $insert = $sql->insert();
                                    $insert->into('Crm_PaymentScheduleQualifierTrans');
                                    $insert->Values(array('PSReceiptTypeTransId' => $recTransId,'UnitId' =>$iUnitId,
                                        'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                        'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCessPer,'SBCess'=>$dSBCessPer, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                        'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt, 'NetAmt'=>$dNetAmt));

                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }
                            }
                        }
                        // update unit
                        $update = $sql->update();
                        $update->table('KF_UnitMaster')
                            ->set(array('Status' => 'S'))
                            ->where(array('UnitId' => $iUnitId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                    else {
                        // payment schedule details
                        $overAllQualAmt = 0;
                        $shRowId = $this->bsf->isNullCheck($postData['shRowId'], 'number');
                        $delete = $sql->delete();
                        $delete->from('Crm_PaymentScheduleUnitTrans')
                            ->where(array('UnitId' => $iUnitId));
                        $stmt = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        for ($i = 1; $i <= $shRowId; $i++) {
                            $schdate = $this->bsf->isNullCheck($postData['schDate_' . $i], 'date');
                            $stageType = $this->bsf->isNullCheck($postData['stageType_' . $i], 'string');
                            $stageId = $this->bsf->isNullCheck($postData['stageId_' . $i], 'number');
                            $schRound = $this->bsf->isNullCheck($postData['schRound_' . $i], 'number');
                            $schAmt = $this->bsf->isNullCheck($postData['CurAmt_' . $i], 'number');
                            $schTaxAmt = $this->bsf->isNullCheck($postData['TaxAmt_' . $i], 'number');
                            $schNetAmt = $this->bsf->isNullCheck($postData['NetAmt_' . $i], 'number');
                            $schPer = $this->bsf->isNullCheck(rtrim($postData['shPer_' . $i], '%'), 'number');
                            $schSortId = $this->bsf->isNullCheck($postData['schSortId_' . $i], 'number');

                            $overAllQualAmt = $overAllQualAmt + $schTaxAmt;
                            if ($stageId == 0 || $schAmt == 0)
                                continue;

                            // get unit details
                            $UnitBlockId = 0;
                            $UnitFloorId = 0;
                            $selectUnit = $sql->select();
                            $selectUnit->from(array('a' => "KF_UnitMaster"))
                                ->columns(array('FloorId', 'BlockId'))
                                ->where("a.UnitId=" . $this->bsf->isNullCheck($postData['unit_no'], 'number'));
                            $statement = $statement = $sql->getSqlStringForSqlObject($selectUnit);
                            $unitMaster = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            if ($unitMaster != FALSE) {
                                $UnitBlockId = $unitMaster['BlockId'];
                                $UnitFloorId = $unitMaster['FloorId'];
                            }

                            //stagecompletion update
                            $select = $sql->select();
                            $select->from(array('a' => 'KF_StageCompletion'))
                                ->join(array('d' => 'KF_StageCompletionTrans'), 'a.StageCompletionId=d.StageCompletionId', array(), $select::JOIN_LEFT)
                                ->columns(array('StagecompletionID'))
                                ->where(array('a.UnitWise' => '1', 'd.UnitId' => $this->bsf->isNullCheck($postData['unit_no'], 'number'), 'StageId' => $stageId, 'StageType' => $stageType));

                            $select1 = $sql->select();
                            $select1->from('KF_StageCompletion')
                                ->columns(array('StagecompletionID'))
                                ->where(array('StageId' => $stageId, 'StageType' => $stageType))
                                ->where("((BlockId=$UnitBlockId and FloorId=$UnitFloorId) or (BlockId=$UnitBlockId and FloorId=0)) and UnitWise=0");

                            $select1->combine($select, 'Union ALL');

                            $select2 = $sql->select();
                            $select2->from(array("g" => $select1))
                                ->columns(array("StageCompletionId"));
                            $stmt = $sql->getSqlStringForSqlObject($select2);
                            $stage = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            if ($stage != FALSE && ($stage['StageCompletionId'] != '' || $stage['StageCompletionId'] != 0)) {
                                $stagecomplete = $stage['StageCompletionId'];
                            } else {
                                $stagecomplete = 0;
                            }

                            $insert = $sql->insert();
                            $insert->into('Crm_PaymentScheduleUnitTrans')
                                ->values(array(
                                    'BookingId' => $bookingId,
                                    'SchDate' => date('Y-m-d', strtotime($schdate)),
                                    'StageId' => $stageId,
                                    'StageType' => $stageType,
                                    'Amount' => $schAmt,
                                    'QualAmount' => $schTaxAmt,
                                    'NetAmount' => $schNetAmt,
                                    'Percentage' => $schPer,
                                    'RoundOff' => $schRound,
                                    'UnitId' => $iUnitId,
                                    'SortId' => $schSortId,
                                    'StageCompletionId' => $stagecomplete
                                ));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                            $recRowId = $this->bsf->isNullCheck($postData['refRowId_' . $i], 'number');
                            for ($j = 1; $j <= $recRowId; $j++) {
                                $recType = $this->bsf->isNullCheck($postData['BillAbs_' . $i . '_Type_' . $j], 'string');
                                $recTypeId = $this->bsf->isNullCheck($postData['BillAbs_' . $i . '_TypeId_' . $j], 'number');
                                $recAmt = $this->bsf->isNullCheck($postData['BillAbs_' . $i . '_CurAmt_' . $j], 'number');
                                $recTaxAmt = $this->bsf->isNullCheck($postData['BillAbs_' . $i . '_TaxAmt_' . $j], 'number');
                                $recNetAmt = $this->bsf->isNullCheck($postData['BillAbs_' . $i . '_NetAmt_' . $j], 'number');

                                if ($recType == '' || $recTypeId == 0 || $recAmt == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                    ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                        'UnitId' => $iUnitId,
                                        'ReceiptTypeId' => $recTypeId,
                                        'ReceiptType' => $recType,
                                        'Amount' => $recAmt,
                                        'QualAmount' => $recTaxAmt,
                                        'NetAmount' => $recNetAmt));
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $recTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                $qualRefId = $this->bsf->isNullCheck($postData['BillAbs_' . $i . '_QualRefId_' . $j], 'number');
                                $qualRowId = $this->bsf->isNullCheck($postData['QualRowId_' . $qualRefId], 'number');

                                for ($k = 1; $k <= $qualRowId; $k++) {
                                    $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Id_' . $k], 'number');
                                    $iYesNo = isset($postData['Qual_' . $qualRefId . '_YesNo_' . $k]) ? 1 : 0;
                                    $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Exp_' . $k], 'string');
                                    $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                    $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                    $iQualTypeId = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TypeId_' . $k], 'number');
                                    $sSign = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Sign_' . $k], 'string');

                                    $dCessPer = 0;
                                    $dEDPer = 0;
                                    $dHEdPer = 0;
                                    $dCessAmt = 0;
                                    $dEDAmt = 0;
                                    $dHEdAmt = 0;
                                    $dKKCessPer = 0;
                                    $dSBCessPer = 0;
                                    $dKKCessAmt = 0;
                                    $dSBCessAmt = 0;

                                    if ($iQualTypeId == 1) {
                                        $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                        $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                        $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessPer_' . $k], 'number');
                                        $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessPer_' . $k], 'number');
                                        $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessPer_' . $k], 'number');
                                        $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                        $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                        $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                        $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_CessAmt_' . $k], 'number');
                                        $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_EduCessAmt_' . $k], 'number');
                                        $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_HEduCessAmt_' . $k], 'number');
                                        $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                    } else if ($iQualTypeId == 2) {
                                        $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxablePer_' . $k], 'number');
                                        $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPer_' . $k], 'number');
                                        $dKKCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessPer_' . $k], 'number');
                                        $dSBCessPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessPer_' . $k], 'number');
                                        $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetPer_' . $k], 'number');

                                        $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxableAmt_' . $k], 'number');
                                        $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_TaxPerAmt_' . $k], 'number');
                                        $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_KKCessAmt_' . $k], 'number');
                                        $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_SBCessAmt_' . $k], 'number');
                                        $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_NetAmt_' . $k], 'number');
                                    } else {
                                        $dTaxablePer = 100;
                                        $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpPer_' . $k], 'number');
                                        $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_ExpValue_' . $k], 'number');
                                        $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                        $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $qualRefId . '_Amount_' . $k], 'number');
                                    }

                                    $insert = $sql->insert();
                                    $insert->into('Crm_PaymentScheduleQualifierTrans');
                                    $insert->Values(array('PSReceiptTypeTransId' => $recTransId, 'UnitId' => $iUnitId,
                                        'QualifierId' => $iQualifierId, 'YesNo' => $iYesNo, 'Expression' => $sExpression, 'ExpPer' => $dExpPer, 'TaxablePer' => $dTaxablePer, 'TaxPer' => $dTaxPer,
                                        'Sign' => $sSign, 'SurCharge' => $dCessPer, 'EDCess' => $dEDPer, 'HEDCess' => $dHEdPer, 'KKCess' => $dKKCessPer, 'SBCess' => $dSBCessPer, 'NetPer' => $dNetPer, 'ExpressionAmt' => $dExpAmt, 'TaxableAmt' => $dTaxableAmt,
                                        'TaxAmt' => $dTaxAmt, 'SurChargeAmt' => $dCessAmt, 'EDCessAmt' => $dEDAmt, 'HEDCessAmt' => $dHEdAmt, 'KKCessAmt' => $dKKCessAmt, 'SBCessAmt' => $dSBCessAmt, 'NetAmt' => $dNetAmt));

                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }
                            }
                        }


                        // update unit
                        $update = $sql->update();
                        $update->table('KF_UnitMaster')
                            ->set(array('Status' => 'S'))
                            ->where(array('UnitId' => $iUnitId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $arrUnitDetailValues = array('QualifierAmount' => $overAllQualAmt);

                        // update unit detail if discount applied
                        if ($discountType !=""){
                            $arrUnitDetailValues['Discount'] = $arrValues['Discount'];
                            $arrUnitDetailValues['DiscountType'] = $arrValues['DiscountType'];

                            if(isset($arrValues['LumpsumReceiptId'])) {
                                $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                            }
                        }
                        $update = $sql->update();
                        $update->table('Crm_UnitDetails')
                            ->set($arrUnitDetailValues)
                            ->where(array('UnitId' => $unit['UnitId']));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Unit-Transfer-Add','N','Unit-Transfer',$transferId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);

                    $this->redirect()->toRoute('crm/default', array('controller' => 'lead', 'action' => 'unit-transfer-register'));

                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {

                    $unitId = $this->params()->fromRoute('unitId');
                    if(!is_numeric($unitId)) {
                        throw new \Exception('Invalid Unit-id!');
                    }

                    $this->_view->unitId = $unitId;

                    $CallTypeId = $this->bsf->isNullCheck($this->params()->fromRoute('callTypeId'), 'number');
                    if($CallTypeId != 0) {
                        $this->_view->CallTypeId = $CallTypeId;
                    }

                    $bookingDate = $this->params()->fromRoute('Date');
                    if(strtotime($bookingDate) != FALSE) {
                        $this->_view->BookingDate = date('d-m-Y', strtotime($bookingDate));
                    }

                    // Current units
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'KF_UnitMaster'), 'b.UnitId=a.UnitId', array(), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ProjectMaster'), 'c.ProjectId=b.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
                        ->columns(array('UnitName' => new Expression("c.ProjectName + ' - ' + b.UnitNo"),
                            'UnitId','LeadId'))
                        ->where(array('a.UnitId' => $unitId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrCurUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if(!empty($arrCurUnits)) {
                        $this->_view->arrCurUnits = $arrCurUnits;
                    }

                    //Current Booking Info
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'KF_UnitMaster'),'b.UnitId=a.UnitId',array(),$select::JOIN_LEFT)
                        //                        ->join(array('c' => 'Crm_CoApplicantTrans'),'c.BookingId=a.BookingId',array(),$select::JOIN_LEFT)
                        ->join(array('e' => 'WF_Users'), 'e.UserId=a.PostExecutiveId', array('ExecutiveName' => 'EmployeeName'), $select::JOIN_LEFT)
                        ->columns(array('BookingNo'=>new Expression("a.BookingNo"),'BookingName'=>new Expression("a.BookingName"),
                            'BookingDate'=>new Expression("Convert(Varchar(10),a.BookingDate,103)"),"AdvAmount","PostExecutiveId" ))
                        ->where(array('a.UnitId' => $unitId,'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrCBookingInfo = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $select = $sql->select();
                    $select->from('Crm_CoApplicantTrans')
//                        ->columns(array('CoApplicantName',))
                        ->where("BookingId in (select BookingId from Crm_UnitBooking where UnitId=$unitId) ");
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->applicantName= $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->accCount=count($this->_view->applicantName);

                    // Projects
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Brokers
                    $select = $sql->select();
                    $select->from('Crm_BrokerMaster')
                        ->columns(array('data' => 'BrokerId', 'value' => 'BrokerName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrBrokers = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Executives

                    $PositionTypeId=array(5,2);
                    $sub = $sql->select();
                    $sub->from(array('a'=>'WF_PositionMaster'))
                        ->join(array("b"=>"WF_PositionType"),"a.PositionTypeId=b.PositionTypeId",array(),$sub::JOIN_LEFT)
                        ->columns(array('PositionId'))
                        ->where(array("b.PositionTypeId"=>$PositionTypeId));

                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('data' => 'UserId', 'value' => 'EmployeeName'))
                        ->where(array('DeleteFlag' => 0))
                        ->where->expression("PositionId IN ?",array($sub));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    //selecting values for Status
                    $select = $sql->select();
                    $select->from('Crm_StatusMaster')
                        ->columns(array('data' =>'StatusId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Nature
                    $select = $sql->select();
                    $select->from('Crm_NatureMaster')
                        ->columns(array('data' =>'NatureId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_CallTypeMaster')
                        ->columns(array('data' =>'CallTypeId','value' => 'Description'))
                        ->where(array("Description NOT IN ('Block','Drop','Finalization','Unit-Transfer','Proposal','Unit-Cancellation','Pre-Booking')"));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array("ReceiptType"=>'S'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;

                    $aVNo = CommonHelper::getVoucherNo(807, date('Y/m/d'), 0, 0, $dbAdapter, "");
                    $this->_view->genType = $aVNo["genType"];
                    if ($aVNo["genType"] == false)
                        $this->_view->svNo = "";
                    else
                        $this->_view->svNo = $aVNo["voucherNo"];

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function unitTransferRegisterAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $connection->commit();
                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {


                    $connection->commit();
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitTransfer'))
                        ->columns(array('TransferId',
                            'RefNo', 'RefDate' => new Expression('Convert(varchar(11), RefDate,103)'), 'BookingId'))
                        ->join(array('b' => 'Crm_Leads'), 'b.LeadId=a.LeadId', array('LeadName'), $select::JOIN_LEFT)
                        ->join(array('c' => 'KF_UnitMaster'), 'c.UnitId=a.OldUnitId', array('OldUnitName' => 'UnitNo'), $select::JOIN_LEFT)
                        ->join(array('d' => 'KF_UnitMaster'), 'd.UnitId=a.NewUnitId', array('NewUnitName' => 'UnitNo'), $select::JOIN_LEFT)
                        ->order('TransferId DESC');;
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrUnitTrans = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->jsonUnitTrans = json_encode($arrUnitTrans);

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function unitCancellationAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $connection->commit();
                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $postData = $request->getPost();

                    $leadId = $this->bsf->isNullCheck( $postData[ 'leadId' ], 'number' );
                    if ( $leadId == 0 ) {
                        throw new \Exception( 'Invalid Lead-id!');
                    }

                    $cancellationId = $this->bsf->isNullCheck($postData['CancellationId'], 'number');
                    if($cancellationId == 0) {
                        //
                        $unitId = $this->bsf->isNullCheck( $postData[ 'unit_no' ], 'number' );
                        if ( $unitId == 0 ) {
                            $this->redirect()->toRoute( 'crm/default', array( 'controller' => 'lead', 'action' => 'unit-cancellation' ) );
                        }

                        $select = $sql->select();
                        $select->from( 'Crm_UnitBooking' )
                            ->where( array( 'UnitId' => $unitId, 'LeadId' => $leadId ,'DeleteFlag'=>0) );
                        $statement = $sql->getSqlStringForSqlObject( $select );
                        $unitBooking = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->current();

                        if ( empty( $unitBooking ) ) {
                            $this->redirect()->toRoute( 'crm/default', array( 'controller' => 'lead', 'action' => 'unit-cancellation' ) );
                        }

                        $refDate = $this->bsf->isNullCheck( $postData[ 'cancellation_date' ], 'string' );
                        if(strtotime($refDate) == FALSE) {
                            throw new \Exception('Invalid Cancellation-Date!');
                        }
                        $refDate = date('Y-m-d', strtotime($refDate));

                        $sVno = $this->bsf->isNullCheck( $postData[ 'vocher_no' ], 'string' );

                        $aVNo = CommonHelper::getVoucherNo( 813, date( 'Y-m-d', strtotime( $postData[ 'cancellation_date' ] ) ), 0, 0, $dbAdapter, "I" );
                        if ( $aVNo[ "genType" ] == true )
                            $sVno = $aVNo[ "voucherNo" ];

                        $select = $sql->select();
                        $select->from('Crm_LeadFollowup')
                            ->columns(array('EntryId'))
                            ->where(array('LeadId' =>$leadId))
                            ->order("EntryId desc");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $update = $sql->update();
                        $update->table('Crm_LeadFollowup');
                        $update->set(array(
                            'Completed'  => 1,
                            'CompletedDate'  => date('Y-m-d H:i:s'),

                        ));
                        $update->where(array('EntryId'=>$entry['EntryId']));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $insert = $sql->insert();
                        $insert->into('Crm_LeadFollowup');
                        $insert->Values(array(
                            'LeadId' => $leadId,
                            'FollowUpDate' => $refDate,
                            'ExecutiveId'=>$this->auth->getIdentity()->UserId,
                            'StatusId'=> 1,
                            'UserId'=>$this->auth->getIdentity()->UserId,
                            'CallTypeId' => 11));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();



                        //updating status to Lead//

                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'StatusId' =>1
                        ));
                        $update->where(array('LeadId' => $leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                        $insert = $sql->insert();
                        $insert->into( 'Crm_UnitCancellation' )
                            ->values( array(
                                'RefNo' => $sVno,
                                'RefDate' => $refDate,
                                'UnitId' => $unitId,
                                'BookingId' => $unitBooking[ 'BookingId' ],
                                'LeadId' => $leadId,
                                'PaidAmt' => $this->bsf->isNullCheck( $postData[ 'PaidAmt' ], 'number' ),
                                'CancellationAmt' => $this->bsf->isNullCheck( $postData[ 'CancellationAmt' ], 'number' ),
                                'OtherDetectionAmt' => $this->bsf->isNullCheck( $postData[ 'OtherDetectionAmt' ], 'number' ),
                                'PayableAmt' => $this->bsf->isNullCheck( $postData[ 'PayableAmt' ], 'number' ),
                                'Remarks' => $this->bsf->isNullCheck( $postData[ 'Remarks' ], 'string' ),
                                'CreatedDate' => date( 'Y-m-d H:i:s' ),
                                'FollowupId' => $followupentryid
                            ) );
                        $stmt = $sql->getSqlStringForSqlObject( $insert );
                        $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                        $cancellationId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        // cancel unit
                        $update = $sql->update();
                        $update->table( 'Crm_UnitBooking' )
                            ->set( array( 'DeleteFlag' => 1 ) )
                            ->where( array( 'BookingId' => $unitBooking[ 'BookingId' ] ) );
                        $statement = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                        $update = $sql->update();
                        $update->table( 'Crm_UnitDocuments' )
                            ->set( array( 'DeleteFlag' => 1 ) )
                            ->where( array( 'UnitId' => $unitId ) );
                        $statement = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                        $update = $sql->update();
                        $update->table( 'Crm_ReceiptRegister' )
                            ->set( array( 'Cancel' => 1,'CancelId'=>$cancellationId) )
                            ->where( array( 'UnitId' => $unitId ) );
                        $statement = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                        //update Property management//
                        $update = $sql->update();
                        $update->table( 'PM_PMREgister' )
                            ->set( array( 'Cancel' => 1,'CancelId'=>$cancellationId) )
                            ->where( array( 'UnitId' => $unitId ) );
                        $statement = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                        //update unsold//
                        $update = $sql->update();
                        $update->table( 'KF_UnitMaster' )
                            ->set( array( 'Status' => 'U' ) )
                            ->where( array('UnitId' => $unitId));
                        $statement = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                        // reset paid amt
                        $update = $sql->update();
                        $update->table('Crm_PaymentScheduleUnitTrans')
                            ->set(array('PaidAmount' => 0 ))
                            ->where(array('BookingId' => $unitBooking['BookingId'],'UnitId'=>$unitId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $update = $sql->update();
                        $update->table('Crm_ProgressBillTrans')
                            ->set(array('Cancel' => 1,'CancelId'=>$cancellationId,'PaidAmount' => 0 ))
                            ->where(array('UnitId' => $unitId, 'BuyerId' => $leadId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);



                        $select1 = $sql->select();
                        $select1->from('Crm_ReceiptAdjustment')
                            ->columns(array('ReceiptAdjId'))
                            ->where(array('UnitId' => $unitId));


                        $update = $sql->update();
                        $update->table('Crm_ReceiptAdjustmentTrans')
                            ->set(array('Cancel' => 1,'CancelId'=>$cancellationId))
                            ->where(array('ReceiptAdjId' => array($select1)));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $update = $sql->update();
                        $update->table('Crm_ExtraBillRegister')
                            ->set(array('PaidAmount' => 0,'Cancel' => 1,'CancelId'=>$cancellationId ))
                            ->where(array('UnitId' => $unitId, 'LeadId' => $leadId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);

                        $select = $sql->select();
                        $select->from('Crm_ProgressBillTrans')
                            ->where(array('UnitId' => $unitId,'BuyerId' => $leadId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $pbBillTrans = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if(!empty($pbBillTrans)) {
                            $update = $sql->update();
                            $update->table('Crm_ProgressBillReceiptTypeTrans')
                                ->set(array('PaidAmount' => 0 ))
                                ->where(array('ProgressBillTransId' => $pbBillTrans['ProgressBillTransId']));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                        $subQuery = $sql->select();
                        $subQuery->from('Crm_PaymentScheduleUnitTrans')
                            ->columns(array('PaymentScheduleUnitTransId'))
                            ->where(array('BookingId' => $unitBooking['BookingId']));
                        if(!empty($pbBillTrans)) {
                            $update = $sql->update();
                            $update->table('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                ->set(array('PaidAmount' => 0 ))
                                ->where->expression( 'PaymentScheduleUnitTransId IN ?', array($subQuery) );
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Unit-Cancellation-Add','N','Unit-Cancellation',$cancellationId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);

                    } else {
                        // edit mode
                        $update = $sql->update();
                        $update->table('Crm_UnitCancellation')
                            ->set(array(
                                    'OtherDetectionAmt' => $this->bsf->isNullCheck( $postData[ 'OtherDetectionAmt' ], 'number' ),
                                    'PayableAmt' => $this->bsf->isNullCheck( $postData[ 'PayableAmt' ], 'number' ),
                                    'Remarks' => $this->bsf->isNullCheck( $postData[ 'Remarks' ], 'string' ))
                            )
                            ->where(array('CancellationId' => $cancellationId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Unit-Cancellation-Modify','E','Unit-Cancellation',$cancellationId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);

                    }


                    $this->redirect()->toRoute( 'crm/default', array(
                        'controller' => 'lead',
                        'action' => 'unit-booking-register'

                    ) );

                } catch(\Exception $ex) {
                    $connection->rollback();
                    print "Error!: " . $ex->getMessage() . "</br>";
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {

                    $leadId = $this->params()->fromRoute('leadId');
                    $bookingId = $this->params()->fromRoute('unitId');
                    if(!is_numeric($leadId)) {
                        throw new \Exception('Invalid Lead-id!');
                    }
                    $this->_view->leadId = $leadId;

                    $unitId = $this->bsf->isNullCheck($this->params()->fromRoute('unitId'), 'number');
                    if($unitId != 0) {
                        $this->_view->unitId = $unitId;
                    }

                    $isEditMode = FALSE;
                    $unitCancellation = NULL;
                    $cancellationId = $this->bsf->isNullCheck($this->params()->fromRoute('cancellationId'), 'number');
                    if($cancellationId != 0) {
                        // edit mode
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitCancellation'))
                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo'), $select::JOIN_LEFT)
                            ->join(array('c' => 'WF_Users'), 'c.UserId=a.ExecutiveId', array('EmployeeName'), $select::JOIN_LEFT)
                            ->where(array('CancellationId' => $cancellationId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitCancellation = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if(!empty($unitCancellation)) {
                            $this->_view->unitCancellation = $unitCancellation;
                            $isEditMode = TRUE;
                        }
                    }
                    $this->_view->isEditMode = $isEditMode;

                    // Current units
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'KF_UnitMaster'), 'b.UnitId=a.UnitId', array(), $select::JOIN_LEFT)
                        ->columns(array('UnitName' => new Expression("b.UnitNo"),'UnitId'))
                        ->where(array('a.UnitId' => $bookingId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrCurUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $this->_view->arrCurUnits = $arrCurUnits;

                    // Projects
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                    $route= $this->params()->fromRoute('ProjectId');
                    $rout= $this->params()->fromRoute('UnitId');
                    $this->_view->leadId = $this->params()->fromRoute('leadId');

                    $select = $sql->select();
                    $select->from(array('a' =>'Crm_LeadProjects'))
                        ->columns(array('LeadId'))
                        ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"=>new expression("b.LeadName + ' - ' + b.Mobile")), $select::JOIN_LEFT)
                        ->where(array('a.ProjectId' => $route))
                        ->order('a.LeadId asc');
                    $select->where(array("b.ExecutiveId" => $this->auth->getIdentity()->UserId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' =>'KF_UnitMaster'))
                        ->columns(array('UnitId','ProjectId','UnitNo'))
                        ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.ProjectId", array("ProjectName"), $select::JOIN_LEFT)
                        ->where(array('a.UnitId'=>$rout,'a.ProjectId' => $route));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $saveproj= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    if($saveproj['UnitId']>0){
                        $this->_view->saveproj = $saveproj;
                    }


                    // Executives
//                    $select = $sql->select();
//                    $select->from('WF_Users')
//                        ->columns(array('UserId', 'EmployeeName'))
//                        ->where(array('DeleteFlag' => 0));
//                    $stmt = $sql->getSqlStringForSqlObject($select);
//                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $aVNo = CommonHelper::getVoucherNo(813, date('Y/m/d'), 0, 0, $dbAdapter, "");
                    $this->_view->genType = $aVNo["genType"];
                    if ($aVNo["genType"] == false)
                        $this->_view->svNo = "";
                    else
                        $this->_view->svNo = $aVNo["voucherNo"];

                    if($isEditMode) {
                        $this->_view->svNo = $unitCancellation['RefNo'];
                        $this->_view->refDate = date('d-m-Y', strtotime($unitCancellation['RefDate']));
                    }

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    // AJAX Request
    public function unitReceiptdetailAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $UnitId = $this->bsf->isNullCheck($this->params()->fromPost('UnitId'), 'number' );
                    if($UnitId == 0) {
                        throw new \Exception('Invalid Unit-id!');
                    }

                    $LeadId = $this->bsf->isNullCheck($this->params()->fromPost('LeadId'), 'number' );
                    if($LeadId == 0) {
                        throw new \Exception('Invalid Lead-id!');
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->columns(array('QualifierAmount'=>'QualifierAmount','AdvAmount'=>'AdvAmount','ConstructionAmount'=>'ConstructionAmount','LandAmount'=>'LandAmount','NetAmt'=>'NetAmount','BaseAmt'=>'BaseAmount','OtherCostAmt'=>'OtherCostAmount','Rate'=>'Rate','GrossAmount'=>new expression("a.OtherCostAmount+a.BaseAmount")))
                        ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo', 'UnitTypeId', 'UnitArea'), $select::JOIN_LEFT)
                        ->join(array('d' => 'KF_BlockMaster'), 'd.BlockId=b.BlockId', array('BlockName'), $select::JOIN_LEFT)
                        ->join(array('e' => 'KF_FloorMaster'), 'e.FloorId=b.FloorId', array('FloorName'), $select::JOIN_LEFT)
                        ->join(array('f' => 'KF_UnitTypeMaster'), 'f.UnitTypeId=b.UnitTypeId', array('UnitTypeName'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ProjectMaster'), 'c.ProjectId=b.ProjectId', array('ProjectName','ProjectId'), $select::JOIN_LEFT)
                        ->join(array('g' => 'Crm_UnitDetails'), 'a.UnitId=g.UnitId', array('UDSLandArea'), $select::JOIN_LEFT)
                        ->where(array('a.UnitId' => $UnitId,'a.LeadId'=>$LeadId, 'a.DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    // receipts
                    $select = $sql->select();
                    $select->from('Crm_ReceiptRegister')
                        ->where(array('UnitId' => $UnitId, 'LeadId' => $LeadId,'DeleteFlag'=>0,'CancelId'=>0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrReceipts = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                        ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                        ->where(array('a.UnitTypeId' => $unitDetail['UnitTypeId']));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // cancellation charges
                    $select = $sql->select();
                    $select->from('Crm_ProjCancellationPenality')
                        ->where(array('ProjectId' => $unitDetail['ProjectId']));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $projCancelPenality = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $cancelAmt = 0;
                    if(!empty($projCancelPenality)) {
                        if($projCancelPenality['BookingCancelType'] == 'P') {
                            $cancelAmt = $unitDetail['BaseAmt'] * $projCancelPenality['BookingCancelValue'] / 100;
                        } elseif($projCancelPenality['BookingCancelType'] == 'L') {
                            $cancelAmt = $projCancelPenality['BookingCancelValue'];
                        } elseif($projCancelPenality['BookingCancelType'] == 'S') {
                            $cancelAmt = $unitDetail['Rate'] * $projCancelPenality['BookingCancelValue'];
                        }
                    }

                    $result =  json_encode(array(
                        'unit_detail' => $unitDetail,
                        'receipts' => $arrReceipts,
                        'cancellationAmt' => $cancelAmt,
                        'unitamt' => $unitamt
                    ));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    // AJAX Request
    public function checkCancellationVocherNoAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $RefNo = $this->bsf->isNullCheck($this->params()->fromPost('VocherNo'), 'string' );
                    if(is_null($RefNo) || $RefNo == '') {
                        throw new \Exception('Invalid Vocher-No!');
                    }

                    // check list
                    $select = $sql->select();
                    $select->from('Crm_UnitCancellation')
                        ->where(array('RefNo' => $RefNo, 'DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitCancellation = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $isNotFound = false;
                    if(empty($unitCancellation)) {
                        $isNotFound = true;
                    }
                    $result =  json_encode(array('unit_cancellation' => $isNotFound));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    public function unitPreBookingAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $this->_view->CallTypeId = $this->params()->fromRoute('CallTypeId');
        $this->_view->dat = $this->params()->fromRoute('Date');
        $call = $this->params()->fromRoute('Call');

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request

            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    $postData = $request->getPost();
                    // Print_r($postData);die;

                    $project_id = $this->bsf->isNullCheck($postData['project_id'], 'number');
                    if($project_id <= 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    $leadId = $this->bsf->isNullCheck($postData['lead_id'], 'number');
                    if($leadId == 0) {
                        $leadId = $this->bsf->isNullCheck($postData['leadid'], 'number');
                    }

                    $bookingDate = $this->bsf->isNullCheck($postData['booking_date'], 'string');

                    $bookingDate = str_replace('/', '-', $bookingDate);
                    $CallTypeId = $this->bsf->isNullCheck($postData['CallTypeId'], 'number');
                    if(strtotime($bookingDate) == FALSE) {
                        $bookingDate = date('Y-m-d');
                    } else {
                        $bookingDate = date('Y-m-d', strtotime($bookingDate));
                    }

                    $unitId = $this->bsf->isNullCheck($postData['unit_no'], 'number');


                    $preBookingId = $this->bsf->isNullCheck($postData['preBookingId'], 'number');
                    $arrValues = array();
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrAllReceiptTypes = array();
                    foreach($arrResults as $result) {
                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                    }

                    if($preBookingId == 0) {
                        // $userId = $this->auth->getIdentity()->UserId;
                        $nextCallDate =$this->bsf->isNullCheck($postData['nextCallDate'], 'string');
                        $nextCallDate = str_replace('/', '-', $nextCallDate);
                        if(strtotime($nextCallDate) == FALSE) {
                            $nextCallDate = date('Y-m-d H:i:s');
                        } else {
                            $nextCallDate = date('Y-m-d H:i:s', strtotime($nextCallDate));
                        }
                        $userId = $this->auth->getIdentity()->UserId;

                        $select = $sql->select();
                        $select->from('Crm_LeadFollowup')
                            ->columns(array('EntryId'))
                            ->where(array('LeadId' =>$leadId))
                            ->order("EntryId desc");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        $update = $sql->update();
                        $update->table('Crm_LeadFollowup');
                        $update->set(array(
                            'Completed'  => 1,
                            'CompletedDate'  => date('Y-m-d H:i:s'),

                        ));
                        $update->where(array('EntryId'=>$entry['EntryId']));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $insert = $sql->insert();
                        $insert->into('Crm_LeadFollowup');
                        $insert->Values(array(
                            'LeadId' => $leadId,
                            'FollowUpDate' => $bookingDate,
                            'ExecutiveId'=> $this->auth->getIdentity()->UserId,
                            'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
                            'NatureId'=>$this->bsf->isNullCheck($postData['nature_id'], 'number'),
                            'StatusId'=>$this->bsf->isNullCheck($postData['status_id'], 'number'),
                            'NextFollowupRemarks'=>$this->bsf->isNullCheck($postData['nextfollowremarks'], 'string'),
                            'VehicleAllocation'=>$this->bsf->isNullCheck($postData['vehicleAllocation'], 'number'),
                            'PickUpAddress'=>$this->bsf->isNullCheck($postData['pickUpAddress'], 'string'),
                            'PickUpTime'=>$this->bsf->isNullCheck($postData['pickUpTime'], 'string'),
                            'NextCallDate'=>$nextCallDate,
                            'CallTypeId'=>$this->bsf->isNullCheck($postData['CallTypeId'], 'number'),
                            'Remarks' =>$this->bsf->isNullCheck($postData['remarks'], 'string'),
                            'UserId'=>$this->auth->getIdentity()->UserId,
                            'CallerSid' =>$this->bsf->isNullCheck($call, 'string'),


                        ));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        if($project_id > 0) {
                        //Project update to LeadProjects table
                        $select = $sql->select();
                        $select->from('Crm_LeadProjects')
                            ->columns(array("ProjectId"))
                            ->where(array("LeadId"=>$leadId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $resultproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        $arrproj=[];
                        foreach($resultproj as $proj){
                            array_push($arrproj, $proj['ProjectId']);
                        }
                        if(!in_array($project_id, $arrproj)){

                            $insert  = $sql->insert('Crm_LeadProjects');
                            $newData = array(
                                'LeadId'=>$leadId,
                                'ProjectId'=>$project_id,
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }}


                        $statusId=$this->bsf->isNullCheck($postData['status_id'], 'number');

                        //updating status to Lead//
                        if($statusId>0||$statusId!='') {
                            $update = $sql->update();
                            $update->table('Crm_Leads');
                            $update->set(array(
                                'StatusId' => $statusId
                            ));
                            $update->where(array('LeadId' => $leadId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                        $sVno= $this->bsf->isNullCheck($postData['booking_no'], 'string');
                        $aVNo = CommonHelper::getVoucherNo(817, date('Y-m-d', strtotime($postData['booking_date'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true) {
                            $sVno = $aVNo["voucherNo"];
                        }

                        $validUpto = date('Y-m-d');
                        // Receipt Type
                        if(count($postData['unit_no'])>0) {
                            foreach ($postData['unit_no'] as $value) {

                                if($value != 0) {
                                    $select = $sql->select();
                                    $select->from( array( 'a' => 'KF_UnitMaster' ) )
                                        ->join( array( 'b' => 'Crm_UnitDetails' ), 'b.UnitId=a.UnitId', array( '*' ), $select::JOIN_LEFT )
                                        ->where( array( 'a.UnitId' => $value, 'a.DeleteFlag' => 0 ) );
                                    $stmt = $sql->getSqlStringForSqlObject( $select );
                                    $unit = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->current();

                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                                        ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                                        ->where(array('a.UnitTypeId' => $unit['UnitTypeId']));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    $sumother=0;

                                    foreach($unitamt as $unitamt){
                                        $sumother +=$unitamt['Amount'];
                                    }

                                    if ( empty( $unit ) ) {
                                        throw new \Exception( 'Invalid Unit-no!' );

                                    }


                                }
                                $arrValues = array(
                                    'BookingNo' => $sVno,
                                    'BookingDate' => $bookingDate,
                                    'LeadId' => $leadId,
                                    'UnitId' =>$value,
                                    'ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number'),
                                    'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                                    'ExecutiveId' => $this->auth->getIdentity()->UserId,
                                    'AdvAmount' => $this->bsf->isNullCheck($postData['advance_amt'], 'number'),
                                    'Rate' => $this->bsf->isNullCheck($unit['Rate'], 'number'),
                                    'CreatedDate' => date('Y-m-d H:i:s'),
                                    'FollowupId' => $followupentryid,
                                    'ValidUpto' => $validUpto
                                );

                                $netAmt =  $this->bsf->isNullCheck($unit['NetAmt'], 'number');
                                $discountType= $this->bsf->isNullCheck($postData['discount_type'], 'string');
                                $landAmt =$this->bsf->isNullCheck( $unit['LandAmount'], 'number');
                                $constructionAmt = $unit['ConstructionAmount'];


                                if(!is_null($discountType)) {
                                    $arrValues['DiscountType'] = $discountType;

                                    $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                                    if($discountType == 'L' ) {
                                        $arrValues['PRate'] = $unit['Rate'];
                                        $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');

                                        if($arrValues['LumpsumReceiptId'] == 'C') {
                                            $constructionAmt -= $arrValues['Discount'];
                                            $netAmt -= $arrValues['Discount'];

                                        } else if($arrValues['LumpsumReceiptId'] == 'L') {
                                            $landAmt -= $arrValues['Discount'];
                                            $netAmt -= $arrValues['Discount'];

                                        } else {
                                            $netAmt -= $arrValues['Discount'];
                                            $constructionAmt =$netAmt-$landAmt;

                                        }
                                    } else if($discountType == 'R') {

                                        $rate =$unit['Rate']- $arrValues['Discount'];
                                        $netAmt= $rate * $unit['UnitArea'];
                                        $constructionAmt =$netAmt-$landAmt;
                                        $arrValues['PRate'] = $rate;

                                    } else if($discountType == 'P') {
                                        $arrValues['PRate'] = $unit['Rate'];
                                        $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                                        $dis =$netAmt*($arrValues['Discount']/100);

                                        if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                            $dis =$constructionAmt*($arrValues['Discount']/100);
                                            $constructionAmt -= $dis;
                                            $netAmt -= $dis;

                                        } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                            $dis =$landAmt*($arrValues['Discount']/100);
                                            $landAmt -= $dis;
                                            $netAmt -= $dis;
                                        } else {
                                            $netAmt -= $dis;
                                            $constructionAmt =$netAmt-$landAmt;

                                        }
                                    }
                                    else{
                                        $arrValues['PRate'] = $unit['Rate'];
                                    }
                                }
                                $arrValues['BaseAmount'] =  $landAmt + $constructionAmt;
                                $arrValues['LandAmount'] =  $landAmt ;
                                $arrValues['ConstructionAmount'] =  $constructionAmt;
                                $arrValues['QualAmount'] =  $this->bsf->isNullCheck($unit['QualifierAmount'], 'number');
                                $arrValues['NetAmount'] =  $netAmt ;
                                $arrValues['GrossAmount'] =  $landAmt + $constructionAmt;

                                $insert = $sql->insert();
                                $insert->into('Crm_UnitPreBooking')
                                    ->values($arrValues);
                                $stmt = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                $preBookingId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                if($value != 0) {
                                    // update unit
                                    $update = $sql->update();
                                    $update->table( 'KF_UnitMaster' )
                                        ->set( array( 'Status' => 'P' ) )
                                        ->where( array( 'UnitId' => $value ) );
                                    $stmt = $sql->getSqlStringForSqlObject( $update );
                                    $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                                }
                            }
                        } else {
                            $arrValues = array(
                                'BookingNo' => $sVno,
                                'BookingDate' => $bookingDate,
                                'LeadId' => $leadId,
                                'UnitId' =>0,
                                'ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number'),
                                'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                                'ExecutiveId' => $this->auth->getIdentity()->UserId,
                                'AdvAmount' => $this->bsf->isNullCheck($postData['advance_amt'], 'number'),
                                'CreatedDate' => date('Y-m-d H:i:s'),
                                'FollowupId' => $followupentryid,
                                'ValidUpto' => $validUpto
                            );

                            $insert = $sql->insert();
                            $insert->into('Crm_UnitPreBooking')
                                ->values($arrValues);
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                            $preBookingId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        }

                    }else {
                        $select = $sql->select();
                        $select->from( array( 'a' => 'KF_UnitMaster' ) )
                            ->join( array( 'b' => 'Crm_UnitDetails' ), 'b.UnitId=a.UnitId', array( '*' ), $select::JOIN_LEFT )
                            ->where( array( 'a.UnitId' => $postData['unit_no'], 'a.DeleteFlag' => 0 ) );
                        $stmt = $sql->getSqlStringForSqlObject( $select );
                        $unit = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->current();

                        $netAmt = $unit['NetAmt'];
                        $discountType= $this->bsf->isNullCheck($postData['discount_type'], 'string');
                        $unitNo = $this->bsf->isNullCheck($postData['unit_no'], 'number');
                        $landAmt = $unit['LandAmount'];
                        $constructionAmt = $unit['ConstructionAmount'];
                        $arrValues['PRate'] = $unit['Rate'];



                        if(!is_null($discountType)) {
                            $arrValues['DiscountType'] = $discountType;

                            $arrValues['Discount'] = $this->bsf->isNullCheck($postData['discount'], 'number');
                            if($discountType == 'L' ) {

                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');

                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                    $constructionAmt -= $arrValues['Discount'];
                                    $netAmt -= $arrValues['Discount'];

                                } elseif($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                    $landAmt -= $arrValues['Discount'];
                                    $netAmt -= $arrValues['Discount'];

                                } else {
                                    $netAmt -= $arrValues['Discount'];
                                    $constructionAmt =$netAmt-$landAmt;

                                }
                            } else if($discountType == 'R') {

                                $rate =$unit['Rate']- $arrValues['Discount'];
                                $netAmt= $rate * $unit['UnitArea'];
                                $constructionAmt =$netAmt-$landAmt;
                                $arrValues['PRate'] = $rate;

                            } else if($discountType == 'P') {

                                $arrValues['LumpsumReceiptId'] = $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                                $dis =$netAmt*($arrValues['Discount']/100);

                                if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'C') {
                                    $dis =$constructionAmt*($arrValues['Discount']/100);
                                    $constructionAmt -= $dis;
                                    $netAmt -= $dis;

                                } else if($arrAllReceiptTypes[$arrValues['LumpsumReceiptId']] == 'L') {
                                    $dis =$landAmt*($arrValues['Discount']/100);
                                    $landAmt -= $dis;
                                    $netAmt -= $dis;
                                } else {
                                    $netAmt -= $dis;
                                    $constructionAmt =$netAmt-$landAmt;

                                }
                            }
                        }
                        $arrValues['AdvAmount']= $this->bsf->isNullCheck($postData['advance_amt'], 'number');
                        $arrValues[ 'Rate'] = $this->bsf->isNullCheck($unit['Rate'], 'number');


                        $arrValues['BaseAmount'] =  $landAmt + $constructionAmt;
                        $arrValues['LandAmount'] =  $landAmt ;
                        $arrValues['ConstructionAmount'] =  $constructionAmt;
                        $arrValues['NetAmount'] =  $netAmt;
                        // $arrValues['AdvAmnt'] =  $unit['AdvAmount'];
                        $arrValues['QualAmount'] =  $unit['QualifierAmount'];
                        $arrValues['GrossAmount'] =  $landAmt + $constructionAmt;
                        $arrValues['UnitId'] = $unitNo;
                        $update = $sql->update();
                        $update->table('Crm_UnitPreBooking')
                            ->set(
                                $arrValues
                            )
                            ->where(array('PreBookingId' => $preBookingId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                    }

                    // update unit detail if discount applied
                    if($unitId !=0 && !is_null($discountType)) {

                        $arrUnitDetailValues['Discount'] = $arrValues['Discount'];
                        $arrUnitDetailValues['DiscountType'] = $arrValues['DiscountType'];

                        if(isset($arrValues['LumpsumReceiptId'])) {
                            $arrUnitDetailValues['LumpsumReceiptId'] = $arrValues['LumpsumReceiptId'];
                        }

                        $update = $sql->update();
                        $update->table('Crm_UnitDetails')
                            ->set($arrUnitDetailValues)
                            ->where(array('UnitId' => $unitId));
                        $stmt = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                    $connection->commit();
                    if($preBookingId==0){
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'PreBook-Add','N','Crm-PreBooking',$preBookingId,0, 0, 'CRM', '',$userId, 0 ,0);
                    }
                    else{
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'PreBook-Modify','E','Crm-PreBooking',$preBookingId,0, 0, 'CRM', '',$userId, 0 ,0);
                    }




                    $this->redirect()->toRoute('crm/default', array('controller' => 'lead', 'action' => 'pre-booking-register'));


                } catch(PDOException $ex){
                    $connection->rollback();
                    $this->_view->err = $ex->getMessage();
                }

            } else {
                // GET request

                try {

                    $leadId = $this->params()->fromRoute('leadId');

                    if(!is_numeric($leadId)) {
                        throw new \Exception('Invalid Lead-id!');
                    }
                    $this->_view->leadId = $leadId;

                    $CallTypeId = $this->bsf->isNullCheck($this->params()->fromRoute('CallTypeId'), 'number');
                    if($CallTypeId != 0) {
                        $this->_view->CallTypeId = $CallTypeId;
                    }
                    $isEditMode = FALSE;
                    $preBookingId = $this->bsf->isNullCheck($this->params()->fromRoute('PreBookingId'), 'number');
                    $call = $this->bsf->isNullCheck($this->params()->fromRoute('Call'), 'string');
                    if($call=='save'){

                        $this->_view->leadId = $this->params()->fromRoute('leadId');
                        $unitId = $this->bsf->isNullCheck($this->params()->fromRoute('CallTypeId'), 'number');
                        $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('Date'), 'number');
                        $this->_view->dat = date('d-m-Y');
                        $this->_view->CallTypeId='9';

                        $select = $sql->select();
                        $select->from(array('a' =>'Crm_LeadProjects'))
                            ->columns(array('LeadId'))
                            ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array("LeadName"=>new expression("b.LeadName + ' - ' + b.Mobile")), $select::JOIN_LEFT)
                            ->where(array('a.ProjectId' => $projectId))
                            ->order('a.LeadId asc');
                        $select->where(array("b.ExecutiveId" => $this->auth->getIdentity()->UserId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $this->_view->resultLeads = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                        $select = $sql->select();
                        $select->from(array('a' =>'KF_UnitMaster'))
                            ->columns(array('UnitId','ProjectId','UnitNo'))
                            ->join(array("b"=>"Proj_ProjectMaster"), "a.ProjectId=b.ProjectId", array("ProjectName"), $select::JOIN_LEFT)
                            ->where(array('a.UnitId'=>$unitId,'a.ProjectId' => $projectId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $this->_view->saveproj= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


                    }




                    else {
                        if ($preBookingId != 0) {
                            $this->_view->preBookingId = $preBookingId;

                            $select = $sql->select();
                            $select->from(array('a' => 'Crm_UnitPreBooking'))
                                ->join(array('b' => 'WF_Users'), 'b.UserId=a.ExecutiveId', array('EmployeeName'), $select::JOIN_LEFT)
                                ->join(array('c' => 'KF_UnitMaster'), 'c.UnitId=a.UnitId', array('UnitNo'), $select::JOIN_LEFT)
                                ->join(array('d' => 'Proj_ProjectMaster'), 'd.ProjectId=a.ProjectId', array('ProjectName', 'ProjectId'), $select::JOIN_LEFT)
                                ->where(array('PreBookingId' => $preBookingId));
                            $stmt = $sql->getSqlStringForSqlObject($select);
                            $preBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                            if (!empty($preBooking)) {
                                $this->_view->preBooking = $preBooking;
                                $isEditMode = TRUE;
                            }
                            $select1 = $sql->select();
                            $select1->from('KF_UnitMaster')
                                ->columns(array('UnitId', 'UnitNo'))
                                ->where(array('Status' => 'U', 'ProjectId' => $preBooking['ProjectId']));
                            $stmt = $sql->getSqlStringForSqlObject($select1);
                            $this->_view->arrUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        }


                        $bookingDate = $this->params()->fromRoute('Date');
                        if (strtotime($bookingDate) != FALSE) {
                            $this->_view->BookingDate = date('d-m-Y', strtotime($bookingDate));
                        }

                        // Current units
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitBooking'))
                            ->join(array('b' => 'KF_UnitMaster'), 'b.UnitId=a.UnitId', array(), $select::JOIN_LEFT)
                            ->join(array('c' => 'Proj_ProjectMaster'), 'c.ProjectId=b.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
                            ->columns(array('UnitName' => new Expression("c.ProjectName + ' - ' + b.UnitNo"),
                                'UnitId'))
                            ->where(array('LeadId' => $leadId, 'a.DeleteFlag' => 0));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $arrCurUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        if (!empty($arrCurUnits)) {
                            $this->_view->arrCurUnits = $arrCurUnits;
                        }

                        // Projects
                        $select = $sql->select();
                        $select->from('Proj_ProjectMaster')
                            ->columns(array('ProjectId', 'ProjectName'))
                            ->where(array('DeleteFlag' => 0))
                            ->order('ProjectId desc');
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }
                    $userId = $this->auth->getIdentity()->UserId;
                    $this->_view->isEditMode = $isEditMode;

                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array("*"))
                        ->where(array("UserId"=>$userId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->resultsUser = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    // Executives
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('UserId', 'EmployeeName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Status
                    $select = $sql->select();
                    $select->from('Crm_StatusMaster')
                        ->columns(array('data' =>'StatusId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Nature
                    $select = $sql->select();
                    $select->from('Crm_NatureMaster')
                        ->columns(array('data' =>'NatureId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_CallTypeMaster')
                        ->columns(array('data' =>'CallTypeId','value' => 'Description'))
                        ->where(array("Lead"=>1))
                        ->where(array("Description NOT IN ('Fresh')"));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array("ReceiptType"=>'S'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;

                    $aVNo = CommonHelper::getVoucherNo(817, date('Y/m/d'), 0, 0, $dbAdapter, "");
                    $this->_view->genType = $aVNo["genType"];
                    if ($aVNo["genType"] == false)
                        $this->_view->svNo = "";
                    else
                        $this->_view->svNo = $aVNo["voucherNo"];

                    if($isEditMode) {
                        $this->_view->svNo = $preBooking['BookingNo'];
                        $this->_view->BookingDate = date('d-m-Y', strtotime($preBooking['BookingDate']));
                    }

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }
    public function preBookDeleteAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $userId = $this->auth->getIdentity()->UserId;
        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $status = "failed";
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $connection = $dbAdapter->getDriver()->getConnection();
                try {
                    $RegisterId = $this->bsf->isNullCheck($this->params()->fromPost('RegisterId'),'number');
                    $UnitId = $this->bsf->isNullCheck($this->params()->fromPost('UnitId'),'number');
                    $Remarks = $this->bsf->isNullCheck($this->params()->fromPost('Remarks'),'string');
                    $mode = $this->bsf->isNullCheck($this->params()->fromPost('mode'),'string');

                    $sql = new Sql($dbAdapter);
                    $response = $this->getResponse();
                    $connection->beginTransaction();
                    if($mode=='reserve'){
                        $update = $sql->update();
                        $update->table('Crm_UnitReserve')
                            ->set(array('DeleteFlag' => '1','ModifiedDate' => date('Y/m/d H:i:s'), 'DeleteRemarks' => $Remarks))
                            ->where(array('ReserveId' => $RegisterId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $update1 = $sql->update();
                        $update1->table('KF_UnitMaster')
                            ->set(array('Status'=>'U'))
                            ->where(array('UnitId' => $UnitId));
                        $statement = $sql->getSqlStringForSqlObject($update1);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'PreBook-Delete','D','Crm-PreBooking',$RegisterId,0, 0, 'CRM', '',$userId, 0 ,0);


                    }
                    else {
                        $update = $sql->update();
                        $update->table('Crm_UnitPreBooking')
                            ->set(array('DeleteFlag' => '1', 'ModifiedDate' => date('Y/m/d H:i:s'), 'DeleteRemarks' => $Remarks))
                            ->where(array('PreBookingId' => $RegisterId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $update1 = $sql->update();
                        $update1->table('KF_UnitMaster')
                            ->set(array('Status' => 'U'))
                            ->where(array('UnitId' => $UnitId));
                        $statement = $sql->getSqlStringForSqlObject($update1);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Reserve-Delete','D','reserve',$RegisterId,0, 0, 'CRM', '',$userId, 0 ,0);

                    }

                    $status = 'deleted';
                } catch (PDOException $e) {
                    $connection->rollback();
                    $response->setStatusCode(400)->setContent($status);
                }

                $response->setContent($status);
                return $response;
            }
        }
    }

    // AJAX Request
    public function checkPreBookingNoAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $RefNo = $this->bsf->isNullCheck($this->params()->fromPost('BookingNo'), 'string' );
                    if(is_null($RefNo) || $RefNo == '') {
                        throw new \Exception('Invalid Booking-No!');
                    }

                    // check list
                    $select = $sql->select();
                    $select->from('Crm_UnitPreBooking')
                        ->where(array('BookingNo' => $RefNo, 'DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitPreBooking = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $isNotFound = false;
                    if(empty($unitPreBooking)) {
                        $isNotFound = true;
                    }
                    $result =  json_encode(array('unitPreBooking' => $isNotFound));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    public function preBookingRegisterAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())    {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                try {
                    $result =  "";

                    $this->_view->setTerminal(true);
                    $result = "success";
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch (PDOException $e) {
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $connection->commit();
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {

                    $select = $sql->select();
                    $select->from(array('c' => 'Crm_UnitPreBooking'))
                        ->columns(array('PreBookingId',
                            'BookingNo','BookingDate' => new Expression('Convert(varchar(11), BookingDate,101)'),
                            'PRate', 'NetAmount','LeadId','ValidUpTo' => new Expression('Convert(varchar(11), ValidUpTo,103)')))
                        ->join(array('a' => 'KF_UnitMaster'), 'c.UnitId=a.UnitId', array('UnitNo','UnitId'), $select::JOIN_LEFT)
                        ->join(array('e' => 'Proj_ProjectMaster'), 'e.ProjectId=c.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                        ->join(array('b' => 'Crm_Leads'), 'b.LeadId=c.LeadId', array('LeadName'), $select::JOIN_LEFT)
//                        ->join(array('d' => 'Crm_UnitDetails'), 'd.UnitId=c.UnitId', array('NetAmt','OtherCostAmt'), $select::JOIN_LEFT)
                        ->where(array('c.DeleteFlag' => 0))
                        ->order('c.PreBookingId desc');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrPreBookings = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $this->_view->jsonPreBookings = json_encode($arrPreBookings);

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function unitProposalAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $CallTypeId = $this->params()->fromRoute('CallTypeId');
        $this->_view->dat = $this->params()->fromRoute('Date');
        $this->_view->leadId = $this->params()->fromRoute('leadId');

        $call = $this->params()->fromRoute('Call');

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $connection->commit();
                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    $postData = $request->getPost();
                    //Print_r($postData); die;
                    $project_id = $this->bsf->isNullCheck($postData['project_id'], 'number');
                    if($project_id <= 0) {
                        throw new \Exception('Invalid Project-id!');
                    }

                    $leadId = $this->bsf->isNullCheck($postData['lead_id'], 'number');

                    if($leadId <= 0) {
                        throw new \Exception('Invalid Lead-id!');
                    }

                    $proposalDate = $this->bsf->isNullCheck($postData['proposal_date'], 'string');
                    $CallTypeId = $this->bsf->isNullCheck($postData['CallTypeId'], 'number');
                    $proposalDate = str_replace('/', '-', $proposalDate);
                    if(strtotime($proposalDate) == FALSE) {
                        $proposalDate = date('Y-m-d');
                    } else {
                        $proposalDate = date('Y-m-d', strtotime($proposalDate));
                    }

                    $unitId = $this->bsf->isNullCheck($postData['unit_no'], 'number');
                    if($unitId != 0) {
                        $select = $sql->select();
                        $select->from( array( 'a' => 'KF_UnitMaster' ) )
                            ->join( array( 'b' => 'Crm_UnitDetails' ), 'b.UnitId=a.UnitId', array( '*' ), $select::JOIN_LEFT )
                            ->where( array( 'a.UnitId' => $postData[ 'unit_no' ], 'a.DeleteFlag' => 0 ) );
                        $stmt = $sql->getSqlStringForSqlObject( $select );
                        $unit = $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE )->current();
                        if ( empty( $unit ) ) {
                            throw new \Exception( 'Invalid Unit-no!' );

                        }
                    }

                    if($unitId != 0 && $unit['Status'] != 'U') {
                        throw new \Exception('Unit sold-out!');
                    }

                    $dir = 'public/unitproposals/' . $unitId;
                    if(is_dir($dir) == FALSE) {
                        mkdir($dir);
                    }

                    $newFileName = $this->generateRandomString() . '.pdf';
                    $filePath = $dir . '/'. $newFileName;

                    $urllink='/unitproposals/' . $unitId.'/'. $newFileName;

                    $userId = $this->auth->getIdentity()->UserId;
                    $nextCallDate = $this->bsf->isNullCheck($postData['nextCallDate'], 'string');
                    $nextCallDate = str_replace('/', '-', $nextCallDate);
                    if(strtotime($nextCallDate) == FALSE) {
                        $nextCallDate = date('Y-m-d H:i:s');
                    } else {
                        $nextCallDate = date('Y-m-d H:i:s', strtotime($nextCallDate));
                    }

                    $select = $sql->select();
                    $select->from('Crm_LeadFollowup')
                        ->columns(array('EntryId'))
                        ->where(array('LeadId' =>$leadId))
                        ->order("EntryId desc");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $update = $sql->update();
                    $update->table('Crm_LeadFollowup');
                    $update->set(array(
                        'Completed'  => 1,
                        'CompletedDate'  => date('Y-m-d H:i:s'),

                    ));
                    $update->where(array('EntryId'=>$entry['EntryId']));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $insert = $sql->insert();
                    $insert->into('Crm_LeadFollowup');
                    $insert->Values(array(
                        'LeadId' => $leadId,
                        'FollowUpDate' => $proposalDate,
                        'ExecutiveId'=>$userId,
                        'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
                        'StatusId'=>$this->bsf->isNullCheck($postData['status_id'], 'number'),
                        'NatureId'=>$this->bsf->isNullCheck($postData['nature_id'], 'number'),
                        'NextFollowupRemarks'=>$this->bsf->isNullCheck($postData['nextfollowremarks'], 'string'),
                        'VehicleAllocation'=>$this->bsf->isNullCheck($postData['vehicleAllocation'], 'number'),
                        'PickUpAddress'=>$this->bsf->isNullCheck($postData['pickUpAddress'], 'string'),
                        'PickUpTime'=>$this->bsf->isNullCheck($postData['pickUpTime'], 'string'),
                        'NextCallDate'=>$nextCallDate,
                        'CallTypeId'=>8,
                        'Remarks' =>$this->bsf->isNullCheck($postData['remarks'], 'string'),
                        'CallerSid' =>$this->bsf->isNullCheck($call, 'string'),
                        'UserId'=>$this->auth->getIdentity()->UserId,
                        'DocumentLoc' => $filePath,
                        'Url' => $urllink


                    ));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();

                    if($project_id > 0) {
                    //Project update to LeadProjects table
                    $select = $sql->select();
                    $select->from('Crm_LeadProjects')
                        ->columns(array("ProjectId"))
                        ->where(array("LeadId"=>$leadId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultproj = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrproj=[];
                    foreach($resultproj as $proj){
                        array_push($arrproj, $proj['ProjectId']);
                    }
                    if(!in_array($project_id, $arrproj)){

                        $insert  = $sql->insert('Crm_LeadProjects');
                        $newData = array(
                            'LeadId'=>$leadId,
                            'ProjectId'=>$project_id,
                        );
                        $insert->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }}

                    $statusId=$this->bsf->isNullCheck($postData['status_id'], 'number');

                    //updating status to Lead//
                    if($statusId>0||$statusId!='') {
                        $update = $sql->update();
                        $update->table('Crm_Leads');
                        $update->set(array(
                            'StatusId' => $statusId
                        ));
                        $update->where(array('LeadId' => $leadId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $sVno= $this->bsf->isNullCheck($postData['proposal_no'], 'string');
                    $aVNo = CommonHelper::getVoucherNo(816, date('Y-m-d', strtotime($postData['proposal_date'])), 0, 0, $dbAdapter, "I");
                    if ($aVNo["genType"] == true) {
                        $sVno = $aVNo["voucherNo"];
                    }

                    $arrValues = array(
                        'ProposalNo' => $sVno,
                        'ProposalDate' => $proposalDate,
                        'LeadId' => $leadId,
                        'UnitId' => $unitId,
                        'CustomerType' => $this->bsf->isNullCheck($postData['buyer_investor'], 'string'),
                        'Rate' => $this->bsf->isNullCheck($postData['unit_rate'], 'number'),
                        'ExecutiveId' => $this->auth->getIdentity()->UserId,
                        'CreatedDate' => date('Y-m-d H:i:s'),
                        'FollowupId' => $followupentryid
                    );
                    $arrValues['NetAmount']= $this->bsf->isNullCheck($postData['pnetamt'], 'number');
                    $arrValues['LandAmount']= $this->bsf->isNullCheck($postData['pland'], 'number');
                    $arrValues['BaseAmount']= $this->bsf->isNullCheck($postData['pbase'], 'number');
                    $arrValues['ConstructionAmount']= $this->bsf->isNullCheck($postData['pconst'], 'number');
                    $arrValues['OtherCost']= $this->bsf->isNullCheck($postData['pother'], 'number');
                    $arrValues['DiscountType']= $this->bsf->isNullCheck($postData['discount_type'], 'string');
                    $arrValues['LumpsumReceiptId']= $this->bsf->isNullCheck($postData['lumpsum_receipt_wise'], 'number');
                    $arrValues['Discount']= $this->bsf->isNullCheck($postData['discount'], 'number');
                    $arrValues['PRate']= $this->bsf->isNullCheck($postData['prate'], 'number');
                    $arrValues['GrossAmount']= $this->bsf->isNullCheck($postData['pgross'], 'number');
                    $arrValues['QualAmount']= $this->bsf->isNullCheck($postData['pqual'], 'number');
                    $arrValues['AdvAmnt']= $this->bsf->isNullCheck($postData['padvan'], 'number');
                    $arrValues['Area']= $this->bsf->isNullCheck($postData['parea'], 'number');


                    $insert = $sql->insert();
                    $insert->into('Crm_UnitProposal')
                        ->values($arrValues);
                    $stmt = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                    $proposalId = $dbAdapter->getDriver()->getLastGeneratedValue();
                    $connection->commit();

                    if($proposalId > 0) {
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_UnitProposal'))
                            ->columns(array('ProposalId',
                                'ProposalNo','PRate', 'GrossAmount','OtherCost','QualAmount','AdvAmnt','Area','LandAmount','BaseAmount','ConstructionAmount','OtherCost','ProposalDate' => new Expression('Convert(varchar(11), ProposalDate,103)'), 'Rate', 'LeadId','NetAmount'))
                            ->join(array('b' => 'Crm_Leads'), 'b.LeadId=a.LeadId', array('LeadName','Email'), $select::JOIN_LEFT)
                            ->join(array('c' => 'KF_UnitMaster'), 'c.UnitId=a.UnitId', array('UnitName' => 'UnitNo', 'Area' => 'UnitArea', 'UnitTypeId'), $select::JOIN_LEFT)
                            ->join(array('d' => 'Proj_ProjectMaster'), 'd.ProjectId=c.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                            ->join(array('e' => 'KF_BlockMaster'), 'e.BlockId=c.BlockId', array('BlockName'), $select::JOIN_LEFT)
                            ->join(array('f' => 'KF_FloorMaster'), 'f.BlockId=c.FloorId', array('FloorName'), $select::JOIN_LEFT)
                            //->join(array('g' => 'Crm_UnitDetails'), 'g.UnitId=c.UnitId', array('*'), $select::JOIN_LEFT)
                            ->where(array('ProposalId' => $proposalId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $unitProposal = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        $pdfHtml = $this->generateProposalPdf( $unitProposal );

                        require_once( getcwd()."/vendor/dompdf/dompdf/dompdf_config.inc.php" );
                        $dompdf = new DOMPDF();
                        $dompdf->load_html( $pdfHtml );
                        $dompdf->set_paper( "A4" );
                        $dompdf->render();
                        $canvas = $dompdf->get_canvas();
                        $canvas->page_text( 275, 820, "Page: {PAGE_NUM} of {PAGE_COUNT}", "", 8, array( 0, 0, 0 ) );

                        $output = $dompdf->output();
                        file_put_contents($filePath, $output);

                        $output = $dompdf->output();
                        $fileName = "UnitProposal_{$newFileName}";
                        $content_encoded = base64_encode($output);

                        if( $unitProposal['Email'] !='' ||  $unitProposal['Email'] !=null){

                            //activation mail
                            $mailData = array(
                                array(
                                    'name' => 'LEADNAME',
                                    'content' => $unitProposal['LeadName']
                                ),
                                array(
                                    'name' => 'PROJECTNAME',
                                    'content' => $unitProposal['ProjectName']
                                ),
                                array(
                                    'name' => 'PROPOSALDATE',
                                    'content' => $unitProposal['ProposalDate']
                                )
                            );

                            $attachment = array(
                                'name' => $fileName,
                                'type' => "application/pdf",
                                'content' => $content_encoded
                            );
                            $sm = $this->getServiceLocator();
                            $config = $sm->get('application')->getConfig();
                            $viewRenderer->MandrilSendMail()->sendMailWithAttachment($unitProposal['Email'],$config['general']['mandrilEmail'],'Unit Proposal','crm_proposal', $attachment, $mailData);
                            //echo $rend;die;
                        }}

                    $this->redirect()->toRoute('crm/default', array('controller' => 'lead', 'action' => 'followup-register'));

                } catch(PDOException $e){
                    $connection->rollback();
                }
            } else {
                // GET request
                try {
//                    $leadId = $this->params()->fromRoute('leadId');
//                    echo $leadId ; die;
//                    if(!is_numeric($leadId)) {
//                        throw new \Exception('Invalid Lead-id!');
//                    }
//                    $this->_view->leadId = $leadId;

                    $RefDate = $this->params()->fromRoute('Date');
                    if(strtotime($RefDate) != FALSE) {
                        $this->_view->RefDate = date('d-m-Y', strtotime($RefDate));
                    }

                    // Projects
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('DeleteFlag' => 0))
                        ->order('ProjectId desc');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Status
                    $select = $sql->select();
                    $select->from('Crm_StatusMaster')
                        ->columns(array('data' =>'StatusId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrStatus  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //selecting values for Nature
                    $select = $sql->select();
                    $select->from('Crm_NatureMaster')
                        ->columns(array('data' =>'NatureId','value' => 'Description'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrNature  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from('Crm_CallTypeMaster')
                        ->columns(array('data' =>'CallTypeId','value' => 'Description'))
                        ->where(array("Lead"=>1))
                        ->where(array("Description NOT IN ('Fresh')"));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrCall  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $userId = $this->auth->getIdentity()->UserId;

                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array("*"))
                        ->where(array("UserId"=>$userId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->resultsUser = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    // Receipt Type
                    $select = $sql->select();
                    $select->from('Crm_ReceiptTypeMaster')
                        ->where(array("ReceiptType"=>'S'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->arrReceiptTypes = $arrResults;

                    // Executives
                    $select = $sql->select();
                    $select->from('WF_Users')
                        ->columns(array('UserId', 'EmployeeName'))
                        ->where(array('DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $aVNo = CommonHelper::getVoucherNo(816, date('Y/m/d'), 0, 0, $dbAdapter, "");
                    $this->_view->genType = $aVNo["genType"];
                    if ($aVNo["genType"] == false)
                        $this->_view->svNo = "";
                    else
                        $this->_view->svNo = $aVNo["voucherNo"];

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    function generateProposalPdf($unitProposal) {

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        $ProposalDate = date('d-m-Y', strtotime($unitProposal['ProposalNo']));
        $pdfHtml = <<<EOT
		<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <title>Receipt</title>

    <style>
    .invoice-box{
        max-width:800px;
        margin:auto;
        padding:10px;
        border:1px solid #eee;
        box-shadow:0 0 10px rgba(0, 0, 0, .15);
        font-size:16px;
        line-height:24px;
        color:#555;
		background:#e2ebef;
    }

    .invoice-box table{
        width:100%;
        text-align:left;
		background:#fff !important;
		padding:10px;
    }

    .invoice-box table td{
        padding:5px;
        vertical-align:top;
    }

    .invoice-box table tr td:nth-child(2){
        text-align:right;
    }

    .invoice-box table tr.heading td{
        background:#eee;
        border-bottom:1px solid #ddd;
        font-weight:bold;
		font-size:14px;
    }
    .invoice-box table tr.item td{
        border-bottom:1px solid #eee;
		font-size:14px;
    }

    .invoice-box table tr.item.last td{
        border-bottom:none;
    }

    .invoice-box table tr.total td:nth-child(2){
        border-top:2px solid #eee;
        font-weight:bold;
    }
    </style>
</head>

<body>
    <div class="invoice-box">
        <table cellpadding="0" cellspacing="0">
            <tr class="mainheading">
                <td colspan="2" class="" style="color:#244996; font-size:25px; font-weight:500; text-align:center; padding:10px 0px 22px 0px;">Unit Proposal</td>
            </tr>
            <tr class="heading">
                <td >
                    <div><span>Proposal No : </span> &nbsp; <span>{$unitProposal['ProposalNo']}</span></div>
                </td>

                <td>
                     <div><span>Date : </span> &nbsp; <span>{$ProposalDate}</span></div>
                </td>
            </tr>
            <tr class="item">
                <td>
                    Project Name
                </td>

                <td>
                    {$unitProposal['ProjectName']}
                </td>
            </tr>
            <tr class="item">
                <td>
                    Unit No
                </td>

                <td>
                    {$unitProposal['UnitName']}
                </td>
            </tr>
            <tr class="item">
                <td>
                    Buyer Name
                </td>

                <td>
                    {$unitProposal['LeadName']}
                </td>
            </tr>
            <tr class="heading">
                <td colspan="2">
                    Unit Detail
                </td>
            </tr>

            <tr class="item">
                <td>
                    Block Name
                </td>

                <td>
                    {$unitProposal['BlockName']}
                </td>
            </tr>

            <tr class="item">
                <td>
                    Level
                </td>

                <td>
                     {$unitProposal['FloorName']}
                </td>
            </tr>

            <tr class="item">
                <td>
                    Area
                </td>

                <td>
                    {$unitProposal['Area']}
                </td>
            </tr>
            <tr class="item">
                <td>
                    Rate
                </td>

                <td>
                    {$viewRenderer->commonHelper()->sanitizeNumber($unitProposal['PRate'], 2, TRUE)}
                </td>
            </tr>
            <tr class="item">
                <td>
                    Base Amount
                </td>

                <td>
                    {$viewRenderer->commonHelper()->sanitizeNumber($unitProposal['BaseAmount'], 2, TRUE)}
                </td>
            </tr>
EOT;

        if($unitProposal['OtherCost'] != 0) {
            $pdfHtml .= <<<EOT
            <tr class="item">
                <td>
                    Other Cost
                </td>

                <td>
                    {$viewRenderer->commonHelper()->sanitizeNumber($unitProposal['OtherCost'], 2, TRUE)}
                </td>
            </tr>
EOT;
        }

        $pdfHtml .= <<<EOT
            <tr class="total">
                <td colspan="2" style="color:#098833 !important; text-align:right;">
                   Net Amount : {$viewRenderer->commonHelper()->sanitizeNumber($unitProposal['NetAmount'], 2, TRUE)}
                </td>
            </tr>
        </table>
    </div>
</body>
</html>
EOT;

        return $pdfHtml;
    }

    // AJAX Request
    public function checkProposalNoAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {
                    //Write your Ajax post code here

                    $ProposalNo = $this->bsf->isNullCheck($this->params()->fromPost('BookingNo'), 'string' );
                    if(is_null($ProposalNo) || $ProposalNo == '') {
                        throw new \Exception('Invalid Proposal-No!');
                    }

                    // check list
                    $select = $sql->select();
                    $select->from('Crm_UnitProposal')
                        ->where(array('ProposalNo' => $ProposalNo, 'DeleteFlag' => 0));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $unitProposal = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $isNotFound = false;
                    if(empty($unitProposal)) {
                        $isNotFound = true;
                    }
                    $result =  json_encode(array('unitProposal' => $isNotFound));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    public function unitBookingRegisterAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                try {
                    $mode = $this->bsf->isNullCheck($this->params()->fromPost('mode'), 'string' );

                    if($mode=="title") {
                        //Write your Ajax post code here
                        $uploadedFile = $request->getFiles();
                        $postData = $request->getPost();
                        if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                            $response->setContent('Invalid File Format');
                            $response->setStatusCode(400);
                            return $response;
                        }
                        $file_csv = "public/uploads/crm/unitbooking/";
                        if(!is_dir($file_csv)) {
                            mkdir($file_csv, 0755, true);
                        }
                        $file_csv = "public/uploads/crm/unitbooking/" . md5(time()) . ".csv";
                        $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                        $data = array();
                        $file = fopen($file_csv, "r");

                        $icount = 0;
                        while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {

                            if ($icount == 0) {
                                foreach ($xlData as $j => $value) {
                                    if($value!="") {
                                        $data[] = array('Field' => $value);
                                    }
                                }
                            } else {
                                break;
                            }
                            $icount = $icount + 1;
                        }


                        // delete csv file
                        fclose($file);
                        unlink($file_csv);
                    } else if($mode=="body") {
                        $uploadedFile = $request->getFiles();
                        $postData = $request->getPost();
                        if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                            $response->setContent('Invalid File Format');
                            $response->setStatusCode(400);
                            return $response;
                        }
                        $file_csv = "public/uploads/crm/unitbooking/";
                        if(!is_dir($file_csv)) {
                            mkdir($file_csv, 0755, true);
                        }
                        $file_csv = "public/uploads/crm/unitbooking/" . md5(time()) . ".csv";
                        $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                        $data = array();
                        $file = fopen($file_csv, "r");

                        $icount = 0;
                        $RType = $postData['arrHeader'];

                        $bValid = true;
                        while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                            if ($icount == 0) {
                                foreach (json_decode($RType) as $k) {
                                    foreach ($xlData as $j => $value) {
                                        if ($value != "") {
                                            $bFound = false;
                                            $sField = "";

                                            if (trim($value) == trim($k->efield)) {
                                                $sField = $k->field;
                                                $bFound = true;
//                                                break;
                                            }

                                            if ($bFound == true) {

                                                if (trim($sField) == "PhoneNumber") {
                                                    $col_1 = $j;
                                                }
                                                if (trim($sField) == "LeadName") {
                                                    $col_2 = $j;
                                                }
                                                if (trim($sField) == "UnitNo") {
                                                    $col_3 = $j;
                                                }
                                                if (trim($sField) == "BlockName") {
                                                    $col_4 = $j;
                                                }
                                                if (trim($sField) == "Rate") {
                                                    $col_5 = $j;
                                                }
                                                if (trim($sField) == "PaymentSchedule") {
                                                    $col_6 = $j;
                                                }
                                                if (trim($sField) == "ProjectName") {
                                                    $col_7 = $j;
                                                }
                                                if (trim($sField) == "BookingName") {
                                                    $col_8 = $j;
                                                }
                                                if (trim($sField) == "BookingNo") {
                                                    $col_9 = $j;
                                                }
                                                if (trim($sField) == "Executive") {
                                                    $col_10 = $j;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                $PhoneNumber="";
                                $LeadName="";
                                $UnitNo="";
                                $BlockName="";
                                $Rate="";
                                $PaymentSchedule="";
                                $ProjectName="";
                                $BookingName="";
                                $BookingNo="";
                                $Executive="";

                                if (isset($col_1) && !is_null($col_1) && trim($col_1)!="" && isset($xlData[$col_1])) {
                                    $PhoneNumber =$this->bsf->isNullCheck($xlData[$col_1],'string');
                                }
                                if (isset($col_2) && !is_null($col_2) && trim($col_2)!="" && isset($xlData[$col_2])) {
                                    $LeadName =$this->bsf->isNullCheck($xlData[$col_2],'string');
                                }
                                if (isset($col_3) && !is_null($col_3) && trim($col_3)!="" && isset($xlData[$col_3])) {
                                    $UnitNo = $this->bsf->isNullCheck($xlData[$col_3],'string');
                                }
                                if (isset($col_4) && !is_null($col_4) && trim($col_4)!="" && isset($xlData[$col_4])) {
                                    $BlockName = $this->bsf->isNullCheck($xlData[$col_4],'string');
                                }
                                if (isset($col_5) && !is_null($col_5) && trim($col_5)!="" && isset($xlData[$col_5])) {
                                    $Rate = $xlData[$col_5];
                                }
                                if (isset($col_6) && !is_null($col_6) && trim($col_6)!="" && isset($xlData[$col_6])) {
                                    $PaymentSchedule = $this->bsf->isNullCheck($xlData[$col_6],'string');
                                }
                                if (isset($col_7) && !is_null($col_7) && trim($col_7)!="" && isset($xlData[$col_7])) {
                                    $ProjectName = $this->bsf->isNullCheck($xlData[$col_7],'string');
                                }

                                if (isset($col_8) && !is_null($col_8) && trim($col_8)!="" && isset($xlData[$col_8])) {
                                    $BookingName = $this->bsf->isNullCheck($xlData[$col_8],'string');
                                }
                                if (isset($col_9) && !is_null($col_9) && trim($col_9)!="" && isset($xlData[$col_9])) {
                                    $BookingNo = $this->bsf->isNullCheck($xlData[$col_9],'string');
                                }
                                if (isset($col_10) && !is_null($col_10) && trim($col_10)!=""  && isset($xlData[$col_10])) {
                                    $Executive= $this->bsf->isNullCheck($xlData[$col_10], 'string');
                                }
                                if($PhoneNumber!="" || $LeadName!="" || $UnitNo!="" || $BlockName!="" || $Rate!="" || $PaymentSchedule!="" || $ProjectName!="" || $BookingName!="" ||$BookingNo!="" || $Executive!="") {
                                    $data[] = array('Valid' => $bValid, 'PhoneNumber' => $PhoneNumber, 'LeadName' => $LeadName, 'UnitNo' => $UnitNo, 'BlockName' => $BlockName, 'Rate' => $Rate,
                                        'PaymentSchedule' => $PaymentSchedule,'ProjectName' => $ProjectName,'BookingName'=>$BookingName,'BookingNo'=>$BookingNo,'Executive'=>$Executive);
                                }
                            }
                            $icount++;
                        }

                        if ($bValid == false) {
                            $data[] = array('Valid' => $bValid);
                        }
                        // delete csv file
                        fclose($file);
                        unlink($file_csv);
                    } else {
                        $postData = $request->getPost();
                        $rowCount = $postData['rowCount'];

                        $data = array();
                        for ($i = 0; $i <= $rowCount; $i++) {
                            if (isset($postData['excellead_' . $i])) {
                                $leadName = $this->bsf->isNullCheck(trim($postData['excellead_' . $i]), 'string');
                                $unitNo = $this->bsf->isNullCheck(trim($postData['excelunit_' . $i]), 'string');
                                $blockName = $this->bsf->isNullCheck(trim($postData['excelblock_' . $i]), 'string');
                                $PaymentSchedule = $this->bsf->isNullCheck(trim($postData['excelpay_' . $i]), 'string');
                                $Rate = $this->bsf->isNullCheck(trim($postData['excelrate_' . $i]), 'number');
                                $projectName = $this->bsf->isNullCheck(trim($postData['excelproject_' . $i]), 'string');
                                $phoneNumber = $this->bsf->isNullCheck(trim($postData['excelphone_' . $i]), 'string');
                                $BookingName = $this->bsf->isNullCheck(trim($postData['excelbook_' . $i]), 'string');
                                $BookingNo = $this->bsf->isNullCheck(trim($postData['excelbookno_' . $i]), 'string');
                                $Executive = $this->bsf->isNullCheck(trim($postData['excelexecutive_' . $i]), 'string');

                                $Discount = 0;


                                $select = $sql->select();
                                $select->from('Crm_Leads')
                                    ->columns(array('LeadName', 'Mobile', 'LeadId'))
                                    ->where(array('LeadName' => $leadName, 'LeadType' => 1, 'DeleteFlag' => 0, 'Mobile' => $phoneNumber));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $lead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                $error = 0;
                                if (count($lead) > 1) {
                                    $leadArray = array($leadName, 0);
                                    $phoneArray = array($phoneNumber, 0);
                                    if (trim($BookingName) == "") {
                                        $BookingName = $leadName;
                                    }

                                } else {
                                    $leadArray = array($leadName, 1);
                                    $phoneArray = array($phoneNumber, 1);
                                    $error = 1;
                                }
                                $select = $sql->select();
                                $select->from('WF_Users')
                                    ->columns(array('UserId'))
                                    ->where(array('EmployeeName' =>$Executive));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $cEmp = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                $executiveId=$this->auth->getIdentity()->UserId;
                                if(count($cEmp)>0) {
                                    $executiveId=$cEmp[0]['UserId'];
                                }

                                $select = $sql->select();
                                $select->from('Proj_ProjectMaster')
                                    ->columns(array('ProjectName', 'ProjectId'))
                                    ->where(array('ProjectName' => $projectName, 'DeleteFlag' => 0));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $project = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                if (count($project) == 1) {
                                    $projectArray = array($project[0]['ProjectName'], 0);
                                    $select = $sql->select();
                                    $select->from('Crm_PaymentSchedule')
                                        ->columns(array('*'))
                                        ->where(array('ProjectId' => $project[0]['ProjectId'], 'DeleteFlag' => 0, 'PaymentSchedule' => $PaymentSchedule));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $payment = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    if (count($payment) == 1) {
                                        $PaymentScheduleArray = array($PaymentSchedule, 0);
                                    } else {
                                        $PaymentScheduleArray = array($PaymentSchedule, 1);
                                        $error = 1;
                                    }
                                    $select = $sql->select();
                                    $select->from('KF_BlockMaster')
                                        ->columns(array('BlockId', 'BlockName'))
                                        ->where(array('ProjectId' => $project[0]['ProjectId'], 'DeleteFlag' => 0, 'BlockName' => $blockName));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $block = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    if (count($block) == 1) {
                                        $blockArray = array($blockName, 0);

                                        $subQuery = $sql->select();
                                        $subQuery->from("Crm_UnitCancellation")
                                            ->columns(array('UnitId'))
                                            ->where(array( "LeadId" => $lead['LeadId']));


                                        $select1 = $sql->select();
                                        $select1->from(array('a'=>'KF_UnitMaster'))
                                            ->join(array('b' => 'Crm_Unitdetails'), 'b.UnitId=a.UnitId', array('Rate'), $select::JOIN_LEFT)
                                            ->columns(array('UnitId', 'UnitNo'))
                                            ->where(array('a.ProjectId' => $project[0]['ProjectId'], 'a.BlockId' => $block[0]['BlockId'], 'a.DeleteFlag' => 0, 'a.UnitNo' => $unitNo, 'a.Status' => "U"));


                                        $select2 = $sql->select();
                                        $select2->from(array('a' => 'Crm_UnitBlock'))
                                            ->columns(array('UnitId'))
                                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId = b.UnitId', array('UnitNo'), $select2::JOIN_INNER)
                                            ->join(array('c' => 'Crm_Unitdetails'), 'b.UnitId=c.UnitId', array('Rate'), $select::JOIN_LEFT)
                                            ->where(array('a.LeadId' =>  $lead['LeadId'], 'a.DeleteFlag' => 0, 'b.ProjectId' => $project[0]['ProjectId'],'b.BlockId' => $block[0]['BlockId'],'b.UnitNo' => $unitNo,'a.ExecutiveId'=>$executiveId));
                                        $select2->where("b.Status IN ('U','B')");

                                        $select2->combine($select1, 'Union ALL');

                                        $select3 = $sql->select();
                                        $select3->from(array('a' => 'Crm_UnitPreBooking'))
                                            ->columns(array('UnitId'))
                                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId = b.UnitId', array('UnitNo'), $select3::JOIN_INNER)
                                            ->join(array('c' => 'Crm_Unitdetails'), 'b.UnitId=c.UnitId', array('Rate'), $select::JOIN_LEFT)
                                            ->where(array('a.LeadId' =>  $lead['LeadId'], 'a.DeleteFlag' => 0, 'b.ProjectId' => $project[0]['ProjectId'],'b.BlockId' => $block[0]['BlockId'],'b.UnitNo' => $unitNo,'a.ExecutiveId'=>$executiveId));
                                        $select3->where("b.Status IN ('U','P')");
                                        $select3->combine($select2, 'Union ALL');


                                        $select4 = $sql->select();
                                        $select4->from(array("g" => $select3))
                                            ->columns(array('UnitNo', 'UnitId','Rate'));
                                        $select4->group(new Expression('g.UnitNo,g.UnitId,g.Rate'));
                                        $select4->where->expression('g.UnitId NOT IN ?', array($subQuery));
                                        $stmt = $sql->getSqlStringForSqlObject($select4);
                                        $unit = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                        if (count($unit) == 1) {
                                            $unitArray = array($unitNo, 0);
                                            $Discount = floatval($unit[0]['Rate']) - floatval($Rate);
                                        } else {
                                            $unitArray = array($unitNo, 1);
                                            $error = 1;
                                        }
                                    } else {
                                        $blockArray = array($blockName, 1);
                                        $unitArray = array($unitNo, 0);
                                        $error = 1;
                                    }

                                } else {
                                    $error = 1;
                                    $projectArray = array($projectName, 1);
                                    $blockArray = array($blockName, 0);
                                    $unitArray = array($unitNo, 0);
                                    $PaymentScheduleArray = array($PaymentSchedule, 1);
                                }

                                $RateArray = array($Rate, 0);
                                $BookingNameArray = array($BookingName, 0);
                                $BookingNoArray = array($BookingNo, 0);
                                $executiveArray = array($Executive, 0);

                                if ($error == 0) {

                                    $UnitId = $this->bsf->isNullCheck($unit[0]['UnitId'], 'number' );
                                    $leadId = $this->bsf->isNullCheck($lead['LeadId'], 'number' );

                                    $select = $sql->select();
                                    $select->from('Crm_LeadFollowup')
                                        ->columns(array('EntryId'))
                                        ->where(array('LeadId' =>$leadId))
                                        ->order("EntryId desc");
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();


                                    $update = $sql->update();
                                    $update->table('Crm_LeadFollowup');
                                    $update->set(array(
                                        'Completed'  => 1,
                                        'CompletedDate'  => date('Y-m-d H:i:s'),

                                    ));
                                    $update->where(array('EntryId'=>$entry['EntryId']));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    $insert = $sql->insert();
                                    $insert->into('Crm_LeadFollowup');
                                    $insert->Values(array(
                                        'UnitId' => $UnitId,
                                        'LeadId' => $leadId,
                                        'FollowUpDate' => date('Y-m-d H:i:s'),
                                        'ExecutiveId' => $executiveId,
//                                        'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
//                                        'NatureId' => $this->bsf->isNullCheck($postData['nature_id'], 'number'),
//                                        'NextCallDate' => $nextCallDate,
                                       'CallTypeId' => 4,
                                        'UserId'=>$this->auth->getIdentity()->UserId
                                    ));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    $update = $sql->update();
                                    $update->table('Crm_Leads');
                                    $update->set(array(
                                        'StatusId' =>1
                                    ));
                                    $update->where(array('LeadId' => $leadId));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    $postSaleExecutiveId=$executiveId;

                                    $aVNo = CommonHelper::getVoucherNo(807, date('Y-m-d'), 0, 0, $dbAdapter, "I");
                                    if ($aVNo["genType"] == true) {
                                        $BookingNo = $aVNo["voucherNo"];
                                    }

                                    $select = $sql->select();
                                    $select->from('Crm_UnitBlock')
                                        ->columns(array('*'))
                                        ->where(array('UnitId' =>$UnitId,'LeadId'=>$leadId,'DeleteFlag'=>0));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $block  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    $select = $sql->select();
                                    $select->from('Crm_UnitProposal')
                                        ->columns(array('*'))
                                        ->where(array('UnitId' =>$UnitId,'LeadId'=>$leadId,'DeleteFlag'=>0));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $proposal  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    $select = $sql->select();
                                    $select->from('Crm_UnitPreBooking')
                                        ->columns(array('*'))
                                        ->where(array('UnitId' =>$UnitId,'LeadId'=>$leadId,'DeleteFlag'=>0));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $prebookdet  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                    $prebook=array();
                                    if(count($block['BlockId']) > 0){
                                        $select = $sql->select();
                                        $select->from(array('a' => 'KF_UnitMaster'))
                                            ->join(array('b' => 'Crm_UnitBlock'), new expression("b.UnitId=a.UnitId and b.DeleteFlag=0"), array('NetAmt'=>'NetAmount','LeadId','LandAmount'=>'LandAmount','BaseAmt'=>'BaseAmount','ConstructionAmount'=>'ConstructionAmount','GrossAmount'=>'GrossAmount','Rate'=>'BRate','QualifierAmount'=>'QualAmount','Discount'), $select::JOIN_LEFT)
                                            ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                            ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                            ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                            ->join(array('k' => 'Proj_ProjectMaster'), 'k.ProjectId=a.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
                                            ->join(array('g' => 'crm_UnitDetails'), 'g.UnitId=a.UnitId', array('GuideLinevalue','AdvPercent','IntPercent','CarpetArea','UDSLandArea','AdvAmount','FacingId','MarketLandValue','OtherCostAmt'), $select::JOIN_LEFT)
                                            ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=g.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                            ->columns(array('UnitId', 'UnitNo','UnitTypeId'))
                                            ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                                        $stmt = $sql->getSqlStringForSqlObject($select);
                                        $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                        $prebook['Discount']=$block['Discount'];
                                        $prebook['DiscountType']=$block['DiscountType'];
                                        $prebook['Name']='block';
                                    }
                                    else if(count($prebookdet['PreBookingId']) > 0){
                                        $select = $sql->select();
                                        $select->from(array('a' => 'KF_UnitMaster'))
                                            ->join(array('b' => 'Crm_UnitPreBooking'), new expression("b.UnitId=a.UnitId and b.DeleteFlag=0"), array('NetAmt'=>'NetAmount','LeadId','LandAmount'=>'LandAmount','BaseAmt'=>'BaseAmount','ConstructionAmount'=>'ConstructionAmount','GrossAmount'=>'GrossAmount','Rate'=>'PRate','QualifierAmount'=>'QualAmount','Discount'), $select::JOIN_LEFT)
                                            ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                            ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                            ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                            ->join(array('k' => 'Proj_ProjectMaster'), 'k.ProjectId=a.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
                                            ->join(array('g' => 'crm_UnitDetails'), 'g.UnitId=a.UnitId', array('GuideLinevalue','AdvPercent','IntPercent','AdvAmount','UDSLandArea','CarpetArea','FacingId','MarketLandValue','OtherCostAmt'), $select::JOIN_LEFT)
                                            ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=g.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                            ->columns(array('UnitId', 'UnitNo','UnitTypeId'))
                                            ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                                        $stmt = $sql->getSqlStringForSqlObject($select);
                                        $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                        $prebook['AdvAmount']=$prebookdet['AdvAmount'];
                                        $prebook['Discount']=$prebookdet['Discount'];
                                        $prebook['DiscountType']=$prebookdet['DiscountType'];
                                        $prebook['Name']='prebook';
                                    }
                                    else if(count($proposal['ProposalId']) > 0){
                                        $select = $sql->select();
                                        $select->from(array('a' => 'KF_UnitMaster'))
                                            ->join(array('b' => 'Crm_UnitProposal'), new expression("b.UnitId=a.UnitId and b.DeleteFlag=0"), array('NetAmt'=>'NetAmount','LeadId','LandAmount'=>'LandAmount','BaseAmt'=>'BaseAmount','ConstructionAmount'=>'ConstructionAmount','GrossAmount'=>'GrossAmount','Rate'=>'PRate','AdvAmount'=>'AdvAmnt','QualifierAmount'=>'QualAmount','Discount'), $select::JOIN_LEFT)
                                            ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                            ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                            ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                            ->join(array('k' => 'Proj_ProjectMaster'), 'k.ProjectId=a.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
                                            ->join(array('g' => 'crm_UnitDetails'), 'g.UnitId=a.UnitId', array('GuideLinevalue','AdvPercent','IntPercent','CarpetArea','FacingId','MarketLandValue','OtherCostAmt','UDSLandArea'), $select::JOIN_LEFT)
                                            ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=g.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                            ->columns(array('UnitId', 'UnitNo', 'UnitTypeId'))
                                            ->where(array('a.UnitId' => $UnitId, 'b.LeadId'=>$leadId,'a.DeleteFlag' => 0));
                                        $stmt = $sql->getSqlStringForSqlObject($select);
                                        $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                        $prebook['Discount'] = $proposal['Discount'];
                                        $prebook['DiscountType'] = $proposal['DiscountType'];
                                        $prebook['Name'] = 'proposal';

                                    }
                                    else {

                                        $select = $sql->select();
                                        $select->from(array('a' => 'KF_UnitMaster'))
                                            ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                                            ->join(array('c' => 'KF_BlockMaster'), 'c.BlockId=a.BlockId', array('BlockName'), $select::JOIN_LEFT)
                                            ->join(array('d' => 'KF_FloorMaster'), 'd.FloorId=a.FloorId', array('FloorName'), $select::JOIN_LEFT)
                                            ->join(array('e' => 'KF_UnitTypeMaster'), 'e.UnitTypeId=a.UnitTypeId', array('UnitTypeName','UnitArea'=>'Area'), $select::JOIN_LEFT)
                                            ->join(array('k' => 'Proj_ProjectMaster'), 'k.ProjectId=a.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
                                            ->join(array('f' => 'Crm_FacingMaster'), 'f.FacingId=b.FacingId', array('Facing' => new Expression("f.Description")), $select::JOIN_LEFT)
                                            ->columns(array('UnitId', 'UnitNo',  'UnitTypeId'))
                                            ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                                        $stmt = $sql->getSqlStringForSqlObject($select);
                                        $unitDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                    }
                                    $iUnitTypeId=0;
                                    if (!empty($unitDetail)) {
                                        $iUnitTypeId = $unitDetail['UnitTypeId'];
                                    }
                                    // get proposal discount
                                    $unitDetail['RateDiscount'] = 0;

                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_UnitProposal'))
                                        ->columns(array('Discount'))
                                        ->where(array('a.UnitId' => $UnitId, 'a.LeadId' => $leadId, 'a.DeleteFlag' => 0));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $proposal = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    if($proposal != FALSE)
                                        $unitDetail['RateDiscount'] = $proposal['Discount'];
                                    else {
                                        // if no proposal discount, get campaign discount
                                        $subQuery = $sql->select();
                                        $subQuery->from('Crm_LeadSource')
                                            ->columns(array('LeadSourceId'))
                                            ->where(array('LeadId' => $leadId, 'Name' =>'C'));

                                        $select = $sql->select();
                                        $select->from('Crm_CampaignRegister')
                                            ->columns(array('DiscountRate'))
                                            ->where->expression('CampaignId IN ?', array($subQuery));
                                        $select->where("DiscountFrom >= '".date('Y-m-d')."' AND DiscountTo <= '".date('Y-m-d')."'");
                                        $stmt = $sql->getSqlStringForSqlObject($select);
                                        $campaign = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                        if($campaign != FALSE)
                                            $unitDetail['RateDiscount'] = $campaign['DiscountRate'];
                                    }
                                    // Receipt Type
                                    $select = $sql->select();
                                    $select->from('Crm_ReceiptTypeMaster');
                                   $stmt = $sql->getSqlStringForSqlObject($select);
                                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    $arrAllReceiptTypes = array();
                                    foreach($arrResults as $result) {
                                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];

                                    }


                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                                        ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                                        ->where(array('a.UnitTypeId' => $iUnitTypeId));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                                    $dGrossAmt = $unitDetail['GrossAmount'];
                                    $dDate = date('Y-m-d');
                                    $arrReceipt=array();
                                    $arrReceipt[]=array("ReceiptType"=>'S',"TypeId"=>1,"Amount"=>$unitDetail['LandAmount']);
                                    $arrReceipt[]=array("ReceiptType"=>'S',"TypeId"=>2,"Amount"=>$unitDetail['ConstructionAmount']);


                                    if(isset($unitamt)) {
                                        foreach($unitamt as $uAmt) {
                                            $arrReceipt[]=array("ReceiptType"=>'O',"TypeId"=>$uAmt['OtherCostId'],"Amount"=>$uAmt['Amount']);
                                        }
                                    }

                                    $select = $sql->select();
                                    $select->from(array('a' => 'Proj_QualifierTrans'))
                                        ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName'), $select::JOIN_INNER)
                                        ->where(array('a.QualType'=>'C'))
                                        ->columns(array('QualifierId'));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $arrList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    $arrTotTax = array();
                                    foreach ($arrList as $atax) {
                                        $arrTotTax[$atax['QualifierId']]['QualifierId'] = $atax['QualifierId'];
                                        $arrTotTax[$atax['QualifierId']]['QualifierName'] = $atax['QualifierName'];
                                        $arrTotTax[$atax['QualifierId']]['Amount'] = 0;
                                    }

                                    if (!empty($arrReceipt)) {
                                        foreach ($arrReceipt as $v) {

                                            $sReceiptType = $this->bsf->isNullCheck($v['ReceiptType'], 'string');
                                            $iTypeId = $this->bsf->isNullCheck($v['TypeId'], 'number');
                                            $dBaseAmt = floatval($this->bsf->isNullCheck($v['Amount'], 'number'));

                                            $select = $sql->select();
                                            $select->from(array('c' => 'Crm_QualifierSettings'))
                                                ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                                    array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(a.QualifierId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'KKCess', 'SBCess', 'NetPer', 'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                                                        'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                                        'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                                ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                            $select->where(array('QualSetType' => $sReceiptType, 'QualSetTypeId' => $iTypeId, 'a.QualType' => 'C'))
                                                ->order('SortOrder ASC');
                                            $statement = $sql->getSqlStringForSqlObject($select);
                                            $arrQualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                            $qualTotAmt = 0;

                                            $arrTax = array();
                                            foreach ($arrQualList as $qualList) {
                                                $sRefNo = $qualList['RefId'];
                                                $arrTax[$sRefNo]['QualifierName'] = $qualList['QualifierName'];
                                                $arrTax[$sRefNo]['QualifierId'] = $qualList['QualifierId'];
                                                $arrTax[$sRefNo]['RefNo'] = $qualList['RefId'];
                                                $arrTax[$sRefNo]['QualifierTypeId'] = $qualList['QualifierTypeId'];
                                                //$arrTax[$sRefNo]['Expression'] = $qualList['Expression'];
                                                $arrTax[$sRefNo]['ExpPer'] = $qualList['ExpPer'];


                                                $sExpression = $qualList['Expression'];
                                                $sExpression = str_replace('R0', $dBaseAmt, $sExpression);
                                                $arrTax[$sRefNo]['Expression'] = $sExpression;

                                                $arrTax[$sRefNo]['TaxablePer'] = 0;
                                                $arrTax[$sRefNo]['TaxPer'] = 0;
                                                $arrTax[$sRefNo]['SurCharge'] = 0;
                                                $arrTax[$sRefNo]['EDCess'] = 0;
                                                $arrTax[$sRefNo]['HEDCess'] = 0;
                                                $arrTax[$sRefNo]['SBCess'] = 0;
                                                $arrTax[$sRefNo]['KKCess'] = 0;
                                                $arrTax[$sRefNo]['NetPer'] = 0;

                                                if ($qualList['QualifierTypeId'] == 1 && $dGrossAmt > 5000000) {
                                                    $tds = CommonHelper::getTDSSetting(11, $dDate, $dbAdapter);
                                                    $arrTax[$sRefNo]['TaxablePer'] = $tds["TaxablePer"];
                                                    $arrTax[$sRefNo]['TaxPer'] = $tds["TaxPer"];
                                                    $arrTax[$sRefNo]['SurCharge'] = $tds["SurCharge"];
                                                    $arrTax[$sRefNo]['EDCess'] = $tds["EDCess"];
                                                    $arrTax[$sRefNo]['HEDCess'] = $tds["HEDCess"];
                                                    $arrTax[$sRefNo]['NetPer'] = $tds["NetTax"];

                                                } else if ($qualList['QualifierTypeId'] == 2) {
                                                    $select = $sql->select();
                                                    if ($sReceiptType == "S") {
                                                        $select->from('Crm_ReceiptTypeMaster')
                                                            ->columns(array('TaxablePer'))
                                                            ->where(array('ReceiptTypeId' => $iTypeId));

                                                    } else {
                                                        $select->from('Crm_OtherCostMaster')
                                                            ->columns(array('TaxablePer'))
                                                            ->where(array('OtherCostId' => $iTypeId));
                                                    }

                                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                                    $stTax = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                                    $Taxable = 0;
                                                    if (!empty($stTax)) $Taxable = $stTax['TaxablePer'];

                                                    $tds = CommonHelper::getSTSetting('F', $dDate, $dbAdapter);
                                                    $arrTax[$sRefNo]['TaxablePer'] = $Taxable;
                                                    $arrTax[$sRefNo]['TaxPer'] = $tds["TaxPer"];
                                                    $arrTax[$sRefNo]['SBCess'] = $tds["SBCess"];
                                                    $arrTax[$sRefNo]['KKCess'] = $tds["KKCess"];
                                                    $arrTax[$sRefNo]['NetPer'] = $tds["NetTax"];
                                                }
                                            }

                                            foreach ($arrTax as $qual) {

                                                $sRef = $qual['RefNo'];
                                                $sExpression = $qual['Expression'];
                                                $dAmt = eval('return ' . $sExpression . ';');

                                                $dNetAmt = 0;

                                                if ($qual['QualifierTypeId'] == 1 && $dGrossAmt > 5000000) {

                                                    $dTaxablePer = floatval($this->bsf->isNullCheck($qual['TaxablePer'], 'number'));
                                                    $dTaxPer = floatval($this->bsf->isNullCheck($qual['TaxPer'], 'number'));
                                                    $dSurCharge = floatval($this->bsf->isNullCheck($qual['SurCharge'], 'number'));
                                                    $dEDCess = floatval($this->bsf->isNullCheck($qual['EDCess'], 'number'));
                                                    $dHEDCess = floatval($this->bsf->isNullCheck($qual['HEDCess'], 'number'));

                                                    $dTaxableAmt = $dAmt * ($dTaxablePer / 100);
                                                    $dTaxAmt = $dTaxableAmt * ($dTaxPer / 100);
                                                    $dCessAmt = $dTaxAmt * ($dSurCharge / 100);
                                                    $dEDAmt = $dTaxAmt * ($dEDCess / 100);
                                                    $dHEDAmt = $dTaxAmt * ($dHEDCess / 100);
                                                    $dNetAmt = $dTaxAmt + $dCessAmt + $dEDAmt + $dHEDAmt;

                                                } else if ($qual['QualifierTypeId'] == 2) {

                                                    $dTaxablePer = floatval($this->bsf->isNullCheck($qual['TaxablePer'], 'number'));
                                                    $dTaxPer = floatval($this->bsf->isNullCheck($qual['TaxPer'], 'number'));
                                                    $dSBCess = floatval($this->bsf->isNullCheck($qual['SBCess'], 'number'));
                                                    $dKKCess = floatval($this->bsf->isNullCheck($qual['KKCess'], 'number'));

                                                    $dTaxableAmt = $dAmt * ($dTaxablePer / 100);
                                                    $dTaxAmt = $dTaxableAmt * ($dTaxPer / 100);
                                                    $dKKCessAmt = $dTaxableAmt * ($dKKCess / 100);
                                                    $dSBCessAmt = $dTaxableAmt * ($dSBCess / 100);
                                                    $dNetAmt = $dTaxAmt + $dKKCessAmt + $dSBCessAmt;

                                                } else {
                                                    $dPer = floatval($this->bsf->isNullCheck($qual['ExpPer'], 'number'));
                                                    if ($qual['QualifierTypeId'] !=1) {
                                                        if ($dPer != 0) $dNetAmt = $dAmt * ($dPer / 100);
                                                        else $dNetAmt = $dAmt;
                                                    }
                                                }

                                                $arrTax[$sRef]['NetAmt'] = $dNetAmt;
                                                foreach ($arrTax as $qualData) {
                                                    $sExpression = $qualData['Expression'];
                                                    $ssRef = $qualData['RefNo'];

                                                    $sExpression = Str_replace($sRef, $dNetAmt, $sExpression);
                                                    $arrTax[$sRef]['Expression'] = $sExpression;
                                                }
                                            }

                                            if (!empty($arrTax)) {

                                                foreach ($arrTax as $qual) {
                                                    $qualId = $qual['QualifierId'];
                                                    $doamt =  floatval($this->bsf->isNullCheck($arrTotTax[$qualId]['Amount'],'number'));
                                                    $dtamt =  floatval($this->bsf->isNullCheck($qual['NetAmt'],'number'));

                                                    $arrTotTax[$qualId]['Amount'] = $doamt + $dtamt;
                                                }
                                            }
                                        }
                                    }

                                    $qualifierAmount=0;
                                    if(isset($arrTotTax)&& count($arrTotTax)>0) {
                                        foreach($arrTotTax as $tax) {
                                            $qualifierAmount+=floatval($tax['Amount']);
                                        }
                                    }
                                    $insert = $sql->insert();
                                    $insert->into('Crm_UnitBooking');
                                    $insert->Values(array(
                                        'BookingNo' => trim($BookingNo),
                                        'BookingName' => $BookingName,
                                        'BookingDate' => date('Y-m-d H:i:s'),
                                        'LeadId' => $leadId,
                                        'UnitId' => $UnitId,
                                        'BaseAmount'=>$unitDetail['BaseAmt'],
                                        'LandAmount'=>$unitDetail['LandAmount'],
                                        'ConstructionAmount'=>$unitDetail['ConstructionAmount'],
                                        'OtherCostAmount'=>$unitDetail['OtherCostAmt'],
                                        'QualifierAmount'=>$qualifierAmount,
                                        'NetAmount'=>floatval($unitDetail['NetAmt'])+$qualifierAmount,
                                        'ExecutiveId' => $executiveId,
                                        'AdvAmount' => $unitDetail['AdvAmount'],
                                        'Rate' => $Rate,
                                        'Discount' => $Discount,
                                        'CreatedDate' => date('Y-m-d H:i:s'),
                                        'PaymentScheduleId' => $payment[0]['PaymentScheduleId'],
                                        'PostExecutiveId'=>$postSaleExecutiveId,
                                        'FollowupEntryId'=>$followupentryid
                                    ));
                                   $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $bookingId = $dbAdapter->getDriver()->getLastGeneratedValue();


//
//                                    $update = $sql->update();
//                                    $update->table('KF_UnitMaster')
//                                        ->set(array('Status' => 'S'))
//                                        ->where(array('UnitId' => $UnitId));
//                                    $statement = $sql->getSqlStringForSqlObject($update);
//                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    $update = $sql->update();
                                    $update->table('CRM_UnitDetails')
                                        ->set(array('Discount' => $Discount))
                                        ->where(array('UnitId' => $UnitId));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_UnitBlock'))
                                        ->columns(array('UnitId'))
                                        ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $unitblock = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                    //Print_r($unit['UnitId']);die;

                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_UnitPreBooking'))
                                        ->columns(array('UnitId'))
                                        ->where(array('a.UnitId' => $UnitId, 'a.DeleteFlag' => 0));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $unitPre = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    if($unitblock['UnitId']>0){
                                        $update = $sql->update();
                                        $update->table('Crm_UnitBlock')
                                            ->set(array('DeleteFlag' => 1))
                                            ->where(array('UnitId' => $unitblock['UnitId']));
                                        $stmt = $sql->getSqlStringForSqlObject($update);
                                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }

                                    if($unitPre['UnitId']>0){
                                        $update = $sql->update();
                                        $update->table('Crm_UnitPreBooking')
                                            ->set(array('DeleteFlag' => 1))
                                            ->where(array('UnitId' => $unitPre['UnitId']));
                                        $stmt = $sql->getSqlStringForSqlObject($update);
                                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }

                                    $update = $sql->update();
                                    $update->table('Crm_Leads')
                                        ->set(array('LeadConvert' => 1))
                                        ->where(array('LeadId' => $leadId));
                                    $stmt = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                                    $OtherCostIds = 0;

                                    $delete = $sql->delete();
                                    $delete->from('Crm_FinalisationOtherCostTrans')
                                        ->where(array('UnitId' =>$UnitId));
                                    $stmt = $sql->getSqlStringForSqlObject($delete);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                                    if(is_array($postData['other_cost']) && count($postData['other_cost']) > 0) {
                                        foreach($postData['other_cost'] as $otherCostId) {
                                            $insert = $sql->insert();
                                            $insert->into('Crm_FinalisationOtherCostTrans')
                                                ->values(array('BookingId' => $bookingId, 'OtherCostId' => $otherCostId));
                                            $stmt = $sql->getSqlStringForSqlObject($insert);
                                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                        }
                                    }

                                    // check list
                                    if(is_array($postData['check_list']) && count($postData['check_list']) > 0) {
                                        foreach($postData['check_list'] as $checkListId) {

                                            $checkListDate = NULL;
                                            if(strtotime($postData['check_list_date_'. $checkListId]) != FALSE) {
                                                $checkListDate = date('Y-m-d', strtotime($postData['check_list_date_'. $checkListId]));
                                            }
                                            $checkListExeId = $this->bsf->isNullCheck($postData['check_list_executive_id_'. $checkListId], 'number');

                                            $insert = $sql->insert();
                                            $insert->into('Crm_FinalisationCheckListTrans')
                                                ->values(array('BookingId' => $bookingId, 'CheckListId' => $checkListId,
                                                    'SubmittedDate' => $checkListDate, 'ExecutiveId' => $checkListExeId));
                                            $stmt = $sql->getSqlStringForSqlObject($insert);
                                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                        }
                                    }

                                    // payment schedule details//
                                    $select1 = $sql->select();
                                    $select1->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                        ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                                        ->join(array('b' => 'KF_StageMaster'), 'a.StageId = b.StageId', array('StageName'), $select1::JOIN_LEFT)
                                        ->where("a.StageType = 'S'");

                                    $select2 = $sql->select();
                                    $select2->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                        ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                                        ->join(array('b' => 'Crm_DescriptionMaster'), 'a.StageId = b.DescriptionId', array('StageName' => new Expression("b.DescriptionName")), $select2::JOIN_LEFT)
                                        ->where("a.StageType = 'D'");
                                    $select2->combine($select1,'Union ALL');

                                    $select3 = $sql->select();
                                    $select3->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                        ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.StageId = b.OtherCostId', array('StageName' => new Expression("b.OtherCostName")), $select3::JOIN_LEFT)
                                        ->where("a.StageType = 'O'");
                                    $select3->combine($select2,'Union ALL');

                                    $select4 = $sql->select();
                                    $select4->from(array('a' => 'Crm_PaymentScheduleDetail'))
                                        ->columns(array('PaymentScheduleId','PaymentScheduleDetailId','StageId','StageType','DateFrom','DateAfterBefore','DurationType','DurationDays','Date','RoundOff','Percentage', 'Amount'))
                                        ->join(array('b' => 'Crm_BookingAdvanceMaster'), 'a.StageId = b.BookingAdvanceId', array('StageName' => new Expression("b.BookingAdvanceName")), $select4::JOIN_LEFT)
                                        ->where("a.StageType = 'A'");
                                    $select4->combine($select3,'Union ALL');

                                    $select5 = $sql->select();
                                    $select5->from(array("g"=>$select4))
                                        ->columns(array('*'))
                                        ->join(array('d' => 'Crm_PaymentSchedule'), 'g.PaymentScheduleId=d.PaymentScheduleId', array('*'), $select5::JOIN_LEFT)
                                        ->join(array('e' => 'Proj_ProjectMaster'), 'd.ProjectId=e.ProjectId', array('ProjectName'), $select5::JOIN_INNER)
                                        ->where(array('d.PaymentSchedule' => $PaymentSchedule, 'e.ProjectName'=>$projectName,'d.DeleteFlag' => 0))
                                        ->order("g.PaymentScheduleDetailId ASC");
                                   $stmt = $sql->getSqlStringForSqlObject($select5);
                                    $arrPaymentScheduleDetails = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    // Receipt Type
                                    $select = $sql->select();
                                    $select->from('Crm_ReceiptTypeMaster');
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $arrResults = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                    $arrAllReceiptTypes = array();
                                    foreach ($arrResults as $result) {

                                        $arrAllReceiptTypes[$result['ReceiptTypeId']] = $result['Type'];
                                    }


                                    // Project Other cost
                                    $select = $sql->select();
                                    $select->from('Crm_UnitTypeOtherCostTrans')
                                        ->where(array('UnitTypeId' => $iUnitTypeId));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $arrResult = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    // project details
                                    $select = $sql->select();
                                    $select->from('Crm_ProjectDetail')
                                        ->where(array('ProjectId' => $unitDetail['ProjectId']))
                                        ->limit(1);
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $projectDetail = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    if(empty($projectDetail)) {
                                        throw new \Exception('Project detail not found!');
                                    }

                                    $select = $sql->select();
                                    $select->from(array('a' =>'Crm_PaymentSchedule'))
                                        ->join(array('e' => 'Proj_ProjectMaster'), 'a.ProjectId=e.ProjectId', array('ProjectName'), $select5::JOIN_INNER)
                                        ->where(array('a.PaymentSchedule' => $PaymentSchedule,'e.ProjectName'=>$projectName,'a.DeleteFlag' => 0));
                                     $stmt = $sql->getSqlStringForSqlObject($select);
                                    $payschId = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                        $landAmt=floatval($unitDetail['LandAmount']);
                                        $baseAmt=floatval($unitDetail['BaseAmt']);
                                       $constructionAmt=floatval($unitDetail['ConstructionAmount']);

                                     $netAmt=floatval($unitDetail['NetAmt']);
                                     $baseAmt += $unitDetail['OtherCostAmt'];

                                    $subQuery = $sql->select();
                                    $subQuery->from('Crm_PaymentScheduleUnitTrans')
                                        ->columns(array('PaymentScheduleUnitTransId'))
                                        ->where(array('BookingId' => $bookingId));

                                    if(!empty($arrPaymentSchUnitTransIds)) {
                                        $delete = $sql->select();
                                        $delete->from( 'Crm_PaymentScheduleUnitTrans' )
                                            ->where->expression( 'PaymentScheduleUnitTransId IN ?', $subQuery );
                                        $stmt = $sql->getSqlStringForSqlObject( $delete );
                                        $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                                    }

                                    $overAllQualAmt = 0;
                                    foreach($arrPaymentScheduleDetails as &$psDetail) {

                                        $PaymentScheduleDate = date( 'd-m-Y', strtotime(date('Y-m-d H:i:s')));


                                        // stage type
                                        switch ( $psDetail['StageType'] ) {
                                            case 'A':
                                                if($psDetail['Percentage'] != 0) {

                                                    $psDetail['schedule_amt'] = ($baseAmt * floatval($psDetail['Percentage'])) / 100;
                                                } else {
                                                    $psDetail['schedule_amt'] = floatval($psDetail['Amount']);
                                                    $baseAmt -= $psDetail['schedule_amt'];
                                                }
                                               break;
                                            case 'O':
                                                $psDetail['schedule_amt'] = floatval($psDetail['Amount']);
                                                break;
                                            Default:

                                                $psDetail['schedule_amt'] = ($baseAmt * floatval($psDetail['Percentage'])) / 100;
                                                break;

                                        }



                                        $schDate = NULL;
                                        if(strtotime($PaymentScheduleDate) != FALSE) {
                                            $schDate = date('Y-m-d', strtotime($PaymentScheduleDate));
                                        }
                                        $insert = $sql->insert();
                                        $insert->into('Crm_PaymentScheduleUnitTrans')
                                            ->values(array(
                                                'BookingId' => $bookingId,
                                                'SchDate' => $schDate,
                                                'RoundOff' => $psDetail['RoundOff'],
                                                'Percentage' => $psDetail['Percentage'],
                                                'Amount' => $psDetail['schedule_amt'],
                                                'NetAmount' => $psDetail['schedule_amt'],
                                                'StageType' => $psDetail['StageType'],
                                                'StageId' => $psDetail['StageId'],
                                                'UnitId' =>$UnitId
                                            ));
                                        $stmt = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                        $paymentScheduleUnitTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                        $stageTotQualAmt = 0;
                                        $stageTotNetAmt = 0;

                                        if ($psDetail['PaymentScheduleDetailId'] != 0) {

                                            $select1 = $sql->select();
                                            $select1->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                                ->join(array('b' => 'Crm_ReceiptTypeMaster'), 'a.ReceiptTypeId = b.ReceiptTypeId', array('ReceiptName' => 'ReceiptTypeName','TypeId'=>'ReceiptTypeId', 'TaxablePer'), $select1::JOIN_LEFT)
                                                ->where(array('a.ReceiptType' => 'S', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));

                                            $select2 = $sql->select();
                                            $select2->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                                ->join(array('b' => 'Crm_DescriptionMaster'), 'a.ReceiptTypeId = b.DescriptionId', array('ReceiptName' => 'DescriptionName', 'TypeId'=>'DescriptionId','TaxablePer' => new Expression("'0'")), $select2::JOIN_LEFT)
                                                ->where(array('a.ReceiptType' => 'D', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));
                                            $select2->combine($select1, 'Union ALL');

                                            $select3 = $sql->select();
                                            $select3->from(array('a' => 'Crm_PaymentScheduleReceiptTrans'))
                                                ->join(array('b' => 'Crm_OtherCostMaster'), 'a.ReceiptTypeId = b.OtherCostId', array('ReceiptName' => 'OtherCostName','TypeId'=>'OtherCostId', 'TaxablePer'), $select3::JOIN_LEFT)
                                                ->where(array('a.ReceiptType' => 'O', 'a.PaymentScheduleId' => $psDetail['PaymentScheduleId']));
                                            $select3->combine($select2, 'Union ALL');

                                            $select4 = $sql->select();
                                            $select4->from(array("g" => $select3))
                                                ->columns(array('*'))
                                                ->order("g.SortId ASC");
                                        } else {

                                            $select4 = $sql->select();
                                            $select4->from(array('a' => 'Crm_OtherCostMaster'))
                                                ->columns(array('ReceiptType' => new Expression("'O'"), 'ReceiptTypeId' => new Expression("OtherCostId"), 'ReceiptName' => 'OtherCostName', 'TaxablePer'))
                                                ->where(array('a.OtherCostId' => $psDetail['StageId']));

                                        }

                                        $stmt = $sql->getSqlStringForSqlObject($select4);
                                        $arrReceiptTypes = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                        $scheduleAmt = $psDetail['schedule_amt'];
                                        $curReceiptType = '';
                                        $otherCostAmt = 0;

                                         if (!empty($arrReceiptTypes)) {


                                            foreach ($arrReceiptTypes as &$receipt) {
                                                switch ($receipt['ReceiptType']) {
                                                    case 'O':
                                                        $receipt['Type'] = 'O';

                                                        break;
                                                    case 'S':
                                                        $receipt['Type'] = $arrAllReceiptTypes[$receipt['ReceiptTypeId']];
                                                        break;
                                                }


                                                $curAmt = 0;
                                                if($curReceiptType == '') {
                                                    $curReceiptType = $receipt['Type'];
                                                    if($curReceiptType == 'O') {
                                                        foreach($arrResult as $res) {
                                                            if($receipt['TypeId']== $res['OtherCostId']) {
                                                                $otherCostAmt = $res['Amount'];
                                                            }
                                                        }
                                                    }
                                                }



                                                 switch ($curReceiptType) {
                                                case 'L' :

                                                    if ($landAmt <= 0) {
                                                        $curAmt = 0;
                                                        $curReceiptType = '';
                                                     } else if ($scheduleAmt <= $landAmt) {
                                                        $curAmt = $scheduleAmt;
                                                        $landAmt -= $scheduleAmt;
                                                        $scheduleAmt = 0;
                                                     } else if ($scheduleAmt > $landAmt) {
                                                        $curAmt = $landAmt;
                                                        $scheduleAmt -= $landAmt;
                                                        $landAmt = 0;
                                                        $curReceiptType = '';
                                                    }

                                                    break;
                                                case 'C':
                                                    if ($constructionAmt <= 0) {

                                                        $curAmt = 0;
                                                        $curReceiptType = '';

                                                    } else if ($scheduleAmt <= $constructionAmt) {

                                                        $curAmt = $scheduleAmt;
                                                        $constructionAmt -= $scheduleAmt;
                                                        $scheduleAmt = 0;
                                                    } else if ($scheduleAmt > $constructionAmt) {

                                                        $curAmt = $constructionAmt;
                                                        $scheduleAmt -= $constructionAmt;
                                                        $constructionAmt = 0;
                                                        $curReceiptType = '';

                                                    }

                                                    break;
                                                default:
                                                    if ($otherCostAmt <= 0) {
                                                        $curAmt = 0;
                                                        $curReceiptType = '';
                                                    } else if ($scheduleAmt <= $otherCostAmt) {

                                                        $curAmt = $scheduleAmt;
                                                        $otherCostAmt -= $scheduleAmt;
                                                        $scheduleAmt = 0;
                                                    } else if ($scheduleAmt > $otherCostAmt) {

                                                        $curAmt = $otherCostAmt;
                                                        $scheduleAmt -= $otherCostAmt;
                                                        $otherCostAmt = 0;
                                                        $curReceiptType = '';
                                                    }
                                                    break;
                                            }

                                            $curAmt = floatVal($curAmt);

                                             $insert = $sql->insert();
                                            $insert->into('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                                ->values(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId,
                                                    'UnitId' => $UnitId,
                                                    'ReceiptTypeId' => $receipt['ReceiptTypeId'],
                                                    'ReceiptType' => $receipt['ReceiptType'],
                                                    'Amount' => $curAmt));
                                            $stmt = $sql->getSqlStringForSqlObject($insert);
                                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                                            $psReceiptTypeTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                            // Qualifier Calculations
                                            if($curAmt > 0) {

                                                $select = $sql->select();
                                                $select->from(array('c' => 'Crm_QualifierSettings'))
                                                    ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                                        array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(a.QualifierId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'KKCess', 'SBCess', 'NetPer', 'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                                                            'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                                            'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                                                $select->where(array('QualSetType' => $receipt['ReceiptType'], 'QualSetTypeId' => $receipt['ReceiptTypeId'], 'a.QualType' => 'C'))
                                                    ->order('SortOrder ASC');
                                               $statement = $sql->getSqlStringForSqlObject( $select );
                                                $arrQualList = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                                                $qualTotAmt = 0;
                                                foreach($arrQualList as $qualList) {
                                                    $psQualTransValues = array(
                                                        'PSReceiptTypeTransId' => $psReceiptTypeTransId,
                                                         'UnitId' => $UnitId,
                                                       // 'ReceiptTypeId' => $receipt['ReceiptTypeId'],
                                                       // 'ReceiptType' => $receipt['ReceiptType'],
                                                        'QualifierId' => $qualList['QualifierId'],
                                                        'YesNo' => $qualList['YesNo'],
                                                        'Expression' => $qualList['Expression'],
                                                        'ExpPer' => $qualList['ExpPer'],
                                                        'TaxablePer' => $qualList['TaxablePer'],
                                                        'TaxPer' => $qualList['TaxPer'],
                                                        'Sign' => $qualList['Sign'],
                                                        'SurCharge' => $qualList['SurCharge'],
                                                        'EDCess' => $qualList['EDCess'],
                                                        'HEDCess' => $qualList['HEDCess']

                                                    );

                                                    $netPer = $qualList['TaxPer'] + ($qualList['TaxPer'] * ($qualList['SurCharge'] + $qualList['EDCess'] + $qualList['HEDCess']))/100;
                                                    $psQualTransValues['NetPer'] = $netAmt;
                                                    $psQualTransValues['ExpressionAmt'] = $netAmt;
                                                    $psQualTransValues['TaxableAmt'] = $curAmt * ($qualList['TaxablePer'] / 100);
                                                    $psQualTransValues['TaxAmt'] =  $psQualTransValues['TaxableAmt'] * ($qualList['TaxPer']/100);
                                                    $CessAmt =  $psQualTransValues['TaxAmt'] * ($qualList['SurCharge']/100);
                                                    $EDAmt =  $psQualTransValues['TaxAmt']* ($qualList['EDCess']/100);
                                                    $HEDAmt =  $psQualTransValues['TaxAmt']* ($qualList['HEDCess']/100);
                                                    $NetAmt = $psQualTransValues['TaxAmt'] + $CessAmt + $EDAmt + $EDAmt;
                                                    $psQualTransValues['SurChargeAmt'] = $CessAmt;
                                                    $psQualTransValues['EDCessAmt'] = $EDAmt;
                                                    $psQualTransValues['HEDCessAmt'] = $HEDAmt;
                                                    $psQualTransValues['NetAmt'] = $NetAmt;

                                                    $qualTotAmt += $NetAmt;

                                                    $insert = $sql->insert();
                                                    $insert->into('Crm_PaymentScheduleQualifierTrans')
                                                        ->values($psQualTransValues);
                                                    $stmt = $sql->getSqlStringForSqlObject($insert);
                                                    $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
                                                }

                                                $curRecNetAmt = $curAmt + $qualTotAmt;
                                                $update = $sql->update();
                                                $update->table('Crm_PaymentScheduleUnitReceiptTypeTrans')
                                                    ->set(array('QualAmount' => $qualTotAmt, 'NetAmount' => $curRecNetAmt))
                                                    ->where(array('ReceiptTypeTransId' => $psReceiptTypeTransId));
                                                $stmt = $sql->getSqlStringForSqlObject($update);
                                                $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );

                                                $stageTotQualAmt += $qualTotAmt;
                                                $stageTotNetAmt += $curRecNetAmt;
                                            }
                                            }

//                                             $update = $sql->update();
//                                             $update->table('Crm_PaymentScheduleUnitTrans')
//                                                 ->set(array('QualAmount' => $stageTotQualAmt, 'NetAmount' => $stageTotNetAmt))
//                                                 ->where(array('PaymentScheduleUnitTransId' => $paymentScheduleUnitTransId));
//                                                        $stmt = $sql->getSqlStringForSqlObject($update);
//                                             $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
//
//                                             $overAllQualAmt += $stageTotQualAmt;
                                         }}


                                    // update unit
                                    $update = $sql->update();
                                    $update->table('KF_UnitMaster')
                                        ->set(array('Status' => 'S'))
                                        ->where(array('UnitId' => $UnitId));
                                    $stmt = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


                                    $arrUnitDetailValues = array('QualifierAmount' => $stageTotQualAmt);


                                    $update = $sql->update();
                                    $update->table('Crm_UnitDetails')
                                        ->set($arrUnitDetailValues)
                                        ->where(array('UnitId' =>$UnitId));
                                    $stmt = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);


//check
                                    $select = $sql->select();
                                    $select->from('Crm_UnitTypeOtherCostTrans')
                                        ->columns(array('UnitId' => new Expression("'$UnitId'"), 'Area', 'Rate', 'Amount', 'OtherCostId', 'BookingId' => new Expression("'$bookingId'")))
                                        ->where(array('UnitTypeId' => $iUnitTypeId))
                                        ->where("OtherCostId IN ($OtherCostIds)");

                                    $insert = $sql->insert();
                                    $insert->into('Crm_FinalisationOtherCostTrans');
                                    $insert->columns(array('UnitId','Area', 'Rate', 'Amount', 'OtherCostId','BookingId'));
                                    $insert->Values($select);
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                       } else {
                                    $data[] = array('PhoneNumber' => $phoneArray, 'LeadName' => $leadArray, 'UnitNo' => $unitArray, 'BlockName' => $blockArray, 'Rate' => $RateArray,
                                        'PaymentSchedule' => $PaymentScheduleArray, 'ProjectName' => $projectArray, 'BookingName' => $BookingNameArray, 'BookingNo' => $BookingNoArray,'Executive'=>$executiveArray);
                                }

                            }
                        }

                    }
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent(json_encode($data));

                } catch(PDOException $e){
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $connection->commit();
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request
                try {
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitBooking'))
                        ->join(array('b' => 'Crm_Leads'), 'a.LeadId=b.LeadId', array('LeadName'), $select::JOIN_LEFT)
                        ->join(array('c' => 'KF_UnitMaster'), 'a.UnitId=c.UnitId', array('UnitNo','UnitId'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_ProjectMaster'), 'c.ProjectId=d.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                        ->columns(array( 'BookingId','BookingNo', 'BookingDate' => new Expression('Convert(varchar(11), BookingDate,103)'),
                            'Rate', 'LeadId', 'PostDiscount' => new Expression("IsNull(a.PostDiscount, 0)"),'NetAmt'=> new Expression('a.NetAmount')))
                        ->where(array('a.DeleteFlag' => 0))
                        ->order('a.BookingId Desc');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrBookings = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->jsonBookings = json_encode($arrBookings);

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function blockRegisterAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here
                    $mode = $this->bsf->isNullCheck($this->params()->fromPost('mode'), 'string' );

                    if($mode=="title") {
                        //Write your Ajax post code here
                        $uploadedFile = $request->getFiles();
                        $postData = $request->getPost();
                        if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                            $response->setContent('Invalid File Format');
                            $response->setStatusCode(400);
                            return $response;
                        }
                        $file_csv = "public/uploads/crm/unitblock/";
                        if(!is_dir($file_csv)) {
                            mkdir($file_csv, 0755, true);
                        }
                        $file_csv = "public/uploads/crm/unitblock/" . md5(time()) . ".csv";
                        $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                        $data = array();
                        $file = fopen($file_csv, "r");

                        $icount = 0;
                        while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {

                            if ($icount == 0) {
                                foreach ($xlData as $j => $value) {
                                    if($value!="") {
                                        $data[] = array('Field' => $value);
                                    }
                                }
                            } else {
                                break;
                            }
                            $icount = $icount + 1;
                        }


                        // delete csv file
                        fclose($file);
                        unlink($file_csv);
                    } else if($mode=="body") {
                        $uploadedFile = $request->getFiles();
                        $postData = $request->getPost();

                        if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                            $response->setContent('Invalid File Format');
                            $response->setStatusCode(400);
                            return $response;
                        }
                        $file_csv = "public/uploads/crm/unitblock/";
                        if(!is_dir($file_csv)) {
                            mkdir($file_csv, 0755, true);
                        }
                        $file_csv = "public/uploads/crm/unitblock/" . md5(time()) . ".csv";
                        $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                        $data = array();
                        $file = fopen($file_csv, "r");

                        $icount = 0;
                        $RType = $postData['arrHeader'];
                        $bValid = true;

                        while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                            if ($icount == 0) {
                                foreach (json_decode($RType) as $k) {
                                    foreach ($xlData as $j => $value) {
                                        if ($value != "") {
                                            $bFound = false;
                                            $sField = "";

                                            if (trim($value) == trim($k->efield)) {
                                                $sField = $k->field;
                                                $bFound = true;
//                                            break;
                                            }

                                            if ($bFound == true) {
                                                if (trim($sField) == "PhoneNumber") {
                                                    $col_1 = $j;
                                                }
                                                if (trim($sField) == "LeadName") {
                                                    $col_2 = $j;
                                                }
                                                if (trim($sField) == "UnitNo") {
                                                    $col_3 = $j;
                                                }
                                                if (trim($sField) == "BlockName") {
                                                    $col_4 = $j;
                                                }
                                                if (trim($sField) == "Rate") {
                                                    $col_5 = $j;
                                                }
                                                if (trim($sField) == "ValidUpto") {
                                                    $col_6 = $j;
                                                }
                                                if (trim($sField) == "ProjectName") {
                                                    $col_7 = $j;
                                                }
                                                if (trim($sField) == "BookingNo") {
                                                    $col_8 = $j;
                                                }
                                                if (trim($sField) == "Executive") {
                                                    $col_9 = $j;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                $PhoneNumber="";
                                $LeadName="";
                                $UnitNo="";
                                $BlockName="";
                                $Rate="";
                                $ValidUpto="";
                                $ProjectName="";
                                $BookingNo="";
                                $Executive="";
                                if (isset($col_1) && !is_null($col_1) && trim($col_1)!=""  && isset($xlData[$col_1])) {
                                    $PhoneNumber =$this->bsf->isNullCheck($xlData[$col_1],'string');
                                }
                                if (isset($col_2) && !is_null($col_2) && trim($col_2)!=""  && isset($xlData[$col_2])) {
                                    $LeadName =$this->bsf->isNullCheck($xlData[$col_2],'string');
                                }
                                if (isset($col_3) && !is_null($col_3) && trim($col_3)!=""  && isset($xlData[$col_3])) {
                                    $UnitNo = $this->bsf->isNullCheck($xlData[$col_3],'string');
                                }
                                if (isset($col_4) && !is_null($col_4) && trim($col_4)!=""  && isset($xlData[$col_4])) {
                                    $BlockName = $this->bsf->isNullCheck($xlData[$col_4],'string');
                                }
                                if (isset($col_5) && !is_null($col_5) && trim($col_5)!=""  && isset($xlData[$col_5])) {
                                    $Rate = $xlData[$col_5];
                                }
                                if (isset($col_6) && !is_null($col_6) && trim($col_6)!=""  && isset($xlData[$col_6])) {
                                    $ValidUpto = $this->bsf->isNullCheck($xlData[$col_6],'string');
                                }
                                if (isset($col_7) && !is_null($col_7) && trim($col_7)!=""  && isset($xlData[$col_7])) {
                                    $ProjectName = $this->bsf->isNullCheck($xlData[$col_7],'string');
                                }
                                if (isset($col_8) && !is_null($col_8) && trim($col_8)!=""  && isset($xlData[$col_8])) {
                                    $BookingNo= $this->bsf->isNullCheck($xlData[$col_8], 'string');
                                }
                                if (isset($col_9) && !is_null($col_9) && trim($col_9)!=""  && isset($xlData[$col_9])) {
                                    $Executive= $this->bsf->isNullCheck($xlData[$col_9], 'string');
                                }
                                if($PhoneNumber!="" || $LeadName!="" || $UnitNo!="" || $BlockName!="" || $Rate!="" || $ValidUpto!="" || $ProjectName!="" ||$BookingNo!="" ||$Executive!="") {
                                    $data[] = array('Valid' => $bValid, 'PhoneNumber' => $PhoneNumber, 'LeadName' => $LeadName, 'UnitNo' => $UnitNo, 'BlockName' => $BlockName, 'Rate' => $Rate,
                                        'ValidUpto' => $ValidUpto,'ProjectName' => $ProjectName,'BookingNo'=>$BookingNo,'Executive'=>$Executive);
                                }
                            }
                            $icount = $icount + 1;
                        }


                        if ($bValid == false) {
                            $data[] = array('Valid' => $bValid);
                        }
                        // delete csv file
                        fclose($file);
                        unlink($file_csv);
                    } else {
                        $postData = $request->getPost();
                        $rowCount = $postData['rowCount'];
                        $data = array();
                        for ($i = 0; $i <= $rowCount; $i++) {
                            if (isset($postData['excellead_' . $i])) {
                                $leadName = $this->bsf->isNullCheck(trim($postData['excellead_' . $i]), 'string');
                                $unitNo = $this->bsf->isNullCheck(trim($postData['excelunit_' . $i]), 'string');
                                $blockName = $this->bsf->isNullCheck(trim($postData['excelblock_' . $i]), 'string');
                                $validUpto = $this->bsf->isNullCheck(trim($postData['excelpay_' . $i]), 'date');
                                $Rate = $this->bsf->isNullCheck(trim(floatval($postData['excelrate_' . $i])), 'number');
                                $projectName = $this->bsf->isNullCheck(trim($postData['excelproject_' . $i]), 'string');
                                $phoneNumber = $this->bsf->isNullCheck(trim($postData['excelphone_' . $i]), 'string');
                                $BookingNo = $this->bsf->isNullCheck(trim($postData['excelbookno_' . $i]), 'string');
                                $Executive = $this->bsf->isNullCheck(trim($postData['excelexecutive_' . $i]), 'string');
                                $Discount = 0;


                                $select = $sql->select();
                                $select->from('Crm_Leads')
                                    ->columns(array('LeadName', 'Mobile', 'LeadId'))
                                    ->where(array('LeadName' => $leadName, 'LeadType' => 1, 'DeleteFlag' => 0, 'Mobile' => $phoneNumber));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $lead = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                $error = 0;
                                if (count($lead) == 1) {
                                    $leadArray = array($leadName, 0);
                                    $phoneArray = array($phoneNumber, 0);

                                } else {
                                    $leadArray = array($leadName, 1);
                                    $phoneArray = array($phoneNumber, 1);
                                    $error = 1;
                                }

                                $select = $sql->select();
                                $select->from('Proj_ProjectMaster')
                                    ->columns(array('ProjectName', 'ProjectId'))
                                    ->where(array('ProjectName' => $projectName, 'DeleteFlag' => 0));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $project = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                if (count($project) == 1) {
                                    $projectArray = array($project[0]['ProjectName'], 0);
                                    $select = $sql->select();
                                    $select->from('KF_BlockMaster')
                                        ->columns(array('BlockId', 'BlockName'))
                                        ->where(array('ProjectId' => $project[0]['ProjectId'], 'DeleteFlag' => 0, 'BlockName' => $blockName));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $block = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    if (count($block) == 1) {
                                        $blockArray = array($blockName, 0);
                                        $select = $sql->select();
                                        $select->from(array('a' => 'KF_UnitMaster'))
                                            ->join(array('b' => 'Crm_Unitdetails'), 'b.UnitId=a.UnitId', array('Rate'), $select::JOIN_LEFT)
                                            ->columns(array('UnitId', 'UnitNo'))
                                            ->where(array('a.ProjectId' => $project[0]['ProjectId'], 'a.BlockId' => $block[0]['BlockId'], 'a.DeleteFlag' => 0, 'a.UnitNo' => $unitNo, 'a.Status' => "U"));
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                                        if (count($unit) == 1) {
                                            $unitArray = array($unitNo, 0);
                                            $Discount = floatval($unit[0]['Rate']) - floatval($Rate);
                                        } else {
                                            $unitArray = array($unitNo, 1);
                                            $error = 1;
                                        }
                                    } else {
                                        $blockArray = array($blockName, 1);
                                        $unitArray = array($unitNo, 0);
                                        $error = 1;
                                    }

                                } else {
                                    $error = 1;
                                    $projectArray = array($projectName, 1);
                                    $blockArray = array($blockName, 0);
                                    $unitArray = array($unitNo, 0);
                                }
                                $ValidUptoArray = array($validUpto, 0);
                                $RateArray = array($Rate, 0);
                                $BookingNoArray = array($BookingNo, 0);
                                $executiveArray = array($Executive, 0);
                                if ($error == 0) {
                                    $date_to_compare = strtotime(str_replace("/","-",$validUpto));

                                    if($date_to_compare!=false) {
                                        if ($date_to_compare <= strtotime(date("Y-m-d"))) {
                                            $validUpto = date('Y-m-d H:i:s', strtotime('+7 days'));
                                        } else {
                                            $validUpto = date('Y-m-d H:i:s', $date_to_compare);
                                        }
                                    } else {
                                        $validUpto = date('Y-m-d H:i:s', strtotime('+7 days'));
                                    }

                                    $aVNo = CommonHelper::getVoucherNo(823, date('Y-m-d'), 0, 0, $dbAdapter, "I");
                                    if ($aVNo["genType"] == true) {
                                        $BookingNo = $aVNo["voucherNo"];
                                    }

                                    $select = $sql->select();
                                    $select->from('Crm_LeadFollowup')
                                        ->columns(array('EntryId'))
                                        ->where(array('LeadId' =>$lead[0]['LeadId']))
                                        ->order("EntryId desc");
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $entry  = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    $update = $sql->update();
                                    $update->table('Crm_LeadFollowup');
                                    $update->set(array(
                                        'Completed'  => 1,
                                        'CompletedDate'  => date('Y-m-d H:i:s'),

                                    ));
                                    $update->where(array('EntryId'=>$entry['EntryId']));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    $select = $sql->select();
                                    $select->from('WF_Users')
                                        ->columns(array('UserId'))
                                        ->where(array('EmployeeName' =>$Executive));
                                    $statement = $sql->getSqlStringForSqlObject($select);
                                    $cEmp = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    $executiveId=$this->auth->getIdentity()->UserId;
                                    if(count($cEmp)>0) {
                                        $executiveId=$cEmp[0]['UserId'];
                                    }

                                    $insert = $sql->insert();
                                    $insert->into('Crm_LeadFollowup');
                                    $insert->Values(array(
                                        'UnitId' => $unit[0]['UnitId'],
                                        'LeadId' => $lead[0]['LeadId'],
                                        'FollowUpDate' => date('Y-m-d H:i:s'),
                                        'ExecutiveId'=>$executiveId,
//                                        'NextFollowUpTypeId' => $this->bsf->isNullCheck($postData['nextfollow_name'], 'number'),
//                                        'StatusId'=>$this->bsf->isNullCheck($postData['status_id'], 'number'),
//                                        'NatureId'=>$this->bsf->isNullCheck($postData['nature_id'], 'number'),
//                                        'NextCallDate'=>$nextCallDate,
                                       'CallTypeId'=>2,
                                        'UserId'=>$this->auth->getIdentity()->UserId
                                    ));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $followupId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    $select = $sql->select();
                                    $select->from(array('a' => 'KF_UnitMaster'))
                                        ->join(array('b' => 'Crm_UnitDetails'), 'b.UnitId=a.UnitId', array('*'), $select::JOIN_LEFT)
                                        ->where(array('a.UnitId' => $unit[0]['UnitId'], 'a.DeleteFlag' => 0));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $unitDet = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    $select = $sql->select();
                                    $select->from(array('a' => 'Crm_UnitTypeOtherCostTrans'))
                                        ->join(array('b' => 'Crm_OtherCostMaster'), 'a.OtherCostId=b.OtherCostId', array('OtherCostName'), $select::JOIN_INNER)
                                        ->columns(array('OtherCostId','Amount', 'Area', 'Rate'))
                                        ->where(array('a.UnitTypeId' => $unitDet['UnitTypeId']));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $unitamt = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                                    $sumother=0;

                                    foreach($unitamt as $unitVal){
                                        $sumother +=$unitVal['Amount'];
                                    }

                                    $landAmt = $unitDet['LandAmount'];

                                    $discountType='R';

                                    $rt =$unitDet['Rate']- $Discount;

                                    $netAmt= $rt * $unitDet['UnitArea'];
                                    $constructionAmt =$netAmt-$landAmt;
                                    $BRate = $rt;

                                    $insert = $sql->insert();
                                    $insert->into('Crm_UnitBlock');
                                    $insert->Values(array(
                                        'BlockNo' => $BookingNo,
                                        'BookingDate' => date('Y-m-d H:i:s'),
                                        'LeadId' => $lead[0]['LeadId'],
                                        'UnitId' => $unit[0]['UnitId'],
                                        'BRate' => $Rate,
                                        'Discount' => $Discount,
                                        'FollowupId' =>$followupId,
                                        'ExecutiveId'=>$executiveId,
                                        'CreatedDate' => date('Y-m-d H:i:s'),
                                        'ValidUpto' => $validUpto,
                                        'DiscountType'=>$discountType,
                                        'BaseAmount'=>$BRate * $unitDet['UnitArea'],
                                        'LandAmount'=>$landAmt,
                                        'ConstructionAmount'=>$constructionAmt,
                                        'NetAmount'=>$netAmt + $sumother +$unitDet['QualifierAmount'],
                                        'AdvAmnt'=>$unitDet['AdvAmount'],
                                        'QualAmount'=>$unitDet['QualifierAmount'],
                                        'GrossAmount'=>$landAmt + $constructionAmt
                                    ));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    $blockId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                    if (trim($BookingNo) == "") {
                                        $BookingNo = uniqid() . $blockId;
                                        $update = $sql->update();
                                        $update->table('Crm_UnitBlock')
                                            ->set(array('BlockNo' => $BookingNo))
                                            ->where(array('BlockId' => $blockId));
                                        $statement = $sql->getSqlStringForSqlObject($update);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    }
                                    $update = $sql->update();
                                    $update->table('KF_UnitMaster')
                                        ->set(array('Status' => 'B'))
                                        ->where(array('UnitId' => $unit[0]['UnitId']));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    $update = $sql->update();
                                    $update->table('CRM_UnitDetails')
                                        ->set(array('Discount' => $Discount))
                                        ->where(array('UnitId' => $unit[0]['UnitId']));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                } else {
                                    $data[] = array('PhoneNumber' => $phoneArray, 'LeadName' => $leadArray, 'UnitNo' => $unitArray, 'BlockName' => $blockArray, 'Rate' => $RateArray,
                                        'ValidUpto' => $ValidUptoArray, 'ProjectName' => $projectArray, 'BookingNo' => $BookingNoArray,'Executive'=>$executiveArray);
                                }
                            }
                        }
                    }
                    $connection->commit();
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent(json_encode($data));
                } catch(PDOException $e){
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $connection->commit();
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {
                    $select = $sql->select();
                    $select->from(array('c' => 'Crm_UnitBlock'))
                        ->columns(array('BlockId',
                            'BlockNo','NetAmount','BookingDate' => new Expression('Convert(varchar(11), BookingDate,101)'),
                            'Rate'=>'BRate', 'LeadId','ValidUpto' => new Expression('Convert(varchar(11), ValidUpto,103)')))
                        ->join(array('a' => 'KF_UnitMaster'), 'c.UnitId=a.UnitId', array('UnitName' =>'UnitNo','UnitId'))
                        ->join(array('e' => 'Proj_ProjectMaster'), 'e.ProjectId=a.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                        ->join(array('b' => 'Crm_Leads'), 'b.LeadId=c.LeadId', array('LeadName'), $select::JOIN_LEFT)
                        //   ->join(array('d' => 'Crm_UnitDetails'), 'd.UnitId=c.UnitId', array('NetAmt'), $select::JOIN_LEFT)
                        ->where(array('c.DeleteFlag' => 0))
                        ->order('c.BlockId desc');
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrBookings = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->jsonBookings = json_encode($arrBookings);

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }
    public function blockDeleteAction(){
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $userId = $this->auth->getIdentity()->UserId;
        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $status = "failed";
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                // Print_r($UnitId); die;

                try{
                    $RegisterId = $this->bsf->isNullCheck($this->params()->fromPost('RegisterId'),'number');
                    $UnitId = $this->bsf->isNullCheck($this->params()->fromPost('UnitId'),'number');
                    $Remarks = $this->bsf->isNullCheck($this->params()->fromPost('Remarks'),'string');

                    $sql = new Sql($dbAdapter);
                    $response = $this->getResponse();

                    $update = $sql->update();
                    $update->table('Crm_UnitBlock')
                        ->set(array('DeleteFlag' => '1','ModifiedDate' => date('Y/m/d H:i:s'), 'DeleteRemarks' => $Remarks))
                        ->where(array('BlockId' => $RegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $update1 = $sql->update();
                    $update1->table('KF_UnitMaster')
                        ->set(array('Status'=>'U'))
                        ->where(array('UnitId' => $UnitId));
                    $statement = $sql->getSqlStringForSqlObject($update1);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Block-Delete','D','Crm-Block',$RegisterId,0, 0, 'CRM', '',$userId, 0 ,0);

                    $select = $sql->select();
                    $select->from(array('a'=>'Crm_UnitBlock'))
                        ->join(array("b"=>"Crm_Leads"), "a.LeadId=b.LeadId", array('Email','LeadName'), $select::JOIN_LEFT)
                        ->join(array("c"=>"KF_UnitMaster"), "a.UnitId=c.UnitId", array('UnitNo'), $select::JOIN_LEFT)
                        ->join(array("d"=>"Proj_ProjectMaster"), "c.ProjectId=d.ProjectId", array('ProjectName'), $select::JOIN_LEFT)
                        ->columns(array('BlockId','ValidUpto'))
                        ->where(array('a.UnitId' => $UnitId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $block = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    if($block['Email']!='') {

                        $mailData = array(
                            array(
                                'name' => 'LEADNAME',
                                'content' => $block['LeadName']
                            ),
                            array(
                                'name' => 'UNITNO',
                                'content' => $block['UnitNo']
                            ),
                            array(
                                'name' => 'PROJECTNAME',
                                'content' => $block['ProjectName']
                            ),
                            array(
                                'name' => 'VALIDDATE',
                                'content' => $block['ValidUpto']
                            )
                        );
                        $sm = $this->getServiceLocator();
                        $config = $sm->get('application')->getConfig();
                        $viewRenderer->MandrilSendMail()->sendMailTo('arnika@micromen.info',$config['general']['mandrilEmail'], 'Ublock Alert Notification', 'Crm_unblock', $mailData);

                    }

                    $status = 'deleted';
                } catch (PDOException $e) {

                    $connection->rollback();
                    $response->setStatusCode(400)->setContent($status);
                }
                $response->setContent($status);
                return $response;
            }
        }
    }
//    public function unitBlockCancellationAction() {
//        if(!$this->auth->hasIdentity()) {
//            if($this->getRequest()->isXmlHttpRequest())	{
//                echo "session-expired"; exit();
//            } else {
//                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
//            }
//        }
//
//        // csrf validation
//        $request = $this->getRequest();
//        $response = $this->getResponse();
//        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
//        if ($request->isPost()
//            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
//            // CSRF attack
//            if($this->getRequest()->isXmlHttpRequest())	{
//                // AJAX
//                $response->setStatusCode(401);
//                $response->setContent('CSRF attack');
//                return $response;
//            } else {
//                // Normal
//                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
//            }
//        }
//
//        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
//        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
//
//        $sql = new Sql($dbAdapter);
//        if($this->getRequest()->isXmlHttpRequest())	{
//            // AJAX request
//            if ($request->isPost()) {
//                //begin trans try block example starts
//                $connection = $dbAdapter->getDriver()->getConnection();
//                $connection->beginTransaction();
//
//                try {
//                    //Write your Ajax post code here
//
//                    $connection->commit();
//                    $result =  "Success";
//                    $this->_view->setTerminal(true);
//                    $response->setStatusCode(200);
//                    $response->setContent($result);
//                } catch(PDOException $e){
//                    $connection->rollback();
//                    $response->setStatusCode(500);
//                    $response->setContent('Internal error!');
//                }
//            } else {
//                // GET request
//                $response->setStatusCode(405);
//                $response->setContent('Method not allowed!');
//            }
//
//            return $response;
//        } else {
//            // Normal request
//            $request = $this->getRequest();
//            if ($request->isPost()) {
//                // POST request
//                $connection = $dbAdapter->getDriver()->getConnection();
//                $connection->beginTransaction();
//
//                try {
//
//                    $postData = $request->getPost();
//
//                    $leadId = $this->bsf->isNullCheck( $postData[ 'leadId' ], 'number' );
//                    if ( $leadId == 0 ) {
//                        throw new \Exception( 'Invalid Lead-id!');
//                    }
//
//                    $cancellationId = $this->bsf->isNullCheck($postData['CancellationId'], 'number');
//                    if($cancellationId == 0) {
//                        //
//                        $unitId = $this->bsf->isNullCheck( $postData[ 'unit_no' ], 'number' );
//                        if ( $unitId == 0 ) {
//                            $this->redirect()->toRoute( 'crm/default', array( 'controller' => 'lead', 'action' => 'unit-cancellation' ) );
//                        }
//
//                        $select = $sql->select();
//                        $select->from( 'Crm_UnitBlock' )
//                            ->where( array( 'UnitId' => $unitId, 'LeadId' => $leadId ) );
//                        $statement = $sql->getSqlStringForSqlObject( $select );
//                        $unitBooking = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->current();
//                        if ( empty( $unitBooking ) ) {
//                            $this->redirect()->toRoute( 'crm/default', array( 'controller' => 'lead', 'action' => 'unit-cancellation' ) );
//                        }
//
//                        $refDate = $this->bsf->isNullCheck( $postData[ 'cancellation_date' ], 'string' );
//                        if(strtotime($refDate) == FALSE) {
//                            throw new \Exception('Invalid Cancellation-Date!');
//                        }
//                        $refDate = date('Y-m-d', strtotime($refDate));
//
//                        $sVno = $this->bsf->isNullCheck( $postData[ 'vocher_no' ], 'string' );
//
//                        $aVNo = CommonHelper::getVoucherNo( 813, date( 'Y-m-d', strtotime( $postData[ 'cancellation_date' ] ) ), 0, 0, $dbAdapter, "I" );
//                        if ( $aVNo[ "genType" ] == true )
//                            $sVno = $aVNo[ "voucherNo" ];
//
//                        $insert = $sql->insert();
//                        $insert->into('Crm_LeadFollowup');
//                        $insert->Values(array(
//                            'LeadId' => $leadId,
//                            'FollowUpDate' => $refDate,
//                            'ExecutiveId'=>$this->bsf->isNullCheck( $postData[ 'executive_id' ], 'number' ),
//                            'StatusId'=> 1,
//                            'CallTypeId' => 11));
//                        $statement = $sql->getSqlStringForSqlObject($insert);
//                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//                        $followupentryid = $dbAdapter->getDriver()->getLastGeneratedValue();
//
//                        $insert = $sql->insert();
//                        $insert->into( 'Crm_UnitCancellation' )
//                            ->values( array(
//                                'RefNo' => $sVno,
//                                'RefDate' => $refDate,
//                                'UnitId' => $unitId,
//                                'BookingId' => $unitBooking[ 'BlockId' ],
//                                'LeadId' => $leadId,
//                                'PaidAmt' => $this->bsf->isNullCheck( $postData[ 'PaidAmt' ], 'number' ),
//                                'CancellationAmt' => $this->bsf->isNullCheck( $postData[ 'CancellationAmt' ], 'number' ),
//                                'OtherDetectionAmt' => $this->bsf->isNullCheck( $postData[ 'OtherDetectionAmt' ], 'number' ),
//                                'PayableAmt' => $this->bsf->isNullCheck( $postData[ 'PayableAmt' ], 'number' ),
//                                'Remarks' => $this->bsf->isNullCheck( $postData[ 'Remarks' ], 'string' ),
//                                'CreatedDate' => date( 'Y-m-d H:i:s' ),
//                                'FollowupId' => $followupentryid
//                            ) );
//                        $stmt = $sql->getSqlStringForSqlObject( $insert );
//                        $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );
//                        $cancellationId = $dbAdapter->getDriver()->getLastGeneratedValue();
//
//                        // cancel unit
//                        $update = $sql->update();
//                        $update->table( 'Crm_UnitBlock' )
//                            ->set( array( 'DeleteFlag' => 1 ) )
//                            ->where( array( 'BlockId' => $unitBooking[ 'BlockId' ] ) );
//                        $statement = $sql->getSqlStringForSqlObject( $update );
//                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
//
//
//                        //update unsold//
//                        $update = $sql->update();
//                        $update->table( 'KF_UnitMaster' )
//                            ->set( array( 'Status' => 'U' ) )
//                            ->where( array('UnitId' => $unitId));
//                        $statement = $sql->getSqlStringForSqlObject( $update );
//                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
//                        $connection->commit();
//                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Unit-Cancellation-Add','N','Unit-Cancellation',$cancellationId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);
//
//                    } else {
//                        // edit mode
//                        $update = $sql->update();
//                        $update->table('Crm_UnitCancellation')
//                            ->set(array(
//                                    'OtherDetectionAmt' => $this->bsf->isNullCheck( $postData[ 'OtherDetectionAmt' ], 'number' ),
//                                    'PayableAmt' => $this->bsf->isNullCheck( $postData[ 'PayableAmt' ], 'number' ),
//                                    'Remarks' => $this->bsf->isNullCheck( $postData[ 'Remarks' ], 'string' ))
//                            )
//                            ->where(array('CancellationId' => $cancellationId));
//                        $stmt = $sql->getSqlStringForSqlObject($update);
//                        $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
//                        $connection->commit();
//                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Unit-Cancellation-Modify','E','Unit-Cancellation',$cancellationId,0, 0, 'CRM','',$this->auth->getIdentity()->UserId, 0 ,0);
//
//                    }
//
//
//                    $this->redirect()->toRoute( 'crm/block-register', array(
//                        'controller' => 'lead',
//                        'action' => 'block-register',
//
//                    ) );
//
//                } catch(\Exception $ex) {
//                    $connection->rollback();
//                    print "Error!: " . $ex->getMessage() . "</br>";
//                } catch(PDOException $e){
//                    $connection->rollback();
//                    print "Error!: " . $e->getMessage() . "</br>";
//                }
//
//            } else {
//                // GET request
//
//                try {
//
//                    $leadId = $this->params()->fromRoute('leadId');
//                    if(!is_numeric($leadId)) {
//                        throw new \Exception('Invalid Lead-id!');
//                    }
//                    $this->_view->leadId = $leadId;
//
//                    $unitId = $this->bsf->isNullCheck($this->params()->fromRoute('unitId'), 'number');
//                    if($unitId != 0) {
//                        $this->_view->unitId = $unitId;
//                    }
//
//                    $isEditMode = FALSE;
//                    $unitCancellation = NULL;
//                    $cancellationId = $this->bsf->isNullCheck($this->params()->fromRoute('cancellationId'), 'number');
//                    if($cancellationId != 0) {
//                        // edit mode
//                        $select = $sql->select();
//                        $select->from(array('a' => 'Crm_UnitCancellation'))
//                            ->join(array('b' => 'KF_UnitMaster'), 'a.UnitId=b.UnitId', array('UnitNo'), $select::JOIN_LEFT)
//                            ->join(array('c' => 'WF_Users'), 'c.UserId=a.ExecutiveId', array('EmployeeName'), $select::JOIN_LEFT)
//                            ->where(array('CancellationId' => $cancellationId));
//                        $stmt = $sql->getSqlStringForSqlObject($select);
//                        $unitCancellation = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//                        if(!empty($unitCancellation)) {
//                            $this->_view->unitCancellation = $unitCancellation;
//                            $isEditMode = TRUE;
//                        }
//                    }
//                    $this->_view->isEditMode = $isEditMode;
//
//                    // Current units
//                    $select = $sql->select();
//                    $select->from(array('a' => 'Crm_UnitBlock'))
//                        ->join(array('b' => 'KF_UnitMaster'), 'b.UnitId=a.UnitId', array(), $select::JOIN_LEFT)
//                        ->join(array('c' => 'Proj_ProjectMaster'), 'c.ProjectId=b.ProjectId', array('ProjectId'), $select::JOIN_LEFT)
//                        ->join(array('d' => 'Crm_Leads'), 'd.LeadId=a.LeadId', array(), $select::JOIN_LEFT)
//                        ->columns(array('UnitName' => new Expression("c.ProjectName + ' - ' + b.UnitNo + ' - ' + d.LeadName "),
//                            'UnitId'))
//                        ->where(array('a.LeadId' => $leadId, 'a.DeleteFlag' => 0));
//                    $stmt = $sql->getSqlStringForSqlObject($select);
//                    $arrCurUnits = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    if(!empty($arrCurUnits)) {
//                        $this->_view->arrCurUnits = $arrCurUnits;
//                    }
//
//                    // Projects
//                    $select = $sql->select();
//                    $select->from('Proj_ProjectMaster')
//                        ->columns(array('ProjectId', 'ProjectName'))
//                        ->where(array('DeleteFlag' => 0));
//                    $stmt = $sql->getSqlStringForSqlObject($select);
//                    $this->_view->arrProjects = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//                    // Executives
//                    $select = $sql->select();
//                    $select->from('WF_Users')
//                        ->columns(array('UserId', 'EmployeeName'))
//                        ->where(array('DeleteFlag' => 0));
//                    $stmt = $sql->getSqlStringForSqlObject($select);
//                    $this->_view->arrExecutives = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//                    $aVNo = CommonHelper::getVoucherNo(813, date('Y/m/d'), 0, 0, $dbAdapter, "");
//                    $this->_view->genType = $aVNo["genType"];
//                    if ($aVNo["genType"] == false)
//                        $this->_view->svNo = "";
//                    else
//                        $this->_view->svNo = $aVNo["voucherNo"];
//
//                    if($isEditMode) {
//                        $this->_view->svNo = $unitCancellation['RefNo'];
//                        $this->_view->refDate = date('d-m-Y', strtotime($unitCancellation['RefDate']));
//                    }
//
//                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
//                } catch(\Exception $ex) {
//                    $this->_view->err = $ex->getMessage();
//                    echo $ex->getMessage();
//                }
//            }
//
//            //Common function
//            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
//
//            return $this->_view;
//        }
//    }

    public function getExecutiveIdAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $projectsId = trim(implode(',', $postParams['projectid']));
                if($projectsId == "") $projectsId =0;

                $sql = new Sql($dbAdapter);
                $select = $sql->select();
                $select->from( array('a' => 'WF_Users' ))
                    ->join(array("b"=>"WF_PositionMaster"),"a.PositionId=b.PositionId",array(),$select::JOIN_INNER)
                    ->join(array("c"=>"Crm_AssignLeadsView"),"a.UserId=c.ExecutiveId",array('TotLeads'=>new Expression('isnull(c.TotLeads,0)')),$select::JOIN_LEFT)
                    ->columns(array('UserId', 'Leads' => new Expression("'0'")))
                    ->where('b.PositionTypeId IN (2,5)');

                if ($projectsId !=0) {
                    $subQuery = $sql->select();
                    $subQuery->from("WF_UserCostCentreTrans")
                        ->columns(array('UserId'))
                        ->where("CostCentreId IN ($projectsId)");
                    $select->where->expression('a.UserId NOT IN ?', array($subQuery));
                }

                $select->order('TotLeads ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $arrExecutive = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $iExecutiveId=0;
                if (!empty($arrExecutive)) $iExecutiveId =$arrExecutive[0]['UserId'];

                $response = $this->getResponse();
                $response->setContent($iExecutiveId);
                return $response;
            }
        }
    }


    public function getTaxAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
//        if ($request->isPost()
//            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
//            // CSRF attack
//            if($this->getRequest()->isXmlHttpRequest())	{
//                // AJAX
//                $response->setStatusCode(401);
//                $response->setContent('CSRF attack');
//                return $response;
//            } else {
//                // Normal
//                return $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
//            }
//        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            $request = $this->getRequest();
            if ($request->isPost()) {

                try {

//                    $sReceiptType = $this->bsf->isNullCheck($this->params()->fromPost('ReceiptType'), 'string' );
//                    $iTypeId = $this->bsf->isNullCheck($this->params()->fromPost('TypeId'), 'number' );
//                    $dBaseAmt = $this->bsf->isNullCheck($this->params()->fromPost('BaseAmt'), 'number' );
                    $dGrossAmt = $this->bsf->isNullCheck($this->params()->fromPost('GrossAmt'), 'number' );
                    $dDate = date('Y-m-d');

                    $arrReceipt = json_decode($this->params()->fromPost('arrReceipt'),true);

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_QualifierTrans'))
                        ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName'), $select::JOIN_INNER)
                        ->where(array('a.QualType'=>'C'))
                        ->columns(array('QualifierId'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $arrList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $arrTotTax = array();
                    foreach ($arrList as $atax) {
                        $arrTotTax[$atax['QualifierId']]['QualifierId'] = $atax['QualifierId'];
                        $arrTotTax[$atax['QualifierId']]['QualifierName'] = $atax['QualifierName'];
                        $arrTotTax[$atax['QualifierId']]['Amount'] = 0;
                    }

                    if (!empty($arrReceipt)) {
                        foreach ($arrReceipt as $v) {

                            $sReceiptType = $this->bsf->isNullCheck($v['ReceiptType'], 'string');
                            $iTypeId = $this->bsf->isNullCheck($v['TypeId'], 'number');
                            $dBaseAmt = floatval($this->bsf->isNullCheck($v['Amount'], 'number'));

                            $select = $sql->select();
                            $select->from(array('c' => 'Crm_QualifierSettings'))
                                ->join(array("a" => "Proj_QualifierTrans"), 'c.QualifierId=a.QualifierId',
                                    array('QualifierId', 'YesNo', 'RefId' => new Expression("'R'+ rtrim(ltrim(str(a.QualifierId)))"), 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'KKCess', 'SBCess', 'NetPer', 'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                                        'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxableAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'TaxAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SurChargeAmt' => new Expression("CAST(0 As Decimal(18,2))"),
                                        'EDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'HEDCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'SBCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'KKCessAmt' => new Expression("CAST(0 As Decimal(18,2))"), 'NetAmt' => new Expression("CAST(0 As Decimal(18,2))")), $select::JOIN_LEFT)
                                ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId'), $select::JOIN_INNER);
                            $select->where(array('QualSetType' => $sReceiptType, 'QualSetTypeId' => $iTypeId, 'a.QualType' => 'C'))
                                ->order('SortOrder ASC');
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $arrQualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                            $qualTotAmt = 0;

                            $arrTax = array();
                            foreach ($arrQualList as $qualList) {
                                $sRefNo = $qualList['RefId'];
                                $arrTax[$sRefNo]['QualifierName'] = $qualList['QualifierName'];
                                $arrTax[$sRefNo]['QualifierId'] = $qualList['QualifierId'];
                                $arrTax[$sRefNo]['RefNo'] = $qualList['RefId'];
                                $arrTax[$sRefNo]['QualifierTypeId'] = $qualList['QualifierTypeId'];
                                //$arrTax[$sRefNo]['Expression'] = $qualList['Expression'];
                                $arrTax[$sRefNo]['ExpPer'] = $qualList['ExpPer'];


                                $sExpression = $qualList['Expression'];
                                $sExpression = str_replace('R0', $dBaseAmt, $sExpression);
                                $arrTax[$sRefNo]['Expression'] = $sExpression;

                                $arrTax[$sRefNo]['TaxablePer'] = 0;
                                $arrTax[$sRefNo]['TaxPer'] = 0;
                                $arrTax[$sRefNo]['SurCharge'] = 0;
                                $arrTax[$sRefNo]['EDCess'] = 0;
                                $arrTax[$sRefNo]['HEDCess'] = 0;
                                $arrTax[$sRefNo]['SBCess'] = 0;
                                $arrTax[$sRefNo]['KKCess'] = 0;
                                $arrTax[$sRefNo]['NetPer'] = 0;

                                if ($qualList['QualifierTypeId'] == 1 && $dGrossAmt > 5000000) {
                                    $tds = CommonHelper::getTDSSetting(11, $dDate, $dbAdapter);
                                    $arrTax[$sRefNo]['TaxablePer'] = $tds["TaxablePer"];
                                    $arrTax[$sRefNo]['TaxPer'] = $tds["TaxPer"];
                                    $arrTax[$sRefNo]['SurCharge'] = $tds["SurCharge"];
                                    $arrTax[$sRefNo]['EDCess'] = $tds["EDCess"];
                                    $arrTax[$sRefNo]['HEDCess'] = $tds["HEDCess"];
                                    $arrTax[$sRefNo]['NetPer'] = $tds["NetTax"];

                                } else if ($qualList['QualifierTypeId'] == 2) {
                                    $select = $sql->select();
                                    if ($sReceiptType == "S") {
                                        $select->from('Crm_ReceiptTypeMaster')
                                            ->columns(array('TaxablePer'))
                                            ->where(array('ReceiptTypeId' => $iTypeId));

                                    } else {
                                        $select->from('Crm_OtherCostMaster')
                                            ->columns(array('TaxablePer'))
                                            ->where(array('OtherCostId' => $iTypeId));
                                    }

                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $stTax = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                    $Taxable = 0;
                                    if (!empty($stTax)) $Taxable = $stTax['TaxablePer'];

                                    $tds = CommonHelper::getSTSetting('F', $dDate, $dbAdapter);
                                    $arrTax[$sRefNo]['TaxablePer'] = $Taxable;
                                    $arrTax[$sRefNo]['TaxPer'] = $tds["TaxPer"];
                                    $arrTax[$sRefNo]['SBCess'] = $tds["SBCess"];
                                    $arrTax[$sRefNo]['KKCess'] = $tds["KKCess"];
                                    $arrTax[$sRefNo]['NetPer'] = $tds["NetTax"];
                                }
                            }


                            foreach ($arrTax as $qual) {
                                $sRef = $qual['RefNo'];
                                $sExpression = $qual['Expression'];
                                $dAmt = eval('return ' . $sExpression . ';');


                                $dNetAmt = 0;

                                if ($qual['QualifierTypeId'] == 1 && $dGrossAmt > 5000000) {

                                    $dTaxablePer = floatval($this->bsf->isNullCheck($qual['TaxablePer'], 'number'));
                                    $dTaxPer = floatval($this->bsf->isNullCheck($qual['TaxPer'], 'number'));
                                    $dSurCharge = floatval($this->bsf->isNullCheck($qual['SurCharge'], 'number'));
                                    $dEDCess = floatval($this->bsf->isNullCheck($qual['EDCess'], 'number'));
                                    $dHEDCess = floatval($this->bsf->isNullCheck($qual['HEDCess'], 'number'));

                                    $dTaxableAmt = $dAmt * ($dTaxablePer / 100);
                                    $dTaxAmt = $dTaxableAmt * ($dTaxPer / 100);
                                    $dCessAmt = $dTaxAmt * ($dSurCharge / 100);
                                    $dEDAmt = $dTaxAmt * ($dEDCess / 100);
                                    $dHEDAmt = $dTaxAmt * ($dHEDCess / 100);
                                    $dNetAmt = $dTaxAmt + $dCessAmt + $dEDAmt + $dHEDAmt;

                                } else if ($qual['QualifierTypeId'] == 2) {

                                    $dTaxablePer = floatval($this->bsf->isNullCheck($qual['TaxablePer'], 'number'));
                                    $dTaxPer = floatval($this->bsf->isNullCheck($qual['TaxPer'], 'number'));
                                    $dSBCess = floatval($this->bsf->isNullCheck($qual['SBCess'], 'number'));
                                    $dKKCess = floatval($this->bsf->isNullCheck($qual['KKCess'], 'number'));

                                    $dTaxableAmt = $dAmt * ($dTaxablePer / 100);
                                    $dTaxAmt = $dTaxableAmt * ($dTaxPer / 100);
                                    $dKKCessAmt = $dTaxableAmt * ($dKKCess / 100);
                                    $dSBCessAmt = $dTaxableAmt * ($dSBCess / 100);
                                    $dNetAmt = $dTaxAmt + $dKKCessAmt + $dSBCessAmt;

                                } else {
                                    $dPer = floatval($this->bsf->isNullCheck($qual['ExpPer'], 'number'));
                                    if ($qual['QualifierTypeId'] !=1) {
                                        if ($dPer != 0) $dNetAmt = $dAmt * ($dPer / 100);
                                        else $dNetAmt = $dAmt;
                                    }
                                }

                                $arrTax[$sRef]['NetAmt'] = $dNetAmt;
                                foreach ($arrTax as $qual) {
                                    $sExpression = $qual['Expression'];
                                    $ssRef = $qual['RefNo'];

                                    $sExpression = Str_replace($sRef, $dNetAmt, $sExpression);
                                    $arrTax[$sRef]['Expression'] = $sExpression;
                                }
                            }

                            if (!empty($arrTax)) {

                                foreach ($arrTax as $qual) {
                                    $qualId = $qual['QualifierId'];
                                    $doamt =  floatval($this->bsf->isNullCheck($arrTotTax[$qualId]['Amount'],'number'));
                                    $dtamt =  floatval($this->bsf->isNullCheck($qual['NetAmt'],'number'));

                                    $arrTotTax[$qualId]['Amount'] = $doamt + $dtamt;
                                }
                            }
                        }

                    }



                    $result =  json_encode(array('arrTax' => $arrTotTax));
                    $this->_view->setTerminal(true);
                    $response->getHeaders()->addHeaderLine( 'Content-Type', 'application/json' );
                    $response->setStatusCode(200);
                    $response->setContent($result);


                } catch(\Exception $e) {
                    $response->setStatusCode(400);
                    $response->setContent($e->getMessage());
                }

            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        }
    }

    public function reserveAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Lead Entry");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $userId = $this->auth->getIdentity()->UserId;

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $result="";
                $mode= $this->bsf->isNullCheck($postParams['mode'], 'string');
                if($mode=="owner") {
                    $pId= $this->bsf->isNullCheck($postParams['projectId'], 'number');
                    $rId= $this->bsf->isNullCheck($postParams['reserveId'], 'number');

//                    $select = $sql->select();
//                    $select->from(array('a' => 'proj_ProjectMaster'))
//                        ->join(array('b' => 'KF_KickoffRegister'), 'a.KickoffId=b.KickoffId', array(), $select::JOIN_LEFT)
//                        ->join(array('c' => 'Proj_LandBankFinalization'), 'b.EnquiryId=c.EnquiryId', array(), $select::JOIN_LEFT)
//                        ->join(array('d' => 'Proj_LBFinalizationOwnerDetail'), 'c.FinalizationId=d.FinalizationId', array(), $select::JOIN_LEFT)
//                        ->join(array('e' => 'Proj_LandOwnerDetail'), 'd.OwnerId=e.OwnerId', array("OwnerName","OwnerId"), $select::JOIN_LEFT)
//                        ->columns(array('ProjectId'))
//                    ->where(array('a.ProjectId' => $pId));
//                    echo $stmt = $sql->getSqlStringForSqlObject($select); die;
//                    $result = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_LandOwnerDetail'))
                        ->join(array('b' => 'Proj_LBFinalizationOwnerDetail'), 'a.OwnerId=b.OwnerId', array(), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_LandBankFinalization'), 'b.FinalizationId=c.FinalizationId', array(), $select::JOIN_LEFT)
                        ->join(array('d' => 'KF_KickoffRegister'), 'd.EnquiryId=c.EnquiryId', array(), $select::JOIN_LEFT)
                        ->join(array('e' => 'proj_ProjectMaster'), 'e.KickoffId=d.KickoffId', array(), $select::JOIN_LEFT)
                        ->columns(array("OwnerName","OwnerId"))
                        ->where(array('e.ProjectId' => $pId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $ownerArr= $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $sOwnerArr=array();
                    if($rId!=0) {
                        $select = $sql->select();
                        $select->from(array('a' => 'Crm_ReserveOwner'))
                            ->columns(array("OwnerName","OwnerId"))
                            ->where(array('a.ReserveId' => $rId));
                        $stmt = $sql->getSqlStringForSqlObject($select);
                        $sOwnerArr = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    }

                    $this->_view->setTerminal(true);
                    $response = $this->getResponse()->setContent(json_encode(array("owner"=>$ownerArr,"sOwner"=>$sOwnerArr)));
                    return $response;

                } else {
                    $pId= $this->bsf->isNullCheck($postParams['projId'], 'number');

                    $select = $sql->select();
                    $select->from(array('a' => 'KF_UnitMaster'))
                        ->where(array('a.ProjectId' => $pId,'a.Status'=>'U'));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $result = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $this->_view->setTerminal(true);
                    $response = $this->getResponse()->setContent(json_encode($result));
                    return $response;
                }


            }
        }
        else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                $postParams = $request->getPost();
                // Print_r($postParams);die;
                $reservedate=$postParams['reserveDate'];
                $reservedt= date('Y-m-d', strtotime($reservedate));
                $reserve=$postParams['reserveId'];
                $reservefor=$postParams['reserve_for'];
                $proj=$postParams['projectId'];

                if($reserve==0){
                    foreach ($postParams['unitdet'] as $value) {

                        $select = $sql->insert('Crm_UnitReserve');
                        $newData = array(
                            //Lead Date Entry
                            'ReserveDate' => $reservedt,
                            'ProjectId' => $proj,
                            'UnitId' => $value,
                            'ReservedBy' => $reservefor,
                            'CreatedDate' => date('m-d-Y H:i:s')
                        );
                        $select->values($newData);
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $ReserveId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        if($reservefor=="LandOwner") {
                            foreach ($postParams['owner'] as $val) {
                                if(is_numeric($val) && $val!=0) {
                                    $select = $sql->select();
                                    $select->from(array('a' => 'Proj_LandOwnerDetail'))
                                        ->columns(array("OwnerName"))
                                        ->where(array('a.OwnerId' => $val));
                                    $stmt = $sql->getSqlStringForSqlObject($select);
                                    $result = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                    $ownerId=$val;
                                    $ownerName=$result['OwnerName'];
                                } else {
                                    $ownerId=0;
                                    $ownerName=$val;
                                }
                                $insert = $sql->insert('Crm_ReserveOwner');
                                $newData = array(
                                    //Lead Date Entry
                                    'OwnerId' => $ownerId,
                                    'OwnerName' => $ownerName,
                                    'ReserveId' => $ReserveId
                                );
                                $insert->values($newData);
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $update = $sql->update();
                        $update->table( 'KF_UnitMaster' )
                            ->set( array( 'Status' => 'R' ) )
                            ->where( array( 'UnitId' => $value ) );
                        $stmt = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query( $stmt, $dbAdapter::QUERY_MODE_EXECUTE );


                    }
                }
                else{
                    $update = $sql->update();
                    $update->table('Crm_UnitReserve')
                        ->set(array('ReservedBy' => $reservefor,'ReserveDate' => $reservedt,'ModifiedDate' => date('Y/m/d H:i:s')))
                        ->where(array('ReserveId' => $reserve));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Crm_ReserveOwner')
                        ->where(array('ReserveId'=>$reserve));
                    $DelStatement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($DelStatement, $dbAdapter::QUERY_MODE_EXECUTE);

                    if($reservefor=="LandOwner") {

                        foreach ($postParams['owner'] as $val) {
                            if(is_numeric($val) && $val!=0) {
                                $select = $sql->select();
                                $select->from(array('a' => 'Proj_LandOwnerDetail'))
                                    ->columns(array("OwnerName"))
                                    ->where(array('a.OwnerId' => $val));
                                $stmt = $sql->getSqlStringForSqlObject($select);
                                $result = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                                $ownerId=$val;
                                $ownerName=$result['OwnerName'];
                            } else {
                                $ownerId=0;
                                $ownerName=$val;
                            }
                            $insert = $sql->insert('Crm_ReserveOwner');
                            $newData = array(
                                //Lead Date Entry
                                'OwnerId' => $ownerId,
                                'OwnerName' => $ownerName,
                                'ReserveId' => $reserve
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                }
                $connection->commit();
                $this->redirect()->toRoute('crm/default', array('controller' => 'lead', 'action' => 'reserve-register'));
            }else{
                $reserveId = $this->params()->fromRoute('reserveId');
                if($reserveId != 0) {
                    $this->_view->$reserveId = $reserveId;

                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_UnitReserve'))
                        ->join(array('c' => 'KF_UnitMaster'), 'c.UnitId=a.UnitId', array('UnitNo'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_ProjectMaster'), 'd.ProjectId=a.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                        ->where(array('ReserveId' => $reserveId));
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $reserve = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if(!empty($reserve)) {
                        $this->_view->reserve = $reserve;
                        $this->_view->reserveId = $reserveId;

                    }

                }

                $select1 = $sql->select();
                $select1->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId', 'ProjectName'));
                $stmt = $sql->getSqlStringForSqlObject($select1);
                $this->_view->proj = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



            }
        }
        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

        return $this->_view;
    }
    public function reserveRegisterAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $connection->commit();
                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {

                    $connection->commit();
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {

                    $select = $sql->select();
                    $select->from(array('c' => 'Crm_UnitReserve'))
                        ->columns(array('ReserveId','ReservedBy','ReserveDate','UnitId'))
                        ->join(array('a' => 'KF_UnitMaster'), 'c.UnitId=a.UnitId', array('UnitNo'))
                        ->join(array('e' => 'Proj_ProjectMaster'), 'e.ProjectId=a.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                        ->where(array('c.DeleteFlag' => 0))
                        ->order('c.ReserveId DESC');

                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrPreBookings = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $this->_view->jsonReserve = json_encode($arrPreBookings);

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }
    public function postsalediscountRegisterAction() {

        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        // csrf validation
        $request = $this->getRequest();
        $response = $this->getResponse();
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        if ($request->isPost()
            && $viewRenderer->commonHelper()->verifyCsrf($this->params()->fromPost('csrf')) == FALSE) {
            // CSRF attack
            if($this->getRequest()->isXmlHttpRequest())	{
                // AJAX
                $response->setStatusCode(401);
                $response->setContent('CSRF attack');
                return $response;
            } else {
                // Normal
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        if($this->getRequest()->isXmlHttpRequest())	{
            // AJAX request
            if ($request->isPost()) {
                //begin trans try block example starts
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {
                    //Write your Ajax post code here

                    $connection->commit();
                    $result =  "Success";
                    $this->_view->setTerminal(true);
                    $response->setStatusCode(200);
                    $response->setContent($result);
                } catch(PDOException $e){
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }

            return $response;
        } else {
            // Normal request
            $request = $this->getRequest();
            if ($request->isPost()) {
                // POST request
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                try {


                    $connection->commit();
                } catch(PDOException $e){
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

            } else {
                // GET request

                try {
                    $select = $sql->select();
                    $select->from(array('a' => 'Crm_PostSaleDiscountRegister'))
                        ->columns(array('BookingId','PostSaleDiscountId',
                            'VocherDate' => new Expression('Convert(varchar(11), VocherDate,103)'), 'UnitId','DiscountType'=> new Expression("Case when a.PostDiscountType='R' then 'Rate' when a.PostDiscountType='L' then 'Lumpsum' else 'Percentage' end") ,'PostDiscount','PrevNetAmount','NetAmount'))
                        ->join(array('b' => 'Crm_UnitBooking'), 'a.BookingId=b.BookingId', array(), $select::JOIN_LEFT)
                        ->join(array('c' => 'Crm_Leads'), 'b.LeadId=c.LeadId', array('LeadName'), $select::JOIN_LEFT)
                        ->join(array('d' => 'KF_UnitMaster'), 'b.UnitId=d.UnitId', array('UnitName' => 'UnitNo'), $select::JOIN_LEFT);
                    $stmt = $sql->getSqlStringForSqlObject($select);
                    $arrpostsale = $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->jsonUnitpostsale = json_encode($arrpostsale);

                    $this->_view->csrf = $viewRenderer->commonHelper()->getCsrfKey();
                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
            }

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function bulkLeadMailAction() {
        // Login Authentication check
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Bulk Mail");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{

            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $superiorsUserList = $viewRenderer->commonHelper()->masterSuperior($this->auth->getIdentity()->UserId,$dbAdapter);

                //Write your Ajax post code here
                $postParam = $request->getPost();
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    $Type = $this->bsf->isNullCheck($this->params()->fromPost('type'),'string');
                    $unCheckedColumnNames = $this->bsf->isNullCheck($this->params()->fromPost('unCheckedColumnNames'),'string');
                    $userId = $this->auth->getIdentity()->UserId;
                    $results=array();
                    if($Type == 'updateColumn') {

                        $select = $sql->select();
                        $select->from('WF_GridColumnTrans')
                            ->where(array("FunctionName"=>'BulkLead','UserId'=>$userId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $resCount = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if($resCount != 0) {
                            //update
                            $update = $sql->update();
                            $update->table('WF_GridColumnTrans')
                                ->set(array('ColumnName'=>$unCheckedColumnNames))
                                ->where(array('FunctionName' =>'BulkLead','UserId'=>$userId));
                            $stmt = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        } else {
                            //insert
                            $insert = $sql->insert();
                            $insert->into( 'WF_GridColumnTrans' )
                                ->values(array('FunctionName' => 'BulkLead',
                                    'UserId' => $userId,
                                    'ColumnName' => $unCheckedColumnNames));
                            $stmt = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($stmt, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    } else {
                        $tDate = date('Y-m-d', strtotime($postParam['tDate'])) . " 23:59:59";
                        $fDate = date('Y-m-d', strtotime($postParam['fDate'])) . " 00:00:00";

                        $select = $sql->select();
                        $select->from(array("a" => 'Crm_Leads'))
                            ->columns(array('LeadId', 'LeadDate' => new Expression("FORMAT(a.LeadDate,'dd-MM-yyyy')"), 'LeadName', 'LeadType', 'Convert' => new Expression("1-1"), 'StatusId', 'Mobile', 'VIP', 'Budget' => new Expression("CAST(a.CostPreferenceFrom As Varchar) + ' - ' + CAST(a.CostPreferenceTo As Varchar)"), 'NRI', 'Converted' => new Expression("Case When LeadConvert=1 then 'Yes' else 'No' End")))
                            ->join(array("c" => "Crm_StatusMaster"), "a.StatusId=c.StatusId", array("state" => new Expression("isnull(c.Description,'')")), $select::JOIN_LEFT)
                            ->join(array("b" => "Crm_LeadTypeMaster"), "a.LeadType=b.LeadTypeId", array("LeadTypeName" => new Expression("isnull(b.LeadTypeName,'')")), $select::JOIN_LEFT)
                            ->join(array("e" => "WF_Users"), "a.ExecutiveId=e.UserId", array("ExecutiveName" => new Expression("isnull(e.EmployeeName,'')")), $select::JOIN_LEFT)
                            ->join(array("o" => "Crm_LeadFollowUp"), new Expression("o.LeadId=a.LeadId and o.Completed=0"), array("NextCallDate" => new Expression("FORMAT(o.NextCallDate,'dd-MM-yyyy')")), $select::JOIN_LEFT)
                            ->join(array("f" => "WF_Users"), "a.UserId=f.UserId", array("CreatedBy" => new Expression("isnull(f.EmployeeName,'')")), $select::JOIN_LEFT)
//                   ->join(array("i"=>"Crm_LeadPersonalInfo"), "a.LeadId=i.LeadId", array('Photo'=>new Expression("isnull(i.Photo,'')")), $select::JOIN_LEFT)
                            ->join(array("j" => "Crm_LeadCityView"), "a.LeadId=j.LeadId", array("CityName" => new Expression("isnull(j.CityName,'')")), $select::JOIN_LEFT)
                            ->join(array("k" => "Crm_LeadProjectView"), "a.LeadId=k.LeadId", array('Projects' => new Expression ("isnull(k.ProjectName,'')")), $select::JOIN_LEFT)
                            ->join(array("l" => "Crm_LeadSourceView"), "a.LeadId=l.LeadId", array('SourceName' => new Expression ("isnull(l.LeadSourceName,'')")), $select::JOIN_LEFT);
                        $select->where(array("a.ExecutiveId" => $superiorsUserList));
                        $select->where("a.LeadDate<= '$tDate' and a.LeadDate>= '$fDate'");
                        $select->order('a.LeadId desc');
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $results = json_encode($dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray());
                    }
                    $this->_view->setTerminal(true);
                    $connection->commit();
                    $response->setStatusCode(200);
                    $response->setContent($results);
                } catch (PDOException $e) {
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
            } else {
                try {
                    $fromDate = $this->params()->fromRoute('fromDate');
                    $toDate = $this->params()->fromRoute('toDate');

                    if($fromDate!=""){
                        $fromDate= strtotime(date('d-m-Y',strtotime($fromDate)));
                    } else {
                        $fromDate=strtotime(date('d-m-Y',strtotime(date('d-m-Y') .' -1 month')));

                    }
                    if($toDate!=""){
                        $toDate= strtotime(date('d-m-Y',strtotime($toDate)));
                    } else {
                        $toDate= strtotime(date('d-m-Y'));
                    }
                    if($toDate>=$fromDate) {
                        $this->_view->fromDate=date('d-m-Y',$fromDate);
                        $this->_view->toDate=date('d-m-Y',$toDate);
                    } else {
                        $this->_view->fromDate=date('d-m-Y',$fromDate);
                        $this->_view->toDate=date('d-m-Y',$fromDate);
                    }
                    $userId = $this->auth->getIdentity()->UserId;

                    $select = $sql->select();
                    $select->from('WF_GridColumnTrans')
                        ->columns(array("ColumnName"))
                        ->where(array("FunctionName"=>'BulkLead','UserId'=>$userId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $GridColumn = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $this->_view->GridColumn = $GridColumn;

                } catch(\Exception $ex) {
                    $this->_view->err = $ex->getMessage();
                    echo $ex->getMessage();
                }
                //Common function
                $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
                return $this->_view;
            }

        }
    }


    public function bulkMailSendAction() {
        // Login Authentication check
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Bulk Mail");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{

            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $postData = $request->getPost();
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                try {
                    $files = $request->getFiles();

                    $Type = $this->bsf->isNullCheck($postData['type'], 'string');
                    $results=array();

                    if($Type == "ajaxloader") {
                        $urls = array();
                        foreach($files['file'] as $doc) {
                            if($doc['name']){
                                $dir = 'public/uploads/bulkmail/';
                                $filename = $this->bsf->uploadFile($dir, $doc);
                                if($filename) {
                                    $urls[] = array('url'=>$viewRenderer->basePath. 'public/uploads/bulkmail/'. $filename,'name'=>$doc['name']);
                                }
                            }
                        }
                        $results = $urls;

                    } else if($Type == "mailRequest") {
                        $leadArray = $postData['leadArray'];
                        $select = $sql->select();
                        $select->from(array("a"=>'Crm_Leads'))
                            ->columns(array('Email'));
                        $select->where("a.LeadId IN ($leadArray)");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $leadMail = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                        $content = $this->bsf->isNullCheck($postData['compose-textarea'], 'string');
                        $subject= $this->bsf->isNullCheck($postData['subject'], 'string');

                        $mailData=$content;
                        $i=0;
                        $attachments=array();
                        if(isset($postData['fileattached']) && $postData['fileattached'] != '') {
                            foreach ($postData['fileattached'] as $url) {
                                $i++;
                                $attachment = file_get_contents($url);
                                $attachment_encoded = base64_encode($attachment);
                                $attachments[] = array(
                                    'name' => 'attachment_' . $i,
                                    'type' => mime_content_type($url),
                                    'content' => $attachment_encoded
                                );
                            }
                        }
                        $recipients = array();
                        if(isset($leadMail) && count($leadMail)>0) {
                            foreach($leadMail as $lead) {
                                $recipients[] = array('email' => $lead['Email'],'type' => 'to');
                            }
                        }
                        $sm = $this->getServiceLocator();
                        $config = $sm->get('application')->getConfig();
                        if(count($recipients)>0) {
                            $viewRenderer->MandrilSendMail()->sendMailWithMultipleAttachmentWithoutTemplate($recipients,$config['general']['mandrilEmail'],$subject, $attachments, $mailData);
                        }
                    }

                    $this->_view->setTerminal(true);
                    $connection->commit();
                    $response->setStatusCode(200);
                    $response->setContent(json_encode($results));
                } catch (PDOException $e) {
                    $connection->rollback();
                    $response->setStatusCode(500);
                    $response->setContent('Internal error!');
                }
            } else {
                // GET request
                $response->setStatusCode(405);
                $response->setContent('Method not allowed!');
            }
            return $response;

        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postParam = $request->getPost();
                $Type = $this->bsf->isNullCheck($postParam['type'],'string');

                if($Type=='convert') {
                    $this->_view->leadArray=$postParam['Extra'];

                }
            }
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }

    }



    public function mailCommanAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postData = $request->getPost();
                $files = $request->getFiles();

                $Type = $this->bsf->isNullCheck($postData['type'], 'string');
                $this->_view->setTerminal(true);
                $result=array();
                if($Type == "ajaxloader") {
                    $urls = array();
                    foreach ($files['file'] as $doc) {
                        if ($doc['name']) {
                            $dir = 'public/uploads/tmp/';
                            $filename = $this->bsf->uploadFile($dir, $doc);
                            if ($filename) {
                                // update valid files only
                                $urls[] = $viewRenderer->basePath . 'public/uploads/tmp/' . $filename;
//                                $attachment = file_get_contents($url);
//                                $attachment_encoded = base64_encode($attachment);
//                                $attachments[] = array(
//                                    'name' => $doc['name'],
//                                    'type' => mime_content_type($url),
//                                    'content' =>$attachment_encoded
//                                );
                            }
                        }
                    }
                    $result['url'] = $urls;
                    $response = $this->getResponse()->setContent(json_encode($result));
                    return $response;

                }  else if($Type == "mailRequest") {
                    $ToMail = $this->bsf->isNullCheck($postData['to'], 'string');
                    $content = $this->bsf->isNullCheck($postData['compose-textarea'], 'string');
                    $subject= $this->bsf->isNullCheck($postData['subject'], 'string');

                    $mailData=$content;

                    $i=0;
                    $attachments=array();
                    if(isset($postData['fileattached']) && $postData['fileattached'] != '') {
                        foreach ($postData['fileattached'] as $url) {
                            $i++;
                            $attachment = file_get_contents($url);
                            $attachment_encoded = base64_encode($attachment);
                            $attachments[] = array(
                                'name' => 'attachment_' . $i,
                                'type' => mime_content_type($url),
                                'content' => $attachment_encoded
                            );
                        }
                    }

                    $recipients = array(array('email' => $ToMail,'type'=>'to'));
                    if(isset($postData['Cc']) && $postData['Cc'] != '') {
                        foreach($postData['Cc'] as $Ccdoc) {
                            $recipients[] = array('email' => $Ccdoc,'type' => 'cc');
                        }
                    }
                    if(isset($postData['Bcc']) && $postData['Bcc'] != '') {
                        foreach ($postData['Bcc'] as $Bccdoc) {
                            $recipients[] = array('email' => $Bccdoc, 'type' => 'bcc');
                        }
                    }
                    $sm = $this->getServiceLocator();
                    $config = $sm->get('application')->getConfig();
                    $viewRenderer->MandrilSendMail()->sendMailWithMultipleAttachmentWithoutTemplate($recipients,$config['general']['mandrilEmail'],$subject, $attachments, $mailData);
                    $response = $this->getResponse()->setContent(json_encode($result));
                    return $response;
                } else {
                    $this->_view->responseLead = $this->bsf->isNullCheck($postData['mail'], 'string');
                    return $this->_view;
                }

                // $response = $this->getResponse()->setContent($responseLead);
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here

            }

            //begin trans try block example starts
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $connection->commit();
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
            //begin trans try block example ends

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }
}