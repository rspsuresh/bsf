<link rel="stylesheet" type="text/css" href="<?php echo $this->basePath(); ?>/css/project.css" />
<script type="text/javascript" src="<?php echo $this->basePath(); ?>/js/select2.full.min.js"></script>
<link type="text/css" rel="stylesheet" href="<?php echo $this->basePath(); ?>/css/select2.min.css"/>
<link rel="stylesheet" href="<?php echo $this->basePath(); ?>/css/workorder.css"/>
<div class="content_wrapper padlr0">
<div class="container-fluid padlr0">
<div class="col-lg-12">
    <h1 data-bsfhead="Block">Block</h1>
</div>
<div class="col-lg-12 clear">
<div class="col-lg-12 clear">
<div class="kickoff_area col-lg-12 clear">
<div class="col-lg-12 clear padlr0">
<div class="col-lg-12 col-md-12 col-sm-12 cnt_sliders padlr0">
<?php if(isset($unitBooking)): ?>
<form id="finalisation-form" method="post">
<input type="hidden" name="csrf" value="<?php echo isset($csrf) ? $csrf : ''; ?>">
<input type="hidden" name="booking_id" value="<?php echo $unitBooking['BlockId']; ?>">
<div id="carousel" class="carousel slide" data-ride="carousel">
<!-- Wrapper for slides -->
<div class="carousel-inner" role="listbox">
<!--step 1-->
<div class="item active">
    <div class="col-lg-6">
        <div class="float_l">
           <label for="booking_no" class="bk_lbl bk_lbl_inpt">Booking no <span class="colon_r">:</span></label>
            <input type="text" class="bk_lbl_inpt inputbg_ef" data-bsfshare="BookingNo" name="booking_no" id="booking_no" value="<?php echo $unitBooking['BlockNo']; ?>"/>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="float_r">
            <label for="booking_date" class="bk_lbl bk_lbl_inpt"><span class="bkspan_calendar"><i class="fa fa-calendar-o"></i></span> Booking Date <span class="colon_r">:</span></label>
           <input type="text" class="date_picker bk_lbl_inpt bk_inpt inputbg_ef" data-bsfshare="BookingDate"name="booking_date" id="booking_date" value="<?php echo date('d-m-Y', strtotime($unitBooking['BookingDate'])); ?>"/>
        </div>
    </div>
    <div class="col-lg-6 m_tb10">
        <div class="col-lg-8 col-lg-offset-2">
            <div class="row">
                <div class="form-group m_top20 col-lg-12 padtop20">
                    <input type="text" name="project_name" class="form-control lbl_move" data-bsfshare="ProjectName" label="Project Name"
                           value="<?php echo $unitBooking['ProjectName']; ?>" disabled>
                    <input type="hidden" name="project_id" id="project_id" value="<?php echo $unitBooking['ProjectId']; ?>">
                </div>
                <div class="col-lg-12 padtop20">
                    <input type="text" name="unit_no" class="form-control lbl_move" label="Unit No" data-bsfshare="UnitNo"
                           value="<?php echo $unitBooking['UnitNo']; ?>" disabled>
                    <input type="hidden" name="unit_id" id="unit_id" value="<?php echo $unitBooking['UnitId']; ?>">
                </div>
                <div class="form-group col-lg-12 padtop20">
                    <div class="radio_check col-lg-11 col-lg-offset-1 col-md-8 col-md-offset-2">
                        <p class="col-lg-6">
                            <input type="radio" name="buyer_investor" id="buyer" value="B"
                                <?php echo ($unitBooking['CustomerType'] == 'B')?'checked':''; ?>>
                            <label for="buyer">Buyer</label>
                        </p>

                        <p class="col-lg-6">
                            <input type="radio" name="buyer_investor" id="investor" value="I"
                                <?php echo ($unitBooking['CustomerType'] == 'I')?'checked':''; ?>>
                            <label for="investor">Investor</label>
                        </p>
                    </div>
                </div>
                <div id="unitprice-wrapper" class="form-group col-lg-12 padtop20 hide animated fadeInUp">
                    <input type="text" data-bsfshare="UnitRate" name="unit_rate" id="unit_rate" class="form-control lbl_move"
                     value="<?php echo $unitBooking['Rate']; ?>" label="Unit Rate (Per Sq.ft)" readonly />
                </div>
                <div id="discount-type-wrapper" class="form-group col-lg-12 padtop10">
                    <select id="discount_type" name="discount_type" class="form-control single_dropdown lbl_move plan_disabled"
                            label="Select Discount Type" data-bsfshare="DiscountType" style="width:100%;">
                        <option value=""></option>
                        <option value="R" <?php echo (trim($unitBooking['DiscountType']) == 'R')?'selected':''; ?>>Rate/Sq.ft</option>
                        <option value="L" <?php echo (trim($unitBooking['DiscountType']) == 'L')?'selected':''; ?>>Lumpsum</option>
                    </select>
                </div>
                <div id="lumpsum-type-wrapper" class="form-group col-lg-12 padtop10 animated fadeInUp <?php echo ($unitBooking['DiscountType'] != 'L')?'hide':''; ?>">
                    <div class="radio_check col-lg-11 col-lg-offset-1 col-md-8 col-md-offset-2">
                        <p class="col-lg-6">
                            <input type="radio" class="plan_disabled" name="lumpsum_type" id="lumpsum_type_overall" value="O" <?php echo ($unitBooking['LumpsumReceiptId'] == 0)?'checked':''; ?>>
                            <label for="lumpsum_type_overall">OverAll</label>
                        </p>

                        <p class="col-lg-6">
                            <input type="radio" class="plan_disabled" name="lumpsum_type" id="lumpsum_type_receiptwise" value="R" <?php echo ($unitBooking['LumpsumReceiptId'] != 0)?'checked':''; ?>>
                            <label for="lumpsum_type_receiptwise">Receipt wise</label>
                        </p>
                    </div>
                </div>
                <div id="lumpsum-receipt-wise-wrapper" class="form-group col-lg-12 padtop10 animated fadeInUp <?php echo ($unitBooking['LumpsumReceiptId'] == 0)?'hide':''; ?>">
                    <select id="lumpsum_receipt_wise" name="lumpsum_receipt_wise" class="plan_disabled form-control single_dropdown lbl_move"
                            label="Select Receipt Type" data-bsfshare="ReceiptType" style="width:100%;">
                        <option value=""></option>
                        <?php foreach($arrReceiptTypes as $receipt): ?>
                            <option value="<?php echo $receipt['ReceiptTypeId']; ?>" data-type="<?php echo $receipt['Type']; ?>" <?php echo ($unitBooking['LumpsumReceiptId'] == $receipt['ReceiptTypeId'])?'selected':''; ?>><?php echo $receipt['ReceiptTypeName']; ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div id="discount-wrapper" class="form-group col-lg-12 padtop10 animated fadeInUp <?php echo (trim($unitBooking['DiscountType']) == '')?'hide':''; ?>">
                    <input type="text" name="discount" id="discount" class="plan_disabled form-control lbl_move"
                           label="Discount" data-bsfshare="Discount" onkeypress="return isDecimal(event, this)"
                           value="<?php echo ($unitBooking['Discount'] > 0)?$unitBooking['Discount']:''; ?>"/>
                </div>
				 <div id="valid-wrapper" class="form-group col-lg-12 padtop10 animated fadeInUp">
                     <input type="text" data-bsfshare="Valid Upto" class="datepickerinput form-control lbl_move" readonly="readonly" name="valid_upto" id="valid_upto"  value="<?php echo  date('d-m-Y', strtotime($unitBooking['ValidUpto'])); ?>" label="Valid Upto" />
                     </div>
            </div>
<!--            </form>-->
        </div>
    </div>
    <div id="unit-detail-wrapper" class="col-lg-6 m_tb10 hide">
        <div class="form-group">
            <div class="col-lg-12">
                <div class="row stginner_h5">
                    <h5>Unit Detail</h5>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Unit Type</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_UnitTypeName"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Block Name</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_BlockName"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label
                            class="col-lg-5 padlr0 col-md-5 col-sm-5 col-md-4 txt_left control-label">Level</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_FloorName"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Area</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p><span id="unitdetail_UnitArea"></span> Sq.ft</p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Rate</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_Rate"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Base Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_BaseAmt"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Advance
                            Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_AdvAmount"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Land Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_LandAmount"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Construction Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_ConstructionAmount"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">UDS Land
                            Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_UDSLandArea"></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Other Cost
                            Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_OtherCostAmt"></p>
                        </div>
                    </div>
                </div>
             <!--   <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Gross Amont</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_GrossAmount"></p>
                        </div>
                    </div>
                </div>-->
                <div class="row">
                    <div class="col-lg-12">
                        <label class="col-lg-5 padlr0 col-md-5 col-sm-5 txt_left control-label">Qualifier
                            Amount</label>

                        <div class="col-lg-7 col-md-7 col-sm-7 padlr0">
                            <p id="unitdetail_QualifierAmount"></p>
                        </div>
                    </div>
                </div>
                <div class="net_amnt">
                    <h2>Gross Amount</h2>

                    <h1>Rs. <span id="unitdetail_NetAmt"></span></h1>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
        <ul>
            <li class="save_btn float_l">
                <a href="<?php echo $this->basePath(); ?>/crm/lead/block-register" class="ripple steps_btn">Back</a>
            </li>
            <li class="save_btn float_r">
                <input type="submit" value="block" />
            </li>
        </ul>
    </div>
</div>
</div>
</div>
</div>
</div>
</form>
<?php elseif(isset($err)): ?>
    <h1 class="text-center" style="margin: 150px auto;">Error: <?php echo $err; ?></h1>
<?php endif; ?>
</div>
</div>
</div>
</div>
</div>


<script type="text/javascript">

$(function () {
    var dt=new Date();
    dt=(dt.getDate()+1)+ "-" + (dt .getMonth()+1) + "-" + dt .getFullYear();
    $('.datepickerinput').datepicker({
        format: "dd-mm-yyyy",
        startDate:dt,
        //todayBtn: true,
        orientation: "top auto",
        autoclose: true
    });
    var $project_id = $('#project_id'),
        $unitpriceWrapper = $('#unitprice-wrapper'),
        $discountWrapper = $('#discount-wrapper'),
        $unit_rate = $('#unit_rate'),
        $discount = $('#discount'),
        $unitDetailWrapper = $('#unit-detail-wrapper'),
        $carousel = $('#carousel'),
        $payment_schedule = $('#payment_schedule'),
        $otherCostWrapper = $('#other-cost-wrapper'),
        $unCheckedUI = $('#unCheckedUl'),
        $checkedUI = $('#checkedUl'),
        $paymentScheduleContainer = $('#payment-schedule-container'),
        $paymentScheduleWrapper = $('#payment-schedule-wrapper'),
        $buyer_no = $('#buyer_no'),
        $buyer_yes_no = $('input[name="buyer_yes_no"]'),
        $brokerInfoWrapper = $('#broker-info-wrapper'),
        $broker_name = $('#broker_name'),
        $broker_id = $('#broker_id'),
        $commission = $('#commission'),
        $amount = $('#amount'),
        $unitdetail_NetAmt = $('#unitdetail_NetAmt'),
        $loan_no = $('#loan_no'),
        $loanApprovedWrapper = $('#loan-approved-wrapper'),
        $loanApprInfoWrapper = $('#loan-approved-info-wrapper'),
        $loanApprNo = $('#loan_approved_no'),
        $proposal_no = $('#proposal_no'),
        $bank_name = $('#bank_name'),
        $loan_amt = $('#loan_amount'),
        $sanction_date = $('#sanction_date'),
        $checkListTable = $('#check-list-table'),
        $executive_name = $('#executive_name'),
        $executive_id = $('#executive_id'),
        $registration_name = $('#registration_name'),
        $adv_amount = $('#adv_amount'),
        $updateBtn = $('#update-btn'),
        $booking_date = $('#booking_date'),
        $booking_no = $('#booking_no'),
        $paymentScheduleTemplate = $('#payment-schedule-template'),
        $discountTypeWrapper = $('#discount-type-wrapper'),
        $discount_type = $('#discount_type'),
        $unit_id = $('#unit_id'),
        $lumpsum_receipt_wise = $('#lumpsum_receipt_wise'),
        $lumpsumTypeWrapper = $('#lumpsum-type-wrapper'),
        $lumpsumReceiptWiseWrapper = $('#lumpsum-receipt-wise-wrapper'),
        $lumpsumType = $lumpsumTypeWrapper.find('input[name="lumpsum_type"]'),
        $constructionAmt = $('#unitdetail_ConstructionAmount'),
        $landAmt = $('#unitdetail_LandAmount'),
        $unitdetail_UnitArea = $('#unitdetail_UnitArea'),
        $unitdetail_Rate = $('#unitdetail_Rate'),
        $unitdetail_BaseAmt = $('#unitdetail_BaseAmt'),
        $unitdetail_GrossAmt = $('#unitdetail_GrossAmount'),
        $unitdetail_OtherCostAmt = $('#unitdetail_OtherCostAmt');

    bindBookingNo_onChange();

    bindDiscount_onChange();
    bindBookingDate_onChange();

    bindNextBtn_onClick();

    bindPaymentSchedule_onChange();

    bindBroker_onChange();
    bindBrokerCommission_onChange();

    bindApplyLoan_onChange();
    bindLoanApproved_onChange();

    bindBrokerName_autoComplete();
    bindExecutiveName_autoComplete();
    bindUpdateBtn_onClick();

    bindDiscountType_onChange();
    bindOtherCost_checkList();
    bindLumpsumType_onChange();
    bindLumpsumReceiptWise_onChange();

    bindCheckListExecutiveName_autoComplete();
    bindCheckList_onSelect();

    bindExpandMainTr();
    bindExpandMainTrInput();

    // Qaulifier TR
    bindRQualExpandTr();
    bindRQualExpandTrInput();
    bindQualExpandTr();
    bindQualExpandTrInput();

    bindTaxCalculation();

    init();

    function init() {

        var $tarPSTable = $paymentScheduleWrapper.find('.payment-schedule[data-id="'+$payment_schedule.val()+'"]');
        fillRowRefEditMode();
        calcTaxForPaymentSchedule($tarPSTable);

        $carousel.carousel({
            interval: false
        });

        load_unitDetails(function(){

            var discount = parseFloat($discount.val()),
                $unitdetail_UnitArea = $('#unitdetail_UnitArea'),
                area = parseFloat($unitdetail_UnitArea.attr('data-original-value')),
                rate = parseFloat($unitdetail_Rate.attr('data-original-value')),
                baseAmt = parseFloat($unitdetail_BaseAmt.attr('data-original-value')),
                grossAmt = parseFloat($unitdetail_GrossAmt.attr('data-original-value')),
                netAmt = parseFloat($unitdetail_NetAmt.attr('data-original-value')),
                otherCostAmt = parseFloat($unitdetail_OtherCostAmt.attr('data-original-value'));

            if(!isNaN(discount)) {
                $discount.trigger('change');
            }

            $unitDetailWrapper.removeClass('hide');
        });

        $payment_schedule.select2();
        $discount_type.select2();
        $lumpsum_receipt_wise.select2();
    }

    function bindCheckList_onSelect() {
        $checkListTable.on('change', 'tr td input[type="checkbox"]', function() {
            var $this = $(this),
                $tarTr = $this.closest('tr');

            if($this.is(':checked')) {
                $tarTr.find('input[type="text"]').removeAttr('disabled').removeClass('hide');
                $tarTr.find('input[type="hidden"]').removeAttr('disabled');
                $tarTr.find('.date_icon').removeClass('hide');
            } else {
                $tarTr.find('input[type="text"]').attr('disabled', true).val('').addClass('hide');
                $tarTr.find('input[type="hidden"]').attr('disabled', true).val('');
                $tarTr.find('.date_icon').addClass('hide');
            }
        });
    }

    function bindCheckListExecutiveName_autoComplete() {

        $checkListTable.find('tr td .executive-name').autocomplete({
            lookup: <?php echo (isset($arrExecutives))?json_encode($arrExecutives):'[]'; ?>,
            lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                if (queryLowerCase == '*') {
                    return suggestion.value;
                } else {
                    var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
                    return re.test(suggestion.value);
                }
            }, onSelect: function (suggestion) {
                if (suggestion) {
                    $(this).closest('td').find('.executive-id').val(suggestion.data);

                    removeError($(this));
                }
            }, onSearchStart: function (suggestion) {
                $(this).closest('td').find('.executive-id').val('');
            }, onSearchComplete: function (query, suggestions) {
                if (!suggestions.length) {
                    $(this).closest('td').find('.executive-id').val('');
                    showError($(this), 'Executive Name not found!');
                } else {
                    removeError($(this));
                }
            }
        });
    }

    function bindBookingNo_onChange() {
        $booking_no.on('change', function() {

            checkBookingNo(function(isSuccess, msg) {
                if(isSuccess == false) {
                    alert(msg);
                    $booking_no.focus();
                }
            });
        });

    }

    function checkBookingNo(callback) {
        var booking_no = $booking_no.val().trim();
        if(booking_no.length <= 0) {
            callback(false, 'Booking No is required!');
            return false;
        } else {
            $.ajax({
                url: getBaseURL() + 'crm/lead/check-booking-no',
                data: {csrf: "<?php echo isset($csrf)?$csrf:''; ?>", BookingNo: booking_no},
                type: 'POST',
                success: function (data, status, xhr) {

                    if (data.unit_booking == false) {
                        $booking_no.addClass('already-exists');
                        callback(data.unit_booking, 'Booking No Already exists!');
                        return data.unit_booking;
                    } else {
                        $booking_no.removeClass('already-exists');
                        callback(true);
                        return true;
                    }
                },
                error: function (xhr, status, error) {
                    alert(xhr.responseText);
                }
            });
        }
    }

    function bindApplyLoan_onChange() {
        $('input[name="loan_yes_no"]').on('change', function () {
            if ($loan_no.is(':checked')) {
                $loanApprInfoWrapper.addClass('hide');
                $loanApprovedWrapper.addClass('hide');
                resetLoanData();
            } else {
                $loanApprInfoWrapper.removeClass('hide');
                $loanApprovedWrapper.removeClass('hide');

                $('input[name="loan_approved_yes_no"]').trigger('change');
            }

        });
    }

    function bindLoanApproved_onChange() {
        $('input[name="loan_approved_yes_no"]').on('change', function () {
            if ($loanApprNo.is(':checked')) {
                $loanApprInfoWrapper.addClass('hide');
                resetLoanData();
            } else {
                $loanApprInfoWrapper.removeClass('hide');
            }
        });
    }

    function resetLoanData() {
        $proposal_no.val('');
        $bank_name.val('');
        $loan_amt.val('');
        $sanction_date.val('');
    }

    function bindBroker_onChange() {
        $buyer_yes_no.on('change', function () {

            if ($buyer_no.is(':checked')) {
                $brokerInfoWrapper.addClass('hide');
                $broker_name.val('');
                $broker_id.val('');
                $commission.val('');
                $amount.val('');
            } else {
                $brokerInfoWrapper.removeClass('hide');
            }
        });
    }

    function bindBrokerCommission_onChange() {
        $commission.on('change', function () {
            var commission = parseFloat($commission.val());
            if (isNaN(commission)) {
                return;
            }
            var amount = (parseFloat($unitdetail_NetAmt.text()) * commission) / 100;
            $amount.val(amount.toFixed(2));
        });
    }

    function bindPaymentSchedule_onChange() {
        $payment_schedule.on('change', function () {
            var payment_schedule = $payment_schedule.val();

            removeError($payment_schedule);

            showPaymentScheduleDetails(function() {
                $otherCostWrapper.removeClass('hide');
                $paymentScheduleContainer.removeClass('hide');
            });

        });
    }

    function bindOtherCost_checkList() {
        $('.other-cost input:checkbox').bind('change', function () {
            var current = $(this).closest('li');
            if (current.find("input:checkbox").is(':checked')) {
                var prependToDiv = $('#checkedUl');
                current.animate({
                    top: -30,
                    left: prependToDiv.offset().left
                }, 200, function () {
                    current.prependTo(prependToDiv).css({
                        top: 'auto',
                        left: 'auto'
                    });
                });
            } else {
                current.animate({
                    top: -30,
                    left: -$unCheckedUI.offset().left
                }, 200, function () {
                    current.prependTo($unCheckedUI).css({
                        top: 'auto',
                        left: 'auto'
                    });
                });
            }
        });
    }

    function bindExecutiveName_autoComplete() {
        $executive_name.autocomplete({
            lookup: <?php echo (isset($arrExecutives))?json_encode($arrExecutives):'[]'; ?>,
            lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                if (queryLowerCase == '*') {
                    return suggestion.value;
                } else {
                    var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
                    return re.test(suggestion.value);
                }
            }, onSelect: function (suggestion) {
                if (suggestion) {
                    $executive_id.val(suggestion.data);

                    removeError($(this));
                }
            }, onSearchStart: function (suggestion) {
                $executive_id.val('');
            }, onSearchComplete: function (query, suggestions) {
                if (!suggestions.length) {
                    $executive_id.val('');
                    showError($(this), 'Executive Name not found!');
                } else {
                    removeError($(this));
                }
            }
        });
    }

    function bindBrokerName_autoComplete() {
        $broker_name.autocomplete({
            lookup: <?php echo (isset($arrBrokers))?json_encode($arrBrokers):'[]'; ?>,
            lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                if (queryLowerCase == '*') {
                    return suggestion.value;
                } else {
                    var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
                    return re.test(suggestion.value);
                }
            }, onSelect: function (suggestion) {
                if (suggestion) {
                    $broker_id.val(suggestion.data);

                    removeError($(this));
                }
            }, onSearchStart: function (suggestion) {
                $broker_id.val('');
            }, onSearchComplete: function (query, suggestions) {
                if (!suggestions.length) {
                    $broker_id.val('');
                    showError($(this), 'Broker Name not found!');
                } else {
                    removeError($(this));
                }
            }
        });
    }

    function bindUpdateBtn_onClick() {

        $updateBtn.on('click', function (ev) {
            ev.preventDefault();

            validate(function (isSuccess) {
                if (isSuccess) {
                    $('#finalisation-form').submit();
                }
            });
        });

        function validate(callback) {
            var reg_name = $registration_name.val().trim(),
                exe_name = $executive_name.val().trim(),
                exe_id = parseInt($executive_id.val()),
                adv_amt = parseFloat($adv_amount.val()),
                net_amt = parseFloat($('#unitdetail_NetAmt').text());

            removeError($registration_name);
            removeError($executive_name);
            removeError($adv_amount);

            if (reg_name.length <= 0) {
                showError($registration_name, 'Registration Name is required!');
                callback(false);
                return false;
            } else if (exe_name.length <= 0) {
                showError($executive_name, 'Executive Name is required!');
                callback(false);
                return false;
            } else if (isNaN(exe_id)) {
                showError($executive_name, 'Invalid Executive Name!');
                callback(false);
                return false;
            } else if (isNaN(adv_amt)) {
                showError($adv_amount, 'Advance amount is required!');
                callback(false);
                return false;
            } else if(adv_amt > net_amt) {
                showError($adv_amount, 'Advance amount should not exceed net amount!');
                callback(false);
                return false;
            } else {
                callback(true);
                return true;
            }
        }
    }

    function bindNextBtn_onClick() {
        $('.carousel-next-btn').on('click', function (ev) {
            ev.preventDefault();

            var stepno = parseInt($(this).attr('data-stepno'));
            switch (stepno) {
                case 2:
                    validate_step1(function (isSuccess) {
                        if (isSuccess) {
                            $payment_schedule.trigger('change');
                            $carousel.carousel('next');
                        }
                    });
                    break;
                case 3:
                    validate_step2(function (isSuccess) {
                        if (isSuccess) {
                            $carousel.carousel('next');
                        }
                    });
                    break;
                case 4:
                    validate_step3(function (isSuccess) {
                        if (isSuccess) {
                            $carousel.carousel('next');
                        }
                    });
                    break;
                case 5:
                    validate_step4(function (isSuccess) {
                        if (isSuccess) {
                            $carousel.carousel('next');
                        }
                    });
                    break;
                case 6:
                    validate_step5(function (isSuccess) {
                        if (isSuccess) {
                            $carousel.carousel('next');
                        }
                    });
                    break;
            }
        });
    }

    function validate_step1(callback) {
        var booking_no = $booking_no.val().trim(),
            booking_date = $booking_date.val().trim(),
            unitRate = parseFloat($unit_rate.val()),
            discount = parseFloat($discount.val());

        $discount.trigger('change');

        if(booking_no.length <= 0) {
            alert('Booking No is required!');
            $booking_no.focus();

            callback(false);
            return false;
        } else if($booking_no.hasClass('already-exists')) {
            alert('Booking No already exists!');
            $booking_no.focus();

            callback(false);
            return false;
        } else if(booking_date.length <= 0) {
            alert('Booking Date is required!');
            $booking_date.focus();

            callback(false);
            return false;
        } else if ($discount_type.val() != '' && isNaN(discount)) {
            showError($discount, 'Discount is required!');
            $discount.focus();

            callback(false);
            return false;
        } else if($discount.hasClass('error')) {
            callback(false);
            return false;
        } else {
            callback(true);
            return true;
        }
    }
function bindDiscount_onChange() {
        $discount.on('change', function () {

            removeError($discount);

            var discount = parseFloat($discount.val()),
                area = parseFloat($unitdetail_UnitArea.attr('data-original-value')),
                rate = parseFloat($unitdetail_Rate.attr('data-original-value')),
                baseAmt = parseFloat($unitdetail_BaseAmt.attr('data-original-value')),
                grossAmt = parseFloat($unitdetail_GrossAmt.attr('data-original-value')),
                netAmt = parseFloat($unitdetail_NetAmt.attr('data-original-value')),
                otherCostAmt = parseFloat($unitdetail_OtherCostAmt.attr('data-original-value'));

            $unitdetail_Rate.text(sanitizeNumber(rate,2,true));
            $unitdetail_BaseAmt.text(sanitizeNumber(baseAmt,2,true));
            $unitdetail_GrossAmt.text(sanitizeNumber(grossAmt,2,true));
            $unitdetail_NetAmt.text(sanitizeNumber(netAmt,2,true));
            $paymentScheduleWrapper.html('');

            if (isNaN(discount) ) {
                return;
            }
            if ($discount_type.val() == 'L') {
                // lumpsum
                var lumpsumType = $lumpsumType.filter(':checked').val();
                if (lumpsumType == 'O') {
                    // overall
                    if(discount > baseAmt) {
                        showError($discount, 'Discount should be lesser than Base Amount!');
                        return;
                    }

                    baseAmt = baseAmt - discount;
                    grossAmt = baseAmt;
                    netAmt = grossAmt;
                    if (!isNaN(otherCostAmt)) {
                        grossAmt = baseAmt + otherCostAmt;
                        netAmt = grossAmt;
                    }
                } else {
                    // receipt wise
                    var receiptType = $lumpsum_receipt_wise.val();
                    if(receiptType.length <= 0) {
                        showError($lumpsum_receipt_wise, 'Select Receipt Type!');
                        return;
                    }

                    var $selReceiptType = $lumpsum_receipt_wise.find('option:selected'),
                        selReceipt = $selReceiptType.attr('data-type');

                    if(selReceipt == 'C') {
                        var constAmt = parseFloat($constructionAmt.attr('data-original-value'));
                        if(discount > constAmt) {
                            showError($discount, 'Discount should be lesser than Construction Amount!');
                            return;
                        }
                        constAmt -= discount;
                        $constructionAmt.text(constAmt.toFixed(2));
                    } else if(selReceipt == 'L') {
                        var landAmt = parseFloat($landAmt.attr('data-original-value'));
                        if(discount > landAmt) {
                            showError($discount, 'Discount should be lesser than Land Amount!');
                            return;
                        }
                        landAmt -= discount;
                        $landAmt.text(sanitizeNumber(landAmt,2,true));
                    }

                    baseAmt -= discount;
                }
            } else if ($discount_type.val() == 'R') {
                // unit rate
                if (discount > rate) {
                    showError($discount, 'Discount should be lesser than Unit rate!');
                    return;
                } else {
                    rate = rate - discount;
                    baseAmt = rate * area;
                }
            }

            grossAmt = baseAmt;
            netAmt = grossAmt;
            if (!isNaN(otherCostAmt)) {
                grossAmt = baseAmt + otherCostAmt;
                netAmt = grossAmt;
            }

            $unitdetail_Rate.text(sanitizeNumber(rate,2,true));
            $unitdetail_BaseAmt.text(sanitizeNumber(baseAmt,2,true));
            $unitdetail_GrossAmt.text(sanitizeNumber(grossAmt,2,true));
            $unitdetail_NetAmt.text(sanitizeNumber(netAmt,2,true));
        });
    }

    function bindBookingDate_onChange() {
        $booking_date.on('change', function() {
            $paymentScheduleWrapper.html('');
        });
    }

    function bindDiscountType_onChange() {
        $discount_type.on('change', function() {

            var discountType = $discount_type.val().trim();

            $discountWrapper.addClass('hide');
            $lumpsumTypeWrapper.addClass('hide');
            $lumpsumReceiptWiseWrapper.addClass('hide');

            $discount.val('').trigger('change');
            $lumpsumType.removeAttr('checked');
            if(discountType.length > 0 ) {
                if(discountType == 'L') {
                    $lumpsumTypeWrapper.removeClass('hide');
                } else {
                    $discountWrapper.removeClass('hide');
                }
            }
        });
    }

    function bindLumpsumType_onChange() {
        $lumpsumType.on('change', function() {

            var lumpsumType = $(this).val();
            if(lumpsumType == 'O') {
                $discountWrapper.removeClass('hide');
                $lumpsumReceiptWiseWrapper.addClass('hide');
            } else {
                $discountWrapper.addClass('hide');
                $lumpsumReceiptWiseWrapper.removeClass('hide');
            }
            $lumpsum_receipt_wise.find('option').removeAttr('selected');
            $discount.val('').trigger('change');
        });
    }

    function bindLumpsumReceiptWise_onChange() {
        $lumpsum_receipt_wise.on('change', function() {

            var receiptWise = $(this).val();
            if(receiptWise.length > 0) {
                $discountWrapper.removeClass('hide');
            } else {
                $discountWrapper.addClass('hide');
            }
            $discount.val('').trigger('change');
        });
    }

   

    function load_unitDetails(callback) {

        var unit_id = $unit_id.val();
        if (/^\d+$/.test(unit_id) === false) {
            return;
        }

        $.ajax({
            url: getBaseURL() + 'crm/lead/unitdetail',
            data: {csrf: "<?php echo isset($csrf)?$csrf:''; ?>", UnitId: unit_id},
            type: 'POST',
            success: function (data, status, xhr) {

                $.each(data.unit_detail, function (index, detail) {
                    var $tarDetail = $unitDetailWrapper.find('#unitdetail_' + index);

                    if (detail == 0 || detail == null || detail.trim() == '') {
                        $tarDetail.closest('.row').addClass('hide');
                    } else {
                        $tarDetail.closest('.row').removeClass('hide');
                        $tarDetail.text(detail).attr('data-original-value', detail);
                    }
					if(index!="NetAmt") {
                            $tarDetail.text(detail).attr('data-original-value', detail);
                        } else {
                            $tarDetail.text(sanitizeNumber(detail,2,true)).attr('data-original-value', detail);
                        }
					if(index=="AdvAmount" || index=="UDSLandArea" || index=="BaseAmt" || index=="GrossAmount" || index=="LandAmount" || index=="Rate" || index=="ConstructionAmount" || index=="GuideLinevalue" || index=="MarketLandValue" || index=="OtherCostAmt" || index=="QualifierAmount") {
                            $tarDetail.text(sanitizeNumber(detail,2,true)).attr('data-original-value', detail);
                        } 
                });

                if (callback) {
                    callback();
                }
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
            }
        });
    }

    function bindExpandMainTr() {
        $paymentScheduleWrapper.on('click', '.mainTr', function(e){
            e.preventDefault();
            if (!$(this).closest("tr").next(".subTr").is(":visible")) {
                closeMainTr();
                $(this).closest("tr").next(".subTr").show();
                $(this).closest("tr").next(".subTr").find(".subDiv").slideDown("slow");
                $(this).find("i").addClass("tform");
            }
            else {
                $(this).closest("tr").next(".subTr").find(".subDiv").slideUp("slow");
                $(this).closest("tr").next(".subTr").slideUp("slow");
                $(this).find("i").removeClass("tform");
            }
        });
    }

    function bindExpandMainTrInput() {
        $paymentScheduleWrapper.on('focus', '.mainTrInput', function() {
            if (!$(this).closest("tr").next(".subTr").is(":visible")) {
                closeMainTr();
                $(this).closest("tr").next(".subTr").show();
                $(this).closest("tr").next(".subTr").find(".subDiv").slideDown("slow");
            }
        });
    }

    function closeMainTr() {
        var $mainTr = $(".mainTr");
        $.each($mainTr, function () {
            $(this).find('.tform').removeClass('tform');
            $(this).closest("tr").next(".subTr").find(".subDiv").slideUp("slow");
            $(this).closest("tr").next(".subTr").slideUp("slow");
        });
    }



    function bindRQualExpandTr() {
        $paymentScheduleWrapper.on('click', '.rqualmainTr', function (e) {
            e.preventDefault();
            if (!$(this).closest("tr").next(".qualmainTr").is(":visible")) {
                closeRQualTr();
                $(this).closest("tr").next(".qualmainTr").show();
                $(this).closest("tr").next(".qualmainTr").find(".subDiv").slideDown("slow");
                $(this).find("i").addClass("tform");
            }
            else {
                $(this).closest("tr").next(".qualmainTr").find(".subDiv").slideUp("slow");
                $(this).closest("tr").next(".qualmainTr").slideUp("slow");
                $(this).find("i").removeClass("tform");
            }
        });
    }

    function bindRQualExpandTrInput() {
        $paymentScheduleWrapper.on('focus', '.rqualmainTrInput', function (e) {
            if (!$(this).closest("tr").next(".qualmainTr").is(":visible")) {
                closeRQualTr();
                $(this).closest("tr").next(".qualmainTr").show();
                $(this).closest("tr").next(".qualmainTr").find(".subDiv").slideDown("slow");
            }
        });
    }

    function closeRQualTr() {
        var $mainTr = $(".rqualmainTr");
        $.each($mainTr, function () {
            $(this).closest("tr").next(".qualmainTr").find(".subDiv").slideUp("slow");
            $(this).closest("tr").next(".qualmainTr").slideUp("slow");
        });
    }


    function bindQualExpandTr() {
        $paymentScheduleWrapper.on('click', '.qualmainExp', function (e) {
            e.preventDefault();
            if (!$(this).closest("tr").next(".qualsubTr").is(":visible")) {
                closeQualTr();
                $(this).closest("tr").next(".qualsubTr").show();
                $(this).closest("tr").next(".qualsubTr").find(".subDiv").slideDown("slow");
                $(this).find("i").addClass("tform");
            }
            else {
                $(this).closest("tr").next(".qualsubTr").find(".subDiv").slideUp("slow");
                $(this).closest("tr").next(".qualsubTr").slideUp("slow");
                $(this).find("i").removeClass("tform");
            }
        });
    }

    function bindQualExpandTrInput() {
        $paymentScheduleWrapper.on('focus', '.qualmainTrInput', function (e) {
            if (!$(this).closest("tr").next(".qualsubTr").is(":visible")) {
                closeQualTr()
                $(this).closest("tr").next(".qualsubTr").show();
                $(this).closest("tr").next(".qualsubTr").find(".subDiv").slideDown("slow");
            }
        });
    }

    function closeQualTr() {
        var $mainTr = $(".qualmainExp");
        $.each($mainTr, function () {
            $(this).closest("tr").next(".qualsubTr").find(".subDiv").slideUp("slow");
            $(this).closest("tr").next(".qualsubTr").slideUp("slow");
        });
    }


    function calcTaxForPaymentSchedule($tarPaySchTable) {

        $tarPaySchTable.find('> tbody > tr.mainTr').each(function() {
            var $tarReceiptTr = $(this),
                $recSubTr = $tarReceiptTr.next('.subTr');
            if($recSubTr.length <= 0) {
                return true;
            }

            var $tarReceiptTab = $recSubTr.find('.receipt-type-table');
            $tarReceiptTab.find('.qualmainTr').each(function() {
                var sch_amt = parseFloat($(this).prev('tr').find('.sch-amt').val());
                if(isNaN(sch_amt)) {
                    sch_amt = 0;
                }

                var $tarQualTab = $(this).find(' > td > .subDiv > table');
                $tarQualTab.find('> tbody > tr').each(function() {
                    var $tarBaseIp = $(this).find('>td:eq(4) input.qualmainTrInput');
                    $tarBaseIp.val(sch_amt);
                    $(this).find('>td:eq(3) input.qualChange').trigger('change');
                });

            });
        });
    }

    function bindTaxCalculation() {
        $paymentScheduleWrapper.on('change', '.qualChange', function() {
            CalculateTax($(this)[0].id);
        });
    }

    function CalculateTax(id) {

        //if (bReady==false) return;
        var key1 = id.split('_')[1],
            key2 = id.split('_')[3];

        var sname = $('#QualRowRef_' + key1).val();
        var dbaseAmt= parseFloatVal($('#' + sname).val());

        CalculateQualifier(dbaseAmt,key1);
        var dTaxAmt = parseFloatVal(isNullCheck($('#QualTotalAmt_' + key1).val(),'number'));

        var k1 = sname.split('_')[1],
            k2 = sname.split('_')[3];

        $('#BillAbs_' + k1 + '_TaxAmt_' + k2).val(dTaxAmt);
        $('#BillAbs_' + k1 + '_NetAmt_' + k2).val(dTaxAmt+dbaseAmt);

//    calcTotal();
    }

    function fillRowRefEditMode() {
        var $mainTr = $paymentScheduleWrapper.find(".qualmainTr"),
            iTotalCount= 0,
            ikey =0;
        $.each($mainTr, function () {
            var $x =$(this),
                $y = $x.prev(),
                akey1 = 0,
                akey2 = 0;
            $y.find(".qualRefId").each(function () {
                var $z =$(this);
                akey1 = parseFloatVal($z[0].id.split('_')[1]);
                akey2 = parseFloatVal($z[0].id.split('_')[3]);
            });
            $x.find(".qualTypeId").each(function () {
                var $n =$(this),
                    key1 = parseFloatVal($n[0].id.split('_')[1]);
                if (iTotalCount < key1) {
                    iTotalCount = key1;
                }
                if (ikey != key1) {
                    ikey = key1;
                    var sname = 'BillAbs_' + akey1 + '_CurAmt_' + akey2;
                    $('#QualRowRef_' + key1).val(sname);
                    $('#BillAbs_' + akey1 + '_QualRefId_' + akey2).val(key1);
                }
            });
        });
        $('#QualTotalRowId').val(iTotalCount);
    }


    function CalculateQualifier(baseValue, key1) {

        var rows = $('#QualRowId_' + key1).val();
        var sformula="";
        var sname = $('#QualRowRef_' + key1).val();
        var dbaseAmt= $('#' + sname).val();
        var dTotalQualAmt=0;

        for (i = 1; i <= rows; i++) {
            var sRef = $('#Qual_' + key1 + '_Ref_' + i).val().trim();
            var sFormula = $('#Qual_' + key1 + '_Exp_'+ i).val();

            var dPer = isNullCheck($('#Qual_' + key1 + '_ExpPer_'+ i).val(),'number');
            var sbaseRef = 'R0';
            if (parseFloatVal(dPer) ==0) dPer=100;
            sFormula = sFormula.replace(new RegExp(sbaseRef, 'g'), dbaseAmt);

            var fvaule = computeEval(sFormula);
            $('#Qual_' + key1 + '_ExpValue_' + i).val(numberFormat(fvaule,'C'));

            var iQualTypeid = $('#Qual_' + key1 + '_TypeId_' + i).val();
            if (iQualTypeid==1 || iQualTypeid==2) {
                var dTaxablePer = parseFloatVal(isNullCheck($('#Qual_' + key1 + '_TaxablePer_' + i).val(),'number'));
                var dTaxPer = parseFloatVal(isNullCheck($('#Qual_' + key1 + '_TaxPer_' + i).val(),'number'));
                var dCess = parseFloatVal(isNullCheck($('#Qual_' + key1 + '_CessPer_' + i).val(),'number'));
                var dEDCess = parseFloatVal(isNullCheck($('#Qual_' + key1 + '_EduCessPer_' + i).val(),'number'));
                var dHEDCess = parseFloatVal(isNullCheck($('#Qual_' + key1 + '_HEduCessPer_' + i).val(),'number'));
                var dNetPer = dTaxPer + (dTaxPer * (dCess +  dEDCess + dHEDCess))/100;
                $('#Qual_' + key1 + '_NetPer_' + i).val(dNetPer);

                $('#Qual_' + key1 + '_NetPer_' + i).val(numberFormat(dNetPer,'C'));
                $('#Qual_' + key1 + '_ExpPer_'+ i).val(numberFormat(dNetPer,'C'));

                var dTaxableAmt =  fvaule* (dTaxablePer/100);
                var dTaxAmt =  dTaxableAmt* (dTaxPer/100);
                var dCessAmt =  dTaxAmt* (dCess/100);
                var dEDAmt =  dTaxAmt* (dEDCess/100);
                var dHEDAmt =  dTaxAmt* (dHEDCess/100);
                var dNetAmt = dTaxAmt+dCessAmt+dEDAmt+dHEDAmt;

                $('#Qual_' + key1 + '_TaxableAmt_'+ i).val(numberFormat(dTaxableAmt,'C'));
                $('#Qual_' + key1 + '_TaxPerAmt_'+ i).val(numberFormat(dTaxAmt,'C'));
                $('#Qual_' + key1 + '_CessAmt_'+ i).val(numberFormat(dCessAmt,'C'));
                $('#Qual_' + key1 + '_EduCessAmt_'+ i).val(numberFormat(dEDAmt,'C'));
                $('#Qual_' + key1 + '_HEduCessAmt_'+ i).val(numberFormat(dHEDAmt,'C'));
                $('#Qual_' + key1 + '_NetAmt_'+ i).val(numberFormat(dNetAmt,'C'));

                dAmt = dNetAmt;
            } else {
                var dAmt = parseFloatVal(fvaule) * (parseFloatVal(dPer) / 100);
            }
            $('#Qual_' + key1 + '_Amount_' + i).val(numberFormat(dAmt,'C'));
            if ($('#Qual_' + key1 + '_YesNo_' + i).is(':checked') == true) dTotalQualAmt = dTotalQualAmt+ parseFloatVal(dAmt);
            for (j = i; j <= rows; j++) {
                var sFormula = $('#Qual_' + key1 + '_Exp_'+ i).val();
                sFormula = sFormula.replace(new RegExp(sRef, 'g'), dAmt);
            }
        }
        $('#QualTotalAmt_' + key1).val(numberFormat(dTotalQualAmt,'C')).trigger('change');
    }

    bindQualTot_onChange();
    function bindQualTot_onChange() {
        $paymentScheduleWrapper.on('change', '[id^="QualTotalAmt_"]', function() {
            var $tarReceiptTr = $(this).closest('.qualmainTr').prev('tr');

            $tarReceiptTr.find('.sch-tax').val($(this).val());

            calcReceiptTotal($tarReceiptTr.closest('tbody'));
        });
    }

    function calcReceiptTotal($tarTbody) {
        var totAmt = 0,
            totTax = 0;
        $tarTbody.find('tr').each(function() {
            var $tarSchAmt = $(this).find('.sch-amt');
            if($tarSchAmt.length > 0) {
                var amt = parseFloat($tarSchAmt.val());
                if(!isNaN(amt)) {
                    totAmt += amt;
                }
                var tax = parseFloat($(this).find('.sch-tax').val());
                if(!isNaN(tax)) {
                    totTax += tax;
                }

                netAmt = amt + tax;
                if(!isNaN(netAmt)) {
                    $(this).find('.sch-net-amt').val(sanitizeNumber(netAmt,2,true));
                }
            }
        });

        var $totTr = $tarTbody.find('tr:last-of-type');
        $totTr.find('.rec-tot-amt').val(totAmt.toFixed(2));
        $totTr.find('.rec-tot-tax').val(totTax.toFixed(2));
        var netAmt = totAmt + totTax;
        $totTr.find('.rec-tot-net').val(netAmt.toFixed(2));

        var $tarReceiptTr = $tarTbody.closest('.subTr').prev('.mainTr');
        $tarReceiptTr.find('.sch-tax').val(totTax.toFixed(2));
        $tarReceiptTr.find('.sch-net-amt').val(netAmt.toFixed(2));
    }

    function computeEval(formula) {
        with (document.forms){
            with (Math) {
                A = eval((formula));
            }
        } return A;
    }

    function signChange(x) {
        var $this = $(x);
        if ($this.hasClass( "fa-plus" )) {
            $this.removeClass('fa-plus clr-gre');
            $this.addClass('fa-minus clr-red');
            var key1 = $this[0].id.split('_')[1],
                key2 = $this[0].id.split('_')[3];
            $('#Qual_' + key1 + '_Sign_' + key2).val('-');
        } else {
            $this.removeClass('fa-minus clr-red');
            $this.addClass('fa-plus clr-gre');
            var key1 = $this[0].id.split('_')[1],
                key2 = $this[0].id.split('_')[3];
            $('#Qual_' + key1 + '_Sign_' + key2).val('+');
        }
    }


});
</script>