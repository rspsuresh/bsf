<script type="text/javascript">
$(document).ready(function () {
	// prepare the data
	var data = preparegriddata(200);
	var source =
	{
		localdata: data,
		datatype: "array",
		datafields:
		[
			{ name: 'firstname', type: 'string' },
			{ name: 'lastname', type: 'string' },
			{ name: 'productname', type: 'string' },
			{ name: 'available', type: 'bool' },
		],
		updaterow: function (rowid, rowdata, commit) {
			// synchronize with the server - send update command   
			commit(true);
		}
	};
	var dataAdapter = new $.jqx.dataAdapter(source);
	var columnCheckBox = null;
	var updatingCheckState = false;
	// initialize jqxGrid. Disable the built-in selection.
	$("#jqxgrid").jqxGrid(
	{
		source: dataAdapter,
		width:'100%',
		autoheight:true,
		editable: true,
		selectionMode: 'singleRow',
		pageable: true,
		sortable: true,
		rowsheight: 35,
		columns: [                  
		  {
			  text: '', menu: false, sortable: false,
			  datafield: 'available', columntype: 'checkbox', width:40,
			  renderer: function () {
				  return '<div style="margin-left: 10px; margin-top: 12px;"></div>';
			  },
			  rendered: function (element) {
				  $(element).jqxCheckBox({ width: 16, height: 16, animationShowDelay: 0, animationHideDelay: 0 });
				  columnCheckBox = $(element);
				  $(element).on('change', function (event) {
					  var checked = event.args.checked;
					  var pageinfo = $("#jqxgrid").jqxGrid('getpaginginformation');
					  var pagenum = pageinfo.pagenum;
					  var pagesize = pageinfo.pagesize;
					  if (checked == null || updatingCheckState) return;
					  $("#jqxgrid").jqxGrid('beginupdate');

					  // select all rows when the column's checkbox is checked.
					  if (checked) {
						  $("#jqxgrid").jqxGrid('selectallrows');
					  }
					  // unselect all rows when the column's checkbox is checked.
					  else if (checked == false) {
						  $("#jqxgrid").jqxGrid('clearselection');
					  }
					  // update cells values.
					 var startrow = pagenum * pagesize;
					  for (var i = startrow; i < startrow + pagesize; i++) {
						  // The bound index represents the row's unique index. 
						  // Ex: If you have rows A, B and C with bound indexes 0, 1 and 2, afer sorting, the Grid will display C, B, A i.e the C's bound index will be 2, but its visible index will be 0.
						  // The code below gets the bound index of the displayed row and updates the value of the row's available column.
						  var boundindex = $("#jqxgrid").jqxGrid('getrowboundindex', i);
						  $("#jqxgrid").jqxGrid('setcellvalue', boundindex, 'available', event.args.checked);
					  }
					  $("#jqxgrid").jqxGrid('endupdate');
				  });
				  return true;
			  }				  
		  },
		  
		  { text: 'Request Date',editable: false,  datafield: 'firstname', width:'30%'},
		  { text: 'Request No',editable: false, datafield: 'lastname', width:'40%' },
		  { text: 'CostCenter Name',editable: false, datafield: 'productname'}
		  ]
	});
	var updatePageState = function (pagenum) {
		var datainfo = $("#jqxgrid").jqxGrid('getdatainformation');
		var pagenum = datainfo.paginginformation.pagenum;
		var pagesize = datainfo.paginginformation.pagesize;
		var startrow = pagenum * pagesize;
		// select the rows on the page.
		$("#jqxgrid").jqxGrid('beginupdate');
		var checkedItemsCount = 0;
		for (var i = startrow; i < startrow + pagesize; i++) {
			var boundindex = $("#jqxgrid").jqxGrid('getrowboundindex', i);
			var value = $("#jqxgrid").jqxGrid('getcellvalue', boundindex, 'available');
			if (value) checkedItemsCount++;
			if (value) {
				$("#jqxgrid").jqxGrid('selectrow', boundindex);
			}
			else {
				$("#jqxgrid").jqxGrid('unselectrow', boundindex);
			}
		}
		$("#jqxgrid").jqxGrid('endupdate');
		if (checkedItemsCount == pagesize) {
			columnCheckBox.jqxCheckBox({ checked: true });
		}
		else if (checkedItemsCount == 0) {
			columnCheckBox.jqxCheckBox({ checked: false });
		}
		else {
			columnCheckBox.jqxCheckBox({ checked: null });
		}
	}
	// update the selection after sort.
	$("#jqxgrid").on('sort', function (event) {
		updatePageState();
	});
	// update the selection after page change.
	$("#jqxgrid").on('pagechanged', function (event) {
		updatePageState();
	});
	// select or unselect rows when a checkbox is checked or unchecked. 
	$("#jqxgrid").on('cellvaluechanged', function (event) {
		if (event.args.value) {
			$("#jqxgrid").jqxGrid('selectrow', event.args.rowindex);
		}
		else {
			$("#jqxgrid").jqxGrid('unselectrow', event.args.rowindex);
		}
		// update the state of the column's checkbox. When all checkboxes on the displayed page are checked, we need to check column's checkbox. We uncheck it,
		// when there are no checked checkboxes on the page and set it to intederminate state when there is at least one checkbox checked on the page.  
		if (columnCheckBox) {
			var datainfo = $("#jqxgrid").jqxGrid('getdatainformation');
			var pagesize = datainfo.paginginformation.pagesize;
			var pagenum = datainfo.paginginformation.pagenum;
			var selectedRows = $("#jqxgrid").jqxGrid('getselectedrowindexes');
			var state = false;
			var count = 0;
			$.each(selectedRows, function () {
				if (pagenum * pagesize <= this && this < pagenum * pagesize + pagesize) {
					count++;
				}
			});

			if (count != 0) state = null;
			if (count == pagesize) state = true;
			if (count == 0) state = false;

			updatingCheckState = true;
			$(columnCheckBox).jqxCheckBox({ checked: state });

			updatingCheckState = false;
		}
	});
});
function preparegriddata(rowscount) {
	// prepare the data
	var data = new Array();
	var firstNames =
	[
		"12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014", "12-12-2014"
	];

	var lastNames =
	[
		"REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001", "REQ0001"
	];

	var productNames =
	[
		"Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1", "Cost Center Name 1"
	];
	 
	for (var i = 0; i < rowscount; i++) {
		var row = {};
		var productindex = Math.floor(Math.random() * productNames.length);
	   
		row["available"] = false;
		row["firstname"] = firstNames[Math.floor(Math.random() * firstNames.length)];
		row["lastname"] = lastNames[Math.floor(Math.random() * lastNames.length)];
		row["productname"] = productNames[productindex];
	   
		data[i] = row;
	}
	return data;
}
</script>
<div class="content_wrapper padlr0">
    <div class="container-fluid">
        <div class="row">
           <div class="col-lg-12">
                <h1>Request Entry</h1> 
                <div class="col-lg-12 clear" style="margin:10px;">
                    <div class="col-lg-6 col-md-6">
                        <div class="row">
                            <div class=" col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p">Request Decision<span class="colon_r">:</span></p></div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p"> RDC0001</p></div> 
                        </div>
                        <div class="row">
                            <div class=" col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p">Selected Type<span class="colon_r">:</span></p></div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p">Material</p></div> 
                       </div>
                    </div>
                    <div class="col-lg-6 col-md-6">
                        <div class="row">
                            <div class=" col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p">Requested Date<span class="colon_r">:</span></p></div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p">12/12/2013</p></div> 
                        </div>
                        <div class="row">
                            <div class=" col-lg-6 col-md-6 col-sm-6 col-xs-6"><p class="space_p">Status<span class="colon_r">:</span></p></div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6"> <p class="space_p">Partially Approved</p></div> 
                        </div>
                    </div>  
                </div>
            </div>
        </div>
        <nav class="navbar inrmdltab_navbar navbar-default">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle mdlnvbr_tgl collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand inrmdl_navbrand" href="javascript:void(0);">Select Menus</a>
            </div>
            <div id="navbar" class="navbar-collapse padlr0 collapse">
                <ul class="nav nav-tabs innermdl_tabs">
                    <li class="active"><a href="#allresource" data-toggle="tab">All Resource</a></li>
                    <li><a href="#mostused" data-toggle="tab">Most used</a></li>
                    <li><a href="#recent" data-toggle="tab">Recent</a></li>
                </ul>
            </div>
        </nav>
        <div class="tab-content">
            <div class="tab-pane fade in active" id="allresource">
                <div class="table-responsive">
                    <div id="jqxWidget">
                        <div id="jqxgrid" style="width:100%;">
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade " id="mostused">
                <div class="table-responsive">
                   
                        Mathu
                   
                </div>
            </div>
            <div class="tab-pane fade" id="recent">
               <div class="table-responsive">
                    
                       Nika 
                    
                </div> 
            </div>
        </div>
    </div>
</div>
<!--button--->
<div class="col-lg-12 savebtn_area">
    <ul>
        <li class="dropdown save_btn float_r">
            <a href="requestentrytable" class="ripple">Continue</a>
        </li>
        <li class="cancel_btn float_r"><a href="requestentry" class="ripple">Back</a></li>
    </ul>
</div>        