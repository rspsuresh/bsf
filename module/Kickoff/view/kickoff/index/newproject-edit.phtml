<style type="text/css">
    .subTr {
        display: none;
    }

    .accordion_head[aria-expanded="true"] {
        background-color: #d6deea !important;
        border-bottom: 1px solid #2d74b4 !important;
    }

    .panel-heading a::after {
        content: '';
        display: none;
    }

    .blocks-wrapper > tr[class^="block_"] .add-block-btn {
        display: none;
    }
    .blocks-wrapper > tr[class^="block_"]:nth-last-of-type(2) .add-block-btn{
        display: block;
        display: block;
    }

    .floors-wrapper > tr[class^="floor_"] .add-floor-btn {
        display: none;
    }
    .floors-wrapper > tr[class^="floor_"]:nth-last-of-type(2) .add-floor-btn{
        display: block;
    }

    .unittypes-wrapper > tr[class^="unittype_"] .add-unittype-btn {
        display: none;
    }
    .unittypes-wrapper > tr[class^="unittype_"]:nth-last-of-type(2) .add-unittype-btn{
        display: block;
    }

    .units-wrapper > tr[class^="unit_"] .add-unit-btn {
        display: none;
    }
    .units-wrapper > tr[class^="unit_"]:nth-last-of-type(1) .add-unit-btn{
        display: block;
    }

    .step_by li {
        width: calc(100% / 5);
    }

</style>

<link rel="stylesheet" type="text/css" href="<?php echo $this->basePath(); ?>/css/project.css" />

<div class="content_wrapper padlr0">
    <div class="container-fluid padlr0">
        <div class="col-lg-12">
            <h1>Project Kickoff
                <!--div class="btn-group proname_btn">
                    <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown"></?php echo ' of '. ucfirst($project['ProjectName']);?> <span class="edit_symbols" data-placement="right" data-toggle="tooltip" data-original-title="Choose&nbsp;your&nbsp;project"><i class="fa fa-caret-down "></i></span></a>
                    <div class="dropdown-menu toolbar_ddown proname_ddown arrow" role="menu">
                        <ul>
                            </?php foreach($arrProjects as $projectRow): ?>
                                <li><a href="</?php echo $this->basePath(); ?>/kickoff/index/</?php echo $this->currentRequest()->get('action'); ?>/</?php echo $projectRow['ProjectId']; ?>"></?php echo ucfirst($projectRow['ProjectName']);?></a></li>
                            </?php endforeach; ?>
                        </ul>
                    </div>
                </div-->
            </h1>
        </div>
		<div class="col-lg-12 flwup_topcnt fmg_topcnt clear">
			<div class="col-lg-3 form-group">
				<span class="date_icon"><i class="fa fa-calendar"></i></span>
				<input type="text" name="refDate" id="refDate" class="form-control date_picker lbl_move" value="<?php echo date("d-m-Y", strtotime($kickoffRes['RefDate'])); ?>" label="Ref Date" onkeypress="return isDate(event);" />
			</div>
			<div class="col-lg-3 form-group">
				<input type="text" name="refNo" id="refNo" class="form-control lbl_move" value="<?php echo $kickoffRes['RefNo']; ?>" label="Ref No" />
			</div>
			<div class="col-lg-6 form-group">
				<input type="text" name="propertyName" id="propertyName" class="form-control lbl_move" value="<?php echo $kickoffRes['ProjectName']; ?>" label="Name of the Property" />
			</div>
		</div>
        <?php //if(isset($project)): ?>

        <div class="col-lg-12 clear">
            <ul class="breadcrumb_area">
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/conception/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Conception</a></li>
                <li><a href="#" class="active">Unit</a></li>
<!--                <li><a href="--><?php //echo $this->basePath(); ?><!--/kickoff/index/wbs/--><?php //if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?><!--">WBS</a></li>-->
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/turnaround/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Turnaround Cost & Schedule</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/team/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Team</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/make-brand/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Make/Brand</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/documents/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Documents</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/setup/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Setup</a></li>
            </ul>
        </div>
        <div class="col-lg-12 clear">
            <form id="from-wrapper" method="POST" autocomplete="off">
                <input type="hidden" name="csrf" value="<?php echo isset($csrf) ? $csrf : ''; ?>">
                <!--input type="hidden" name="ProjectId" id="ProjectId" value="</?php echo $project['ProjectId']; ?>"-->
				<input type="hidden" name="kickOffId" id="kickOffId" value="<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>" />
                <div class="col-lg-10 col-lg-offset-1 col-md-10 col-md-offset-1 col-sm-10 col-sm-offset-1">
                    <div class="col-lg-12">
                        <div class="row">
                            <div class="step_by_liner animated slideInDown"></div>
                            <ul id="step-sep" class="step_by">
                                <li class="phase">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p>1</p></div>
                                    <p class="stepli_p1">Phase</p>
                                </li>
                                <li class="block">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p>2</p></div>
                                    <p class="stepli_p1">Block</p>
                                </li>
                                <li class="floor">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p>3</p></div>
                                    <p class="stepli_p1">Floor</p>
                                </li>
                                <li class="unittype">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p>4</p></div>
                                    <p class="stepli_p1">Unit Type</p>
                                </li>
                                <li class="unit">
                                    <div class="step_by_sep stepsep_active animated_0_4s slideInRight"><p>5</p></div>
                                    <p class="stepli_p2">Unit</p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="col-lg-12 clear">
                    <div id="accordion" class="panel-group" role="tablist" aria-multiselectable="true">
                        <div id="phase-tables-wrapper" data-phase-cnt="0"></div>
                     </div>
                </div>
                <div class="col-lg-12 savebtn_area clear">
                    <ul>
                        <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn" id="save-btn">Update</a>
                        <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn hide" id="back-btn-step7" data-target="#step-6">Back</a>
                    </ul>
                </div>
            </form>
        </div>
    <?php //elseif(isset($err)): ?>
            <!--h1 class="text-center" style="margin: 150px auto;">Alert: </?php echo $err; ?></h1>
            <p class="save_btn" style="margin: auto;">
                <a href="</?php echo $this->basePath(); ?>/kickoff/index/project-edit" class="btn btn-primary">Back</a>
            </p-->
    <?php //endif; ?>
    </div>
</div>

<!--Templates-->
<script type="text/template" id="unit-type-row-template" class="hide">
    <tr id="rowUnitType__">
        <td><input type="text" name="NameUnitType__" placeholder="Unit Type"></td>
		<td><input type="text" name="TypeUnitType__" placeholder="Name"></td>
        <td><input type="text" name="TitleUnitType__" placeholder="Title"></td>
        <td><input type="text" name="AreaUnitType__" placeholder="Area" onkeypress="return isDecimal(event, this)"></td>
    </tr>
</script>

<div id="phase-template" class="hide">
    <div id="phase__" class="panel panel-default" data-blocks-cnt="0">
        <div class="panel-heading accordion_head" role="tab" data-toggle="collapse"
             data-parent="#phase-tables-wrapper" href="#collapse-phase__" aria-controls="phase__">
            <h4>
                <input type="hidden" class="phase-id" name="idphase__">
                <input type="hidden" class="project-id" name="projectphase__">
                <input type="text" class="phase-name pnl_head_input" name="namephase__" placeholder="Phase Name">
				<!--<input type="text" class="phase-title pnl_head_input" name="titlephase__" placeholder="Title">-->
            </h4>
        </div>
        <div id="collapse-phase__" class="panel-collapse collapse" role="tabpanel">
            <div class="panel-body blocks-container">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                        <tr class="blks_tr">
                            <th><span class="bfu-icon"></span> Blocks</th>
							<!--<th>Title</th>-->
                            <th></th>
                        </tr>
                        </thead>
                        <tbody class="blocks-wrapper"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/template" id="block-table-template" class="hide">
    <tr class="block__" data-id="block__" data-floors-cnt="0">
        <td class="tbl_input_td">
            <input type="hidden" class="proj-id" name="phase___projblock__">
            <input type="hidden" class="block-id" name="phase___idblock__">
            <input type="text" name="phase___nameblock__" class="block-name tbl_input parent_text" placeholder="phblock__">

        </td>
		<!--<td><input type="text" name="phase___titleblock__" class="block-title parent_text" placeholder="Title"></td>-->
		<!--<td><input type="text" name="phase___wbsblock__" class="block-wbs parent_text"></td>-->
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-block-btn">
                    <a href="#" class="mainTrDelete_">
                        <span data-original-title="Delete Block" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="mainTr hide">
                        <span data-original-title="Open" data-placement="left" data-toggle="tooltip"><i class="fa fa-chevron-circle-down"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-block-btn">
                        <span data-original-title="Add Block" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
    <tr class="floors-container subTr">
        <td colspan="3">
            <div class="table-responsive subDiv">
                <table class="table">
                    <thead>
                    <tr class="flrs_tr">
                        <th><?php if($unitGenType != '3') { ?><span class="bfu-icon" style="background-position:0px -24px;"></span> Floors<?php } ?></th>
						<!--<th>Title</th>-->
						<!--<th>WBS</th>-->
                        <th></th>
                    </tr>
                    </thead>
                    <tbody class="floors-wrapper"></tbody>
                </table>
            </div>
        </td>
    </tr>
</script>

<script type="text/template" id="floor-table-template" class="hide">
    <tr class="floor__" data-id="floor__" data-unittype-cnt="0" data-unit-cnt="0" style="<?php if($unitGenType == '3') { echo 'display:none;'; } ?>">
        <td class="tbl_input_td">
            <input type="hidden" class="floor-id"  name="phase___block___idfloor__">
            <input type="text" name="phase___block___namefloor__" class="floor-name tbl_input parent_text" placeholder="phfloor__">
        </td>
		<!--<td><input type="text" name="phase___block___titlefloor__" class="floor-title parent_text" placeholder="Title"></td>-->
		<!--<td><input type="text" name="phase___block___wbsfloor__" class="floor-wbs parent_text"></td>-->
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-floor-btn">
                    <a href="#" class="mainTrDelete_">
                        <span data-original-title="Delete Floor" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="mainTr hide">
                        <span data-original-title="Open" data-placement="left" data-toggle="tooltip"><i class="fa fa-chevron-circle-down"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-floor-btn">
                        <span data-original-title="Add Floor" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="unittype-table-template" class="hide">
    <tr class="unittypes-container subTr" style="<?php if($unitGenType == '3') { echo 'display:table-row;'; } ?>">
        <td colspan="3">
            <div class="table-responsive subDiv" style="<?php if($unitGenType == '3') { echo 'display:block;'; } ?>">
                <table class="table">
                    <thead>
                    <tr class="ut_tr">
                        <th><span class="bfu-icon" style="background-position:0px -48px;"></span> Unit Type</th>
						<!--<th>Title</th>-->
                        <th>Area</th>
                        <th>No. of Units</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody class="unittypes-wrapper"></tbody>
                </table>
            </div>
        </td>
    </tr>
</script>

<script type="text/template" id="unittype-row-template" class="hide">
    <tr class="unittype__" data-id="unittype__" data-unit-cnt="0">
        <td class="tbl_input_td">
            <input type="hidden" class="unittype-id" name="phase___block___floor___idunittype__">
            <input type="text" name="phase___block___floor___nameunittype__" class="unittype-name tbl_input parent_text" placeholder="phunittype__">
        </td>
		<!--<td><input type="text" name="phase___block___floor___titleunittype__" class="unittype-title parent_text" readonly></td>-->
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___areaunittype__" class="unittype-area tbl_input parent_text"
                   onkeypress="return isDecimal(event, this)"></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___noofunitsunittype__" class="unittype-no-of-units tbl_input parent_text"
                   value="1" onkeypress="return isDecimal(event, this)" readonly></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li>
                    <a href="#" class="delete-unittype-btn">
                        <span data-original-title="Delete Unit Type" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="mainTr hide">
                        <span data-original-title="Open" data-placement="left" data-toggle="tooltip"><i class="fa fa-chevron-circle-down"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-unittype-btn">
                        <span data-original-title="Add Unit Type" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="unit-table-template" class="hide">
    <tr class="units-container subTr" style="<?php if($unitGenType == '3') { echo 'display:table-row;'; } ?>">
        <td colspan="5">
            <div class="table-responsive subDiv" style="<?php if($unitGenType == '3') { echo 'display:block;'; } ?>">
                <table class="table">
                    <thead>
                    <tr class="ut_tr">
                        <th><span class="bfu-icon" style="background-position:0px -48px;"></span> Unit</th>
                        <th>Area</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody class="units-wrapper"></tbody>
                </table>
            </div>
        </td>
    </tr>
</script>

<script id="unit-row-template" type="text/template">
    <tr class="unit__" data-id="unit__">
        <td class="tbl_input_td">
            <input type="hidden" class="unit-id"  name="phase___block___floor___unittype___idunit__">
            <input type="text" name="phase___block___floor___unittype___nameunit__" class="unit-name tbl_input parent_text" placeholder="phunit__">
        </td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___unittype___areaunit__" class="unit-area tbl_input parent_text"
                   onkeypress="return isDecimal(event, this)" placeholder="Area"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li>
                    <a href="#" class="delete-unit-btn">
                        <span data-original-title="Delete Unit" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-unit-btn">
                        <span data-original-title="Add Unit" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/javascript">

$(function () {
    // document ready
    var $NoOfPhase = $('#NoOfPhase'),
        $phaseTemplate = $('#phase-template'),
        $phaseTableWrapper = $('#phase-tables-wrapper'),
        $noOfPhasesWrapper = $('#no-of-phases-wrapper'),
        $NoOfBlock = $('#NoOfBlock'),
        $blockTableTemplate = $('#block-table-template'),
        $sameBlockWrapper = $('#same-block-wrapper'),
        $sameBlockYes = $('#same-block-yes'),
        $noOfBlocksWrapper = $('#no-of-blocks-wrapper'),
        $NoOfFloor = $('#NoOfFloor'),
        $floorTableTemplate = $('#floor-table-template'),
        $sameFloorWrapper = $('#same-floor-wrapper'),
        $sameFloorYes = $('#same-floor-yes'),
        $noOfFloorsWrapper = $('#no-of-floors-wrapper'),
        $stepsWrapper = $('#steps-wrapper'),
        $unitTypeRowTemplate = $('#unit-type-row-template'),
        $unitTypeTable = $('#unit-type-table'),
        $unitTypeRowWrapper = $('#unittype-row-wrapper'),
        $unitTypeTableTemplate = $('#unittype-table-template'),
        $unitTypeRowOpTemplate = $('#unittype-row-template'),
        $sameUnitTypeYes = $('#same-unittype-yes'),
        $diffUnitTypeNo = $('#diff-unittype-no'),
        arrUnitTypes = <?php echo (isset($jsonUnitTypes))?$jsonUnitTypes:'[]'; ?>,
        $unitRowTemplate = $('#unit-row-template'),
        $unitTableTemplate = $('#unit-table-template'),
        $unitSeqNumeric = $('#unit-sequence-numeric'),
        $seqStarting = $('#sequence-starting-no'),
        $seqWidth = $('#sequence-width'),
        $seqSkipNos = $('#sequence-skip-nos'),
        $seqPrefix = $('#sequence-prefix'),
        $saveBtn = $('#save-btn'),
        //$ProjectName = $('#ProjectName'),
        //$ProjectId = $('#ProjectId'),
        $formWrapper = $('#from-wrapper'),
        $backBtnStep7 = $('#back-btn-step7'),
        $stepSep = $('#step-sep');

    addUnittypeBtn_onClick();
    bindAddBlockBtn_onClick();
    bindAddFloorBtn_onClick();

    bindRemovePhase_onClick();
    bindRemoveBlock_onClick();
    bindRemoveFloor_onClick();
    bindRemoveUnitType_onClick();
    bindRemoveUnit_onClick();

    bindNextBtn_onClick();
    bindBackBtn_onClick();
    bindSaveBtn_onClick();

    bindExpandTrFn();

    bindAddUnitBtn_onClick();

    loadData();

    function loadData() {
        var arrDatas = <?php echo (isset($jsonDatas))?$jsonDatas:'[]'; ?>;
        if(arrDatas.length <= 0) {
            addPhase(1);
        } else {
            $.each(arrDatas, function (phase_index, phaseData) {
                var phaseTemplateHtml = $phaseTemplate.html();
                phaseTemplateHtml = phaseTemplateHtml.replace(/phase__/g, 'phase_' + phaseData.PhaseId);
                $phaseTableWrapper.append(phaseTemplateHtml);

                var $tarPhase = $phaseTableWrapper.find('#phase_' + phaseData.PhaseId);
                $tarPhase.find('.phase-id').val(phaseData.PhaseId);
                $tarPhase.find('.phase-name').val(phaseData.PhaseName);
                $tarPhase.find('.project-id').val(phaseData.ProjectId);

                if(phaseData.blocks.length <= 0) {
                    addBlocks($tarPhase, 1);
                } else {
                    var $curBlockWrapper = $tarPhase.find('.blocks-wrapper');

                    $.each(phaseData.blocks, function(block_index, blockData) {
                        var blockHtml = $blockTableTemplate.html();
                        blockHtml = blockHtml.replace(/phase__/g, 'phase_' + phaseData.PhaseId)
                            .replace(/block__/g, 'block_' + blockData.BlockId);
                        $curBlockWrapper.append(blockHtml);

                        var $tarBlock = $curBlockWrapper.find('.block_' + blockData.BlockId);
                        $tarBlock.find('.block-id').val(blockData.BlockId);
                        $tarBlock.find('.proj-id').val(blockData.ProjectId);
                        $tarBlock.find('.block-name').val(blockData.BlockName);

                        if(blockData.floors.length <= 0) {
                            addFloors($tarPhase, $tarBlock, 1);
                        } else {
                            var $curFloorsWrapper = $tarBlock.next('.floors-container').find('.floors-wrapper');

                            $.each(blockData.floors, function(floor_index, floorData) {

                                var floorHtml = $floorTableTemplate.html();
                                floorHtml = floorHtml.replace(/phase__/g, 'phase_' + phaseData.PhaseId)
                                    .replace(/block__/g, 'block_' + blockData.BlockId)
                                    .replace(/floor__/g, 'floor_' + floorData.FloorId);
                                $curFloorsWrapper.append(floorHtml);

                                var $tarFloor = $curFloorsWrapper.find('.floor_' + floorData.FloorId);
                                $tarFloor.find('.floor-id').val(floorData.FloorId);
                                $tarFloor.find('.floor-name').val(floorData.FloorName);

                                var unitTableHtml = $unitTableTemplate.html();

                                if(floorData.units.length <= 0) {
                                    $tarFloor.after(unitTableHtml);
                                    addUnits($tarPhase, $tarBlock, $tarFloor, '', 1);
                                } else {
                                    var $curUnitWrapper = $tarFloor.next('.units-container').find('.units-wrapper');

                                    $.each(floorData.units, function(unit_index, unitData) {
                                        var $tarUnittype = '';
                                        if(unitData.UnitTypeId != 0) {

                                            var $tarUnitTypesContainer = $tarFloor.next('.unittypes-container');
                                            if($tarUnitTypesContainer.length <= 0) {
                                                var unittypeTableHtml = $unitTypeTableTemplate.html();
                                                $tarFloor.after(unittypeTableHtml);

                                                $tarUnitTypesContainer = $tarFloor.find('.unittypes-container');
                                            }

                                            $tarUnittype = $tarUnitTypesContainer.find('.unittype_' + unitData.UnitTypeId);
                                            if($tarUnittype.length <= 0) {
                                                var $curUnittypesWrapper = $tarFloor.next('.unittypes-container').find('.unittypes-wrapper'),
                                                    unittypesCnt = parseInt($tarFloor.attr('data-unittype-cnt'));

                                                var unittypeRowHtml = $unitTypeRowOpTemplate.html();
                                                unittypeRowHtml = unittypeRowHtml.replace(/phase__/g, 'phase_' + phaseData.PhaseId)
                                                    .replace(/block__/g, 'block_' + blockData.BlockId)
                                                    .replace(/floor__/g, 'floor_' + floorData.FloorId)
                                                    .replace(/unittype__/g, 'unittype_' + unitData.UnitTypeId);
                                                $curUnittypesWrapper.append(unittypeRowHtml);
                                                $tarUnittype = $curUnittypesWrapper.find('.unittype_' + unitData.UnitTypeId);

                                                // add units table
                                                var unitsTableHtml = $unitTableTemplate.html();
                                                $tarUnittype.after(unitsTableHtml);

                                                unittypesCnt += 1;
                                                $tarFloor.attr('data-unittype-cnt', unittypesCnt);

                                                $tarUnittype.find('.delete-unittype-btn').addClass('hide');
                                            }

                                            $tarUnittype.find('input.unittype-id').val(unitData.UnitTypeId);
                                            $tarUnittype.find('input.unittype-name').val(unitData.UnitTypeName);
                                            $tarUnittype.find('input.unittype-area').val(unitData.UnitTypeArea);

                                            $curUnitWrapper = $tarUnittype.next('.units-container').find('.units-wrapper');
                                        } else {
                                            if ($curUnitWrapper.length <= 0) {
                                                $tarFloor.after(unitTableHtml);
                                                $curUnitWrapper = $tarFloor.next('.units-container').find('.units-wrapper');
                                            }
                                        }

                                        var unitHtml = $unitRowTemplate.html();

                                        unitHtml = unitHtml.replace(/phase__/g, 'phase_' + phaseData.PhaseId)
                                            .replace(/block__/g, 'block_' + blockData.BlockId)
                                            .replace(/floor__/g, 'floor_' + floorData.FloorId)
                                            .replace(/unittype__/g, 'unittype_' + unitData.UnitTypeId)
                                            .replace(/unit__/g, 'unit_' + unitData.UnitId);

                                        $curUnitWrapper.append(unitHtml);
                                        var $tarUnit = $curUnitWrapper.find('.unit_' + unitData.UnitId);
                                        $tarUnit.find('.unit-id').val(unitData.UnitId);
                                        $tarUnit.find('.unit-name').val(unitData.UnitNo);
                                        $tarUnit.find('.unit-area').val(unitData.UnitArea);

                                        if (unitData.isBooked == 1) {
                                            // unit is booked
//                                            $tarUnit.find('input').attr('disabled', true);
//                                            $tarUnit.find('.delete-unit-btn').addClass('hide');

                                            if($tarUnittype.length > 0) {
                                                $tarUnittype.find('.delete-unittype-btn').remove();
                                            }
                                            $tarFloor.find('.delete-floor-btn').addClass('hide');
                                            $tarBlock.find('.delete-block-btn').addClass('hide');
                                        }

                                        if ($tarUnittype.length > 0) {
                                            var unitCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
                                            unitCnt += 1;

                                            $tarUnittype.attr('data-unit-cnt', unitCnt);
                                            $tarUnittype.find('.delete-unittype-btn').addClass('hide');
                                            $tarUnittype.find('.unittype-no-of-units').val(unitCnt);
                                        } else {
                                            $tarFloor.attr('data-unit-cnt', floorData.units.length);
                                        }

                                    });

                                }

                                $tarFloor.find('.delete-floor-btn').addClass('hide');
                            });

                            $tarBlock.attr('data-floors-cnt', blockData.floors.length);
                            $tarBlock.find('.delete-block-btn').addClass('hide');
                        }
                    });

                    $tarPhase.attr('data-blocks-cnt', phaseData.blocks.length);
                }

            });
            $phaseTableWrapper.attr('data-phase-cnt', arrDatas.length);
        }
    }

    var arr_duplications = null;
    function bindSaveBtn_onClick() {
        $saveBtn.on('click', function () {
            $saveBtn.attr('disabled', true);
//            var arr_unit_names = [];
//            $.each($('.unit-name'),function (i,el) {
//                arr_unit_names.push({'id': $(this).prev('.unit-id').val(), 'name': $(this).attr('name'),'value': $(this).val()});
//            });
//            $.ajax({
//                url: getBaseURL() + 'kickoff/index/newproject-edit',
//                data: {'units': arr_unit_names, 'csrf': '<?php //echo isset($csrf)?$csrf:''; ?>//'},
//                type: 'POST',
//                async: false,
//                success: function(data, status, xhr) {
//                    if(xhr.status == 200) {
//                        arr_duplications = JSON.parse(data);
//                    } else {
//                        arr_duplications = null;
//                    }
//                },
//                error: function (xhr, status, error) {
//                }
//            });

            validateAllPhases(function (isPhasesSuccess) {

                if (isPhasesSuccess) {
                    var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
                    validateAllUnits($arrPhases, function (isSuccess) {
                        if (isSuccess) {
                            $formWrapper.submit();
                        } else {
                            $saveBtn.removeAttr('disabled');
                            return false;
                        }
                    });
                } else {
                    $saveBtn.removeAttr('disabled');
                    return false;
                }
            });

//            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
//            validateAllUnits($arrPhases, function (isSuccess) {
//                if (isSuccess) {
//                    $formWrapper.submit();
//                } else {
//                    $saveBtn.removeAttr('disabled');
//                    return false;
//                }
//            });
        });
    }

    function validateAllUnits($tarWrapper, callBack) {

        var arrUnits = $tarWrapper.find('[class^="unit_"]').toArray();
        validateRecursively(arrUnits, callBack);

        function validateRecursively(arrUnits, callBack) {

            if (arrUnits.length <= 0) {
                callBack(true);
                return true;
            }

            var $unit = $(arrUnits.shift());
            validateUnit($unit, function (isSuccess) {
                if (isSuccess) {
                    validateRecursively(arrUnits, callBack);
                } else {

                    var $tarUnittype = $unit.closest('.units-container').prev('[class^="unittype_"]'),
                        $tarFloor;
                    if($tarUnittype.length <= 0) {
                        $tarFloor = $unit.closest('.units-container').prev('[class^="floor_"]');
                    } else {
                        $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"]');
                    }

                    var $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                        $tarPhase = $tarBlock.closest('[id^="phase_"]');

                    // open phase
                    if($tarPhase.find('> .panel-collapse:not(.in)').length > 0){
                        $tarPhase.find('.panel-heading').trigger('click');
                    }

                    // open block
                    if($tarBlock.hasClass('open') === false){
                        $tarBlock.find('.mainTr').trigger('click');
                    }

                    // open floor
                    if($tarFloor.hasClass('open') === false){
                        $tarFloor.find('.mainTr').trigger('click');
                    }

                    // open unit type
                    if($tarUnittype.length > 0) {
                        if($tarUnittype.hasClass('open') === false){
                            $tarUnittype.find('.mainTr').trigger('click');
                        }
                    }

                    callBack(false);
                    return false;
                }
            });
        }
    }

    function validateUnit($tarUnit, callBack) {
        var $area = $tarUnit.find('input.unit-area'),
            area = parseInt($area.val()),
            $name = $tarUnit.find('input.unit-name'),
            name = $name.val().trim();

        // check for unit name occurences
        var arr_unit_name_found = $('.unit-name').map(function (i,el) {
            var cur_unit_name = $(el).val();
            if(cur_unit_name == name)
                return cur_unit_name;
        });

        // check for unit name already exists in db
        if(arr_duplications != null) {
            var found = false;
            var attr = $name.attr('name');
            $.each(arr_duplications, function (i,o) {
                 if(o.name == attr) {
                     found = true;
                     return;
                 }
            });

            if(found) {
                showError($name, 'Unit already exists!');
                callBack(false);
                return false;
            }
        }

        if(arr_unit_name_found.length > 1) {
            showError($name, 'Unit duplication!');
            callBack(false);
            return false;
        }

        removeError($name);
        removeError($area);
        if(name.length <= 0) {
            showError($name, 'Unit No is required!');
            callBack(false);
            return false;
        } else if (isNaN(area) || area <= 0) {
            showError($area, 'Invalid Area!');
            callBack(false);
            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function bindRemovePhase_onClick() {
        $phaseTableWrapper.on('click', '.delete-phase-btn', function (ev) {
            ev.preventDefault();

            var $tarPhase = $(this).closest('[id^="phase_"]'),
                phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));

            if (phaseCnt <= 1) {
                alert('Alert! You are not allowed to remove Phase, Atleast one Phase is must.');
                return;
            } else {
                var isConfirmed = confirm('Are you sure want to remove?');

                if (isConfirmed) {
                    phaseCnt -= 1;
                    $tarPhase.remove();
                    $phaseTableWrapper.attr('data-phase-cnt', phaseCnt);
                }
            }
        });
    }

    function bindRemoveBlock_onClick() {
        $phaseTableWrapper.on('click', '.delete-block-btn', function (ev) {
            ev.preventDefault();

            var $tarPhase = $(this).closest('[id^="phase_"]'),
                $tarBlock = $(this).closest('[class^="block_"]'),
                blocksCnt = parseInt($tarPhase.attr('data-blocks-cnt'));

            if (blocksCnt <= 1) {
                alert('Alert! You are not allowed to remove Block, Atleast one Block is must.');
                return;
            } else {
                var isConfirmed = confirm('Are you sure want to remove?');

                if (isConfirmed) {
                    blocksCnt -= 1;
                    $tarBlock.next('.floors-container').remove();
                    $tarBlock.remove();
                    $tarPhase.attr('data-blocks-cnt', blocksCnt);

                    $('#same-block-no').attr('checked', true).trigger('change');
                }
            }
        });
    }

    function bindRemoveFloor_onClick() {
        $phaseTableWrapper.on('click', '.delete-floor-btn', function (ev) {
            ev.preventDefault();

            var $tarFloor = $(this).closest('[class^="floor_"]'),
                $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                floorsCnt = parseInt($tarBlock.attr('data-floors-cnt'));

            if (floorsCnt <= 1) {
                alert('Alert! You are not allowed to remove Floor, Atleast one Floor is must.');
                return;
            } else {
                var isConfirmed = confirm('Are you sure want to remove?');

                if (isConfirmed) {
                    floorsCnt -= 1;
                    $tarFloor.next('.unittypes-container').remove();
                    $tarFloor.next('.units-container').remove();
                    $tarFloor.remove();
                    $tarBlock.attr('data-floors-cnt', floorsCnt);

                    $('#same-floor-no').attr('checked', true).trigger('change');
                }
            }
        });
    }

    function bindRemoveUnitType_onClick() {
        $phaseTableWrapper.on('click', '.delete-unittype-btn', function (ev) {
            ev.preventDefault();

            var $tarUnittype = $(this).closest('[class^="unittype_"]'),
                $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"]'),
                $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                unittypeCnt = parseInt($tarFloor.attr('data-unittype-cnt'));

            if (unittypeCnt <= 1) {
                alert('Alert! You are not allowed to remove Unit Type, Atleast one Unit Type is must.');
                return;
            } else {
                var isConfirmed = confirm('Are you sure want to remove?');

                if (isConfirmed) {
                    unittypeCnt -= 1;
                    $tarUnittype.next('.units-container').remove();
                    $tarUnittype.remove();
                    $tarFloor.attr('data-unittype-cnt', unittypeCnt);
                }
            }
        });
    }

    function bindRemoveUnit_onClick() {
        $phaseTableWrapper.on('click', '.delete-unit-btn', function (ev) {
            ev.preventDefault();

            var $tarUnit = $(this).closest('[class^="unit_"]'),
                $tarUnittype = $tarUnit.closest('.units-container').prev('[class^="unittype_"]'),
                $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"]'),
                unitCnt;

            if ($tarUnittype.length <= 0) {
                $tarFloor = $tarUnit.closest('.units-container').prev('[class^="floor_"]');
                unitCnt = parseInt($tarFloor.attr('data-unit-cnt'));
            } else {
                unitCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
            }

            var $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]');

            if (unitCnt <= 1) {
                alert('Alert! You are not allowed to remove Unit, Atleast one Unit is must.');
                return;
            } else {
                var isConfirmed = confirm('Are you sure want to remove?');

                if (isConfirmed) {
                    unitCnt -= 1;
                    if($tarUnit.hasClass('new-unit')) {
                        $tarUnit.remove();
                    } else {
                        var $tarUnitId = $tarUnit.find('.unit-id');
                        var nameAttr = $tarUnitId.attr('name').replace(/_idunit_/, '_deleteunit_');
                        $('<input type="hidden" name="'+nameAttr+'" value="'+$tarUnitId.val()+'">').insertAfter($tarUnitId);

                        $tarUnit.addClass('hide');
                    }

                    if($tarUnittype.length > 0) {
                        $tarUnittype.find('input.unittype-no-of-units').val(unitCnt);
                        $tarUnittype.attr('data-unit-cnt', unitCnt);
                    } else {
                        $tarFloor.attr('data-unit-cnt', unitCnt);
                    }

                    var $tarUnitsWrapper = $tarUnit.closest('.units-wrapper');

                    $tarUnitsWrapper.find('tr[class^="unit_"]:not(.hide):last').find('.add-unit-btn').show();
                }
            }
        });
    }

    /*function bindProjectName_autoComplete()
	{
        $ProjectName.autocomplete({
            lookup: <?php echo isset($jsonProjects)?$jsonProjects:'[]'; ?>,
            lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                if (queryLowerCase == '*') {
                    return suggestion.value;
                } else {
                    var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
                    return re.test(suggestion.value);
                }
            }, onSelect: function (suggestion) {
                if (suggestion) {
                    $ProjectId.val(suggestion.data);
                    removeError($(this));
                }
            }, onSearchStart: function (suggestion) {
                $ProjectId.val('');
            }, onSearchComplete: function (query, suggestions) {
                if (!suggestions.length) {
                    $ProjectId.val('');
                    showError($(this), 'Project not found!');
                } else {
                    removeError($(this));
                }
            }
        }).blur(function () {
            var ProjectName = $ProjectName.val().trim();

            if (ProjectName.length <= 0) {
                $ProjectId.val('');
                showError($ProjectName, 'Project Name is required!');
            }
        });
    }*/

    function bindUnitSequence_onChange() {
        $('input[name="UnitSequence"]').on('change', function () {

            $seqStarting.val('');
            $seqWidth.val('');
            $seqSkipNos.val('');
            if ($unitSeqNumeric.is(':checked')) {
                $seqStarting.siblings('label').text('Starting Number');
                $seqWidth.removeAttr('disabled');
                $seqSkipNos.siblings('label').text('Skip Nos');
            } else {
                $seqStarting.siblings('label').text('Starting Alphabet');
                $seqWidth.attr('disabled', true);
                $seqSkipNos.siblings('label').text('Skip Alphabets');
            }
        });
    }

    function bindToggleMoreNoOfPhases() {
        $('input[name="more-phase"]').on('change', function () {
            if ($(this).val() === 'yes') {
                $noOfPhasesWrapper.slideDown();
            } else {

                removePhases(1);
                $noOfPhasesWrapper.slideUp(function () {
                    $NoOfPhase.val(1);
                });
            }
        })
    }

    function bindToggleMoreNoOfBlocks() {
        $('input[name="more-block"]').on('change', function () {
            if ($(this).val() === 'yes') {
                $sameBlockWrapper.slideDown();
                $noOfBlocksWrapper.slideDown();

                $NoOfBlock.trigger('change');
            } else {
                $sameBlockWrapper.slideUp();
                $noOfBlocksWrapper.slideUp(function () {

                    $sameBlockYes.prop('checked', true);
                    $NoOfBlock.val(1).trigger('change');
                });
            }
        })
    }

    function bindToggleSameNoOfBlocks() {
        $('input[name="same-block"]').on('change', function () {
            if ($(this).val() === 'yes') {
                $noOfBlocksWrapper.slideDown();
                $NoOfBlock.trigger('change');
            } else {
                $noOfBlocksWrapper.slideUp();
                $NoOfBlock.val(1).trigger('change');
            }
        })
    }

    function bindToggleMultiFloors() {
        $('input[name="multi-floor"]').on('change', function () {

            if ($(this).val() === 'yes') {
                $sameFloorWrapper.slideDown();
                $noOfFloorsWrapper.slideDown();
            } else {
                $sameFloorWrapper.slideUp();
                $noOfFloorsWrapper.slideUp(function () {
                    $sameFloorYes.prop('checked', true);
                    $NoOfFloor.val(1);

                    processFloors();
                });
            }
        })
    }

    function bindToggleSameFloors() {
        $('input[name="same-floor"]').on('change', function () {
            if ($(this).val() === 'yes') {
                $noOfFloorsWrapper.slideDown();
            } else {
                $noOfFloorsWrapper.slideUp(function() {
                    $NoOfFloor.val(1);
                });
            }
        })
    }

    function addPhase(NoOfPhase) {

        var phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));
        var noOfBlocks = parseInt($NoOfBlock.val());
        for (var i = (phaseCnt + 1); i <= NoOfPhase; i++) {
            var phaseTemplateHtml = $phaseTemplate.html();
            phaseTemplateHtml = phaseTemplateHtml.replace(/phase__/g, 'phase_' + i);
            $phaseTableWrapper.append(phaseTemplateHtml);

            var $tarPhase = $phaseTableWrapper.find('#phase_' + i);
            addBlocks($tarPhase, noOfBlocks);
        }
        $phaseTableWrapper.attr('data-phase-cnt', NoOfPhase);
    }

    function removePhases(NoOfPhase) {

        var phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));

        for (var i = (NoOfPhase + 1); i <= phaseCnt; i++) {
            $phaseTableWrapper.find('#phase_' + i).slideUp(function () {
                $(this).remove();
            });
        }
        $phaseTableWrapper.attr('data-phase-cnt', NoOfPhase);
    }

    function bindNoOfBlockChange() {
        $NoOfBlock.on('change', function () {
            var NoOfBlocks = $NoOfBlock.val().trim();

            if (isNaN(NoOfBlocks) || NoOfBlocks <= 0) {
                showError($NoOfBlock, 'Invalid No. of Blocks!');
                return false;
            } else {
                removeError($NoOfBlock);
                processBlocks();
            }
        });
    }

    function processBlocks() {
        var NoOfBlocks = parseInt($NoOfBlock.val()),
            $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');

        if (isNaN(NoOfBlocks)) {
            NoOfBlocks = 1;
        }

        $arrPhases.each(function () {
            var curBlocksCnt = parseInt($(this).attr('data-blocks-cnt'));

            if (NoOfBlocks > curBlocksCnt) {
                addBlocks($(this), NoOfBlocks);
            } else {
                removeBlocks($(this), NoOfBlocks);
            }
        });
    }

    function bindAddBlockBtn_onClick() {
        $phaseTableWrapper.on('click', '.add-block-btn', function (ev) {
            ev.preventDefault();

            var $tarPhase = $(this).closest('[id^="phase_"]'),
                blockCnt = parseInt($tarPhase.attr('data-blocks-cnt'));
            blockCnt += 1;
            addBlocks($tarPhase, blockCnt);
        });
    }

    function bindAddFloorBtn_onClick() {
        $phaseTableWrapper.on('click', '.add-floor-btn', function (ev) {
            ev.preventDefault();

            var $tarBlock = $(this).closest('.floors-container').prev('[class^="block_"]'),
                $tarPhase = $tarBlock.closest('[id^="phase_"]'),
                floorCnt = parseInt($tarBlock.attr('data-floors-cnt'));
            floorCnt += 1;

            addFloors($tarPhase, $tarBlock, floorCnt);
        });
    }

    function addBlocks($tarPhase, NoOfBlocks) {

        var $curBlockWrapper = $tarPhase.find('.blocks-wrapper'),
            blockCnt = parseInt($tarPhase.attr('data-blocks-cnt')),
            NoOfFloors = parseInt($NoOfFloor.val()),
            tarPhaseId = $tarPhase.attr('id').split('_')[1];

        if (isNaN(NoOfFloors)) {
            NoOfFloors = 1;
        }

        for (var i = (blockCnt + 1); i <= NoOfBlocks; i++) {
            var blockHtml = $blockTableTemplate.html();
            blockHtml = blockHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                .replace(/phblock__/g, 'block_' + i)
                .replace(/block__/g, 'block_' + i + '_new');
            $curBlockWrapper.append(blockHtml);

            var $tarBlock = $curBlockWrapper.find('.block_' + i + '_new');

            $tarBlock.addClass('new-block');
            addFloors($tarPhase, $tarBlock, NoOfFloors);

        }

        $tarPhase.attr('data-blocks-cnt', NoOfBlocks);

        bindTooltip();
    }

    function bindTooltip() {
        $('[data-toggle="tooltip"]').tooltip();
    }

    function removeBlocks($tarPhase, NoOfBlocks) {

        var curBlocksCnt = parseInt($tarPhase.attr('data-blocks-cnt'));

        for (var i = (NoOfBlocks + 1); i <= curBlocksCnt; i++) {
            $tarPhase.find('.block_' + i).slideUp(function () {
                $(this).next('.floors-container').remove();
                $(this).remove();
            });
        }
        $tarPhase.attr('data-blocks-cnt', NoOfBlocks);
    }

    function bindNoOfFloorChange() {

        $NoOfFloor.on('change', function () {

            var NoOfFloors = parseInt($NoOfFloor.val());

            if (isNaN(NoOfFloors) || NoOfFloors <= 0) {
                showError($NoOfFloor, 'Invalid No. of Floors!');
                return;
            } else {
                removeError($NoOfFloor);
                processFloors();
            }
        });
    }

    function processFloors() {
        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');

        $arrPhases.each(function () {
            var NoOfFloors = parseInt($NoOfFloor.val()),
                $arrBlocks = $(this).find('[class^="block_"]'),
                $tarPhase = $(this);

            if (isNaN(NoOfFloors)) {
                NoOfFloors = 1;
            }

            $arrBlocks.each(function () {
                var curFloorsCnt = parseInt($(this).attr('data-floors-cnt'));

                if (NoOfFloors > curFloorsCnt) {
                    addFloors($tarPhase, $(this), NoOfFloors);
                } else {
                    removeFloors($(this), NoOfFloors);
                }
            });
        });
    }

    function addFloors($tarPhase, $tarBlock, NoOfFloors) {

        var $curFloorsWrapper = $tarBlock.next('.floors-container').find('.floors-wrapper'),
            floorsCnt = parseInt($tarBlock.attr('data-floors-cnt')),
            tarPhaseId = $tarPhase.attr('id').split('_')[1],
            tarBlockId = $tarBlock.attr('data-id').split('_')[1];

        if($tarBlock.hasClass('new-block')) {
            tarBlockId += '_new';
        }

        for (var i = (floorsCnt + 1); i <= NoOfFloors; i++) {
            var floorHtml = $floorTableTemplate.html();
            floorHtml = floorHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                .replace(/block__/g, 'block_' + tarBlockId)
                .replace(/phfloor__/g, 'floor_' + i)
                .replace(/floor__/g, 'floor_' + i + '_new');
            $curFloorsWrapper.append(floorHtml);

            var $tarFloor = $curFloorsWrapper.find('.floor_' + i + '_new');
            $tarFloor.addClass('new-floor');

            addUnitType($tarPhase, $tarBlock, $tarFloor);
        }

        $tarBlock.attr('data-floors-cnt', NoOfFloors);

        bindTooltip();
    }

    function removeFloors($tarBlock, NoOfFloors) {

        var curBlocksCnt = parseInt($tarBlock.attr('data-floors-cnt'));

        for (var i = (NoOfFloors + 1); i <= curBlocksCnt; i++) {
            $tarBlock.find('.floor_' + i).slideUp(function () {
                $(this).next('.unittypes-container').remove();
                $(this).next('.units-container').remove();
                $(this).remove();
            });
        }
        $tarBlock.attr('data-floors-cnt', NoOfFloors);
    }

    function bindNextBtn_onClick() {
        $stepsWrapper.on('click', '.next-btn', function () {
            var nextStep = $(this).attr('data-target'),
                $curStep = $(this).closest('.steps'),
                $nextStep = $(nextStep);

            switch (nextStep) {
                case '#step-2':
                    validateStep1(function (isSuccess) {

                        if (isSuccess) {
                            $phaseTableWrapper.hide().removeClass('hide').slideDown();

                            $curStep.addClass('hide');
                            $nextStep.removeClass('hide');

//                            var $tarLi = $stepSep.find('>.block');
//                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
//                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
//                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
//                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');
                        } else {
                            return false;
                        }
                    });
                    break;
                case '#step-3':
                    validateStep2(function (isSuccess) {

                        if (isSuccess) {

                            if ($sameBlockYes.is(':checked')) {
                                $('.add-block-btn').addClass('hide');
                            } else {
                                $('.add-block-btn').removeClass('hide');
                            }

                            $('.blocks-container').hide().removeClass('hide').slideDown();

//                            $phaseTableWrapper.find('[id^="phase_"]:eq(0) .panel-heading').trigger('click');

                            $curStep.addClass('hide');
                            $nextStep.removeClass('hide');

                            var $tarLi = $stepSep.find('>.floor');
                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                        } else {
                            return false;
                        }
                    });
                    break;
                case '#step-4':

                    validateStep3(function (isSuccess) {
                        if (isSuccess) {
                            $('.add-block-btn').addClass('hide');

                            if ($sameFloorYes.is(':checked')) {
                                $('.add-floor-btn').addClass('hide');
                            } else {
                                $('.add-floor-btn').removeClass('hide');
                            }

                            $('.floors-container').removeClass('hide');

//                            $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"]:eq(0) .mainTr').trigger('click');

                            $curStep.addClass('hide');
                            $nextStep.removeClass('hide');

                            var $tarLi = $stepSep.find('>.unittype');
                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');

//                            $phaseTableWrapper.find('[class^="block_"] .mainTr.hide').removeClass('hide');
                        } else {
                            return false;
                        }
                    });
                    break;
                case '#step-5':
                    $('.add-floor-btn').addClass('hide');

                    if ($diffUnitTypeNo.is(':checked')) {
                        $nextStep = $('#step-6');
                        $seqPrefix.find('li[data-order="unit_type"]').remove();

                        addUnitsTableToAllFloors();

                        var $tarLi = $stepSep.find('> .unit');
                        $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                            .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                        $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                            .next('p').removeClass('stepli_p1').addClass('stepli_p2');
                    } else {
                        addUnittypeTableToAllFloors();
                    }

                    $curStep.addClass('hide');
                    $nextStep.removeClass('hide');
                    break;
                case '#step-6':

                    if ($sameUnitTypeYes.is(':checked')) {
                        var isSuccess = addUnittypesToAllFloors();
                        if (isSuccess === false) {
                            return false;
                        }
                    } else {
                        addEmptyUnittypeToAllFloors();
                        $('.add-unittype-btn').removeClass('hide');
                    }
                    $phaseTableWrapper.find('.unittypes-container').removeClass('hide');

//                    $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
//                        .next('.floors-container').find('[class^="floor_"]:eq(0) .mainTr').trigger('click');

                    $curStep.addClass('hide');
                    $nextStep.removeClass('hide');

                    var $tarLi = $stepSep.find('> .unit');
                    $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                        .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                    $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                        .next('p').removeClass('stepli_p1').addClass('stepli_p2');

//                    if ($diffUnitTypeNo.is(':checked') === false) {
//                        $phaseTableWrapper.find('[class^="floor_"] .mainTr.hide').removeClass('hide');
//                    }
                    break;
                case '#step-7':

                    validateStep6(function (isSuccess) {
                        if (isSuccess) {

                            validateAllPhases(function (isPhasesSuccess) {

                                if (isPhasesSuccess) {
                                    if ($diffUnitTypeNo.is(':checked')) {
                                        addEmptyUnitToAllFloors();
                                    } else {
                                        addEmptyUnitToAllUnitTypes();
                                    }

                                    $('.add-unittype-btn').addClass('hide');
                                    disableEditing();

                                    $phaseTableWrapper.find('.units-container').removeClass('hide');
                                    $phaseTableWrapper.find('.unittypes-container').removeClass('hide');

                                    $saveBtn.removeClass('hide');
                                    $backBtnStep7.removeClass('hide');

                                    $stepsWrapper.addClass('hide');

//                                    var $tarUnittypeContainer = $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
//                                        .next('.floors-container').find('[class^="floor_"].open')
//                                        .next('.unittypes-container');
//
//                                    if($tarUnittypeContainer.length > 0) {
//                                        $tarUnittypeContainer.find('[class^="unittype_"]:eq(0) .mainTr').trigger('click');
//                                        $phaseTableWrapper.find('[class^="unittype_"] .mainTr.hide').removeClass('hide');
//                                    } else {
//                                        $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
//                                            .next('.floors-container').find('[class^="floor_"]:eq(0) .mainTr').trigger('click');
//
//                                        $phaseTableWrapper.find('[class^="floor_"] .mainTr.hide').removeClass('hide');
//                                    }

                                    $curStep.addClass('hide');
                                    $nextStep.removeClass('hide');
                                } else {
                                    return false;
                                }
                            });

                        } else {
                            return false;
                        }
                    });
                    break;
            }

        });
    }

    function addUnitsTableToAllFloors() {
        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.each(function () {
            var $tarPhase = $(this),
                $arrBlocks = $tarPhase.find('[class^="block_"]');

            $arrBlocks.each(function () {
                var $tarBlock = $(this),
                    $arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]');

                $arrFloors.each(function () {
                    var $tarFloor = $(this);

                    var unitTableHtml = $unitTableTemplate.html();
                    $tarFloor.after(unitTableHtml);
                });
            });
        });
    }

    function addUnittypeTableToAllFloors() {
        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.each(function () {
            var $tarPhase = $(this),
                $arrBlocks = $tarPhase.find('[class^="block_"]');

            $arrBlocks.each(function () {
                var $tarBlock = $(this),
                    $arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]');

                $arrFloors.each(function () {
                    var $tarFloor = $(this);

                    var unittypeTableHtml = $unitTypeTableTemplate.html();
                    $tarFloor.after(unittypeTableHtml);
                });
            });
        });
    }

    function bindBackBtn_onClick() {

        $backBtnStep7.on('click', function () {
            var isConfirm = confirm('If you go back all current datas will be lose. Are you sure want to go back?');
            if (isConfirm === false) {
                return;
            } else {
                var $prevStep = $('#step-6'),
                    $unitsWrapper = $phaseTableWrapper.find('.units-wrapper');

                var $tarUnittypeContainer = $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
                    .next('.floors-container').find('[class^="floor_"].open')
                    .next('.unittypes-container');

                if($tarUnittypeContainer.length > 0) {
                    $tarUnittypeContainer.find('[class^="unittype_"].open .mainTr').trigger('click');

                    $tarUnittypeContainer.find('[class^="unittype_"]').attr('data-unit-cnt', 0);
                } else {
                    $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
                        .next('.floors-container').find('[class^="floor_"].open .mainTr').trigger('click');

                    $phaseTableWrapper.find('[class^="floor_"]').attr('data-unit-cnt', 0);
                }

                if ($unitsWrapper.length <= 0) {
                    $phaseTableWrapper.find('.unittypes-container').addClass('hide');
                    $phaseTableWrapper.find('.unittypes-wrapper').html('');
                }

                $phaseTableWrapper.find('.units-container').addClass('hide');
                $unitsWrapper.html('');

                $stepsWrapper.removeClass('hide');


                $prevStep.removeClass('hide');

                enableEditing();

                $saveBtn.addClass('hide');
                $backBtnStep7.addClass('hide');
            }
        });

        $stepsWrapper.on('click', '.back-btn', function () {

            var isConfirm = confirm('If you go back all current datas will be lose. Are you sure want to go back?');
            if (isConfirm === false) {
                return;
            } else {
                var prevStep = $(this).attr('data-target'),
                    $curStep = $(this).closest('.steps'),
                    $prevStep = $(prevStep);

                switch (prevStep) {
                    case '#step-1':
                        $phaseTableWrapper.addClass('hide').html('');
                        $phaseTableWrapper.attr('data-phase-cnt', 0);

                        $NoOfPhase.trigger('change');

                        var $tarLi = $stepSep.find('>.phase');
                        $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                            .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                        $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                            .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                        break;
                    case '#step-2':
                        $phaseTableWrapper.find('.blocks-container')
                            .addClass('hide')
                            .find('.blocks-wrapper').html('');
                        $phaseTableWrapper.find('.add-block-btn').addClass('hide');
                        $phaseTableWrapper.find('[id^="phase_"]').attr('data-blocks-cnt', 0);

                        $NoOfBlock.trigger('change');

                        var $tarLi = $stepSep.find('>.block');
                        $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                            .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                        $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                            .next('p').removeClass('stepli_p1').addClass('stepli_p2');
                        break;
                    case '#step-3':
                        $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open .mainTr').trigger('click');

                        $phaseTableWrapper.find('.floors-container')
                            .addClass('hide')
                            .find('.floors-wrapper').html('');
                        $phaseTableWrapper.find('.add-floor-btn').addClass('hide');
                        $phaseTableWrapper.find('[class^="block_"]').attr('data-floors-cnt', 0);

                        $NoOfFloor.trigger('change');

                        var $tarLi = $stepSep.find('>.floor');
                        $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                            .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                        $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                            .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                        break;
                    case '#step-4':
                        $unitTypeRowWrapper.attr('data-unittype-cnt', 1);
                        $unitTypeRowWrapper.html('');
                        addUnitTypeRow();
						//arrUnitTypes = new Array();
                        break;
                    case '#step-5':

                        $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
                            .next('.floors-container').find('[class^="floor_"].open .mainTr').trigger('click');

                        $phaseTableWrapper.find('.unittypes-container').addClass('hide');
                        $phaseTableWrapper.find('.unittypes-wrapper').html('');
                        $phaseTableWrapper.find('[class^="floor_"]').attr('data-unittype-cnt', 0);

                        if ($diffUnitTypeNo.is(':checked')) {
                            $prevStep = $('#step-4');
                        }

                        $('.add-unittype-btn').addClass('hide');

                        var $tarLi = $stepSep.find('>.unittype');
                        $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                            .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                        $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                            .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                        break;
                }

                $curStep.addClass('hide');
                $prevStep.removeClass('hide');
            }
        });
    }

    function validateStep1(callBack) {
        var NoOfPhase = parseInt($NoOfPhase.val().trim());
//          ProjectName = $ProjectName.val().trim(),
//          ProjectId = $ProjectId.val().trim();
//        	removeError($ProjectName);
        removeError($NoOfPhase);

//        if (ProjectName.length <= 0) {
//            showError($ProjectName, 'Project Name is required!');
//            callBack(false);
//            return false;
//        } else if (isNaN(ProjectId)) {
//            showError($ProjectName, 'Invalid Project Name!');
//            callBack(false);
//            return false;
//        } else
        if (isNaN(NoOfPhase) || NoOfPhase <= 0) {
            showError($NoOfPhase, 'Invalid No. of Phase!');
            callBack(false);
            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function validateStep2(callBack) {
        var NoOfBlock = parseInt($NoOfBlock.val().trim());

        removeError($NoOfBlock);
        if (isNaN(NoOfBlock) || NoOfBlock <= 0) {
            showError($NoOfBlock, 'Invalid No. of Blocks!');
            callBack(false);
            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function validateStep3(callBack) {
        var NoOfFloors = parseInt($NoOfFloor.val().trim());

        removeError($NoOfFloor);
        if (isNaN(NoOfFloors) || NoOfFloors <= 0) {
            showError($NoOfFloor, 'Invalid No. of Floors!');
            callBack(false);
            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function validateStep6(callBack) {
        var seqStarting = $seqStarting.val().trim(),
            seqWidth = $seqWidth.val().trim(),
            skipNos = $seqSkipNos.val().trim();

        removeError($seqStarting);
        removeError($seqWidth);
        removeError($seqSkipNos);

        if ($unitSeqNumeric.is(':checked')) {
            // numbers
            if (seqStarting != '' && isNaN(seqStarting)) {
                showError($seqStarting, 'Invalid Starting Number!');
                callBack(false);
                return false;
            } else if (seqWidth != '' && isNaN(seqWidth)) {
                showError($seqWidth, 'Invalid Width!');
                callBack(false);
                return false;
            } else if (skipNos != '' && /^[0-9 ,]+$/.test(skipNos) === false) {
                showError($seqSkipNos, 'Invalid Skip Nos!');
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        } else {
            // alphabets

            if (seqStarting != '' && /^[a-z]$/i.test(seqStarting) === false) {
                showError($seqStarting, 'Invalid Starting Alphabet!');
                callBack(false);
                return false;
            } else if (skipNos != '' && /^[a-z ,]+$/i.test(skipNos) === false) {
                showError($seqSkipNos, 'Invalid Skip Alphabets!');
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        }
    }

    function validateAllPhases(callBack) {
        var arrPhases = $phaseTableWrapper.find('> [id^="phase_"]').toArray();
        validateRecursively(arrPhases, callBack);

        function validateRecursively(arrPhase, callBack) {

            if (arrPhase.length <= 0) {
                callBack(true);
                return true;
            }

            var $phase = $(arrPhase.shift());
            validatePhase($phase, function (isSuccess) {
                if (isSuccess) {
                    validateAllBlocks($phase, function (isSuccess) {
                        if (isSuccess) {
                            validateRecursively(arrPhase, callBack);
                        } else {

                            // open error block phase
                            if($phase.find('> .panel-collapse:not(.in)').length > 0){
                                $phase.find('.panel-heading').trigger('click');
                            }

                            callBack(false);
                            return false;
                        }
                    });
                } else {
                    callBack(false);
                    return false;
                }
            });
        }
    }

    function validatePhase($tarPhase, callBack) {
        var $phaseName = $tarPhase.find('input.phase-name'),
            phaseName = $phaseName.val().trim();
//            $phaseTitle = $tarPhase.find('input.phase-title'),
//            phaseTitle = $phaseTitle.val().trim();

        removeError($phaseName);
//        removeError($phaseTitle);

        if (phaseName.length <= 0) {
            showError($phaseName, 'Phase name is required!');
            callBack(false);
            return false;
//        } else if (phaseTitle.length <= 0) {
//            showError($phaseTitle, 'Title is required!');
//            callBack(false);
//            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function validateAllBlocks($tarPhase, callBack) {

        var arrBlocks = $tarPhase.find('[class^="block_"]').toArray();
        validateRecursively(arrBlocks, callBack);

        function validateRecursively(arrBlocks, callBack) {

            if (arrBlocks.length <= 0) {
                callBack(true);
                return true;
            }

            var $block = $(arrBlocks.shift());
            validateBlock($block, function (isSuccess) {
                if (isSuccess) {
                    validateAllFloors($block, function (isSuccess) {
                        if (isSuccess) {
                            validateRecursively(arrBlocks, callBack);
                        } else {

                            // open error floor phase
                            if($block.hasClass('open') === false){
                                $block.find('.mainTr').trigger('click');
                            }

                            callBack(false);
                            return false;
                        }
                    });
                } else {
                    callBack(false);
                    return false;
                }
            });
        }
    }

    function validateBlock($tarBlock, callBack) {
        var $blockName = $tarBlock.find('input.block-name'),
            blockName = $blockName.val().trim();
//            $blockTitle = $tarBlock.find('input.block-title'),
//            blockTitle = $blockTitle.val().trim();
//            $blockWbs = $tarBlock.find('input.block-wbs'),
//            blockWbs = $blockWbs.val().trim();

        removeError($blockName);
//        removeError($blockTitle);
//        removeError($blockWbs);

        if (blockName.length <= 0) {
            showError($blockName, 'Block name is required!');
            callBack(false);
            return false;
//        } else if (blockTitle.length <= 0) {
//            showError($blockTitle, 'Title is required!');
//            callBack(false);
//            return false;
//        } else if (blockWbs.length <= 0) {
//            showError($blockWbs, 'WBS is required!');
//            callBack(false);
//            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function validateAllFloors($tarBlock, callBack) {

        var arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]').toArray();
        validateRecursively(arrFloors, callBack);

        function validateRecursively(arrBlocks, callBack) {

            if (arrFloors.length <= 0) {
                callBack(true);
                return true;
            }

            var $floor = $(arrFloors.shift());
            validateFloor($floor, function (isSuccess) {
                if (isSuccess) {

                    if ($floor.next('.unittypes-container').find('[class^="unittype_"]').length > 0) {
                        validateAllUnittypes($floor, function (isSuccess) {
                            if (isSuccess) {
                                validateRecursively(arrFloors, callBack);
                            } else {

                                // open error
                                if($floor.hasClass('open') === false){
                                    $floor.find('.mainTr').trigger('click');
                                }

                                callBack(false);
                                return false;
                            }
                        });
                    } else {
                        validateRecursively(arrFloors, callBack);
                    }
                } else {
                    callBack(false);
                    return false;
                }
            });
        }
    }

    function validateFloor($tarFloor, callBack) {
        var $floorName = $tarFloor.find('input.floor-name'),
            floorName = $floorName.val().trim();
//            $floorTitle = $tarFloor.find('input.floor-title'),
//            floorTitle = $floorTitle.val().trim();
//            $floorWbs = $tarFloor.find('input.floor-wbs'),
//            floorWbs = $floorWbs.val().trim();

        removeError($floorName);
//        removeError($floorTitle);
//        removeError($floorWbs);

        <?php if($unitGenType != '3') { ?>
        if (floorName.length <= 0) {
            showError($floorName, 'Floor name is required!');
            callBack(false);
            return false;
//        } else if (floorTitle.length <= 0) {
//            showError($floorTitle, 'Title is required!');
//            callBack(false);
//            return false;
//        } else if (floorWbs.length <= 0) {
//            showError($floorWbs, 'WBS is required!');
//            callBack(false);
//            return false;
        } else {
            callBack(true);
            return true;
        }
        <?php } else { ?>
        callBack(true);
        return true;
        <?php } ?>
    }

    function validateAllUnittypes($tarFloor, callBack) {

        var arrUnittypesTr = $tarFloor.next('.unittypes-container').find('[class^="unittype_"]').toArray();
        validateRecursively(arrUnittypesTr, callBack);

        function validateRecursively(arrUnittypesTr, callBack) {

            if (arrUnittypesTr.length <= 0) {
                callBack(true);
                return true;
            }

            var $unittype = $(arrUnittypesTr.shift());
            validateUnittype($unittype, function (isSuccess) {
                if (isSuccess) {
                    validateRecursively(arrUnittypesTr, callBack);
                } else {
                    callBack(false);
                    return false;
                }
            });
        }
    }

    function validateUnittype($tarUnittype, callBack) {
        var $name = $tarUnittype.find('input.unittype-name'),
            name = $name.val().trim(),
			//$title = $tarUnittype.find('input.unittype-title'),
			//title = $title.val().trim(),
            $area = $tarUnittype.find('input.unittype-area'),
            area = $area.val().trim(),
            $noOfUnits = $tarUnittype.find('input.unittype-no-of-units'),
            noOfUnits = parseInt($noOfUnits.val());

        removeError($name);
        removeError($area);
        removeError($noOfUnits);

        if (name.length <= 0) {
            showError($name, 'Unit Type Name is required!');
            callBack(false);
            return false;
//        } else if (title.length <= 0) {
//            showError($name, 'Invalid Unit Type Name!');
//            callBack(false);
//            return false;
        } else if (area.length <= 0) {
            showError($area, 'Area is required!');
            callBack(false);
            return false;
        } else if (isNaN(noOfUnits) || noOfUnits <= 0) {
            showError($noOfUnits, 'Invalid No.of Units!');
            callBack(false);
            return false;
        } else {
            callBack(true);
            return true;
        }
    }

    function bindPhase_onChange() {
        $phaseTableWrapper.on('change', '> [id^="phase_"] input.phase-name', function () {

            var $tarPhase = $(this).closest('[id^="phase_"]');
            validatePhase($tarPhase, function () {
            });
        });
    }

    function disableEditing() {

        $('.delete-phase-btn').addClass('hide');
        $('.delete-block-btn').addClass('hide');
        $('.delete-floor-btn').addClass('hide');
        $('.delete-unittype-btn').addClass('hide');

        // phase inputs
        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.find('input.phase-name').attr('readonly', true);

        // block
        var $arrBlocks = $phaseTableWrapper.find('[class^="block_"]');
        $arrBlocks.find('input.block-name').attr('readonly', true);
        $arrBlocks.find('input.block-title').attr('readonly', true);
//        $arrBlocks.find('input.block-wbs').attr('readonly', true);

        // floor
        var $arrFloors = $phaseTableWrapper.find('[class^="floor_"]');
        $arrFloors.find('input.floor-name').attr('readonly', true);
        $arrFloors.find('input.floor-title').attr('readonly', true);
//        $arrFloors.find('input.floor-wbs').attr('readonly', true);

        // unit type
        var $arrUnittypes = $phaseTableWrapper.find('[class^="unittype_"]');
        $arrUnittypes.find('input.unittype-name').attr('readonly', true);
    }

    function enableEditing() {

        $('.delete-phase-btn').removeClass('hide');
        $('.delete-block-btn').removeClass('hide');
        $('.delete-floor-btn').removeClass('hide');
        $('.delete-unittype-btn').removeClass('hide');

        // phase inputs
        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.find('input.phase-name').removeAttr('readonly');

        // block
        var $arrBlocks = $phaseTableWrapper.find('[class^="block_"]');
        $arrBlocks.find('input.block-name').removeAttr('readonly');
        $arrBlocks.find('input.block-title').removeAttr('readonly');
//        $arrBlocks.find('input.block-wbs').removeAttr('readonly');

        // floor
        var $arrFloors = $phaseTableWrapper.find('[class^="floor_"]');
        $arrFloors.find('input.floor-name').removeAttr('readonly');
        $arrFloors.find('input.floor-title').removeAttr('readonly');
//        $arrFloors.find('input.floor-wbs').removeAttr('readonly');

        // unit type
        var $arrUnittypes = $phaseTableWrapper.find('[class^="unittype_"]');
        if($sameUnitTypeYes.is(':checked') == false) {
            $arrUnittypes.find('input.unittype-name').removeAttr('readonly');
        }
    }

    function addUnitTypeRow() {

        if ($unitTypeRowWrapper.find('tr.empty-row').length > 0) {
            return;
        }

        var unitTypeCnt = parseInt($unitTypeRowWrapper.attr('data-unittype-cnt'));
        var rowHtml = $unitTypeRowTemplate.html();

        unitTypeCnt += 1;
        rowHtml = rowHtml.replace(/UnitType__/g, 'UnitType_' + unitTypeCnt);
        $unitTypeRowWrapper.append(rowHtml);

        var $tarTr = $('tr#rowUnitType_' + unitTypeCnt);
        $tarTr.find('input[name="NameUnitType_' + unitTypeCnt + '"]').focus();
        $tarTr.addClass('empty-row');

        var $prevTr = $tarTr.prev('tr');
        if ($prevTr.length > 0) {
            var Unittype = {
                Name: $prevTr.find('input[name^="NameUnitType_"]').val(),
				Type: $prevTr.find('input[name^="TypeUnitType_"]').val(),
                Title: $prevTr.find('input[name^="TitleUnitType_"]').val(),
                Area: $prevTr.find('input[name^="AreaUnitType_"]').val()
            };
            Unittype.data = Unittype.Name;
            Unittype.value = Unittype.Name;
            arrUnitTypes.push(Unittype);
        }

        $unitTypeRowWrapper.attr('data-unittype-cnt', unitTypeCnt);
    }

    function addUnittypesToAllFloors() {

        var $arrRows = $unitTypeRowWrapper.find('> tr:not(.empty-row)');
        if ($arrRows.length <= 0) {
            alert('Add some Unit type!');
            return false;
        }

        $arrRows.each(function () {
            var $tarTr = $(this);
            var Unittype = {
                Name: $tarTr.find('input[name^="NameUnitType_"]').val(),
				Type: $tarTr.find('input[name^="TypeUnitType_"]').val(),
                Title: $tarTr.find('input[name^="TitleUnitType_"]').val(),
                Area: $tarTr.find('input[name^="AreaUnitType_"]').val()
            };

            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.each(function () {
                var $tarPhase = $(this),
                    $arrBlocks = $tarPhase.find('[class^="block_"]');

                $arrBlocks.each(function () {
                    var $tarBlock = $(this),
                        $arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]');

                    $arrFloors.each(function () {
                        var $tarFloor = $(this);

                        addUnitType($tarPhase, $tarBlock, $tarFloor, Unittype);
                    });
                });
            });

        });
    }

    function addEmptyUnittypeToAllFloors() {

        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.each(function () {
            var $tarPhase = $(this),
                $arrBlocks = $(this).find('[class^="block_"]');

            $arrBlocks.each(function () {
                var $tarBlock = $(this),
                    $arrFloors = $(this).next('.floors-container').find('[class^="floor_"]');

                $arrFloors.each(function () {
                    var $tarFloor = $(this);

                    addUnitType($tarPhase, $tarBlock, $tarFloor);
                });
            });
        });
    }

    function addEmptyUnitToAllFloors() {

        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.each(function () {
            var $tarPhase = $(this),
                $arrBlocks = $(this).find('[class^="block_"]');

            $arrBlocks.each(function () {
                var $tarBlock = $(this),
                    $arrFloors = $(this).next('.floors-container').find('[class^="floor_"]');

                $arrFloors.each(function () {
                    var $tarFloor = $(this);

                    addUnits($tarPhase, $tarBlock, $tarFloor, '', 1);
                });
            });
        });
    }

    function addEmptyUnitToAllUnitTypes() {

        var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
        $arrPhases.each(function () {
            var $tarPhase = $(this),
                $arrBlocks = $(this).find('[class^="block_"]');

            $arrBlocks.each(function () {
                var $tarBlock = $(this),
                    $arrFloors = $(this).next('.floors-container').find('[class^="floor_"]');

                $arrFloors.each(function () {
                    var $tarFloor = $(this),
                        $arrUnittypes = $(this).next('.unittypes-container').find('[class^="unittype_"]');

                    $arrUnittypes.each(function () {
                        var $noOfUnits = $(this).find('input.unittype-no-of-units'),
                            noOfUnits = parseInt($noOfUnits.val());

                        if (isNaN(noOfUnits)) {
                            $noOfUnits.val(1);
                            addUnits($tarPhase, $tarBlock, $tarFloor, $(this), 1);
                        } else {
                            addUnits($tarPhase, $tarBlock, $tarFloor, $(this), noOfUnits);
                        }
                    });
                });
            });
        });
    }

    function bindUnitTypeArea_onChange() {
        $unitTypeRowWrapper.on('change', 'input', function () {

            var $tarTr = $(this).closest('tr');
            validateUnitTypeRow($tarTr, function (isSuccess) {

                if (isSuccess) {
                    $tarTr.removeClass('empty-row');
                    addUnitTypeRow();
                }
            });

        });

        function validateUnitTypeRow($tarRow, callBack) {
            var $UnitTypeName = $tarRow.find('input[name^="NameUnitType_"]'),
                $UnitTypeType = $tarRow.find('input[name^="TypeUnitType_"]'),
				$UnitTypeTitle = $tarRow.find('input[name^="TitleUnitType_"]'),
                $UnitTypeArea = $tarRow.find('input[name^="AreaUnitType_"]'),
                Name = $UnitTypeName.val().trim(),
				Type = $UnitTypeType.val().trim(),
                Title = $UnitTypeTitle.val().trim(),
                Area = $UnitTypeArea.val().trim();

            removeError($UnitTypeName);
			removeError($UnitTypeType);
            removeError($UnitTypeTitle);
            removeError($UnitTypeArea);

            if (Name.length <= 0) {
                showError($UnitTypeName, 'Unit Type is required!');
                $UnitTypeName.focus();
                callBack(false);
                return false;
            } else if (Type.length <= 0) {
                showError($UnitTypeType, 'Name is required!');
                $UnitTypeType.focus();
                callBack(false);
                return false;
            } else if (Title.length <= 0) {
                showError($UnitTypeTitle, 'Title is required!');
                $UnitTypeTitle.focus();
                callBack(false);
                return false;
            } else if (Area.length <= 0) {
                showError($UnitTypeArea, 'Area is required!');
                $UnitTypeArea.focus();
                callBack(false);
                return false;
            } else {
                var isFound = false;
                $.each(arrUnitTypes, function (key, unittype) {
                    //if (unittype.Name.toLowerCase() == Name.toLowerCase()) {
					if ((unittype.Name.toLowerCase() == Name.toLowerCase()) && (unittype.Type.toLowerCase() == Type.toLowerCase()) && (unittype.Area.toLowerCase() == Area)) {
                        isFound = true;
                        showError($UnitTypeName, 'Unit Type already added!');
                        callBack(false);
                        return false;
                    }
                });

                if (isFound === false) {
                    callBack(true);
                    return true;
                }
            }
        }
    }

    function addUnittypeBtn_onClick() {
        $phaseTableWrapper.on('click', '[class^="unittype_"] .add-unittype-btn', function (ev) {
            ev.preventDefault();

            var $tarFloor = $(this).closest('.unittypes-container').prev('[class^="floor_"]'),
                $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                $tarPhase = $tarBlock.closest('[id^="phase_"]');

            addUnitType($tarPhase, $tarBlock, $tarFloor);
        });
    }

    function addUnitType($tarPhase, $tarBlock, $tarFloor, UnittypeData) {
        var $tarContainer = $tarFloor.next('.unittypes-container');
        if($tarContainer.length <= 0) {
            var unittypeTableHtml = $unitTypeTableTemplate.html();
            $tarFloor.after(unittypeTableHtml);
            $tarContainer = $tarFloor.next('.unittypes-container');
        }

        var $curUnittypesWrapper = $tarContainer.find('.unittypes-wrapper'),
            unittypesCnt = parseInt($tarFloor.attr('data-unittype-cnt')),
            tarPhaseId = $tarPhase.attr('id').split('_')[1],
            tarBlockId = $tarBlock.attr('data-id').split('_')[1],
            tarFloorId = $tarFloor.attr('data-id').split('_')[1];

        var unittypeRowHtml = $unitTypeRowOpTemplate.html();
        unittypesCnt += 1;

        if($tarBlock.hasClass('new-block')) {
            tarBlockId += '_new';
        }

        if($tarFloor.hasClass('new-floor')) {
            tarFloorId += '_new';
        }

        unittypeRowHtml = unittypeRowHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
            .replace(/block__/g, 'block_' + tarBlockId)
            .replace(/floor__/g, 'floor_' + tarFloorId)
            .replace(/phunittype__/g, 'unittype_' + unittypesCnt)
            .replace(/unittype__/g, 'unittype_' + unittypesCnt + '_new');
        $curUnittypesWrapper.append(unittypeRowHtml);

        var $tarUnittype = $curUnittypesWrapper.find('.unittype_' + unittypesCnt + '_new');
        if (typeof UnittypeData != 'undefined') {
            $tarUnittype.find('input.unittype-name').val(UnittypeData.Name);
			$tarUnittype.find('input.unittype-type').val(UnittypeData.Type);
            $tarUnittype.find('input.unittype-title').val(UnittypeData.Title);
            $tarUnittype.find('input.unittype-area').val(UnittypeData.Area);
        }
        else {
            bindUnittype_autoComplete($tarUnittype);
        }

        // add units table
        var unitsTableHtml = $unitTableTemplate.html();
        $tarUnittype.after(unitsTableHtml);
        $tarUnittype.addClass('new-unittype');

        addUnits($tarPhase, $tarBlock, $tarFloor, $tarUnittype, 1);

        $tarFloor.attr('data-unittype-cnt', unittypesCnt);

        bindTooltip();
    }

    function bindUnittype_autoComplete($tarUnittype) {

        var $unittypeName = $tarUnittype.find('input.unittype-name'),
            arrUnitTyepsCopy = $.extend(true, [], arrUnitTypes);

        removeUsedUnitTypes(arrUnitTyepsCopy, $tarUnittype, function (arrUnittypes) {

            var $tarUnitTypeName = $tarUnittype.find('input.unittype-name'),
				$tarUnitTypeType = $tarUnittype.find('input.unittype-type'),
                $tarUnitTypeTitle = $tarUnittype.find('input.unittype-title'),
                $tarUnitTypeArea = $tarUnittype.find('input.unittype-area'),
                $tarUnitTypeId = $tarUnittype.find('.unittype-id');
	
            $tarUnitTypeName.autocomplete({
                lookup: arrUnittypes,
                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                    if (queryLowerCase == '*') {
                        return suggestion.value;
                    } else {
                        var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
                        return re.test(suggestion.value);
                    }
                }, onSelect: function (suggestion) {
                    if (suggestion) {
						
						$tarUnitTypeType.val(suggestion.Type);
                        $tarUnitTypeTitle.val(suggestion.Title);
                        $tarUnitTypeArea.val(suggestion.Area);
                        $tarUnitTypeId.val(suggestion.data);

                        removeError($(this));
                    }
                }, onSearchStart: function (suggestion) {
					$tarUnitTypeType.val('');
                    $tarUnitTypeTitle.val('');
                    $tarUnitTypeArea.val('');
                    $tarUnitTypeId.val('');
                }, onSearchComplete: function (query, suggestions) {
                    if (!suggestions.length) {
                        if($tarUnitTypeName.val().trim().length <= 0) {
							$tarUnitTypeType.val('');
                            $tarUnitTypeTitle.val('');
                            $tarUnitTypeArea.val('');
                            $tarUnitTypeId.val('');
                            showError($(this), 'Unit Type not found!');
                        } else {

                        }
                    } else {
                        removeError($(this));
                    }
                }
            }).blur(function () {
                var unittypeName = $tarUnitTypeName.val().trim();

                if (unittypeName.length <= 0) {
					$tarUnitTypeType.val('');
                    $tarUnitTypeTitle.val('');
                    $tarUnitTypeArea.val('');
                    $tarUnitTypeId.val('');
                }
//                else {
//                    checkForDuplicateUnittypeName($tarUnittype, $tarUnitTypeName);
//                }
            });

//            function checkForDuplicateUnittypeName($tarUnittype, $tarUnitTypeName) {
//                var unittypeName = $tarUnitTypeName.val().trim();
//
//                $tarUnittype.siblings('tr[class^="unittype_"]').each(function() {
//
//                    if($(this).find('input.unittype-name').val().trim().toLowerCase() == unittypeName.toLowerCase()) {
//                        showError($tarUnitTypeName, 'Unit Type Already added!');
//						$tarUnitTypeType.val('');
//                        $tarUnitTypeTitle.val('');
//                        $tarUnitTypeArea.val('');
//                        $tarUnitTypeId.val('');
//                        return false;
//                    }
//                });
//
//            }

        });

        function removeUsedUnitTypes(arrUnitTyepsCopy, $tarUnittype, callBack) {
            var $arrUsedUnitTypes = $tarUnittype.siblings('[class^="unittype_"]');

           // if ($arrUsedUnitTypes.length <= 0) {
                callBack(arrUnitTyepsCopy);
                return;
//            } else {
//                var arrUnittypeNames = [];
//                $.each(arrUnitTyepsCopy, function (index, unitType) {
//                    var isExists = false;
//                    $arrUsedUnitTypes.find('input.unittype-name').each(function () {
//                        if ($(this).val().trim().toLowerCase() == unitType.value.toLowerCase()) {
//                            isExists = true;
//                            return false;
//                        }
//                    })
//
//                    if (isExists === false) {
//                        arrUnittypeNames.push(unitType);
//                    }
//                });
//
//                callBack(arrUnittypeNames);
//                return;
//            }
        }
    }

    function addUnits($tarPhase, $tarBlock, $tarFloor, $tarUnittype, NoOfUnits) {

        var $curUnitWrapper = $tarFloor.next('.units-container').find('.units-wrapper'),
            unitsCnt = parseInt($tarFloor.attr('data-unit-cnt')),
            tarPhaseId = $tarPhase.attr('id').split('_')[1],
            tarBlockId = $tarBlock.attr('data-id').split('_')[1],
            tarFloorId = $tarFloor.attr('data-id').split('_')[1],
            tarUnitTypeId = 0,
            tarUnitTypeArea = '';

        if($tarBlock.hasClass('new-block')) {
            tarBlockId += '_new';
        }

        if($tarFloor.hasClass('new-floor')) {
            tarFloorId += '_new';
        }

        if ($tarUnittype.length > 0) {
            $curUnitWrapper = $tarUnittype.next('.units-container').find('.units-wrapper');
            tarUnitTypeId = $tarUnittype.attr('data-id').split('_')[1];
            unitsCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
            tarUnitTypeArea = $tarUnittype.find('.unittype-area').val();

            if($tarUnittype.hasClass('new-unittype')) {
                tarUnitTypeId += '_new';
            }
        }

        for (var i = (unitsCnt + 1); i <= NoOfUnits; i++) {

            var unitHtml = $unitRowTemplate.html();

            unitHtml = unitHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                .replace(/block__/g, 'block_' + tarBlockId)
                .replace(/floor__/g, 'floor_' + tarFloorId)
                .replace(/unittype__/g, 'unittype_' + tarUnitTypeId)
                .replace(/phunit__/g, 'unit_' + i)
                .replace(/unit__/g, 'unit_' + i + '_new');

            $curUnitWrapper.append(unitHtml);

            var $tarUnit = $curUnitWrapper.find('.unit_' + i + '_new');

            $tarUnit.addClass('new-unit');

            if(tarUnitTypeArea != '') {
                $tarUnit.find('.unit-area').val(tarUnitTypeArea);
            }
        }

        if ($tarUnittype.length > 0) {
            $tarUnittype.attr('data-unit-cnt', NoOfUnits);
            $tarUnittype.find('.unittype-no-of-units').val(NoOfUnits);
        } else {
            $tarFloor.attr('data-unit-cnt', NoOfUnits);
        }

		//generateUnitNos($tarPhase, $tarBlock, $tarFloor, $tarUnittype, $curUnitWrapper);

        bindTooltip();
    }

    function bindAddUnitBtn_onClick() {
        $phaseTableWrapper.on('click', '[class^="floor"] .add-unit-btn', function (ev) {
            ev.preventDefault();

            var $tarUnittype = $(this).closest('.units-container').prev('[class^="unittype_"]'),
                $tarFloor,
                curUnitCnt;
            if($tarUnittype.length <= 0) {
                $tarUnittype = '';
                $tarFloor = $(this).closest('.units-container').prev('[class^="floor_"]');
                curUnitCnt = parseInt($tarFloor.attr('data-unit-cnt'));
            } else {
                $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"][data-id]');
                curUnitCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
            }

            var $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"][data-id]'),
                $tarPhase = $tarBlock.closest('[id^="phase_"]');


            curUnitCnt += 1;

            addUnits($tarPhase, $tarBlock, $tarFloor, $tarUnittype, curUnitCnt);
        });
    }

    function bindExpandTrFn() {
        // expand tr
        $phaseTableWrapper.on('click', '.mainTr', function(e){
            e.preventDefault();

            toggleTrData($(this));
        });
    }

    function toggleTrData($tarEl) {

        var $tarTr = $tarEl.closest("tr"),
            $tarSubTr = $tarTr.next(".subTr"),
            $subDiv = $tarSubTr.find(".subDiv");

        if($tarSubTr.length <= 0 || $subDiv.length <= 0) {
            return;
        }

        if($tarSubTr.is(":visible")){
            // close
            $tarTr.removeClass('open');
            $subDiv.slideUp("slow");
            $tarSubTr.slideUp("slow");
//                $(this).find("> [data-original-title]").attr('data-original-title', 'Open');
            $tarTr.find("i").removeClass("tform");
        } else{
            // open
            $tarTr.addClass('open');
            $tarSubTr.show();
            $subDiv.slideDown("slow");
//                $(this).find("> [data-original-title]").attr('data-original-title', 'Close');
            $tarTr.find("i").addClass("tform");
        }
    }

    bindInputs_onFocus();
    bindTrTh_onClick();

    function bindInputs_onFocus() {
        $phaseTableWrapper.on('focus', 'input', function() {

            var $tarTr = $(this).closest('tr');
            if($tarTr.length <= 0) {
                return;
            }

            if($tarTr.hasClass('open')) {
                return;
            }

            var $mainTr = $tarTr.find('.mainTr');
            if($mainTr.length <= 0) {
                return;
            }

            var $tarSubTr = $tarTr.next(".subTr");
            if ($tarSubTr.length <= 0) {
                return;
            }

            var $subDiv = $tarSubTr.find(".subDiv");
            if($tarSubTr.length <= 0 || $subDiv.length <= 0) {
                return;
            }

            $tarTr.siblings('tr.open').find('.mainTr').trigger('click');

            $tarTr.addClass('open');
            $tarSubTr.show();
            $subDiv.slideDown("slow");
            $mainTr.find("i").addClass("tform");
        });
    }

    function bindTrTh_onClick() {
        $phaseTableWrapper.on('click', 'tr th', function() {
            //$(this).closest('table').find('> tbody').slideToggle();
            var $tarSubDiv = $(this).closest('.subDiv'),
                $tarSubTr = $tarSubDiv.closest('.subTr');

            if($tarSubTr.length <= 0) {
                return;
            }

            $tarSubTr.removeClass('open');
            $tarSubTr.siblings('tr.open').find('.mainTr').trigger('click');

        });
    }

    var $accordion = $('#accordion');
    bindBlock_onOpen();
    function bindBlock_onOpen() {
        $accordion.find(".collapse").on('shown.bs.collapse', function(){
            var $tarPanel = $(this).closest('.panel'),
                panelPos = ($tarPanel.position().top) + 194 + 10;

            $('body').animate({ scrollTop: panelPos}, 700);
        });
    }
});
</script>
