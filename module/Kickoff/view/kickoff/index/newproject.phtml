<style type="text/css">
    .sequence-prefix	{border:1px dashed #ddd; height:inherit !important; min-height:40px !important; float:left;}
    .sequence-prefix li {margin:5px;cursor: move;}
    .subTr {
        display: none;
    }
    .units-container.subTr {
        display: table-row;
    }
    .accordion_head[aria-expanded="true"] {
        background-color: #d6deea !important;
        border-bottom: 1px solid #2d74b4 !important;
    }

    .panel-heading a::after {
        content: '';
        display: none;
    }

    .blocks-wrapper > tr[class^="block_"] .add-block-btn {
        display: none;
    }
    .blocks-wrapper > tr[class^="block_"]:nth-last-of-type(2) .add-block-btn{
        display: block;
    }

    .floors-wrapper > tr[class^="floor_"] .add-floor-btn {
        display: none;
    }
    .floors-wrapper > tr[class^="floor_"]:nth-last-of-type(1) .add-floor-btn{
        display: block;
    }

    .unittypes-wrapper > tr[class^="unittype_"] .add-unittype-btn {
        display: none;
    }
    .unittypes-wrapper > tr[class^="unittype_"]:nth-last-of-type(2) .add-unittype-btn{
        display: block;
    }

    .units-wrapper > tr[class^="unit_"] .add-unit-btn {
        display: none;
    }
    .units-wrapper > tr[class^="unit_"]:nth-last-of-type(1) .add-unit-btn{
        display: block;
    }

    .step_by li {
        width: calc(100/ 5)%;
    }

    #phase-details-row-wrapper > tr.empty-row .delete-phase-detail-btn {
        display: none;
    }

    #block-details-row-wrapper > tr.empty-row .delete-block-detail-btn {
        display: none;
    }

    #floor-details-row-wrapper > tr.empty-row .delete-floor-detail-btn {
        display: none;
    }

    #unittype-row-wrapper > tr.empty-row .delete-unittype-btn {
        display: none;
    }

</style>

<link rel="stylesheet" type="text/css" href="<?php echo $this->basePath(); ?>/css/project.css" />

<div class="content_wrapper padlr0">
    <div class="container-fluid padlr0">
        <div class="col-lg-12">
            <h1>Project Kickoff <?php //echo (isset($project))?'- '.$project['ProjectName']:''; ?></h1>
        </div>
        <div class="col-lg-12 flwup_topcnt fmg_topcnt clear">
            <div class="col-lg-3 form-group">
                <span class="date_icon"><i class="fa fa-calendar"></i></span>
                <input type="text" name="refDate" id="refDate" class="form-control date_picker lbl_move" value="<?php if ($kickoffRes['RefDate'] != NULL) { echo date("d-m-Y", strtotime($kickoffRes['RefDate'])); } else { echo date("d-m-Y"); } ?>" label="Ref Date" onkeypress="return isDate(event);" />
            </div>
            <div class="col-lg-3 form-group">
                <input type="text" name="refNo" id="refNo" class="form-control lbl_move" value="<?php if (trim($kickoffRes['RefNo']) != '') { echo $kickoffRes['RefNo']; } else { echo $svNo; } ?>" label="Ref No" />
            </div>
            <div class="col-lg-6 form-group">
                <input type="text" name="propertyName" id="propertyName" class="form-control lbl_move" value="<?php echo $kickoffRes['ProjectName']; ?>" label="Name of the Property" />
            </div>
        </div>
        <?php //if(isset($project)): ?>

        <div class="col-lg-12 clear">
            <ul class="breadcrumb_area">
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/conception/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Conception</a></li>
                <li><a href="#" class="active">Unit</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/turnaround/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Turnaround Cost & Schedule</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/team/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Team</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/make-brand/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Make/Brand</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/documents/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Documents</a></li>
                <li><a href="<?php echo $this->basePath(); ?>/kickoff/index/setup/<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>">Setup</a></li>
            </ul>
        </div>
        <div class="col-lg-12 clear">
            <form id="from-wrapper" method="POST" autocomplete="off">
                <input type="hidden" name="csrf" value="<?php echo isset($csrf) ? $csrf : ''; ?>">
                <!--input type="hidden" name="ProjectId" id="ProjectId" value="</?php echo $project['ProjectId']; ?>"-->
                <input type="hidden" name="kickOffId" id="kickOffId" value="<?php if ($kickoffId != 0) { echo $kickoffId; } else { echo ''; } ?>" />
                <div class="col-lg-10 col-lg-offset-1 col-md-10 col-md-offset-1 col-sm-10 col-sm-offset-1">
                    <div class="col-lg-12">
                        <div class="row">
                            <div class="step_by_liner animated slideInDown"></div>
                            <ul id="step-sep" class="step_by">
                                <li class="phase">
                                    <div class="step_by_sep stepsep_active animated_0_4s slideInRight"><p>1</p></div>
                                    <p class="stepli_p2">Phase</p>
                                </li>
                                <li class="block">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p>2</p></div>
                                    <p class="stepli_p1">Block</p>
                                </li>
                                <?php if($unitGenType != '3') { ?>
                                    <li class="floor">
                                        <div class="step_by_sep animated_0_4s slideInRight"><p>3</p></div>
                                        <p class="stepli_p1">Floor</p>
                                    </li>
                                <?php } ?>
                                <li class="unittype">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p><?php if($unitGenType != '3') { echo '4'; } else { echo '3'; } ?></p></div>
                                    <p class="stepli_p1">Unit Type</p>
                                </li>
                                <li class="unit">
                                    <div class="step_by_sep animated_0_4s slideInRight"><p><?php if($unitGenType != '3') { echo '5'; } else { echo '4'; } ?></p></div>
                                    <p class="stepli_p1">Unit</p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-lg-12 clear">
                    <div id="steps-wrapper" class="kickoff_area col-lg-12 clear">

                        <div id="step-1"
                             class="steps col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20 unit_kickoff">
                            <div class="unitkkoff_topimg"></div>
                            <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20">
                                <div class="col-lg-12 padlr0">
                                    <h1 class="txt_center">More than one Phase?</h1>
                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="more-phase-yes" name="more-phase" value="yes">
                                                <label for="more-phase-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="more-phase-no" name="more-phase" value="no">
                                                <label for="more-phase-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <div id="no-of-phases-wrapper" class="form-group m_top20 col-lg-12 clear animated fadeInUp hide" style="display: none;">
                                    <div class="col-lg-12 padtop20 ">
                                        <input id="NoOfPhase" name="NoOfPhase" class="form-control lbl_move" label="No. of Phases"
                                               onkeypress="return isDecimal(event, this)"/>
                                    </div>
                                </div>

                            </div>

                            <div id="phase-details-wrapper" class="col-lg-12 clear animated fadeInUp" style="display: none;">
                                <div class="stginner_h5">
                                    <h5>Phase</h5>
                                </div>
                                <div class="col-lg-12 padlr0">
                                    <div class="table-responsive">
                                        <table id="phase-details-table" class="table table-hover tbltop_bdr0">
                                            <thead>
                                            <tr>
                                                <th>Phase Name</th>
                                                <th>Title</th>
                                                <th></th>
                                            </tr>
                                            </thead>
                                            <tbody id="phase-details-row-wrapper" data-phase-cnt="0"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
                                <ul>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn" data-target="#step-2">Continue</a>
                                </ul>
                            </div>
                        </div>

                        <div id="step-2"
                             class="hide steps col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20 unit_kickoff">
                            <div class="unitkkoff_topimg"></div>
                            <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20">
                                <div class="col-lg-12 padlr0">
                                    <h1 class="txt_center">More than one Block?</h1>

                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="more-block-yes" name="more-block" value="yes">
                                                <label for="more-block-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="more-block-no" name="more-block" value="no">
                                                <label for="more-block-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div id="same-block-wrapper" class="col-lg-12 padlr0 clear animated fadeInUp" style="display: none;">
                                    <h1 class="txt_center">Each Phase Same No of Blocks?</h1>

                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="same-block-yes" name="same-block" value="yes" />
                                                <label for="same-block-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="same-block-no" name="same-block" value="no" />
                                                <label for="same-block-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div id="no-of-blocks-wrapper" class="form-group m_top20 col-lg-12 clear animated fadeInUp" style="display: none;">
                                    <div class="col-lg-12 padtop20 ">
                                        <input id="NoOfBlock" name="NoOfBlock" class="form-control lbl_move" label="No of Blocks" value="1"
                                               onkeypress="return isDecimal(event, this)"/>
                                    </div>
                                </div>

                            </div>

                            <div id="same-block-details-wrapper" class="col-lg-12 clear animated fadeInUp" style="display: none;">
                                <div class="stginner_h5">
                                    <h5>Block</h5>
                                </div>
                                <div class="col-lg-12 padlr0">
                                    <div class="table-responsive">
                                        <table id="same-block-details-table" class="table table-hover tbltop_bdr0">
                                            <thead>
                                            <tr>
                                                <th>Block Name</th>
                                                <th>Title</th>
                                                <th></th>
                                            </tr>
                                            </thead>
                                            <tbody id="block-details-row-wrapper" data-block-cnt="0"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
                                <ul>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn" data-target="<?php if($unitGenType != '3') { echo '#step-3'; } else { echo '#step-4'; } ?>">Continue</a>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn" data-target="#step-1">Back</a>
                                </ul>
                            </div>
                        </div>

                        <div id="step-3"
                             class="hide steps col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20 unit_kickoff">
                            <div class="unitkkoff_topimg"></div>
                            <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20">
                                <div class="col-lg-12 padlr0">
                                    <h1 class="txt_center">Multi Floor Building?</h1>

                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="multi-floor-yes" name="multi-floor" value="yes">
                                                <label for="multi-floor-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="multi-floor-no" name="multi-floor" value="no" <?php if($unitGenType == '3') { echo 'checked'; } ?>>
                                                <label for="multi-floor-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <div id="same-floor-wrapper" class="col-lg-12 padlr0 clear animated fadeInUp hide" style="display: none;">
                                    <h1 class="txt_center">All Blocks are Same No of Floors?</h1>

                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="same-floor-yes" name="same-floor" value="yes">
                                                <label for="same-floor-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="same-floor-no" name="same-floor" value="no" checked>
                                                <label for="same-floor-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <div id="no-of-floors-wrapper" class="form-group m_top20 col-lg-12 clear animated fadeInUp" style="display: none;">
                                    <div class="col-lg-12 padtop20 ">
                                        <input id="NoOfFloor" name="NoOfFloor" class="form-control lbl_move" label="No of Floors" value="1"
                                               onkeypress="return isDecimal(event, this)"/>
                                    </div>
                                </div>
                            </div>

                            <div id="same-floor-details-wrapper" class="col-lg-12 clear animated fadeInUp" style="display: none;">
                                <div class="stginner_h5">
                                    <h5>Floor</h5>
                                </div>
                                <div class="col-lg-12 padlr0">
                                    <div class="table-responsive">
                                        <table id="same-floor-details-table" class="table table-hover tbltop_bdr0">
                                            <thead>
                                            <tr>
                                                <th>Floor Name</th>
                                                <th>Title</th>
                                                <th></th>
                                            </tr>
                                            </thead>
                                            <tbody id="floor-details-row-wrapper" data-floor-cnt="0"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
                                <ul>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn"
                                                                             data-target="#step-4">Continue</a>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn"
                                                                             data-target="#step-2">Back</a>
                                </ul>
                            </div>
                        </div>

                        <div id="step-4"
                             class="hide steps col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20 unit_kickoff">
                            <div class="unitkkoff_topimg"></div>
                            <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20">
                                <div class="col-lg-12 padlr0">
                                    <h1 class="txt_center">Any Different Unit Types are Available?</h1>

                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="diff-unittype-yes" name="diff-unittype" value="yes">
                                                <label for="diff-unittype-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="diff-unittype-no" name="diff-unittype" value="no">
                                                <label for="diff-unittype-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
                                <ul>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn"
                                                                             data-target="#step-5">Continue</a>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn"
                                                                             data-target="<?php if($unitGenType != '3') { echo '#step-3'; } else { echo '#step-2'; } ?>">Back</a>
                                </ul>
                            </div>
                        </div>

                        <div id="step-5"
                             class="hide steps col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20 unit_kickoff">
                            <div class="unitkkoff_topimg"></div>
                            <div id="same-unittype-wrapper" class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20" style="<?php if($unitGenType == '3') { echo 'display:none;'; } ?>">
                                <div class="col-lg-12 padlr0 clear animated fadeInUp">
                                    <h1 class="txt_center">Same Unit Type in All Floors?</h1>
                                    <div
                                        class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 col-xs-8 col-xs-offset-2 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="same-unittype-yes" name="same-unittype" value="yes" />
                                                <label for="same-unittype-yes" class="ripple">Yes</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="same-unittype-no" name="same-unittype" value="no" checked/>
                                                <label for="same-unittype-no" class="ripple">No</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-12 clear animated fadeInUp">
                                <div class="stginner_h5">
                                    <h5>Unit Types</h5>
                                </div>
                                <div class="col-lg-12 padlr0">
                                    <div class="table-responsive">
                                        <table id="unit-type-table" class="table table-hover tbltop_bdr0">
                                            <thead>
                                            <tr>
                                                <th>Unit Type</th>
                                                <th>Unit Type Name</th>
                                                <th>Title</th>
                                                <th>Area</th>
                                                <th></th>
                                            </tr>
                                            </thead>
                                            <tbody id="unittype-row-wrapper" data-unittype-cnt="0"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
                                <ul>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn" data-target="#step-6">Continue</a>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn" data-target="#step-4">Back</a>
                                </ul>
                            </div>
                        </div>

                        <div id="step-6"
                             class="hide steps col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20 unit_kickoff">
                            <div class="unitkkoff_topimg"></div>
                            <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 padlr0 m_btm20">
                                <div class="col-lg-12 padlr0">
                                    <h1 class="txt_center">Unit Sequence Order by</h1>
                                    <div class="col-lg-10 col-lg-offset-1 clear">
                                        <div class="radio_check">
                                            <p>
                                                <input type="radio" id="unit-sequence-numeric" name="UnitSequence" value="numeric" checked>
                                                <label for="unit-sequence-numeric" class="ripple">Numeric</label>
                                            </p>

                                            <p>
                                                <input type="radio" id="unit-sequence-alpha" name="UnitSequence" value="alpha">
                                                <label for="unit-sequence-alpha" class="ripple">Alphabets</label>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="sequence-starting-wrapper" class="col-lg-12 clear animated fadeInUp">
                                <div class="col-lg-12">
                                    <div class="col-lg-4 col-md-4 col-sm-5 form-group padlr0">
                                        <input type="text" id="sequence-starting-no" name="SequenceStartingNo" class="lbl_move " label="Starting Number"/>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-3 form-group">
                                        <input type="text" id="sequence-width" name="SequenceWidth" class="lbl_move" label="Width"/>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 form-group">
                                        <input type="text" id="sequence-skip-nos" name="SequenceSkipNos" class="lbl_move" label="Skip Nos"/>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-lg-12 clear animated fadeInUp">
                                <div class="col-lg-12">
                                    <ul id="sortable2" class="breadcrumb_area sequence-prefix connectedSortable">
                                        <li data-order="phase" class=""><a>Phase</a></li>
                                        <li data-order="unit_type" class=""><a>Unit Type</a></li>
                                    </ul>
                                    selected List
                                    <ul id="sortable1" class="seq-prefix breadcrumb_area sequence-prefix connectedSortable">

                                        <li data-order="block" class=""><a>Block</a></li>
                                        <?php if($unitGenType != '3') { ?>
                                            <li data-order="floor" class=""><a>Floor</a></li>
                                        <?php } ?>

                                        <li data-order="unit" class=""><a>Unit</a></li>
                                    </ul>
                                </div>
                            </div>

                            <div class="col-lg-12 savebtn_area padlr0 marg0 clear">
                                <ul>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn" data-target="#step-7">Continue</a>
                                    <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn" data-target="#step-5">Back</a>
                                </ul>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-lg-12 clear">
                    <div id="accordion" class="panel-group" role="tablist" aria-multiselectable="true">
                        <div id="phase-tables-wrapper" class="hide" data-phase-cnt="0"></div>
                    </div>
                </div>
                <div class="col-lg-12 savebtn_area clear hide">
                    <ul>
                        <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple next-btn" id="save-btn">Save</a>
                        <li class="dropdown save_btn float_r"><a href="javascript:void(0);" class="ripple back-btn" id="back-btn-step7" data-target="#step-6">Back</a>
                    </ul>
                </div>

            </form>
        </div>
        <?php //elseif(isset($err)): ?>
        <!--h1 class="text-center" style="margin: 150px auto 20px;">Alert: </?php echo $err; ?></h1>
        <p class="save_btn" style="margin: auto;">
            <a href="</?php echo $this->basePath(); ?>/kickoff/index/index" class="btn btn-primary">Back</a>
        </p-->
        <?php //endif; ?>
    </div>
</div>

<!--Templates-->
<script type="text/template" id="unit-type-row-template" class="hide">
    <tr id="rowUnitType__">
        <td class="tbl_input_td"><input type="text" class="tbl_input unittype-name" name="NameUnitType__" placeholder="Unit Type" onblur="return getUnitType(this);"></td>
        <td class="tbl_input_td"><input type="text" class="tbl_input unittype-type" name="TypeUnitType__" placeholder="Name"></td>
        <td class="tbl_input_td"><input type="text" class="tbl_input unittype-title" name="TitleUnitType__" placeholder="Title"></td>
        <td class="tbl_input_td"><input type="text" class="tbl_input unittype-area" name="AreaUnitType__" placeholder="Area" onkeypress="return isDecimal(event, this)"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-unittype-btn">
                    <a href="#">
                        <span data-original-title="Delete Type" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="phase-details-row-template" class="hide">
    <tr id="rowPhaseDetail__">
        <td class="tbl_input_td"><input type="text" class="tbl_input phase-name" name="NamePhaseDetail__" placeholder="Name"></td>
        <td class="tbl_input_td"><input type="text" class="tbl_input phase-title" name="TitlePhaseDetail__" placeholder="Title"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-phase-detail-btn">
                    <a href="#">
                        <span data-original-title="Delete Phase" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="floor-details-row-template" class="hide">
    <tr id="rowFloorDetail__">
        <td class="tbl_input_td"><input type="text" class="tbl_input floor-name" name="NameFloorDetail__" placeholder="Name"></td>
        <td class="tbl_input_td"><input type="text" class="tbl_input floor-title" name="TitleFloorDetail__" placeholder="Title"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-floor-detail-btn">
                    <a href="#">
                        <span data-original-title="Delete Floor" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="block-details-row-template" class="hide">
    <tr id="rowBlockDetail__">
        <td class="tbl_input_td"><input type="text" class="tbl_input block-name" name="NameBlockDetail__" placeholder="Name"></td>
        <td class="tbl_input_td"><input type="text" class="tbl_input block-title" name="TitleBlockDetail__" placeholder="Title"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-block-detail-btn">
                    <a href="#">
                        <span data-original-title="Delete Block" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>
<script type="text/template" id="phase-block-select" class="hide">
    <td class="tbl_input_td phaseHead" width="15%">
        <div class="radio_check">
            <p>
                <input type="checkbox" class="Phase_0" id="Phase_0_BlockDetail__" name="Phase_0_BlockDetail__" value="1" checked/>
                <label for="Phase_0_BlockDetail__"></label>
            </p>
        </div>
    </td>
</script>
<script type="text/template" id="block-floor-select" class="hide">
    <td class="tbl_input_td blockHead" width="15%">
        <div class="radio_check">
            <p>
                <input type="checkbox" class="Block_0" id="Block_0_FloorDetail__" name="Block_0_FloorDetail__" value="1" checked/>
                <label for="Block_0_FloorDetail__"></label>
            </p>
        </div>
    </td>
</script>
<script type="text/template" id="floor-Unittype-select" class="hide">
    <td class="tbl_input_td floorHead" width="15%">
        <div class="radio_check">
            <p>
                <input type="checkbox" class="Floor_0" id="Floor_0_UnitTypeDetail__" name="Floor_0_UnitTypeDetail__" value="1" checked/>
                <label for="Floor_0_UnitTypeDetail__"></label>
            </p>
        </div>
    </td>
</script>

<div id="phase-template" class="hide">
    <div id="phase__" class="panel panel-default" data-blocks-cnt="0">
        <div class="panel-heading accordion_head" role="tab" data-toggle="collapse"
             data-parent="#phase-tables-wrapper" href="#collapse-phase__" aria-controls="phase__">
            <h4>
                <input type="text" class="phase-name pnl_head_input" name="phase__" placeholder="Phase Name">
                <input type="text" class="phase-title pnl_head_input" name="titlephase__" placeholder="Title">
            </h4>
        </div>
        <div id="collapse-phase__" class="panel-collapse collapse" role="tabpanel">
            <div class="panel-body blocks-container hide">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                        <tr class="blks_tr">
                            <th><span class="bfu-icon"></span> Blocks</th>
                            <th>Title</th>
                            <!--<th>WBS</th>-->
                            <th></th>
                        </tr>
                        </thead>
                        <tbody class="blocks-wrapper blocks-wrapper-phase__"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/template" id="block-table-template" class="hide">
    <tr class="block__" data-id="block__" data-floors-cnt="0">
        <td class="tbl_input_td"><input type="text" name="phase___nameblock__" class="block-name tbl_input parent_text" placeholder="block__"></td>
        <td class="tbl_input_td"><input type="text" name="phase___titleblock__" class="block-title tbl_input parent_text" placeholder="Title"></td>
        <!--<td><input type="text" name="phase___wbsblock__" class="block-wbs parent_text"></td>-->
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-block-btn">
                    <a href="#" class="mainTrDelete_">
                        <span data-original-title="Delete Block" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="mainTr hide">
                        <span data-original-title="Open" data-placement="left" data-toggle="tooltip"><i class="fa fa-chevron-circle-down"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-block-btn hide">
                        <span data-original-title="Add Block" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
    <tr class="floors-container hide subTr">
        <td colspan="3">
            <div class="table-responsive subDiv">
                <table class="table">
                    <thead>
                    <tr class="flrs_tr">
                        <th><?php if($unitGenType != '3') { ?><span class="bfu-icon" style="background-position:0px -24px;"></span> Floors<?php } ?></th>
                        <th><?php if($unitGenType != '3') { ?>Title<?php } ?></th>
                        <!--<th>WBS</th>-->
                        <th></th>
                    </tr>
                    </thead>
                    <tbody class="floors-wrapper floors-wrapper-block__"></tbody>
                </table>
            </div>
        </td>
    </tr>
</script>

<script type="text/template" id="floor-table-template" class="hide">
    <tr class="floor__" data-id="floor__" data-unittype-cnt="0" data-unit-cnt="0" style="<?php if($unitGenType == '3') { echo 'display:none;'; } ?>">
        <td class="tbl_input_td"><input type="text" name="phase___block___namefloor__" class="floor-name tbl_input parent_text" placeholder="floor__"></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___titlefloor__" class="floor-title tbl_input parent_text" placeholder="Title"></td>
        <!--<td><input type="text" name="phase___block___wbsfloor__" class="floor-wbs parent_text"></td>-->
        <td class="action_btns_td">
            <ul class="action_btns">
                <li class="delete-floor-btn">
                    <a href="#" class="mainTrDelete_">
                        <span data-original-title="Delete Floor" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="mainTr hide">
                        <span data-original-title="Open" data-placement="left" data-toggle="tooltip"><i class="fa fa-chevron-circle-down"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-floor-btn hide">
                        <span data-original-title="Add Floor" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="unittype-table-template" class="hide">
    <tr class="unittypes-container hide subTr" style="<?php if($unitGenType == '3') { echo 'display:table-row;'; } ?>">
        <td colspan="3">
            <div class="table-responsive subDiv" style="<?php if($unitGenType == '3') { echo 'display:block;'; } ?>">
                <table class="table">
                    <thead>
                    <tr class="ut_tr">
                        <th><span class="bfu-icon" style="background-position:0px -48px;"></span> Unit Type</th>
                        <th>Name</th>
                        <th>Title</th>
                        <th>Area</th>
                        <th>No. of Units</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody class="unittypes-wrapper"></tbody>
                </table>
            </div>
        </td>
    </tr>
</script>

<script type="text/template" id="unittype-row-template" class="hide">
    <tr class="unittype__" data-id="unittype__" data-unit-cnt="0">
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___nameunittype__" class="unittype-name tbl_input parent_text" placeholder="unittype__"></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___typeunittype__" class="unittype-type tbl_input parent_text" readonly></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___titleunittype__" class="unittype-title tbl_input parent_text" readonly></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___areaunittype__" class="unittype-area tbl_input parent_text" readonly></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___noofunitsunittype__" class="unittype-no-of-units tbl_input parent_text"
                                        value="1" onkeypress="return isDecimal(event, this)"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li>
                    <a href="#" class="delete-unittype-btn">
                        <span data-original-title="Delete Unit Type" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="mainTr hide">
                        <span data-original-title="Open" data-placement="left" data-toggle="tooltip"><i class="fa fa-chevron-circle-down"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-unittype-btn hide">
                        <span data-original-title="Add Unit Type" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/template" id="unit-table-template" class="hide">
    <tr class="units-container hide subTr" style="<?php if($unitGenType == '3') { echo 'display:table-row;'; } ?>">
        <td colspan="5">
            <div class="table-responsive subDiv" style="<?php if($unitGenType == '3') { echo 'display:block;'; } ?>">
                <table class="table">
                    <thead>
                    <tr class="ut_tr">
                        <th><span class="bfu-icon" style="background-position:0px -48px;"></span> Unit</th>
                        <th>Area</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody class="units-wrapper"></tbody>
                </table>
            </div>
        </td>
    </tr>
</script>

<script id="unit-row-template" type="text/template">
    <tr class="unit__" data-id="unit__">
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___unittype___nameunit__" class="unit-name tbl_input parent_text"></td>
        <td class="tbl_input_td"><input type="text" name="phase___block___floor___unittype___areaunit__" class="unit-area tbl_input parent_text"
                                        onkeypress="return isDecimal(event, this)" placeholder="Area"></td>
        <td class="action_btns_td">
            <ul class="action_btns">
                <li>
                    <a href="#" class="delete-unit-btn">
                        <span data-original-title="Delete Unit" data-placement="left" data-toggle="tooltip"><i class="fa fa-trash-o"></i></span>
                    </a>
                </li>
                <li>
                    <a href="#" class="add-unit-btn">
                        <span data-original-title="Add Unit" data-placement="left" data-toggle="tooltip"><i class="fa fa-plus"></i></span>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>

<script type="text/javascript">
    $(function () {
        // document ready
        var $NoOfPhase = $('#NoOfPhase'),
            $phaseTemplate = $('#phase-template'),
            $phaseTableWrapper = $('#phase-tables-wrapper'),
            $noOfPhasesWrapper = $('#no-of-phases-wrapper'),
            $NoOfBlock = $('#NoOfBlock'),
            $blockTableTemplate = $('#block-table-template'),
            $sameBlockWrapper = $('#same-block-wrapper'),
            $sameBlockYes = $('#same-block-yes'),
            $sameBlockNo = $('#same-block-no'),
            $noOfBlocksWrapper = $('#no-of-blocks-wrapper'),
            $NoOfFloor = $('#NoOfFloor'),
            $floorTableTemplate = $('#floor-table-template'),
            $sameFloorWrapper = $('#same-floor-wrapper'),
            $sameFloorYes = $('#same-floor-yes'),
            $sameFloorNo = $('#same-floor-no'),
            $noOfFloorsWrapper = $('#no-of-floors-wrapper'),
            $stepsWrapper = $('#steps-wrapper'),
            $unitTypeRowTemplate = $('#unit-type-row-template'),
            $floorDetailsRowTemplate = $('#floor-details-row-template'),
            $blockDetailsRowTemplate = $('#block-details-row-template'),
            $phaseBlockSelect = $('#phase-block-select'),
            $blockFloorSelect = $('#block-floor-select'),
            $floorUnitTypeSelect = $('#floor-Unittype-select'),
            $phaseDetailsRowTemplate = $('#phase-details-row-template'),
            $unitTypeTable = $('#unit-type-table'),
            $unitTypeRowWrapper = $('#unittype-row-wrapper'),
            $floorDetailsRowWrapper = $('#floor-details-row-wrapper'),
            $unitTypeTableTemplate = $('#unittype-table-template'),
            $unitTypeRowOpTemplate = $('#unittype-row-template'),
            $sameUnitTypeYes = $('#same-unittype-yes'),
            $sameUnitTypeNo = $('#same-unittype-no'),
            $diffUnitTypeNo = $('#diff-unittype-no'),
            arrUnitTypes = [],
            $unitRowTemplate = $('#unit-row-template'),
            $unitTableTemplate = $('#unit-table-template'),
            $unitSeqNumeric = $('#unit-sequence-numeric'),
            $seqStarting = $('#sequence-starting-no'),
            $seqWidth = $('#sequence-width'),
            $seqSkipNos = $('#sequence-skip-nos'),
            $seqPrefix = $('.seq-prefix'),
            $saveBtn = $('#save-btn'),
            $saveBtnArea = $('.savebtn_area'),
        //$ProjectName = $('#ProjectName'),
        //$ProjectId = $('#ProjectId'),
            $formWrapper = $('#from-wrapper'),
            $backBtnStep7 = $('#back-btn-step7'),
            $stepSep = $('#step-sep'),
            $sameUnittypeWrapper = $('#same-unittype-wrapper'),
            $sameFloorDetailsWrapper = $('#same-floor-details-wrapper'),
            $sameFloorDetailsTable = $('#same-floor-details-table'),
            $sameBlockDetailsWrapper = $('#same-block-details-wrapper'),
            $sameBlockDetailsTable = $('#same-block-details-table'),
            $blockDetailsRowWrapper = $('#block-details-row-wrapper'),
            $phaseDetailsWrapper = $('#phase-details-wrapper'),
            $phaseDetailsRowWrapper = $('#phase-details-row-wrapper'),
            $phaseDetailsTable = $('#phase-details-table');

        // initiate
        addPhase(1);
        addUnitTypeRow();
        $seqPrefix.sortable();
        //$seqPrefix.selectable();

        bindToggleMoreNoOfPhases();
        bindNoOfPhaseChange();

        bindNoOfBlockChange();
        bindToggleMoreNoOfBlocks();
        bindToggleSameNoOfBlocks();

        bindNoOfFloorChange();
        bindToggleMultiFloors();
        bindToggleSameFloors();


        bindUnitTypeArea_onChange();
        bindNoOfUnits_onChange();
        bindToggleSameUnitType();

        bindUnitSequence_onChange();

        bindPhase_onChange();
        addUnittypeBtn_onClick();
        bindAddBlockBtn_onClick();
        bindAddFloorBtn_onClick();

        //bindProjectName_autoComplete();

        bindFloorInput_onChange();
        bindBlockInput_onChange();
        bindPhaseDetailsInput_onChange();

        bindRemovePhase_onClick();
        bindRemoveBlock_onClick();
        bindRemoveFloor_onClick();
        bindRemoveUnitType_onClick();
        bindRemoveUnit_onClick();
        bindDeleteFloorDetailRow_onClick();
        bindDeleteUnitTypeRow_onClick();
        bindDeleteBlockDetailRow_onClick();
        bindDeletePhaseDetailRow_onClick();

        bindNextBtn_onClick();
        bindBackBtn_onClick();
        bindSaveBtn_onClick();

        bindExpandTrFn();

        bindAddUnitBtn_onClick();

        var arr_duplications = null;
        function bindSaveBtn_onClick() {
            $saveBtn.on('click', function () {
                $saveBtn.attr('disabled', true);
//            var arr_unit_names = [];
//            $.each($('.unit-name'),function (i,el) {
//                arr_unit_names.push({'id': $(this).prev('.unit-id').val(), 'name': $(this).attr('name'),'value': $(this).val()});
//            });
//            $.ajax({
//                url: getBaseURL() + 'kickoff/index/newproject-edit',
//                data: {'units': arr_unit_names, 'csrf': '<?php //echo isset($csrf)?$csrf:''; ?>//'},
//                type: 'POST',
//                async: false,
//                success: function(data, status, xhr) {
//                    if(xhr.status == 200) {
//                        arr_duplications = JSON.parse(data);
//                    } else {
//                        arr_duplications = null;
//                    }
//                },
//                error: function (xhr, status, error) {
//                }
//            });

                var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
                validateAllUnits($arrPhases, function (isSuccess) {
                    if (isSuccess) {
                        $formWrapper.submit();
                    } else {
                        $saveBtn.removeAttr('disabled');
                        return false;
                    }
                });
            });
        }

        function validateAllUnits($tarWrapper, callBack) {

            var arrUnits = $tarWrapper.find('[class^="unit_"]').toArray();
            validateRecursively(arrUnits, callBack);

            function validateRecursively(arrUnits, callBack) {

                if (arrUnits.length <= 0) {
                    callBack(true);
                    return true;
                }

                var $unit = $(arrUnits.shift());
                validateUnit($unit, function (isSuccess) {
                    if (isSuccess) {
                        validateRecursively(arrUnits, callBack);
                    } else {

                        var $tarUnittype = $unit.closest('.units-container').prev('[class^="unittype_"]'),
                            $tarFloor;
                        if($tarUnittype.length <= 0) {
                            $tarFloor = $unit.closest('.units-container').prev('[class^="floor_"]');
                        } else {
                            $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"]');
                        }

                        var $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                            $tarPhase = $tarBlock.closest('[id^="phase_"]');

                        // open phase
                        if($tarPhase.find('> .panel-collapse:not(.in)').length > 0){
                            $tarPhase.find('.panel-heading').trigger('click');
                        }

                        // open block
                        if($tarBlock.hasClass('open') === false){
                            $tarBlock.find('.mainTr').trigger('click');
                        }

                        // open floor
                        if($tarFloor.hasClass('open') === false){
                            $tarFloor.find('.mainTr').trigger('click');
                        }

                        // open unit type
                        if($tarUnittype.length > 0) {
                            if($tarUnittype.hasClass('open') === false){
                                $tarUnittype.find('.mainTr').trigger('click');
                            }
                        }

                        callBack(false);
                        return false;
                    }
                });
            }
        }

        function validateUnit($tarUnit, callBack) {
            var $area = $tarUnit.find('input.unit-area'),
                area = parseInt($area.val());
            var $name = $tarUnit.find('input.unit-name'),
                name = $name.val().trim();

            // check for unit name occurences
            var arr_unit_name_found = $('.unit-name').map(function (i,el) {
                var cur_unit_name = $(el).val();
                if(cur_unit_name == name)
                    return cur_unit_name;
            });

            // check for unit name already exists in db
            if(arr_duplications != null) {
                var found = false;
                var attr = $name.attr('name');
                $.each(arr_duplications, function (i,o) {
                    if(o.name == attr) {
                        found = true;
                        return;
                    }
                });

                if(found) {
                    showError($name, 'Unit already exists!');
                    callBack(false);
                    return false;
                }
            }

            if(arr_unit_name_found.length > 1) {
                showError($name, 'Unit duplication!');
                callBack(false);
                return false;
            }


            removeError($name);
            removeError($area);
            if(name.length <= 0) {
                showError($name, 'Unit No is required!');
                callBack(false);
                return false;
            } else if (isNaN(area) || area <= 0) {
                showError($area, 'Invalid Area!');
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        }

        function bindRemovePhase_onClick() {
            $phaseTableWrapper.on('click', '.delete-phase-btn', function (ev) {
                ev.preventDefault();

                var $tarPhase = $(this).closest('[id^="phase_"]'),
                    phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));

                if (phaseCnt <= 1) {
                    alert('Alert! You are not allowed to remove Phase, Atleast one Phase is must.');
                    return;
                } else {
                    var isConfirmed = confirm('Are you sure want to remove?');

                    if (isConfirmed) {
                        phaseCnt -= 1;
                        $tarPhase.remove();
                        $phaseTableWrapper.attr('data-phase-cnt', phaseCnt);
                    }
                }
            });
        }

        function bindRemoveBlock_onClick() {
            $phaseTableWrapper.on('click', '.delete-block-btn', function (ev) {
                ev.preventDefault();

                var $tarPhase = $(this).closest('[id^="phase_"]'),
                    $tarBlock = $(this).closest('[class^="block_"]'),
                    blocksCnt = parseInt($tarPhase.attr('data-blocks-cnt'));

                if (blocksCnt <= 1) {
                    alert('Alert! You are not allowed to remove Block, Atleast one Block is must.');
                    return;
                } else {
                    var isConfirmed = confirm('Are you sure want to remove?');

                    if (isConfirmed) {
                        $tarBlock.next('.floors-container').remove();
                        $tarBlock.remove();
                        var phaseId = $(this).parent().parent().parent().find('.block-name').attr('name').split('_')[1];
                        $tarPhase.attr('data-blocks-cnt', parseInt($(".blocks-wrapper-phase_"+phaseId).find('[class^="block_"]').last().attr('class').split('_')[1]));

                        // $sameBlockNo.prop('checked', true).trigger('change');
                    }
                }
            });
        }

        function bindRemoveFloor_onClick() {
            $phaseTableWrapper.on('click', '.delete-floor-btn', function (ev) {
                ev.preventDefault();

                var $tarFloor = $(this).closest('[class^="floor_"]'),
                    $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                    floorsCnt = parseInt($tarBlock.attr('data-floors-cnt'));

                if (floorsCnt <= 1) {
                    alert('Alert! You are not allowed to remove Floor, Atleast one Floor is must.');
                    return;
                } else {
                    var isConfirmed = confirm('Are you sure want to remove?');

                    if (isConfirmed) {
                        $tarFloor.next('.unittypes-container').remove();
                        $tarFloor.next('.units-container').remove();
                        $tarFloor.remove();
                        var bId = $(this).parent().parent().parent().find('.floor-name').attr('name').split('_')[3];

                        $tarBlock.attr('data-floors-cnt', parseInt($(".floors-wrapper-block_"+bId).find('[class^="floor_"]').last().attr('class').split('_')[1]));
                        //$sameFloorNo.prop('checked', true).trigger('change');
                    }
                }
            });
        }

        function bindRemoveUnitType_onClick() {
            $phaseTableWrapper.on('click', '.delete-unittype-btn', function (ev) {
                ev.preventDefault();

                var $tarUnittype = $(this).closest('[class^="unittype_"]'),
                    $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"]'),
                    $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                    unittypeCnt = parseInt($tarFloor.attr('data-unittype-cnt'));

                if (unittypeCnt <= 1) {
                    alert('Alert! You are not allowed to remove Unit Type, Atleast one Unit Type is must.');
                    return;
                } else {
                    var isConfirmed = confirm('Are you sure want to remove?');

                    if (isConfirmed) {
                        unittypeCnt -= 1;
                        $tarUnittype.next('.units-container').remove();
                        $tarUnittype.remove();
                        $tarFloor.attr('data-unittype-cnt', unittypeCnt);

                        $('#same-unittype-no').prop('checked', true);
                    }
                }
            });
        }

        function bindRemoveUnit_onClick() {
            $phaseTableWrapper.on('click', '.delete-unit-btn', function (ev) {
                ev.preventDefault();

                var $tarUnit = $(this).closest('[class^="unit_"]'),
                    $tarUnittype = $tarUnit.closest('.units-container').prev('[class^="unittype_"]'),
                    $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"]'),
                    unitCnt;

                if ($tarUnittype.length <= 0) {
                    $tarFloor = $tarUnit.closest('.units-container').prev('[class^="floor_"]');
                    unitCnt = parseInt($tarFloor.attr('data-unit-cnt'));
                } else {
                    unitCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
                }

                var $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]');


                if (unitCnt <= 1) {
                    alert('Alert! You are not allowed to remove Unit, Atleast one Unit is must.');
                    return;
                } else {
                    var isConfirmed = confirm('Are you sure want to remove?');

                    if (isConfirmed) {
                        unitCnt -= 1;
                        $tarUnit.remove();

                        if($tarUnittype.length > 0) {
                            $tarUnittype.find('input.unittype-no-of-units').val(unitCnt);
                            $tarUnittype.attr('data-unit-cnt', unitCnt);
                        } else {
                            $tarFloor.attr('data-unit-cnt', unitCnt);
                        }
                    }
                }
            });
        }

        /*function bindProjectName_autoComplete()
         {
         $ProjectName.autocomplete({
         lookup: <?php echo isset($jsonProjects)?$jsonProjects:'[]'; ?>,
         lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
         if (queryLowerCase == '*') {
         return suggestion.value;
         } else {
         var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
         return re.test(suggestion.value);
         }
         }, onSelect: function (suggestion) {
         if (suggestion) {
         $ProjectId.val(suggestion.data);
         removeError($(this));
         }
         }, onSearchStart: function (suggestion) {
         $ProjectId.val('');
         }, onSearchComplete: function (query, suggestions) {
         if (!suggestions.length) {
         $ProjectId.val('');
         showError($(this), 'Project not found!');
         } else {
         removeError($(this));
         }
         }
         }).blur(function () {
         var ProjectName = $ProjectName.val().trim();

         if (ProjectName.length <= 0) {
         $ProjectId.val('');
         showError($ProjectName, 'Project Name is required!');
         }
         });
         }*/

        function bindUnitSequence_onChange() {
            $('input[name="UnitSequence"]').on('change', function () {

                $seqStarting.val('');
                $seqWidth.val('');
                $seqSkipNos.val('');
                if ($unitSeqNumeric.is(':checked')) {
                    $seqStarting.siblings('label').text('Starting Number');
                    $seqWidth.removeAttr('disabled');
                    $seqSkipNos.siblings('label').text('Skip Nos');
                } else {
                    $seqStarting.siblings('label').text('Starting Alphabet');
                    $seqWidth.attr('disabled', true);
                    $seqSkipNos.siblings('label').text('Skip Alphabets');
                }
            });
        }

        function bindToggleMoreNoOfPhases() {
            $('input[name="more-phase"]').on('change', function () {
                if ($(this).val() === 'yes') {

                    $phaseDetailsRowWrapper.html('');
                    addPhaseDetailsRow();
                    $phaseDetailsWrapper.slideDown();

                    $sameBlockWrapper.removeClass('hide');
                } else {
                    // no
                    removePhases(1);
                    $NoOfPhase.val(1).trigger('change');
                    $phaseDetailsWrapper.slideUp();

                    $sameBlockWrapper.addClass('hide');
                }
            })
        }

        function bindToggleMoreNoOfBlocks() {
            $('input[name="more-block"]').on('change', function () {

                if ($(this).val() === 'yes') {
                    if($sameBlockWrapper.hasClass('hide')) {
                        $noOfBlocksWrapper.slideDown();
                        $sameBlockDetailsWrapper.slideDown();
                        $blockDetailsRowWrapper.html('').attr('data-block-cnt',0);
                        $sameBlockYes.prop('checked', true);
                        addBlockDetailsRow();
                        $('.phaseHead').hide();
                    } else {
                        $noOfBlocksWrapper.slideUp();
                        $sameBlockWrapper.slideDown();
                        $sameBlockDetailsWrapper.slideUp();
                        $('.phaseHead').hide();
                        $blockDetailsRowWrapper.html('').attr('data-block-cnt',0);
                        $('input[name="same-block"]').removeAttr("checked");
                    }
                    $sameFloorWrapper.removeClass('hide');
                } else if ($(this).val() === 'no'){
                    $sameBlockWrapper.slideUp();
                    $noOfBlocksWrapper.slideUp(function() {
                        $sameBlockYes.prop('checked', true);
                        $NoOfBlock.val(1).trigger('change');
                    });
                    $sameFloorWrapper.addClass('hide');
                    $sameBlockDetailsWrapper.slideDown();

                    $blockDetailsRowWrapper.html('').attr('data-block-cnt',0);
                    addBlockDetailsRow();
                    $('.phaseHead').hide();

                }
            })
        }

        function bindToggleSameNoOfBlocks() {
            $('input[name="same-block"]').on('change', function () {
                if ($(this).val() === 'yes') {
                    $noOfBlocksWrapper.slideDown();
                    $sameBlockDetailsWrapper.slideDown();
                    $('.phaseHead').hide();
                    $blockDetailsRowWrapper.html('').attr('data-block-cnt',0);
                    addBlockDetailsRow();
                    $NoOfBlock.parent().find('label').html('No Of Blocks');

                } else if ($(this).val() === 'no') {
                    $noOfBlocksWrapper.slideDown();
                    $sameBlockDetailsWrapper.slideDown();
                    $NoOfBlock.parent().find('label').html('Max No Of Blocks');
                    $('.phaseHead').hide();

                    $blockDetailsRowWrapper.html('').attr('data-block-cnt',0);
                    addBlockDetailsRow();
                }
            })
        }

        function bindToggleMultiFloors() {
            $('input[name="multi-floor"]').on('change', function () {

                if ($(this).val() === 'yes') {
                    if($sameFloorWrapper.hasClass('hide')) {
                        $noOfFloorsWrapper.slideDown();
                        $sameFloorDetailsWrapper.slideDown();
                        $floorDetailsRowWrapper.html('').attr('data-floor-cnt',0);
                        $sameFloorYes.prop('checked', true);
                        addFloorDetailsRow();
                        $('.blockHead').hide();
                    } else {
                        $noOfFloorsWrapper.slideUp();
                        $sameFloorWrapper.slideDown();
                        $sameFloorDetailsWrapper.slideUp();
                        $('.blockHead').hide();
                        $floorDetailsRowWrapper.html('').attr('data-floor-cnt',0);
                        $('input[name="same-floor"]').removeAttr("checked");
                    }
                    $sameUnittypeWrapper.removeClass('hide');
                } else if ($(this).val() === 'no') {

                    $sameFloorWrapper.slideUp();
                    $noOfFloorsWrapper.slideUp(function() {
                        $sameFloorYes.prop('checked', true);

                        $NoOfFloor.val(1).trigger('change');
                    });

                    $sameUnittypeWrapper.addClass('hide');
                    $sameFloorDetailsWrapper.slideDown();

                    $floorDetailsRowWrapper.html('').attr('data-floor-cnt',0);
                    addFloorDetailsRow();
                    $('.blockHead').hide();

                }

            })
        }

        function bindToggleSameFloors() {
            $('input[name="same-floor"]').on('change', function () {

                if ($(this).val() === 'yes') {
                    $noOfFloorsWrapper.slideDown();
                    $sameFloorDetailsWrapper.slideDown();
                    $floorDetailsRowWrapper.html('').attr('data-floor-cnt',0);
                    addFloorDetailsRow();
                    $NoOfFloor.parent().find('label').html('No Of Floors');
                    $('.blockHead').hide();

                } else if ($(this).val() === 'no') {
                    $noOfFloorsWrapper.slideDown();
                    $sameFloorDetailsWrapper.slideDown();
                    $NoOfFloor.parent().find('label').html('Max No Of Floors');
                    $('.blockHead').hide();
                    $floorDetailsRowWrapper.html('').attr('data-floor-cnt',0);
                    addFloorDetailsRow();

                }
            })
        }

        function bindNoOfPhaseChange() {

            $NoOfPhase.on('change', function () {
                var NoOfPhase = parseInt($(this).val());
                if (isNaN(NoOfPhase) || NoOfPhase <= 0) {
                    showError($NoOfPhase, 'Invalid No.of Phase!');
                    return false;
                } else {
                    removeError($NoOfPhase);

                    var phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));
                    if (NoOfPhase > phaseCnt) {
                        addPhase(NoOfPhase);
                    } else if (NoOfPhase < phaseCnt) {
                        removePhases(NoOfPhase);
                    }
                }
            });
        }
        function bindToggleSameUnitType() {
            $('input[name="same-unittype"]').on('change', function () {
                if ($(this).val() === 'yes') {
                    $('.floorHead').hide();
                    $unitTypeRowWrapper.html('').attr('data-unittype-cnt',0);
                    addUnitTypeRow();

                } else if ($(this).val() === 'no') {
                    $unitTypeRowWrapper.html('').attr('data-unittype-cnt',0);
                    addUnitTypeRow();
                    <?php if($unitGenType != '3') {?>
                        if($sameFloorWrapper.hasClass('hide')) {
                            $('.floorHead').hide();
                        } else {
                            $('.floorHead').show();
                        }
                    <?php } else {?>
                        $('.floorHead').hide();
                    <?php }?>
                }
            })
        }

        function addPhase(NoOfPhase) {

            var phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));
            var noOfBlocks = parseInt($NoOfBlock.val());
            for (var i = (phaseCnt + 1); i <= NoOfPhase; i++) {
                var phaseTemplateHtml = $phaseTemplate.html();
                phaseTemplateHtml = phaseTemplateHtml.replace(/phase__/g, 'phase_' + i);
                $phaseTableWrapper.append(phaseTemplateHtml);

                var $tarPhase = $phaseTableWrapper.find('#phase_' + i);
                addBlocks($tarPhase, noOfBlocks);
            }
            $phaseTableWrapper.attr('data-phase-cnt', NoOfPhase);
        }

        function removePhases(NoOfPhase) {

            var phaseCnt = parseInt($phaseTableWrapper.attr('data-phase-cnt'));

            for (var i = (NoOfPhase + 1); i <= phaseCnt; i++) {
                $phaseTableWrapper.find('#phase_' + i).slideUp(function () {
                    $(this).remove();
                });
            }
            $phaseTableWrapper.attr('data-phase-cnt', NoOfPhase);
        }

        function bindNoOfBlockChange() {
            $NoOfBlock.on('change', function () {
                var NoOfBlocks = $NoOfBlock.val().trim();

                if (isNaN(NoOfBlocks) || NoOfBlocks <= 0) {
                    showError($NoOfBlock, 'Invalid No. of Blocks!');
                    $('.phaseHead').hide();
                    $blockDetailsRowWrapper.html('').attr('data-block-cnt',0);
                    addBlockDetailsRow();
                    return false;
                } else {
                    removeError($NoOfBlock);
                    processBlocks();
                    var trLen = parseInt($sameBlockDetailsTable.find('> tbody > tr').length);
                    NoOfBlocks=parseInt(NoOfBlocks);
                    var dif=0;
                    if(NoOfBlocks<trLen) {
                        dif = trLen-NoOfBlocks;
                    }
                    if(dif>0) {
                        for (var i=0; i<dif;i++) {
                            $sameBlockDetailsTable.find('> tbody > tr:last').remove();
                        }
                    }
                    if(NoOfBlocks>parseInt($sameBlockDetailsTable.find('> tbody > tr').length)) {
                        addBlockDetailsRow();
                    }
                }
            });
        }

        function processBlocks() {
            var NoOfBlocks = parseInt($NoOfBlock.val()),
                $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');

            if (isNaN(NoOfBlocks)) {
                NoOfBlocks = 1;
            }
            var p=0;

            $arrPhases.each(function () {
                p++;
                var curBlocksCnt = parseInt($(this).attr('data-blocks-cnt'));
                //var bCount = parseInt($blockDetailsRowWrapper.attr('data-block-cnt'));

                if (NoOfBlocks > curBlocksCnt) {
                    var nBlocks=0;
                    $('input[id*=Phase_'+p+'_BlockDetail_]').each(function() {
                        if($(this).is(':checked')) {
                            nBlocks++;
                        }
                    });
                    addBlocks($(this), nBlocks);
                } else {
                    removeBlocks($(this), NoOfBlocks);
                }
            });
        }

        function bindAddBlockBtn_onClick() {
            $phaseTableWrapper.on('click', '.add-block-btn', function (ev) {
                ev.preventDefault();

                var $tarPhase = $(this).closest('[id^="phase_"]'),
                    blockCnt = parseInt($tarPhase.attr('data-blocks-cnt'));
                blockCnt += 1;
                addBlocks($tarPhase, blockCnt);
            });
        }

        function bindAddFloorBtn_onClick() {
            $phaseTableWrapper.on('click', '.add-floor-btn', function (ev) {
                ev.preventDefault();

                var $tarBlock = $(this).closest('.floors-container').prev('[class^="block_"]'),
                    $tarPhase = $tarBlock.closest('[id^="phase_"]'),
                    floorCnt = parseInt($tarBlock.attr('data-floors-cnt'));
                floorCnt += 1;

                addFloors($tarPhase, $tarBlock, floorCnt);
            });
        }

        function addBlocks($tarPhase, NoOfBlocks) {

            var $curBlockWrapper = $tarPhase.find('.blocks-wrapper'),
                blockCnt = parseInt($tarPhase.attr('data-blocks-cnt')),
                NoOfFloors = parseInt($NoOfFloor.val()),
                tarPhaseId = $tarPhase.attr('id').split('_')[1];

            if (isNaN(NoOfFloors)) {
                NoOfFloors = 1;
            }

            for (var i = (blockCnt + 1); i <= NoOfBlocks; i++) {
                var blockHtml = $blockTableTemplate.html();
                blockHtml = blockHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                    .replace(/block__/g, 'block_' + i);
                $curBlockWrapper.append(blockHtml);

                var $tarBlock = $curBlockWrapper.find('.block_' + i);
                addFloors($tarPhase, $tarBlock, NoOfFloors);

                if($sameBlockYes.is(':checked') == false) {
                    $tarBlock.find('.add-block-btn').removeClass('hide');
                }
            }

            $tarPhase.attr('data-blocks-cnt', NoOfBlocks);

            bindTooltip();
        }

        function bindTooltip() {
            $('[data-toggle="tooltip"]').tooltip();
        }

        function removeBlocks($tarPhase, NoOfBlocks) {

            var curBlocksCnt = parseInt($tarPhase.attr('data-blocks-cnt'));

            for (var i = (NoOfBlocks + 1); i <= curBlocksCnt; i++) {
                $tarPhase.find('.block_' + i).slideUp(function () {
                    $(this).next('.floors-container').remove();
                    $(this).remove();
                });
            }
            $tarPhase.attr('data-blocks-cnt', NoOfBlocks);
        }

        function bindNoOfFloorChange() {

            $NoOfFloor.on('change', function () {


                var NoOfFloors = $NoOfFloor.val().trim();

                if (isNaN(NoOfFloors) || NoOfFloors <= 0) {
                    showError($NoOfFloor, 'Invalid No. of Blocks!');
                    $('.blockHead').hide();
                    $floorDetailsRowWrapper.html('').attr('data-floor-cnt',0);
                    addFloorDetailsRow();
                    return false;
                } else {
                    removeError($NoOfFloor);
                    processFloors();
                    var trLen = parseInt($sameFloorDetailsTable.find('> tbody > tr').length);
                    NoOfFloors=parseInt(NoOfFloors);
                    var dif=0;
                    if(NoOfFloors<trLen) {
                        dif = trLen-NoOfFloors;
                    }
                    if(dif>0) {
                        for (var i=0; i<dif;i++) {
                            $sameFloorDetailsTable.find('> tbody > tr:last').remove();
                        }
                    }
                    if(NoOfFloors>parseInt($sameFloorDetailsTable.find('> tbody > tr').length)) {
                        addFloorDetailsRow();
                    }
                }

            });
        }

        function processFloors() {

            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');

            $arrPhases.each(function () {
                var NoOfFloors = parseInt($NoOfFloor.val()),
                    $arrBlocks = $(this).find('[class^="block_"]'),
                    $tarPhase = $(this);

                if (isNaN(NoOfFloors)) {
                    NoOfFloors = 1;
                }
                var b=0;
                $arrBlocks.each(function () {
                    b++;
                    var curFloorsCnt = parseInt($(this).attr('data-floors-cnt'));

                    if (NoOfFloors > curFloorsCnt) {
                        var nFloors=0;
                        $('input[id*=Block_'+b+'_FloorDetail_]').each(function() {
                            if($(this).is(':checked')) {
                                nFloors++;
                            }
                        });
                        addFloors($tarPhase, $(this), nFloors);
                    } else {
                        removeFloors($(this), NoOfFloors);
                    }
                });
            });
        }

        function addFloors($tarPhase, $tarBlock, NoOfFloors) {

            var $curFloorsWrapper = $tarBlock.next('.floors-container').find('.floors-wrapper'),
                floorsCnt = parseInt($tarBlock.attr('data-floors-cnt')),
                tarPhaseId = $tarPhase.attr('id').split('_')[1],
                tarBlockId = $tarBlock.attr('data-id').split('_')[1];

            for (var i = (floorsCnt + 1); i <= NoOfFloors; i++) {
                var floorHtml = $floorTableTemplate.html();
                floorHtml = floorHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                    .replace(/block__/g, 'block_' + tarBlockId)
                    .replace(/floor__/g, 'floor_' + i);
                $curFloorsWrapper.append(floorHtml);

                var $tarFloor = $curFloorsWrapper.find('.floor_' + i);

                if($sameFloorYes.is(':checked') == false) {
                    $tarFloor.find('.add-floor-btn').removeClass('hide');
                }
            }

            $tarBlock.attr('data-floors-cnt', NoOfFloors);

            bindTooltip();
        }

        function removeFloors($tarBlock, NoOfFloors) {

            var curBlocksCnt = parseInt($tarBlock.attr('data-floors-cnt'));

            for (var i = (NoOfFloors + 1); i <= curBlocksCnt; i++) {
                $tarBlock.next('.floors-container').find('.floor_' + i).slideUp(function () {
                    $(this).next('.unittypes-container').remove();
                    $(this).next('.units-container').remove();
                    $(this).remove();
                });
            }
            $tarBlock.attr('data-floors-cnt', NoOfFloors);
        }

        function bindNextBtn_onClick() {
            $stepsWrapper.on('click', '.next-btn', function () {
                var nextStep = $(this).attr('data-target'),
                    $curStep = $(this).closest('.steps'),
                    $nextStep = $(nextStep);

                switch (nextStep) {
                    case '#step-2':
                        validateStep1(function (isSuccess) {

                            if (isSuccess) {
                                $phaseTableWrapper.hide().removeClass('hide').slideDown();

                                $curStep.addClass('hide');
                                $nextStep.removeClass('hide');

                                // add phase details from prev step
                                var arrPhaseDetails = [];
                                if($('#more-phase-yes').is(':checked')) {
                                    $phaseDetailsRowWrapper.find('tr').each(function() {
                                        var phaseDetail = {
                                            name: $(this).find('input.phase-name').val().trim(),
                                            title: $(this).find('input.phase-title').val().trim()
                                        };

                                        arrPhaseDetails.push(phaseDetail);
                                    });

                                    var i = 0;
                                    $phaseTableWrapper.find('> .panel').each(function() {
                                        $(this).find('input.phase-name').val(arrPhaseDetails[i].name);
                                        $(this).find('input.phase-title').val(arrPhaseDetails[i].title);
                                        i += 1;
                                    });
                                }
                                if($('#more-phase-no').is(':checked')) {
                                    var property=$("#propertyName").val();
                                    $phaseTableWrapper.find('> .panel').each(function() {
                                        $(this).find('input.phase-name').val(property);
                                        $(this).find('input.phase-title').val(property);

                                    });
                                }

                                var NoOfPhase = parseInt($NoOfPhase.val().trim());
                                $('.rHead').remove();
                                for(var j=1;j<=NoOfPhase;j++) {
                                    $sameBlockDetailsTable.find('> thead > tr > th:last').before('<th class="phaseHead rHead">Phase '+j+'</th>');
                                }

                            } else {
                                return false;
                            }
                        });
                        break;
                    case '#step-3':
                        validateStep2(function (isSuccess) {

                            if (isSuccess) {
                                $phaseTableWrapper.find('.blocks-container')
                                    .addClass('hide')
                                    .find('.blocks-wrapper').html('');
                                $phaseTableWrapper.find('.add-block-btn').addClass('hide');
                                $phaseTableWrapper.find('[id^="phase_"]').attr('data-blocks-cnt', 0);

                                $NoOfBlock.trigger('change');

                                //processBlocks();
                                if ($sameBlockYes.is(':checked')) {
                                    $('.add-block-btn').addClass('hide');
                                } else {
                                    $('.add-block-btn').removeClass('hide');
                                }

                                $('.blocks-container').hide().removeClass('hide').slideDown();

                                $curStep.addClass('hide');
                                $nextStep.removeClass('hide');

                                var $tarLi = $stepSep.find('>.floor');
                                $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                    .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                                $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                    .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                                // add block details from prev step
                                var arrBlockDetails = [];

                                    $blockDetailsRowWrapper.find('tr').each(function() {
                                        var arr=[];
                                        $(this).find('.phaseHead').each(function() {
                                            if($(this).find('input').is(':checked')) {
                                                arr.push(1);
                                            } else {
                                                arr.push(0);
                                            }
                                        });
                                        var blockDetail = {
                                            name: $(this).find('input.block-name').val().trim(),
                                            title: $(this).find('input.block-title').val().trim(),
                                            phase:arr
                                        };

                                        arrBlockDetails.push(blockDetail);
                                    });

                                    $('.blocks-wrapper').each(function() {
                                        var $tarBlockWrapper = $(this);
                                        var phaseCount = $tarBlockWrapper.attr('class').split('_')[1];
                                        var blkCount=0;
                                        for(var i=0; i < arrBlockDetails.length; i++) {
                                            if(parseInt(arrBlockDetails[i].phase[phaseCount-1])>0) {
                                                var tarNo = blkCount * 2;
                                                var $tarBlockTr = $tarBlockWrapper.find('> tr:eq(' + tarNo + ')');
                                                if ($tarBlockTr.length > 0) {
                                                    $tarBlockTr.find('input.block-name').val(arrBlockDetails[i].name);
                                                    $tarBlockTr.find('input.block-title').val(arrBlockDetails[i].title);
                                                }
                                                blkCount++;
                                            }
                                        }
                                    });

                                var NoOfBlock = parseInt($NoOfBlock.val().trim());
                                $('.fHead').remove();
                                for(var j=1;j<=NoOfBlock;j++) {
                                    $sameFloorDetailsTable.find('> thead > tr > th:last').before('<th class="blockHead fHead">Block '+j+'</th>');
                                }


                            } else {
                                return false;
                            }
                        });
                        break;
                    case '#step-4':
                    <?php if($unitGenType == '3') { ?>
                        validateStep2(function (isSuccess) {

                            if (isSuccess) {

                                $phaseTableWrapper.find('.blocks-container')
                                    .addClass('hide')
                                    .find('.blocks-wrapper').html('');
                                $phaseTableWrapper.find('.add-block-btn').addClass('hide');
                                $phaseTableWrapper.find('[id^="phase_"]').attr('data-blocks-cnt', 0);

                                $NoOfBlock.trigger('change');

                                //processBlocks();
                                if ($sameBlockYes.is(':checked')) {
                                    $('.add-block-btn').addClass('hide');
                                } else {
                                    $('.add-block-btn').removeClass('hide');
                                }

                                $('.blocks-container').hide().removeClass('hide').slideDown();

                                $curStep.addClass('hide');
                                $nextStep.removeClass('hide');

                                var $tarLi = $stepSep.find('>.floor');
                                $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                    .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                                $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                    .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                                // add block details from prev step
                                var arrBlockDetails = [];

                                $blockDetailsRowWrapper.find('tr').each(function() {
                                    var arr=[];
                                    $(this).find('.phaseHead').each(function() {
                                        if($(this).find('input').is(':checked')) {
                                            arr.push(1);
                                        } else {
                                            arr.push(0);
                                        }
                                    });
                                    var blockDetail = {
                                        name: $(this).find('input.block-name').val().trim(),
                                        title: $(this).find('input.block-title').val().trim(),
                                        phase:arr
                                    };

                                    arrBlockDetails.push(blockDetail);
                                });

                                $('.blocks-wrapper').each(function() {
                                    var $tarBlockWrapper = $(this);
                                    var phaseCount = $tarBlockWrapper.attr('class').split('_')[1];
                                    var blkCount=0;
                                    for(var i=0; i < arrBlockDetails.length; i++) {
                                        if(parseInt(arrBlockDetails[i].phase[phaseCount-1])>0) {
                                            var tarNo = blkCount * 2;
                                            var $tarBlockTr = $tarBlockWrapper.find('> tr:eq(' + tarNo + ')');
                                            if ($tarBlockTr.length > 0) {
                                                $tarBlockTr.find('input.block-name').val(arrBlockDetails[i].name);
                                                $tarBlockTr.find('input.block-title').val(arrBlockDetails[i].title);
                                            }
                                            blkCount++;
                                        }
                                    }
                                });

                                var NoOfBlock = parseInt($NoOfBlock.val().trim());
                                $('.fHead').remove();
                                for(var j=1;j<=NoOfBlock;j++) {
                                    $sameFloorDetailsTable.find('> thead > tr > th:last').before('<th class="blockHead fHead">Block '+j+'</th>');
                                }
                            } else {

                                return false;
                            }
                        });
                    <?php } else {?>

                        validateStep3(function (isSuccess) {
                            if (isSuccess) {
                                <?php if($unitGenType == '3') {?>

                                    $('.add-block-btn').addClass('hide');

                                    if ($sameFloorYes.is(':checked')) {
                                        $('.add-floor-btn').addClass('hide');
                                    } else {
                                        $('.add-floor-btn').removeClass('hide');
                                    }

                                    $('.floors-container').removeClass('hide');

                                    $curStep.addClass('hide');
                                    $nextStep.removeClass('hide');

                                    var $tarLi = $stepSep.find('>.unittype');
                                    $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                        .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                                    $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                        .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                                    // add floor details from prev step
                                    var arrFloorDetails = [];
                                    if($sameFloorYes.is(':checked')) {
                                        $floorDetailsRowWrapper.find('tr').each(function() {
                                            var floorDetail = {
                                                name: $(this).find('input.floor-name').val().trim(),
                                                title: $(this).find('input.floor-title').val().trim()
                                            };

                                            arrFloorDetails.push(floorDetail);
                                        });

                                        $('.floors-wrapper').each(function() {
                                            var $tarFloorWrapper = $(this);
                                            for(var i=0; i < arrFloorDetails.length; i++) {
                                                var $tarFloorTr = $tarFloorWrapper.find('tr:eq('+i+')');
                                                if($tarFloorTr.length > 0) {
                                                    $tarFloorTr.find('input.floor-name').val(arrFloorDetails[i].name);
                                                    $tarFloorTr.find('input.floor-title').val(arrFloorDetails[i].title);
                                                }
                                            }
                                        });
                                    }
                                    var NoOfFlr = parseInt($NoOfFloor.val().trim());
                                    $('.uHead').remove();
                                    for(var f=1;f<=NoOfFlr;f++) {
                                        $unitTypeTable.find('> thead > tr > th:last').before('<th class="floorHead uHead">Floor '+f+'</th>');
                                    }
                                <?php } else { ?>
                                    $phaseTableWrapper.find('.floors-container')
                                        .addClass('hide')
                                        .find('.floors-wrapper').html('');
                                    $phaseTableWrapper.find('.add-floor-btn').addClass('hide');
                                    $phaseTableWrapper.find('[class^="block_"]').attr('data-floors-cnt', 0);

                                    $NoOfFloor.trigger('change');

                                    $('.add-block-btn').addClass('hide');

                                    if ($sameFloorYes.is(':checked')) {
                                        $('.add-floor-btn').addClass('hide');
                                    } else {
                                        $('.add-floor-btn').removeClass('hide');
                                    }

                                    $('.floors-container').removeClass('hide');

                                    $curStep.addClass('hide');
                                    $nextStep.removeClass('hide');

                                    var $tarLi = $stepSep.find('>.unittype');
                                    $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                        .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                                    $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                        .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                                    // add floor details from prev step
                                    var arrFloorDetails = [];

                                        $floorDetailsRowWrapper.find('tr').each(function() {

                                            var arr=[];
                                            $(this).find('.blockHead').each(function() {
                                                if($(this).find('input').is(':checked')) {
                                                    arr.push(1);
                                                } else {
                                                    arr.push(0);
                                                }
                                            });

                                            var floorDetail = {
                                                name: $(this).find('input.floor-name').val().trim(),
                                                title: $(this).find('input.floor-title').val().trim(),
                                                block:arr
                                            };

                                            arrFloorDetails.push(floorDetail);
                                        });

                                        $('.floors-wrapper').each(function() {
                                            var $tarFloorWrapper = $(this);
                                            var blockCount = $tarFloorWrapper.attr('class').split('_')[1];
                                            var flrCount=0;

                                            for(var i=0; i < arrFloorDetails.length; i++) {
                                                if(parseInt(arrFloorDetails[i].block[blockCount-1])>0) {

                                                    var $tarFloorTr = $tarFloorWrapper.find('tr:eq(' + flrCount + ')');
                                                    if ($tarFloorTr.length > 0) {
                                                        $tarFloorTr.find('input.floor-name').val(arrFloorDetails[i].name);
                                                        $tarFloorTr.find('input.floor-title').val(arrFloorDetails[i].title);
                                                    }
                                                    flrCount++;
                                                }
                                            }

                                        });

                                        var NoOfFloor = parseInt($NoOfFloor.val().trim());
                                        $('.uHead').remove();
                                        for(var j=1;j<=NoOfFloor;j++) {
                                            $unitTypeTable.find('> thead > tr > th:last').before('<th class="floorHead uHead">Floor '+j+'</th>');
                                        }
                                <?php } ?>
                            } else {
                                return false;
                            }
                        });
                    <?php } ?>
                        break;
                    case '#step-5':
                        $('.add-floor-btn').addClass('hide');

                        if($('input[name="diff-unittype"]:checked').length <= 0) {
                            return false;
                        } else {
                            $phaseTableWrapper.find('.unittypes-container').remove();
                            $phaseTableWrapper.find('.units-container').remove();

                            if ($diffUnitTypeNo.is(':checked')) {
                                $nextStep = $('#step-6');
                                $seqPrefix.find('li[data-order="unit_type"]').remove();

                                addUnitsTableToAllFloors();

                                var $tarLi = $stepSep.find('> .unit');
                                $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                    .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                                $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                    .next('p').removeClass('stepli_p1').addClass('stepli_p2');
                            } else {
                                addUnittypeTableToAllFloors();
                            }
                            $('#same-unittype-no').prop('checked', true).trigger('change');
                            $curStep.addClass('hide');
                            $nextStep.removeClass('hide');
                        }
                        break;
                    case '#step-6':

                        arrUnitTypes = [];
                        $unitTypeRowWrapper.find('tr').each(function() {
                            var unittypeData = {
                                name: $(this).find('input.unittype-name').val().trim(),
                                type: $(this).find('input.unittype-type').val().trim(),
                                title: $(this).find('input.unittype-title').val().trim(),
                                area: $(this).find('input.unittype-area').val().trim(),
                                data: $(this).find('input.unittype-name').val().trim()+'-'+$(this).find('input.unittype-type').val().trim()+'-'+$(this).find('input.unittype-area').val().trim(),
                                value: $(this).find('input.unittype-name').val().trim()+'-'+$(this).find('input.unittype-type').val().trim()+'-'+$(this).find('input.unittype-area').val().trim()
                            };

                            arrUnitTypes.push(unittypeData);
                        });

                        if ($sameUnitTypeYes.is(':checked')) {
                            var isSuccess = addUnittypesToAllFloors();
                            if (isSuccess === false) {
                                return false;
                            }
                        } else {
                            <?php if($unitGenType == '3') {?>
//                                addEmptyUnittypeToAllFloors();
                                addUnittypesToAllFloors();
                            <?php } else {?>
                                addUnittypesToAllFloors();
                            <?php } ?>
                            $('.add-unittype-btn').removeClass('hide');
                        }
                        $phaseTableWrapper.find('.unittypes-container').removeClass('hide');
                        <?php if($unitGenType == '3') {?>
                            $phaseTableWrapper.find('.floors-container').removeClass('hide');
                        <?php } ?>
                        $curStep.addClass('hide');
                        $nextStep.removeClass('hide');

                        var $tarLi = $stepSep.find('> .unit');
                        $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                            .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                        $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                            .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                        break;
                    case '#step-7':

                        validateStep6(function (isSuccess) {
                            if (isSuccess) {

                                validateAllPhases(function (isPhasesSuccess) {

                                    if (isPhasesSuccess) {
                                        if ($diffUnitTypeNo.is(':checked')) {
                                            addEmptyUnitToAllFloors();
                                        } else {
                                            addEmptyUnitToAllUnitTypes();
                                        }

                                        $('.add-unittype-btn').addClass('hide');
                                        disableEditing();

                                        $phaseTableWrapper.find('.units-container').removeClass('hide');
                                        $phaseTableWrapper.find('.unittypes-container').removeClass('hide');
                                        <?php if($unitGenType == '3') {?>
                                            $phaseTableWrapper.find('.floors-container').removeClass('hide');
                                        <?php } ?>
                                        $saveBtn.removeClass('hide');
                                        $backBtnStep7.removeClass('hide');
                                        $saveBtnArea.removeClass('hide');

                                        $stepsWrapper.addClass('hide');

                                        $curStep.addClass('hide');
                                        $nextStep.removeClass('hide');
                                    } else {
                                        return false;
                                    }
                                });

                            } else {
                                return false;
                            }
                        });
                        break;
                }

            });
        }

        function addUnitsTableToAllFloors() {
            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.each(function () {
                var $tarPhase = $(this),
                    $arrBlocks = $tarPhase.find('[class^="block_"]');

                $arrBlocks.each(function () {
                    var $tarBlock = $(this),
                        $arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]');

                    $arrFloors.each(function () {
                        var $tarFloor = $(this);

                        var unitTableHtml = $unitTableTemplate.html();
                        $tarFloor.after(unitTableHtml);
                    });
                });
            });
        }

        function addUnittypeTableToAllFloors() {
            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.each(function () {
                var $tarPhase = $(this),
                    $arrBlocks = $tarPhase.find('[class^="block_"]');

                $arrBlocks.each(function () {
                    var $tarBlock = $(this),
                        $arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]');

                    $arrFloors.each(function () {
                        var $tarFloor = $(this);

                        var unittypeTableHtml = $unitTypeTableTemplate.html();
                        $tarFloor.after(unittypeTableHtml);
                    });
                });
            });
        }

        function bindBackBtn_onClick() {

            $backBtnStep7.on('click', function () {
                var isConfirm = confirm('If you go back all current datas will be lose. Are you sure want to go back?');
                if (isConfirm === false) {
                    return;
                } else {

                    var $prevStep = $('#step-6'),
                        $unitsWrapper = $phaseTableWrapper.find('.units-wrapper');

                    var $tarUnittypeContainer = $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"]')
                        .next('.floors-container').find('[class^="floor_"]')
                        .next('.unittypes-container');

                    if($tarUnittypeContainer.length > 0) {
                        $tarUnittypeContainer.find('[class^="unittype_"].open .mainTr').trigger('click');

                        //$tarUnittypeContainer.find('[class^="unittype_"]').attr('data-unit-cnt', 0);
                        $phaseTableWrapper.find('[class^="unittype_"]').each(function () {
                            $(this).attr('data-unit-cnt', 0);
                        });
                    } else {
                        $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
                            .next('.floors-container').find('[class^="floor_"].open .mainTr').trigger('click');

                        $phaseTableWrapper.find('[class^="floor_"]').attr('data-unit-cnt', 0);
                    }

                    if ($unitsWrapper.length <= 0) {
                        $phaseTableWrapper.find('.unittypes-container').addClass('hide');
                        $phaseTableWrapper.find('.unittypes-wrapper').html('');
                    }

                    $phaseTableWrapper.find('.units-container').addClass('hide');
                    $unitsWrapper.html('');

                    $stepsWrapper.removeClass('hide');


                    $prevStep.removeClass('hide');

                    enableEditing();
                    <?php if($unitGenType == '3') {?>
                        $phaseTableWrapper.find('.floors-container').addClass('hide');
                    <?php } ?>
                    $saveBtn.addClass('hide');
                    $backBtnStep7.addClass('hide');
                    $formWrapper.find('> .savebtn_area').addClass('hide');
                }
            });

            $stepsWrapper.on('click', '.back-btn', function () {
                var isConfirm = confirm('If you go back all current datas will be lose. Are you sure want to go back?');
                if (isConfirm === false) {
                    return;
                } else {
                    var prevStep = $(this).attr('data-target'),
                        $curStep = $(this).closest('.steps'),
                        $prevStep = $(prevStep);

                    switch (prevStep) {
                        case '#step-1':
                            $phaseTableWrapper.addClass('hide').html('');
                            $phaseTableWrapper.attr('data-phase-cnt', 0);

                            $NoOfPhase.trigger('change');

                            var $tarLi = $stepSep.find('>.phase');
                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                            $('input[name="more-block"]').removeAttr("checked");
                            $sameBlockWrapper.slideUp();
                            $('input[name="same-block"]').removeAttr("checked");
                            $noOfBlocksWrapper.slideUp(function() {
                                $NoOfBlock.val(1);
                            });
                            $sameBlockDetailsWrapper.slideUp();
                            break;
                        case '#step-2':
                            $phaseTableWrapper.find('.blocks-container')
                                .addClass('hide')
                                .find('.blocks-wrapper').html('');
                            $phaseTableWrapper.find('.add-block-btn').addClass('hide');
                            $phaseTableWrapper.find('[id^="phase_"]').attr('data-blocks-cnt', 0);

                            $NoOfBlock.trigger('change');

                            var $tarLi = $stepSep.find('>.block');
                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                            $('input[name="multi-floor"]').removeAttr("checked");
                            $sameFloorWrapper.slideUp();
                            $('input[name="same-floor"]').removeAttr("checked");
                            $noOfFloorsWrapper.slideUp(function() {
                                $NoOfFloor.val(1);
                            });
                            $sameFloorDetailsWrapper.slideUp();

                            break;
                        case '#step-3':
                            $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open .mainTr').trigger('click');

                            $phaseTableWrapper.find('.floors-container')
                                .addClass('hide')
                                .find('.floors-wrapper').html('');
                            $phaseTableWrapper.find('.add-floor-btn').addClass('hide');
                            $phaseTableWrapper.find('[class^="block_"]').attr('data-floors-cnt', 0);

                            $NoOfFloor.trigger('change');

                            var $tarLi = $stepSep.find('>.floor');
                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                            break;
                        case '#step-4':
                            $unitTypeRowWrapper.attr('data-unittype-cnt', 1);
                            $unitTypeRowWrapper.html('');
                            addUnitTypeRow();
                            arrUnitTypes = new Array();
                            break;
                        case '#step-5':

                            $phaseTableWrapper.find('[id^="phase_"] .panel-collapse.collapse.in [class^="block_"].open')
                                .next('.floors-container').find('[class^="floor_"].open .mainTr').trigger('click');

                            $phaseTableWrapper.find('.unittypes-container').addClass('hide');
                            $phaseTableWrapper.find('.unittypes-wrapper').html('');
                            $phaseTableWrapper.find('[class^="floor_"]').attr('data-unittype-cnt', 0);

                            if ($diffUnitTypeNo.is(':checked')) {
                                $prevStep = $('#step-4');
                            }

                            $('.add-unittype-btn').addClass('hide');
                            <?php if($unitGenType == '3') {?>
                                $phaseTableWrapper.find('.floors-container').addClass('hide');
                            <?php } ?>
                            var $tarLi = $stepSep.find('>.unittype');
                            $tarLi.siblings('li').find('> div.step_by_sep').removeClass('stepsep_active')
                                .next('p').removeClass('stepli_p2').addClass('stepli_p1');
                            $tarLi.find('> div.step_by_sep').addClass('stepsep_active')
                                .next('p').removeClass('stepli_p1').addClass('stepli_p2');

                            break;
                    }

                    $curStep.addClass('hide');
                    $prevStep.removeClass('hide');
                }
            });
        }

        function validateStep1(callBack) {
            var NoOfPhase = parseInt($NoOfPhase.val().trim());
//          ProjectName = $ProjectName.val().trim(),
//          ProjectId = $ProjectId.val().trim();
//        	removeError($ProjectName);

            removeError($NoOfPhase);

//        if (ProjectName.length <= 0) {
//            showError($ProjectName, 'Project Name is required!');
//            callBack(false);
//            return false;
//        } else if (isNaN(ProjectId)) {
//            showError($ProjectName, 'Invalid Project Name!');
//            callBack(false);
//            return false;
//        } else
            if (isNaN(NoOfPhase) || NoOfPhase <= 0) {
                showError($NoOfPhase, 'Invalid No. of Phase!');
                callBack(false);
                return false;
            }  else if($('#more-phase-yes').is(':checked') === true && $phaseDetailsWrapper.find('input.error').length > 0) {
                $phaseDetailsWrapper.find('input.error').focus();
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        }

        function validateStep2(callBack) {
            var NoOfBlock = parseInt($NoOfBlock.val().trim());

            removeError($NoOfBlock);
            if($('input[name="more-block"]:checked').length <= 0) {
                callBack(false);
                return false;
            } else if($('input[name="same-block"]:checked').length <= 0) {
                callBack(false);
                return false;
            } else if (isNaN(NoOfBlock) || NoOfBlock <= 0) {
                showError($NoOfBlock, 'Invalid No. of Blocks!');
                callBack(false);
                return false;
            } else if($sameBlockDetailsWrapper.find('input.error').length > 0) {
                $sameBlockDetailsWrapper.find('input.error').focus();
                callBack(false);
                return false;
            } else if(parseInt($sameBlockDetailsTable.find('> tbody > tr:not(.empty-row)').length)<NoOfBlock) {
                alert('Please add '+NoOfBlock+' Blocks');
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        }

        function validateStep3(callBack) {

            var NoOfFloors = parseInt($NoOfFloor.val().trim());
            removeError($NoOfFloor);
            if($('input[name="multi-floor"]:checked').length <= 0) {
                callBack(false);
                return false;
            } else if($('input[name="same-floor"]:checked').length <= 0) {

                callBack(false);
                return false;
            } else if (isNaN(NoOfFloors) || NoOfFloors <= 0) {

                showError($NoOfFloor, 'Invalid No. of Floors!');
                callBack(false);
                return false;
            } else if($sameFloorDetailsWrapper.find('input.error').length > 0) {

                $sameFloorDetailsWrapper.find('input.error').focus();
                callBack(false);
                return false;
            }
                <?php if($unitGenType != '3') {?>

                else if(parseInt($sameFloorDetailsTable.find('> tbody > tr:not(.empty-row)').length)<NoOfFloors) {
                    alert('Please add '+NoOfFloors+' Floors');
                    callBack(false);
                    return false;
                }
            <?php } ?>
            else {
                callBack(true);
                return true;
            }
        }

        function validateStep6(callBack) {
            var seqStarting = $seqStarting.val().trim(),
                seqWidth = $seqWidth.val().trim(),
                skipNos = $seqSkipNos.val().trim();

            removeError($seqStarting);
            removeError($seqWidth);
            removeError($seqSkipNos);

            if ($unitSeqNumeric.is(':checked')) {
                // numbers
                if (seqStarting != '' && isNaN(seqStarting)) {
                    showError($seqStarting, 'Invalid Starting Number!');
                    callBack(false);
                    return false;
                } else if (seqWidth != '' && isNaN(seqWidth)) {
                    showError($seqWidth, 'Invalid Width!');
                    callBack(false);
                    return false;
                } else if (skipNos != '' && /^[0-9 ,]+$/.test(skipNos) === false) {
                    showError($seqSkipNos, 'Invalid Skip Nos!');
                    callBack(false);
                    return false;
                } else {
                    callBack(true);
                    return true;
                }
            } else {
                // alphabets

                if (seqStarting != '' && /^[a-z]$/i.test(seqStarting) === false) {
                    showError($seqStarting, 'Invalid Starting Alphabet!');
                    callBack(false);
                    return false;
                } else if (skipNos != '' && /^[a-z ,]+$/i.test(skipNos) === false) {
                    showError($seqSkipNos, 'Invalid Skip Alphabets!');
                    callBack(false);
                    return false;
                } else {
                    callBack(true);
                    return true;
                }
            }
        }

        function validateAllPhases(callBack) {
            var arrPhases = $phaseTableWrapper.find('> [id^="phase_"]').toArray();
            validateRecursively(arrPhases, callBack);

            function validateRecursively(arrPhase, callBack) {

                if (arrPhase.length <= 0) {
                    callBack(true);
                    return true;
                }

                var $phase = $(arrPhase.shift());
                validatePhase($phase, function (isSuccess) {
                    if (isSuccess) {
                        validateAllBlocks($phase, function (isSuccess) {
                            if (isSuccess) {
                                validateRecursively(arrPhase, callBack);
                            } else {

                                // open error block phase
                                if($phase.find('> .panel-collapse:not(.in)').length > 0){
                                    $phase.find('.panel-heading').trigger('click');
                                }

                                callBack(false);
                                return false;
                            }
                        });
                    } else {
                        callBack(false);
                        return false;
                    }
                });
            }
        }

        function validatePhase($tarPhase, callBack) {
            var $phaseName = $tarPhase.find('input.phase-name'),
                phaseName = $phaseName.val().trim(),
                $phaseTitle = $tarPhase.find('input.phase-title'),
                phaseTitle = $phaseTitle.val().trim();

            removeError($phaseName);
            removeError($phaseTitle);

            if (phaseName.length <= 0) {
                showError($phaseName, 'Phase name is required!');
                callBack(false);
                return false;
            } else if (phaseTitle.length <= 0) {
                showError($phaseTitle, 'Title is required!');
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        }

        function validateAllBlocks($tarPhase, callBack) {

            var arrBlocks = $tarPhase.find('[class^="block_"]').toArray();
            validateRecursively(arrBlocks, callBack);

            function validateRecursively(arrBlocks, callBack) {

                if (arrBlocks.length <= 0) {
                    callBack(true);
                    return true;
                }

                var $block = $(arrBlocks.shift());
                validateBlock($block, function (isSuccess) {
                    if (isSuccess) {
                        validateAllFloors($block, function (isSuccess) {
                            if (isSuccess) {
                                validateRecursively(arrBlocks, callBack);
                            } else {

                                // open error floor phase
                                if($block.hasClass('open') === false){
                                    $block.find('.mainTr').trigger('click');
                                }

                                callBack(false);
                                return false;
                            }
                        });
                    } else {
                        callBack(false);
                        return false;
                    }
                });
            }
        }

        function validateBlock($tarBlock, callBack) {
            var $blockName = $tarBlock.find('input.block-name'),
                blockName = $blockName.val().trim(),
                $blockTitle = $tarBlock.find('input.block-title'),
                blockTitle = $blockTitle.val().trim();
//            $blockWbs = $tarBlock.find('input.block-wbs'),
//            blockWbs = $blockWbs.val().trim();

            removeError($blockName);
            removeError($blockTitle);
//        removeError($blockWbs);

            if (blockName.length <= 0) {
                showError($blockName, 'Block name is required!');
                callBack(false);
                return false;
            } else if (blockTitle.length <= 0) {
                showError($blockTitle, 'Title is required!');
                callBack(false);
                return false;
//        } else if (blockWbs.length <= 0) {
//            showError($blockWbs, 'WBS is required!');
//            callBack(false);
//            return false;
            } else {
                callBack(true);
                return true;
            }
        }

        function validateAllFloors($tarBlock, callBack) {

            var arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]').toArray();
            validateRecursively(arrFloors, callBack);

            function validateRecursively(arrBlocks, callBack) {

                if (arrFloors.length <= 0) {
                    callBack(true);
                    return true;
                }

                var $floor = $(arrFloors.shift());
                validateFloor($floor, function (isSuccess) {
                    if (isSuccess) {

                        if ($floor.next('.unittypes-container').find('[class^="unittype_"]').length > 0) {
                            validateAllUnittypes($floor, function (isSuccess) {
                                if (isSuccess) {
                                    validateRecursively(arrFloors, callBack);
                                } else {

                                    // open error
                                    if($floor.hasClass('open') === false){
                                        $floor.find('.mainTr').trigger('click');
                                    }

                                    callBack(false);
                                    return false;
                                }
                            });
                        } else {
                            validateRecursively(arrFloors, callBack);
                        }
                    } else {
                        callBack(false);
                        return false;
                    }
                });
            }
        }

        function validateFloor($tarFloor, callBack) {
            var $floorName = $tarFloor.find('input.floor-name'),
                floorName = $floorName.val().trim(),
                $floorTitle = $tarFloor.find('input.floor-title'),
                floorTitle = $floorTitle.val().trim();
//            $floorWbs = $tarFloor.find('input.floor-wbs'),
//            floorWbs = $floorWbs.val().trim();

            removeError($floorName);
            removeError($floorTitle);
//        removeError($floorWbs);

            <?php if($unitGenType != '3') { ?>
            if (floorName.length <= 0) {
                showError($floorName, 'Floor name is required!');
                callBack(false);
                return false;
            } else if (floorTitle.length <= 0) {
                showError($floorTitle, 'Title is required!');
                callBack(false);
                return false;
//        } else if (floorWbs.length <= 0) {
//            showError($floorWbs, 'WBS is required!');
//            callBack(false);
//            return false;
            } else {
                callBack(true);
                return true;
            }
            <?php } else { ?>
            callBack(true);
            return true;
            <?php } ?>
        }

        function validateAllUnittypes($tarFloor, callBack) {

            var arrUnittypes = $tarFloor.next('.unittypes-container').find('[class^="unittype_"]').toArray();
            validateRecursively(arrUnittypes, callBack);

            function validateRecursively(arrUnittypes, callBack) {

                if (arrUnittypes.length <= 0) {
                    callBack(true);
                    return true;
                }

                var $unittype = $(arrUnittypes.shift());
                validateUnittype($unittype, function (isSuccess) {
                    if (isSuccess) {
                        validateRecursively(arrUnittypes, callBack);
                    } else {
                        callBack(false);
                        return false;
                    }
                });
            }
        }

        function validateUnittype($tarUnittype, callBack) {
            var $name = $tarUnittype.find('input.unittype-name'),
                name = $name.val().trim(),
                $type = $tarUnittype.find('input.unittype-type'),
                type = $type.val().trim(),
                $title = $tarUnittype.find('input.unittype-title'),
                title = $title.val().trim(),
                $area = $tarUnittype.find('input.unittype-area'),
                area = $area.val().trim(),
                $noOfUnits = $tarUnittype.find('input.unittype-no-of-units'),
                noOfUnits = parseInt($noOfUnits.val());

            removeError($name);
            removeError($noOfUnits);

            if (name.length <= 0) {
                showError($name, 'Unit Type Name is required!');
                callBack(false);
                return false;
            } else if (title.length <= 0) {
                showError($name, 'Invalid Unit Type Name!');
                callBack(false);
                return false;
            } else if (area.length <= 0) {
                showError($name, 'Invalid Unit Type Name!');
                callBack(false);
                return false;
            } else if (isNaN(noOfUnits) || noOfUnits <= 0) {
                showError($noOfUnits, 'Invalid No.of Units!');
                callBack(false);
                return false;
            } else {
                callBack(true);
                return true;
            }
        }

        function bindPhase_onChange() {
            $phaseTableWrapper.on('change', '> [id^="phase_"] input.phase-name', function () {

                var $tarPhase = $(this).closest('[id^="phase_"]');
                validatePhase($tarPhase, function () {
                });
            });
        }

        function disableEditing() {

            $('.delete-phase-btn').addClass('hide');
            $('.delete-block-btn').addClass('hide');
            $('.delete-floor-btn').addClass('hide');
            $('.delete-unittype-btn').addClass('hide');

            // phase inputs
            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.find('input.phase-name').attr('readonly', true);

            // block
            var $arrBlocks = $phaseTableWrapper.find('[class^="block_"]');
            $arrBlocks.find('input.block-name').attr('readonly', true);
            $arrBlocks.find('input.block-title').attr('readonly', true);
//        $arrBlocks.find('input.block-wbs').attr('readonly', true);

            // floor
            var $arrFloors = $phaseTableWrapper.find('[class^="floor_"]');
            $arrFloors.find('input.floor-name').attr('readonly', true);
            $arrFloors.find('input.floor-title').attr('readonly', true);
//        $arrFloors.find('input.floor-wbs').attr('readonly', true);

            // unit type
            var $arrUnittypes = $phaseTableWrapper.find('[class^="unittype_"]');
            $arrUnittypes.find('input.unittype-name').attr('readonly', true);
        }

        function enableEditing() {

            $('.delete-phase-btn').removeClass('hide');
            $('.delete-block-btn').removeClass('hide');
            $('.delete-floor-btn').removeClass('hide');
            $('.delete-unittype-btn').removeClass('hide');

            // phase inputs
            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.find('input.phase-name').removeAttr('readonly');

            // block
            var $arrBlocks = $phaseTableWrapper.find('[class^="block_"]');
            $arrBlocks.find('input.block-name').removeAttr('readonly');
            $arrBlocks.find('input.block-title').removeAttr('readonly');
//        $arrBlocks.find('input.block-wbs').removeAttr('readonly');

            // floor
            var $arrFloors = $phaseTableWrapper.find('[class^="floor_"]');
            $arrFloors.find('input.floor-name').removeAttr('readonly');
            $arrFloors.find('input.floor-title').removeAttr('readonly');
//        $arrFloors.find('input.floor-wbs').removeAttr('readonly');

            // unit type
            var $arrUnittypes = $phaseTableWrapper.find('[class^="unittype_"]');
            if($sameUnitTypeYes.is(':checked') == false) {
                $arrUnittypes.find('input.unittype-name').removeAttr('readonly');
            }
        }

        function addUnitTypeRow() {

            if ($unitTypeRowWrapper.find('tr.empty-row').length > 0) {
                return;
            }

            var unitTypeCnt = parseInt($unitTypeRowWrapper.attr('data-unittype-cnt'));
            var rowHtml = $unitTypeRowTemplate.html();

            unitTypeCnt += 1;

            var unitTypCnt = $unitTypeTable.find('> tbody > tr:not(.empty-row)').length;


            rowHtml = rowHtml.replace(/UnitType__/g, 'UnitType_' + unitTypeCnt);
            $unitTypeRowWrapper.append(rowHtml);


                var NoOfFloor = parseInt($NoOfFloor.val().trim());

                for(var i=1;i<=NoOfFloor;i++) {
                    var tdHtml = $floorUnitTypeSelect.html();
                    tdHtml = tdHtml.replace(/UnitTypeDetail__/g, 'UnitTypeDetail_' + unitTypeCnt);
                    tdHtml = tdHtml.replace(/Floor_0/g, 'Floor_' + i);
                    $('#rowUnitType_'+unitTypeCnt).find('td:last').before(tdHtml)
                }

                if($sameUnitTypeNo.is(':checked')) {
                    <?php if($unitGenType != '3') { ?>
                        $('.floorHead').show();
                    <?php } else {?>
                        $('.floorHead').hide();
                    <?php } ?>
                } else {
                    $('.floorHead').hide();

                }

            var $tarTr = $('tr#rowUnitType_' + unitTypeCnt);
            $tarTr.find('input[name="NameUnitType_' + unitTypeCnt + '"]').focus();
            $tarTr.addClass('empty-row');

            $unitTypeRowWrapper.attr('data-unittype-cnt', unitTypeCnt);
        }

        function addFloorDetailsRow() {

            if ($floorDetailsRowWrapper.find('tr.empty-row').length > 0) {
                return;
            }

            var floorDetailCnt = parseInt($floorDetailsRowWrapper.attr('data-floor-cnt'));
            var rowHtml = $floorDetailsRowTemplate.html();


            floorDetailCnt += 1;
            var floorCnt = $sameFloorDetailsTable.find('> tbody > tr:not(.empty-row)').length;
            var bCount=0;
            if($.trim($NoOfBlock.val())!="") {
                bCount=parseInt($.trim($NoOfFloor.val()));
            }

            if(floorCnt== bCount) {
                return;
            }
            rowHtml = rowHtml.replace(/FloorDetail__/g, 'FloorDetail_' + floorDetailCnt);
            $floorDetailsRowWrapper.append(rowHtml);

            var NoOfBlock = parseInt($NoOfBlock.val().trim());

            for(var i=1;i<=NoOfBlock;i++) {
                var tdHtml = $blockFloorSelect.html();
                tdHtml = tdHtml.replace(/FloorDetail__/g, 'FloorDetail_' + floorDetailCnt);
                tdHtml = tdHtml.replace(/Block_0/g, 'Block_' + i);
                $('#rowFloorDetail_'+floorDetailCnt).find('td:last').before(tdHtml)
            }

            if($sameFloorNo.is(':checked')) {
                $('.blockHead').show();
            } else {
                $('.blockHead').hide();

            }

            var $tarTr = $('tr#rowFloorDetail_' + floorDetailCnt);
            $tarTr.find('input[name="NameFloorDetail_' + floorDetailCnt + '"]').focus();
            $tarTr.addClass('empty-row');

            $floorDetailsRowWrapper.attr('data-floor-cnt', floorDetailCnt);

            bindTooltip();


        }

        function bindDeleteFloorDetailRow_onClick() {
            $sameFloorDetailsWrapper.on('click', '.delete-floor-detail-btn a', function(ev) {
                ev.preventDefault();

                $(this).closest('tr').remove();
            });
        }

        function addPhaseDetailsRow() {

            if ($phaseDetailsRowWrapper.find('tr.empty-row').length > 0) {
                return;
            }

            var phaseDetailCnt = parseInt($phaseDetailsRowWrapper.attr('data-phase-cnt'));
            var rowHtml = $phaseDetailsRowTemplate.html();

            phaseDetailCnt += 1;
            rowHtml = rowHtml.replace(/PhaseDetail__/g, 'PhaseDetail_' + phaseDetailCnt);
            $phaseDetailsRowWrapper.append(rowHtml);

            var $tarTr = $('tr#rowPhaseDetail_' + phaseDetailCnt);
            $tarTr.find('input[name="NamePhaseDetail_' + phaseDetailCnt + '"]').focus();
            $tarTr.addClass('empty-row');

            var phaseCnt = $phaseDetailsTable.find('> tbody > tr:not(.empty-row)').length;
            $NoOfPhase.val(phaseCnt).trigger('change');

            $phaseDetailsRowWrapper.attr('data-phase-cnt', phaseDetailCnt);

            bindTooltip();
        }

        function bindDeletePhaseDetailRow_onClick() {
            $phaseDetailsRowWrapper.on('click', '.delete-phase-detail-btn a', function(ev) {
                ev.preventDefault();

                $(this).closest('tr').remove();
            });
        }

        function addBlockDetailsRow() {
            if ($blockDetailsRowWrapper.find('tr.empty-row').length > 0) {
                return;
            }

            var blockDetailCnt = parseInt($blockDetailsRowWrapper.attr('data-block-cnt'));

            var rowHtml = $blockDetailsRowTemplate.html();

            blockDetailCnt += 1;
            var blockCnt = $sameBlockDetailsTable.find('> tbody > tr:not(.empty-row)').length;
            var bCount=0;
            if($.trim($NoOfBlock.val())!="") {
                bCount=parseInt($.trim($NoOfBlock.val()));
            }

            if(blockCnt== bCount) {
                return;
            }
            rowHtml = rowHtml.replace(/BlockDetail__/g, 'BlockDetail_' + blockDetailCnt);
            $blockDetailsRowWrapper.append(rowHtml);

            var NoOfPhase = parseInt($NoOfPhase.val().trim());

            for(var i=1;i<=NoOfPhase;i++) {
                var tdHtml = $phaseBlockSelect.html();
                tdHtml = tdHtml.replace(/BlockDetail__/g, 'BlockDetail_' + blockDetailCnt);
                tdHtml = tdHtml.replace(/Phase_0/g, 'Phase_' + i);
                $('#rowBlockDetail_'+blockDetailCnt).find('td:last').before(tdHtml)
            }

            if($sameBlockNo.is(':checked')) {
                $('.phaseHead').show();
            } else {
                $('.phaseHead').hide();

            }
            var $tarTr = $('tr#rowBlockDetail_' + blockDetailCnt);
            $tarTr.find('input[name="NameBlockDetail_' + blockDetailCnt + '"]').focus();
            $tarTr.addClass('empty-row');

            $blockDetailsRowWrapper.attr('data-block-cnt', blockDetailCnt);

            bindTooltip();
        }

        function bindDeleteBlockDetailRow_onClick() {
            $blockDetailsRowWrapper.on('click', '.delete-block-detail-btn a', function(ev) {
                ev.preventDefault();

                $(this).closest('tr').remove();
            });
        }

        function bindDeleteUnitTypeRow_onClick() {
            $unitTypeRowWrapper.on('click', '.delete-unittype-btn a', function(ev) {
                ev.preventDefault();

                $(this).closest('tr').remove();
            });
        }

        function addUnittypesToAllFloors() {

            var $arrRows = $unitTypeRowWrapper.find('> tr:not(.empty-row)');
            if ($arrRows.length <= 0) {
                alert('Add some Unit type!');
                return false;
            }

            $arrRows.each(function () {
                var $tarTr = $(this);

                var arr=[];
                $tarTr.find('.floorHead').each(function() {
                    if($(this).find('input').is(':checked')) {
                        arr.push(1);
                    } else {
                        arr.push(0);
                    }
                });
                var Unittype = {
                    name: $tarTr.find('input[name^="NameUnitType_"]').val(),
                    type: $tarTr.find('input[name^="TypeUnitType_"]').val(),
                    title: $tarTr.find('input[name^="TitleUnitType_"]').val(),
                    area: $tarTr.find('input[name^="AreaUnitType_"]').val()
                };
                var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
                $arrPhases.each(function () {
                    var $tarPhase = $(this),
                        $arrBlocks = $tarPhase.find('[class^="block_"]');

                    $arrBlocks.each(function () {
                        var $tarBlock = $(this),
                            $arrFloors = $tarBlock.next('.floors-container').find('[class^="floor_"]');

                        $arrFloors.each(function () {
                            var $tarFloor = $(this);
                            var flrCurId = parseInt($tarFloor.attr('class').split('_')[1]);

                            if(typeof arr[flrCurId-1] !="undefined" && arr[flrCurId-1]!=0) {
                                addUnitType($tarPhase, $tarBlock, $tarFloor, Unittype);
                            }
                        });
                    });
                });

            });
        }

        function addEmptyUnittypeToAllFloors() {

            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.each(function () {
                var $tarPhase = $(this),
                    $arrBlocks = $(this).find('[class^="block_"]');

                $arrBlocks.each(function () {
                    var $tarBlock = $(this),
                        $arrFloors = $(this).next('.floors-container').find('[class^="floor_"]');

                    $arrFloors.each(function () {
                        var $tarFloor = $(this);
                        addUnitType($tarPhase, $tarBlock, $tarFloor);
                    });
                });
            });
        }

        function addEmptyUnitToAllFloors() {

            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.each(function () {
                var $tarPhase = $(this),
                    $arrBlocks = $(this).find('[class^="block_"]');

                $arrBlocks.each(function () {
                    var $tarBlock = $(this),
                        $arrFloors = $(this).next('.floors-container').find('[class^="floor_"]');

                    $arrFloors.each(function () {
                        var $tarFloor = $(this);

                        addUnits($tarPhase, $tarBlock, $tarFloor, '', 1);
                    });
                });
            });
        }

        function addEmptyUnitToAllUnitTypes() {

            var $arrPhases = $phaseTableWrapper.find('> [id^="phase_"]');
            $arrPhases.each(function () {
                var $tarPhase = $(this),
                    $arrBlocks = $(this).find('[class^="block_"]');

                $arrBlocks.each(function () {
                    var $tarBlock = $(this),
                        $arrFloors = $(this).next('.floors-container').find('[class^="floor_"]');

                    $arrFloors.each(function () {
                        var $tarFloor = $(this),
                            $arrUnittypes = $(this).next('.unittypes-container').find('[class^="unittype_"]');

                        $arrUnittypes.each(function () {
                            var $noOfUnits = $(this).find('input.unittype-no-of-units'),
                                noOfUnits = parseInt($noOfUnits.val());

                            if (isNaN(noOfUnits)) {
                                $noOfUnits.val(1);
                                addUnits($tarPhase, $tarBlock, $tarFloor, $(this), 1);
                            } else {
                                addUnits($tarPhase, $tarBlock, $tarFloor, $(this), noOfUnits);
                            }
                        });
                    });
                });
            });
        }

        function bindUnitTypeArea_onChange() {
            $unitTypeRowWrapper.on('change', 'input', function () {

                var $tarTr = $(this).closest('tr');
                validateUnitTypeRow($tarTr, function (isSuccess) {

                    if (isSuccess) {
                        $tarTr.removeClass('empty-row');
                        addUnitTypeRow();
                    }
                });

            });

            function validateUnitTypeRow($tarRow, callBack) {
                var $UnitTypeName = $tarRow.find('input[name^="NameUnitType_"]'),
                    $UnitTypeType = $tarRow.find('input[name^="TypeUnitType_"]'),
                    $UnitTypeTitle = $tarRow.find('input[name^="TitleUnitType_"]'),
                    $UnitTypeArea = $tarRow.find('input[name^="AreaUnitType_"]'),
                    Name = $UnitTypeName.val().trim(),
                    Type = $UnitTypeType.val().trim(),
                    Title = $UnitTypeTitle.val().trim(),
                    Area = $UnitTypeArea.val().trim();

                removeError($UnitTypeName);
                removeError($UnitTypeType);
                removeError($UnitTypeTitle);
                removeError($UnitTypeArea);

                if (Name.length <= 0) {
                    showError($UnitTypeName, 'Unit Type is required!');
                    $UnitTypeName.focus();
                    callBack(false);
                    return false;
                } else if (Type.length <= 0) {
                    showError($UnitTypeType, 'Name is required!');
                    $UnitTypeType.focus();
                    callBack(false);
                    return false;
                } else if (Title.length <= 0) {
                    showError($UnitTypeTitle, 'Title is required!');
                    $UnitTypeTitle.focus();
                    callBack(false);
                    return false;
                } else if (Area.length <= 0) {
                    showError($UnitTypeArea, 'Area is required!');
                    $UnitTypeArea.focus();
                    callBack(false);
                    return false;
                } else {
                    var isFound = false;

                    /*$tarRow.siblings('tr').find('input.unittype-name').each(function () {
                     if ($(this).val().toLowerCase() == Name.toLowerCase()) {
                     isFound = true;
                     showError($UnitTypeName, 'Name already added!');
                     callBack(false);
                     return false;
                     }
                     });*/
                    $tarRow.siblings('tr').each(function() {
                        if (($(this).find('input.unittype-name').val().toLowerCase() == Name.toLowerCase()) && ($(this).find('input.unittype-type').val().toLowerCase() == Type.toLowerCase()) && ($(this).find('input.unittype-area').val() == Area)) {
                            isFound = true;
                            showError($UnitTypeName, 'Name already added!');
                            callBack(false);
                            return false;
                        }
                    });

                    if (isFound === false) {
                        callBack(true);
                        return true;
                    }
                }
            }
        }

        function bindFloorInput_onChange() {
            $sameFloorDetailsTable.on('change', 'input', function () {

                var $tarTr = $(this).closest('tr');
                validateFloorDetailRow($tarTr, function (isSuccess) {

                    if (isSuccess) {
                        $tarTr.removeClass('empty-row');

                        if($('input[name="multi-floor"]:checked').val()=='yes'){
                            addFloorDetailsRow();
                        } else {
                            $tarTr.find('.delete-floor-detail-btn').hide();
                        }

                    }
                });

            });

            function validateFloorDetailRow($tarRow, callBack) {
                var $FloorName = $tarRow.find('input[name^="NameFloorDetail_"]'),
                    $FloorTitle = $tarRow.find('input[name^="TitleFloorDetail_"]'),
                    Name = $FloorName.val().trim(),
                    Title = $FloorTitle.val().trim();

                removeError($FloorName);
                removeError($FloorTitle);

                if (Name.length <= 0) {
                    showError($FloorName, 'Name is required!');
                    $FloorName.focus();
                    callBack(false);
                    return false;
                } else if (Title.length <= 0) {
                    showError($FloorTitle, 'Title is required!');
                    $FloorTitle.focus();
                    callBack(false);
                    return false;
                } else {
                    var isFound = false;
                    $tarRow.siblings('tr').find('input.floor-name').each(function () {
                        if ($(this).val().toLowerCase() == Name.toLowerCase()) {
                            isFound = true;
                            showError($FloorName, 'Name already added!');
                            callBack(false);
                            return false;
                        }
                    });

                    if (isFound === false) {
                        callBack(true);
                        return true;
                    }
                }
            }
        }

        function bindBlockInput_onChange() {
            $sameBlockDetailsTable.on('change', 'input', function () {

                var $tarTr = $(this).closest('tr');
                validateBlockDetailRow($tarTr, function (isSuccess) {

                    if (isSuccess) {
                        $tarTr.removeClass('empty-row');

                        if($('input[name="more-block"]:checked').val()=='yes'){
                            addBlockDetailsRow();
                        } else {
                            $tarTr.find('.delete-block-detail-btn').hide();
                        }

                    }
                });

            });

            function validateBlockDetailRow($tarRow, callBack) {

                var $BlockName = $tarRow.find('input[name^="NameBlockDetail_"]'),
                    $BlockTitle = $tarRow.find('input[name^="TitleBlockDetail_"]'),
                    Name = $BlockName.val().trim(),
                    Title = $BlockTitle.val().trim();

                removeError($BlockName);
                removeError($BlockTitle);

                if (Name.length <= 0) {
                    showError($BlockName, 'Name is required!');
                    $BlockName.focus();
                    callBack(false);
                    return false;
                } else if (Title.length <= 0) {
                    showError($BlockTitle, 'Title is required!');
                    $BlockTitle.focus();
                    callBack(false);
                    return false;
                } else {
                    var isFound = false;
                    $tarRow.siblings('tr').find('input.block-name').each(function () {
                        if ($(this).val().toLowerCase() == Name.toLowerCase()) {
                            isFound = true;
                            showError($BlockName, 'Name already added!');
                            callBack(false);
                            return false;
                        }
                    });

                    if (isFound === false) {
                        callBack(true);
                        return true;
                    }
                }
            }
        }

        function bindPhaseDetailsInput_onChange() {
            $phaseDetailsTable.on('change', 'input', function () {

                var $tarTr = $(this).closest('tr');
                validatePhaseDetailRow($tarTr, function (isSuccess) {

                    if (isSuccess) {
                        $tarTr.removeClass('empty-row');
                        addPhaseDetailsRow();
                    }
                });

            });

            function validatePhaseDetailRow($tarRow, callBack) {

                var $PhaseName = $tarRow.find('input[name^="NamePhaseDetail_"]'),
                    $PhaseTitle = $tarRow.find('input[name^="TitlePhaseDetail_"]'),
                    Name = $PhaseName.val().trim(),
                    Title = $PhaseTitle.val().trim();

                removeError($PhaseName);
                removeError($PhaseTitle);

                if (Name.length <= 0) {
                    showError($PhaseName, 'Name is required!');
                    $PhaseName.focus();
                    callBack(false);
                    return false;
                } else if (Title.length <= 0) {
                    showError($PhaseTitle, 'Title is required!');
                    $PhaseTitle.focus();
                    callBack(false);
                    return false;
                } else {
                    var isFound = false;
                    $tarRow.siblings('tr').find('input.phase-name').each(function () {
                        if ($(this).val().toLowerCase() == Name.toLowerCase()) {
                            isFound = true;
                            showError($PhaseName, 'Name already added!');
                            callBack(false);
                            return false;
                        }
                    });

                    if (isFound === false) {
                        callBack(true);
                        return true;
                    }
                }
            }
        }

        function addUnittypeBtn_onClick() {
            $phaseTableWrapper.on('click', '[class^="unittype_"] .add-unittype-btn', function (ev) {
                ev.preventDefault();

                var $tarFloor = $(this).closest('.unittypes-container').prev('[class^="floor_"]'),
                    $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"]'),
                    $tarPhase = $tarBlock.closest('[id^="phase_"]');

                addUnitType($tarPhase, $tarBlock, $tarFloor);
            });
        }

        function addUnitType($tarPhase, $tarBlock, $tarFloor, UnittypeData) {

            var $curUnittypesWrapper = $tarFloor.next('.unittypes-container').find('.unittypes-wrapper'),
                unittypesCnt = parseInt($tarFloor.attr('data-unittype-cnt')),
                tarPhaseId = $tarPhase.attr('id').split('_')[1],
                tarBlockId = $tarBlock.attr('data-id').split('_')[1],
                tarFloorId = $tarFloor.attr('data-id').split('_')[1];

            var unittypeRowHtml = $unitTypeRowOpTemplate.html();
            unittypesCnt += 1;

            unittypeRowHtml = unittypeRowHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                .replace(/block__/g, 'block_' + tarBlockId)
                .replace(/floor__/g, 'floor_' + tarFloorId)
                .replace(/unittype__/g, 'unittype_' + unittypesCnt);
            $curUnittypesWrapper.append(unittypeRowHtml);

            var $tarUnittype = $curUnittypesWrapper.find('.unittype_' + unittypesCnt);
            if (typeof UnittypeData != 'undefined') {
                $tarUnittype.find('input.unittype-name').val(UnittypeData.name).attr('readonly', true);
                $tarUnittype.find('input.unittype-type').val(UnittypeData.type);
                $tarUnittype.find('input.unittype-title').val(UnittypeData.title);
                $tarUnittype.find('input.unittype-area').val(UnittypeData.area);
            } else {
                bindUnittype_autoComplete($tarUnittype);
            }

            // add units table
            var unitsTableHtml = $unitTableTemplate.html();
            $tarUnittype.after(unitsTableHtml);

            if($sameUnitTypeYes.is(':checked') == false) {
                $tarUnittype.find('.add-unittype-btn').removeClass('hide');
            }

            $tarFloor.attr('data-unittype-cnt', unittypesCnt);

            bindTooltip();
        }

        function bindUnittype_autoComplete($tarUnittype) {

            var $unittypeName = $tarUnittype.find('input.unittype-name'),
                arrUnitTyepsCopy = $.extend(true, [], arrUnitTypes);

            removeUsedUnitTypes(arrUnitTyepsCopy, $tarUnittype, function (arrUnittypes) {

                var $tarUnitTypeName = $tarUnittype.find('input.unittype-name'),
                    $tarUnitTypeType = $tarUnittype.find('input.unittype-type'),
                    $tarUnitTypeTitle = $tarUnittype.find('input.unittype-title'),
                    $tarUnitTypeArea = $tarUnittype.find('input.unittype-area');

                $tarUnitTypeName.autocomplete({
                    lookup: arrUnittypes,
                    lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                        if (queryLowerCase == '*') {
                            return suggestion.value;
                        } else {
                            var re = new RegExp($.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');
                            return re.test(suggestion.value);
                        }
                    }, onSelect: function (suggestion) {
                        if (suggestion) {

                            $tarUnitTypeType.val(suggestion.type);
                            $tarUnitTypeTitle.val(suggestion.title);
                            $tarUnitTypeArea.val(suggestion.area);

                            removeError($(this));
                        }
                    }, onSearchStart: function (suggestion) {
                        $tarUnitTypeType.val('');
                        $tarUnitTypeTitle.val('');
                        $tarUnitTypeArea.val('');
                    }, onSearchComplete: function (query, suggestions) {
                        if (!suggestions.length) {
                            $tarUnitTypeType.val('');
                            $tarUnitTypeTitle.val('');
                            $tarUnitTypeArea.val('');
                            showError($(this), 'Unit Type not found!');
                        } else {
                            removeError($(this));
                        }
                    }
                }).blur(function () {
                    var unittypeName = $tarUnitTypeName.val().trim();

                    if (unittypeName.length <= 0) {
                        $tarUnitTypeType.val('');
                        $tarUnitTypeTitle.val('');
                        $tarUnitTypeArea.val('');
                    }
//                    else {
//                        checkForDuplicateUnittypeName($tarUnittype, $tarUnitTypeName);
//                    }
                });

//                function checkForDuplicateUnittypeName($tarUnittype, $tarUnitTypeName) {
//                    var unittypeName = $tarUnitTypeName.val().trim();
//
//                    $tarUnittype.siblings('tr[class^="unittype_"]').each(function() {
//
//                        if($(this).find('input.unittype-name').val().trim().toLowerCase() == unittypeName.toLowerCase()) {
//                            showError($tarUnitTypeName, 'Unit Type Already added!');
//                            $tarUnitTypeType.val('');
//                            $tarUnitTypeTitle.val('');
//                            $tarUnitTypeArea.val('');
//                            return false;
//                        }
//                    });
//
//                }

            });

            function removeUsedUnitTypes(arrUnitTyepsCopy, $tarUnittype, callBack) {
                var $arrUsedUnitTypes = $tarUnittype.siblings('[class^="unittype_"]');
               // if ($arrUsedUnitTypes.length <= 0) {
                    callBack(arrUnitTyepsCopy);
                    return;
//                } else {
//                    var arrUnittypeNames = [];
//                    $.each(arrUnitTyepsCopy, function (index, unitType) {
//                        var isExists = false;
//                        $arrUsedUnitTypes.find('input.unittype-name').each(function () {
//                            if ($(this).val().trim().toLowerCase() == unitType.data.toLowerCase()) {
//                                isExists = true;
//                                return false;
//                            }
//                        })
//
//                        if (isExists === false) {
//                            arrUnittypeNames.push(unitType);
//                        }
//                    });
//
//                    callBack(arrUnittypeNames);
//                    return;
//                }
            }
        }

        function addUnits($tarPhase, $tarBlock, $tarFloor, $tarUnittype, NoOfUnits) {

            var $curUnitWrapper = $tarFloor.next('.units-container').find('.units-wrapper'),
                unitsCnt = parseInt($tarFloor.attr('data-unit-cnt')),
                tarPhaseId = $tarPhase.attr('id').split('_')[1],
                tarBlockId = $tarBlock.attr('data-id').split('_')[1],
                tarFloorId = $tarFloor.attr('data-id').split('_')[1],
                tarUnitTypeId = 0,
                tarUnitTypeArea = '';

            if ($tarUnittype.length > 0) {
                $curUnitWrapper = $tarUnittype.next('.units-container').find('.units-wrapper');
                tarUnitTypeId = $tarUnittype.attr('data-id').split('_')[1];
                unitsCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
                tarUnitTypeArea = $tarUnittype.find('.unittype-area').val();
            }

            for (var i = (unitsCnt + 1); i <= NoOfUnits; i++) {

                var unitHtml = $unitRowTemplate.html();

                unitHtml = unitHtml.replace(/phase__/g, 'phase_' + tarPhaseId)
                    .replace(/block__/g, 'block_' + tarBlockId)
                    .replace(/floor__/g, 'floor_' + tarFloorId)
                    .replace(/unittype__/g, 'unittype_' + tarUnitTypeId)
                    .replace(/unit__/g, 'unit_' + i);

                $curUnitWrapper.append(unitHtml);

                var $tarUnit = $curUnitWrapper.find('.unit_' + i);

                if(tarUnitTypeArea != '') {
                    $tarUnit.find('.unit-area').val(tarUnitTypeArea);
                }
            }

            if ($tarUnittype.length > 0) {
                $tarUnittype.attr('data-unit-cnt', NoOfUnits);
                $tarUnittype.find('.unittype-no-of-units').val(NoOfUnits);
            } else {
                $tarFloor.attr('data-unit-cnt', NoOfUnits);
            }

            generateUnitNos($tarPhase, $tarBlock, $tarFloor, $tarUnittype, $curUnitWrapper);

            bindTooltip();
        }

        function removeUnits($tarWrapper, NoOfUnits) {
            var curUnitCnt = parseInt($tarWrapper.attr('data-unit-cnt'));
            for (var i = (NoOfUnits + 1); i <= curUnitCnt; i++) {
                $tarWrapper.next('.units-container').find('.unit_' + i).remove();
            }
            $tarWrapper.attr('data-unit-cnt', NoOfUnits);
        }

        function generateUnitNos($tarPhase, $tarBlock, $tarFloor, $tarUnittype, $tarWrapper) {

            var unitNo,
                seqStarting = $seqStarting.val().trim(),
                isNumericSeq = $unitSeqNumeric.is(':checked'),
                seqSkipNos = $seqSkipNos.val().split(','),
                seqWidth = $seqWidth.val().trim(),
                arrSeqOrder = {
                    'phase': $tarPhase.find('input.phase-title').val().trim(),
                    'block': $tarBlock.find('input.block-title').val().trim(),
                    'floor': $tarFloor.find('input.floor-title').val().trim(),
                    'unit_type': '',
                    'unit': ''
                };

            if ($tarUnittype.length > 0) {
                arrSeqOrder['unit_type'] = $tarUnittype.find('input.unittype-title').val().trim();
            }

            if (isNumericSeq) {
                unitNo = 1;
            } else {
                unitNo = 65;
            }
            var listArray = [];
            var wrapper = '';
            $seqPrefix.find('> li').each(function () {
                listArray.push($(this).attr('data-order'));
            });

            if(jQuery.inArray( "unit_type", listArray ) != -1) {
                wrapperId = $tarWrapper;
            } else if(jQuery.inArray( "floor", listArray ) != -1) {
                var wrapperId = $tarFloor.next('tr');
            } else if(jQuery.inArray( "block", listArray ) != -1) {
                var wrapperId = $tarBlock.next('tr');
            } else if(jQuery.inArray( "phase", listArray ) != -1) {
                var wrapperId = $tarPhase.attr('id');
            }

            if (seqStarting.length > 0) {
                if (isNumericSeq) {
                    unitNo = parseInt(seqStarting);
                } else {
                    unitNo = seqStarting.charCodeAt(0);
                }
            }

            wrapperId.find('[class^="unit_"]').each(function () {
                var $tarIp = $(this).find('input:eq(0)');

                var unitNoVal = unitNo + '';
                if (isNumericSeq === false) {
                    unitNoVal = String.fromCharCode(unitNo);
                }

                if (seqSkipNos.length > 0 && $.inArray((unitNoVal), seqSkipNos) >= 0) {
                    unitNo += 1;
                    if (isNumericSeq === false) {
                        unitNoVal = String.fromCharCode(unitNo);
                    } else {
                        unitNoVal = unitNo + '';
                    }
                }

                var unitLength = unitNoVal.length;
                if (isNumericSeq && unitLength < seqWidth) {
                    for (var i = 0; i < (seqWidth - unitLength); i++) {
                        unitNoVal = '0' + unitNoVal;
                    }
                }

                arrSeqOrder['unit'] = unitNoVal;
                // sequence order
                var orderedUnitNo = '';
                $seqPrefix.find('> li').each(function () {
                    orderedUnitNo += arrSeqOrder[$(this).attr('data-order')];
                    /*var uisel = $(this).attr('class');
                     j1 = uisel.split(' ');
                     if($.inArray(('ui-selected'), j1) >= 0) {
                     orderedUnitNo += arrSeqOrder[$(this).attr('data-order')];
                     }*/
                });

                $tarIp.val(orderedUnitNo);
//            $tarIp.attr('readonly', true);

                unitNo += 1;
            });


//            function checkAndSkipNos(unitNo) {
//
//                var unitNoVal = unitNo;
//                if(isNumericSeq === false) {
//                    unitNoVal = String.fromCharCode(unitNo);
//                }
//
//                if($.inArray((unitNoVal + ''), seqSkipNos) >= 0) {
//                    unitNo += 1;
//                    return checkAndSkipNos(unitNo);
//                } else {
//                    return unitNoVal;
//                }
//            }
        }

        function bindNoOfUnits_onChange() {
            $phaseTableWrapper.on('change', '.unittypes-wrapper input.unittype-no-of-units', function () {

                var NoOfUnits = parseInt($(this).val());
                if (isNaN(NoOfUnits)) {
                    showError($(this), 'No.of units required!');
                    return false;
                } else {
                    removeError($(this));
                }

                var $tarUnittype = $(this).closest('[class^="unittype_"][data-id]'),
                    $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"][data-id]'),
                    $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"][data-id]'),
                    $tarPhase = $tarBlock.closest('[id^="phase_"]'),
                    curUnitCnt = parseInt($tarUnittype.attr('data-unit-cnt'));

                if (NoOfUnits > curUnitCnt) {
                    addUnits($tarPhase, $tarBlock, $tarFloor, $tarUnittype, NoOfUnits);
                } else {
                    removeUnits($tarUnittype, NoOfUnits);
                }
            });
        }

        function bindAddUnitBtn_onClick() {
            $phaseTableWrapper.on('click', '[class^="floor"] .add-unit-btn', function (ev) {
                ev.preventDefault();

                var $tarUnittype = $(this).closest('.units-container').prev('[class^="unittype_"]'),
                    $tarFloor,
                    curUnitCnt;
                if($tarUnittype.length <= 0) {
                    $tarUnittype = '';
                    $tarFloor = $(this).closest('.units-container').prev('[class^="floor_"]');
                    curUnitCnt = parseInt($tarFloor.attr('data-unit-cnt'));
                } else {
                    $tarFloor = $tarUnittype.closest('.unittypes-container').prev('[class^="floor_"][data-id]');
                    curUnitCnt = parseInt($tarUnittype.attr('data-unit-cnt'));
                }

                var $tarBlock = $tarFloor.closest('.floors-container').prev('[class^="block_"][data-id]'),
                    $tarPhase = $tarBlock.closest('[id^="phase_"]');


                curUnitCnt += 1;

                addUnits($tarPhase, $tarBlock, $tarFloor, $tarUnittype, curUnitCnt);
            });
        }


        function bindExpandTrFn() {
            // expand tr
            $phaseTableWrapper.on('click', '.mainTr', function(e){
                e.preventDefault();

                var $tarTr = $(this).closest("tr"),
                    $tarSubTr = $tarTr.next(".subTr"),
                    $subDiv = $tarSubTr.find(".subDiv");

                if($tarSubTr.length <= 0 || $subDiv.length <= 0) {
                    return;
                }

                if($tarSubTr.is(":visible")){
                    // close
                    $tarTr.removeClass('open');
                    $subDiv.slideUp("slow");
                    $tarSubTr.slideUp("slow");
//                $(this).find("> [data-original-title]").attr('data-original-title', 'Open');
                    $(this).find("i").removeClass("tform");
                } else{
                    // open
                    $tarTr.addClass('open');
                    $tarSubTr.show();
                    $subDiv.slideDown("slow");
//                $(this).find("> [data-original-title]").attr('data-original-title', 'Close');
                    $(this).find("i").addClass("tform");
                }
            });
        }

        bindInputs_onFocus();

        function bindInputs_onFocus() {
            $phaseTableWrapper.on('focus', 'input', function() {

                var $tarTr = $(this).closest('tr');
                if($tarTr.length <= 0) {
                    return;
                }

                if($tarTr.hasClass('open')) {
                    return;
                }

                var $mainTr = $tarTr.find('.mainTr');
                if($mainTr.length <= 0) {
                    return;
                }

                var $tarSubTr = $tarTr.next(".subTr");
                if ($tarSubTr.length <= 0) {
                    return;
                }

                var $subDiv = $tarSubTr.find(".subDiv");
                if($tarSubTr.length <= 0 || $subDiv.length <= 0) {
                    return;
                }

                $tarTr.siblings('tr.open').find('.mainTr').trigger('click');

                $tarTr.addClass('open');
                $tarSubTr.show();
                $subDiv.slideDown("slow");
//            $mainTr.find("> [data-original-title]").attr('data-original-title', 'Close');
                $mainTr.find("i").addClass("tform");
            });
        }

        bindTrTh_onClick();
        function bindTrTh_onClick() {
            $phaseTableWrapper.on('click', 'tr th', function() {
                //$(this).closest('table').find('> tbody').slideToggle();
                var $tarSubDiv = $(this).closest('.subDiv'),
                    $tarSubTr = $tarSubDiv.closest('.subTr');

                if($tarSubTr.length <= 0) {
                    return;
                }

                $tarSubTr.removeClass('open');
                $tarSubTr.siblings('tr.open').find('.mainTr').trigger('click');

            });
        }

        $( "#sortable1, #sortable2" ).sortable({
            connectWith: ".connectedSortable"
        }).disableSelection();
    });

    function getUnitType(thsInp)
    {
        if(thsInp.value != '') {
            var thsId = thsInp.name;
            var spThisId = thsId.split('_');
            var fieldName = 'TypeUnitType_'+spThisId[1];
            $('input[name="'+fieldName+'"]').val(thsInp.value);
        }
    }
</script>
