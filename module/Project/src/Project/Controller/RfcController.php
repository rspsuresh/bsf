<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2014 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */
namespace Project\Controller;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;

use Zend\Authentication\Result;
use Zend\Authentication\AuthenticationService;
use Zend\Authentication\Storage\Session as SessionStorage;

use Zend\Db\Adapter\Adapter;

use Zend\Authentication\Adapter\DbTable as AuthAdapter;

use Zend\Db\Sql\Where;
use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Expression;
use Zend\Session\Container;
use BuildsuperfastClass;
use PHPExcel;
use PHPExcel_IOFactory;
use Application\View\Helper\CommonHelper;
use Application\View\Helper\Qualifier;
use Project\View\Helper\ProjectHelper;
class RfcController extends AbstractActionController
{
    public function __construct()
    {
        $this->auth = new AuthenticationService();
        $this->bsf = new \BuildsuperfastClass();
        if ($this->auth->hasIdentity()) {
            $this->identity = $this->auth->getIdentity();
        }
        $this->_view = new ViewModel();
    }

    public function rfcresourceAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Resource");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        $identity = 0;
        if ($request->isPost()) {
            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');

            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;
                    $sRefNo=$this->bsf->isNullCheck($postData['refno'], 'string');
                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');

                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $this->bsf->isNullCheck($postData['refno'], 'string'),
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string')
                    ));

                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCResourceTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $subQuery = $sql->select();
                    $subQuery->from("Proj_RFCResourceTrans")
                        ->columns(array("RFCTransId"));
                    $subQuery->where(array('RFCRegisterId' => $identity));

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCActivityTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

//                    $newResArray = [];
//                    $newresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
//                    for ($i = 1; $i <= $newresrowid; $i++) {
//
//
//
//                        $newresid = $this->bsf->isNullCheck($postData['newresid_'.$i], 'string');
//
//                        if($this->bsf->isNullCheck($postData['newresname_' . $i], 'string') == '')
//                            continue;
//
//                        $insert = $sql->insert();
//                        $insert->into('Proj_ResourceGroup');
//                        $insert->Values(array('ResourceGroupName' => $this->bsf->isNullCheck($postData['newresname_' . $i], 'string')
//                        , 'TypeId' => $this->bsf->isNullCheck($postData['newrestypeid_' . $i], 'number')
//                        , 'ParentId' => $this->bsf->isNullCheck($postData['newresgroupid_' . $i], 'number'),
//                            'Code' => $this->bsf->isNullCheck($postData['newresrate_' . $i], 'string')));
//                        $statement = $sql->getSqlStringForSqlObject($insert);
//                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//                        $newResArray[$newresid] = $dbAdapter->getDriver()->getLastGeneratedValue();
//                    }


                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $resGroupId = $this->bsf->isNullCheck($postData['resgroupid_' . $i], 'string');
                        $resName = $this->bsf->isNullCheck($postData['resname_' . $i], 'string');
                        if ($resGroupId == '' || $resName == "")
                            continue;

                        if (substr($resGroupId, 0, 2) == '0.') {
//                            $resGroupId = $newResArray[$resGroupId];
                            $resGroupId = 0;
                        }
                        else
                            $resGroupId = $this->bsf->isNullCheck($resGroupId,'number');


//                        if($resGroupId == 0)
//                            continue;


                        $iResId =  $this->bsf->isNullCheck($postData['resourceid_' . $i],'number');

                        $rateType = $this->bsf->isNullCheck($postData['analrate_' . $i], 'string');
                        $mRate = $this->bsf->isNullCheck($postData['analrateM_' . $i], 'number');
                        $lRate = $this->bsf->isNullCheck($postData['analrateLS_' . $i], 'number');
                        $aRate = $this->bsf->isNullCheck($postData['analrateA_' . $i], 'number');
                        $mQty = $this->bsf->isNullCheck($postData['activity_' . $i . '_AnalQty'], 'number');
                        $aQty = $this->bsf->isNullCheck($postData['activityR_' . $i . '_AnalQty'], 'number');
                        $leadDays = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_lead'], 'number');
                        $wUnitId = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_wunit'], 'number');
                        $wRate = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_wrate'], 'number');
//                        $materialType = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_mtype'], 'string');
                        $materialType = $this->bsf->isNullCheck($postData['mtype_' . $i], 'string');
                        $resgroupName = $this->bsf->isNullCheck($postData['resgroupname_' . $i], 'string');

                        if ($mRate == 0 && $lRate == 0 && $aRate == 0)
                            $rateType = '';

                        if ($rateType =="") $rateType = "L";
                        if ($rateType == "L") $lRate = $this->bsf->isNullCheck($postData['rate_' . $i],'number');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ResourceId'=>$iResId,'Code' => $postData['code_' . $i], 'ResourceName' => $resName,
                            'ResourceGroupId' => $resGroupId, 'TypeId' => $this->bsf->isNullCheck($postData['typeid_' . $i],'number'), 'UnitId' => $this->bsf->isNullCheck($postData['unitid_' . $i],'number'), 'Rate' => $this->bsf->isNullCheck($postData['rate_' . $i],'number'),
                            'AnalysisAQty' => $aQty, 'AnalysisMQty' => $mQty, 'RateType' => $rateType, 'LRate' => $lRate, 'MRate' => $mRate, 'ARate' => $aRate, 'LeadDays' => $leadDays,
                            'WorkUnitId' => $wUnitId, 'WorkRate' => $wRate, 'MaterialType' => $materialType,'ResourceGroupName'=>$resgroupName));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        if ($resGroupId !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $resGroupId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoid_' . $i], 'number');
                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $resid = $this->bsf->isNullCheck($postData['activity_' . $i . '_resid_' . $j], 'number');
                            $qty = $this->bsf->isNullCheck($postData['activity_' . $i . '_resqty_' . $j], 'number');
                            $rate = $this->bsf->isNullCheck($postData['activity_' . $i . '_resrate_' . $j], 'number');
                            $amt = $this->bsf->isNullCheck($postData['activity_' . $i . '_resamt_' . $j], 'number');

                            $iNew = 0;
                            $sResName = $this->bsf->isNullCheck($postData['activity_' . $i . '_newresname_' . $j], 'string');
                            if (substr($resid, 0, 2) == '0.') {
                                $resid = 0;
                                $iNew = 1;
                            }

                            if ($resid != 0 || $sResName !="") {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCActivityTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'ActivityType' => 'M', 'ResourceId' => $resid, 'Qty' => $qty, 'Rate' => $rate, 'Amount' => $amt,'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);

                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iactMRowid = $this->bsf->isNullCheck($postData['rowinfoidR_' . $i], 'number');
                        for ($j = 1; $j <= $iactMRowid; $j++) {
                            $resid = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resid_' . $j], 'number');
                            $qty = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resqty_' . $j], 'number');
                            $rate = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resrate_' . $j], 'number');
                            $amt = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resamt_' . $j], 'number');

                            $iNew = 0;
                            if (substr($resid, 0, 2) == '0.') {
                                $resid = 0;
                                $iNew = 1;
                                $sResName = $this->bsf->isNullCheck($postData['activityR_' . $i . '_newresname_' . $j], 'string');
                            }
                            if ($resid != 0 || $sResName !="") {

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCActivityTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'ActivityType' => 'A', 'ResourceId' => $resid, 'Qty' => $qty, 'Rate' => $rate, 'Amount' => $amt,'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);

                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $isteelRowid = $this->bsf->isNullCheck($postData['rowinfoidS_' . $i], 'number');
                        for ($j = 1; $j <= $isteelRowid; $j++) {
                            $desc = $this->bsf->isNullCheck($postData['steel_' . $i . '_des_' . $j], 'string');
                            $dia = $this->bsf->isNullCheck($postData['steel_' . $i . '_dia_' . $j], 'number');
                            $factor = $this->bsf->isNullCheck($postData['steel_' . $i . '_factor_' . $j], 'number');
                            $wastage = $this->bsf->isNullCheck($postData['steel_' . $i . '_waste_' . $j], 'number');

                            if ($desc != "" && $dia != 0) {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCSteelTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'SteelDescription' => $desc, 'SteelDia' => $dia, 'Factor' => $factor, 'Wastage' => $wastage));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {
                        $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                        $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                        $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                        $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                        $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                        $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                        if ($sresName == "" || $iresgroupid == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'Code'=>$srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                            'UnitId' => $iunitid,'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate,'Rate'=>$drate,'WorkRate'=>$dwrate,'LeadDays'=>$ilead,'MaterialType'=>$smattype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);

                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {
                    $mode = $postData['rfcmode'];
                    if ($mode == 'edit') {
                        $rfctype = 'Resource-Edit';
                    } else {
                        $rfctype = 'Resource-Add';
                    }

                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true) {
                        $sVno = $aVNo["voucherNo"];
                    } else {
                        $sVno = $postData['refno'];
                    }

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'RFCType' => $rfctype, 'Narration' =>  $this->bsf->isNullCheck($postData['narration'],'string'), 'Approve' => 'N', 'Type' => 'Resource'));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $newresgrouprowid = $this->bsf->isNullCheck($postData['resgrouprowid'], 'number');
                    for ($i = 1; $i <= $newresgrouprowid; $i++) {
                        if($this->bsf->isNullCheck($postData['newresgroupname_' . $i], 'string') == '')
                            continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceGroupTrans');
                        $insert->Values(array('RFCRegisterId'=>$identity,'ResourceGroupName' => $this->bsf->isNullCheck($postData['newresgroupname_' . $i], 'string')
                        , 'TypeId' => $this->bsf->isNullCheck($postData['newresgrouptypeid_' . $i], 'number')
                        , 'ParentId' => $this->bsf->isNullCheck($postData['newresgroupparentid_' . $i], 'number'),
                            'Code' => $this->bsf->isNullCheck($postData['newresgroupcode_' . $i], 'string')));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }


                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $resGroupId = $this->bsf->isNullCheck($postData['resgroupid_' . $i], 'string');
                        $resName = $this->bsf->isNullCheck($postData['resname_' . $i], 'string');
                        if ($resGroupId == "" && $resName == "")
                            continue;

                        if (substr($resGroupId, 0, 2) == '0.') {
//                            $resGroupId = $newResArray[$resGroupId];
                            $resGroupId = 0;
                        }
                        else
                            $resGroupId = $this->bsf->isNullCheck($resGroupId,'number');

//                        if($resGroupId == 0)
//                            continue;
                        $iResId =  $this->bsf->isNullCheck($postData['resourceid_' . $i],'number');
                        $rateType = $this->bsf->isNullCheck($postData['analrate_' . $i], 'string');
                        $mRate = $this->bsf->isNullCheck($postData['analrateM_' . $i], 'number');
                        $lRate = $this->bsf->isNullCheck($postData['analrateLS_' . $i], 'number');
                        $aRate = $this->bsf->isNullCheck($postData['analrateA_' . $i], 'number');
                        $mQty = $this->bsf->isNullCheck($postData['activity_' . $i . '_AnalQty'], 'number');
                        $aQty = $this->bsf->isNullCheck($postData['activityR_' . $i . '_AnalQty'], 'number');
                        $leadDays = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_lead'], 'number');
                        $wUnitId = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_wunit'], 'number');
                        $wRate = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_wrate'], 'number');
//                        $materialType = $this->bsf->isNullCheck($postData['generalinfo_' . $i . '_mtype'], 'string');
                        $materialType = $this->bsf->isNullCheck($postData['mtype_' . $i], 'string');
                        $resgroupName = $this->bsf->isNullCheck($postData['resgroupname_' . $i], 'string');

                        if ($mRate == 0 && $lRate == 0 && $aRate == 0)
                            $rateType = '';

                        if ($rateType =="") $rateType = "L";
                        if ($rateType == "L") $lRate = $this->bsf->isNullCheck($postData['rate_' . $i],'number');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'ResourceId'=>$iResId,'Code' => $postData['code_' . $i], 'ResourceName' => $resName,
                            'ResourceGroupId' => $resGroupId, 'TypeId' => $this->bsf->isNullCheck($postData['typeid_' . $i], 'number'), 'UnitId' => $this->bsf->isNullCheck($postData['unitid_' . $i], 'number'),
                            'Rate' => $this->bsf->isNullCheck($postData['rate_' . $i], 'number'), 'AnalysisAQty' => $aQty, 'AnalysisMQty' => $mQty, 'RateType' => $rateType, 'LRate' => $lRate, 'MRate' => $mRate,
                            'ARate' => $aRate, 'LeadDays' => $leadDays, 'WorkUnitId' => $wUnitId, 'WorkRate' => $wRate, 'MaterialType' => $materialType,'ResourceGroupName'=>$resgroupName));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        if ($resGroupId !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $resGroupId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }


                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoid_' . $i], 'number');
                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $resid = $this->bsf->isNullCheck($postData['activity_' . $i . '_resid_' . $j], 'number');
                            $qty = $this->bsf->isNullCheck($postData['activity_' . $i . '_resqty_' . $j], 'number');
                            $rate = $this->bsf->isNullCheck($postData['activity_' . $i . '_resrate_' . $j], 'number');
                            $amt = $this->bsf->isNullCheck($postData['activity_' . $i . '_resamt_' . $j], 'number');

                            $iNew = 0;
                            $sResName = $this->bsf->isNullCheck($postData['activity_' . $i . '_newresname_' . $j], 'string');
                            if (substr($resid, 0, 2) == '0.') {
                                $resid = 0;
                                $iNew = 1;
                            }
                            if ($resid != 0 || $sResName !="") {

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCActivityTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'ActivityType' => 'M', 'ResourceId' => $resid, 'Qty' => $qty, 'Rate' => $rate, 'Amount' => $amt,'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);

                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iactMRowid = $this->bsf->isNullCheck($postData['rowinfoidR_' . $i], 'number');
                        for ($j = 1; $j <= $iactMRowid; $j++) {
                            $resid = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resid_' . $j], 'number');
                            $qty = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resqty_' . $j], 'number');
                            $rate = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resrate_' . $j], 'number');
                            $amt = $this->bsf->isNullCheck($postData['activityR_' . $i . '_resamt_' . $j], 'number');

                            $iNew = 0;
                            if (substr($resid, 0, 2) == '0.') {
                                $resid = 0;
                                $iNew = 1;
                                $sResName = $this->bsf->isNullCheck($postData['activityR_' . $i . '_newresname_' . $j], 'string');
                            }

                            if ($resid != 0 || $sResName !="") {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCActivityTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'ActivityType' => 'A', 'ResourceId' => $resid, 'Qty' => $qty, 'Rate' => $rate, 'Amount' => $amt,'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);

                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $isteelRowid = $this->bsf->isNullCheck($postData['rowinfoidS_' . $i], 'number');
                        for ($j = 1; $j <= $isteelRowid; $j++) {
                            $desc = $this->bsf->isNullCheck($postData['steel_' . $i . '_des_' . $j], 'string');
                            $dia = $this->bsf->isNullCheck($postData['steel_' . $i . '_dia_' . $j], 'number');
                            $factor = $this->bsf->isNullCheck($postData['steel_' . $i . '_factor_' . $j], 'number');
                            $wastage = $this->bsf->isNullCheck($postData['steel_' . $i . '_waste_' . $j], 'number');

                            if ($desc != "" && $dia != 0) {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCSteelTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'SteelDescription' => $desc, 'SteelDia' => $dia, 'Factor' => $factor, 'Wastage' => $wastage));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {
                        $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                        $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                        $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                        $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                        $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                        $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                        if ($sresName == "" || $iresgroupid == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'Code'=>$srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                            'UnitId' => $iunitid,'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate,'Rate'=>$drate,'WorkRate'=>$dwrate,'LeadDays'=>$ilead,'MaterialType'=>$smattype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }


                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);

                    if ($mode == 'edit') {
                        $this->redirect()->toRoute('project/default', array('controller' => 'main', 'action' => 'resourcemaster'));
                    } else {
                        $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcresource'));
                    }
                }
            } catch (PDOException $e) {
                $connection->rollback();
            }
        } else {

            $iRFCId = $this->params()->fromRoute('rfcId');
            $smode = $this->params()->fromRoute('mode');
            $editid = $this->params()->fromRoute('id');

            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            $select = $sql->select();
            $select->from('Proj_ResourceType')
                ->columns(array('data' => 'TypeId', 'value' => 'TypeName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->restype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ResourceGroup'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
                ->where(array("a.LastLevel"=>1,"DeleteFlag"=>0));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ResourceGroup'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
                ->where("a.LastLevel=1 and a.DeleteFlag=0 and a.TypeId !=4 and a.TypeId !=2");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->resgroupa = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_UOM')
                ->columns(array('data' => 'UnitId', 'value' => 'UnitName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_UOM')
                ->columns(array('data' => 'UnitId', 'value' => 'UnitName'))
                ->where(array('WorkUnit'=>1));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->wunit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array(), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_UOM'), 'a.WorkUnitId=c.UnitId', array(), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"),
                    'Rate'=>new Expression("Case When a.TypeId<>3 then Rate Else WorkRate End"),
                    'UnitName'=> new Expression("Case When a.TypeId<>3 then b.UnitName else C.UnitName end"), 'TypeId'))
                ->where("a.DeleteFlag='0' and a.TypeId !='4' and (a.TypeId !='2' or a.MaterialType='F')");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


            $select = $sql->select();
            $select->from(array('a' => 'Proj_Resource'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array(), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array(), $select:: JOIN_LEFT)
                ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array(), $select:: JOIN_LEFT)
                ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array(), $select:: JOIN_LEFT)
                ->columns(array('ResourceId','TypeId','UnitId'=>new Expression("Case When a.TypeId=3 then a.WorkUnitId else a.UnitId end"),'Code','ResourceName','UnitName'=>new Expression("Case When a.TypeId=3 then e.UnitName else d.UnitName end"),'TypeName'=>new Expression('b.TypeName'),'ResourceGroup'=>new Expression('c.ResourceGroupName'),'Rate'=>new Expression("Case When a.TypeId<>3 then a.Rate Else a.WorkRate End"),'Select'=>new Expression("'0'")))
                ->where("a.DeleteFlag='0' and a.TypeId !='4' and (a.TypeId !='2' or a.MaterialType='F')");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->respicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            if (isset($iRFCId) && $iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration','Approve'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCResourceTrans'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.UnitId=c.UnitId', array('UnitName','UnitId'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=d.ResourceGroupId', array('ResourceGroupName'=>new Expression("Case When  a.ResourceGroupId=0 then a.ResourceGroupName else d.ResourceGroupName end")), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array('WorkUnitName' => 'UnitName'), $select:: JOIN_LEFT)
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $subQuery = $sql->select();
                $subQuery->from("Proj_RFCResourceTrans")
                    ->columns(array("RFCTransId"));
                $subQuery->where(array('RFCRegisterId' => $iRFCId));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCActivityTrans'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName'=>new Expression("Case When a.ResourceId =0 then a.ResourceName else b.ResourceName end"), 'Code'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName', 'UnitId'), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId', 'ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'), array('ResourceName', 'Code'), array('UnitName', 'UnitId'))
                    ->where->expression('RFCTransId IN ?', array($subQuery));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_RFCSteelTrans')
                    ->columns(array('RFCTransId', 'SteelDescription', 'SteelDia', 'Factor', 'Wastage'))
                    ->where->expression('RFCTransId IN ?', array($subQuery));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcsteel = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            } else if (isset($editid)) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.UnitId=c.UnitId', array('UnitName','UnitId'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=d.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array('WorkUnitName' => 'UnitName'), $select:: JOIN_LEFT)
                    ->where(array("ResourceId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName','Code'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName','UnitId'), $select:: JOIN_LEFT)
                    ->columns(array('MResourceId','ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'))
                    ->where(array("a.MResourceId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_ResourceSteelTrans')
                    ->columns(array('SteelDescription', 'SteelDia', 'Factor', 'Wastage', 'RFCTransId'=>new Expression('ResourceId')))
                    ->where(array("ResourceId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcsteel = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            }


            $groupcodegenType = 0;
            $select = $sql->select();
            $select->from('Proj_RGCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $groupcodesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($groupcodesetup)) $groupcodegenType = $groupcodesetup['GenType'];
            $this->_view->groupcodegenType = $groupcodegenType;


            $codegenType = 0;
            $select = $sql->select();
            $select->from('Proj_ResourceCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
            $this->_view->codegenType = $codegenType;

            $this->_view->genType = $aVNo["genType"];
            $this->_view->mode = $smode;
            $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
            $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;

            if (!isset($iRFCId) || $iRFCId == 0) {
                if ($aVNo["genType"] == false)
                    $this->_view->svNo = "";
                else
                    $this->_view->svNo = $aVNo["voucherNo"];
            }
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function rfciowAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC IOW");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $identity = 0;
            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');
            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');

                    $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['Narration'],'string')
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCWorkGroupTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCResourceTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $subQuery = $sql->select();
                    $subQuery->from("Proj_RFCIOWTrans")
                        ->columns(array("RFCTransId"));
                    $subQuery->where(array('RFCRegisterId' => $identity));


                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWRate')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCRateAnalysis')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWQualTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                    for ($i = 1; $i <= $iRowId; $i++) {
                        $myArray = explode('.', $postData['parentkeyid_' . $i]);
                        if (count($myArray) > 1) {
                            $wgroupid = $myArray[0];
                            $parentid = intval($myArray[1]);
                        } else {
                            $wgroupid = $myArray[0];
                            $parentid = 0;
                        }
                        if ($wgroupid==0) $parentid=0;

                        $siowspec = $this->bsf->isNullCheck($postData['spec_' . $i], 'string');
                        $iMiowid = $this->bsf->isNullCheck($postData['iowid_' . $i], 'number');
                        $iworktypeid = $this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number');
                        $iworkgroupid = $this->bsf->isNullCheck($postData['workgroupid_' . $i], 'string');
                        if (substr($iworkgroupid, 0, 2) == '0.') $iworkgroupid= 0;

                        $ipiowid = $this->bsf->isNullCheck($postData['piowid_' . $i], 'number');
                        $sparentName = $this->bsf->isNullCheck($postData['newparentname_' . $i], 'string');

                        if ($siowspec == "") continue;
                        $iHeader = $this->bsf->isNullCheck($postData['raheaderval_' . $i],'number');

                        $headerrow =  $this->bsf->isNullCheck($postData['headerrow_' .$i],'number');
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        if ($headerrow==0) {
                            $dWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                            if ($dWorkingQty ==0) $dWorkingQty=1;
                            $dRWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                            if ($dRWorkingQty ==0) $dRWorkingQty=1;
                            $insert->Values(array('RFCRegisterId' => $identity, 'IOWId' => $iMiowid, 'WorkGroupId' => $iworkgroupid, 'ParentId' => $ipiowid,'ParentName'=>$sparentName,'RefSerialNo' => $this->bsf->isNullCheck($postData['refserialno_' . $i], 'string'), 'SerialNo' => $this->bsf->isNullCheck($postData['serialno_' . $i], 'string'), 'Specification' => $this->bsf->isNullCheck($postData['spec_' . $i], 'string'), 'UnitId' => $this->bsf->isNullCheck($postData['unitkeyid_' . $i], 'number'),
                                'ShortSpec' => $this->bsf->isNullCheck($postData['shortspec_' . $i], 'string'), 'ParentText' => $this->bsf->isNullCheck($postData['parentid_' . $i], 'string'), 'Rate' => $this->bsf->isNullCheck($postData['rate_' . $i], 'number'), 'WorkingQty' => $dWorkingQty, 'RWorkingQty' => $dRWorkingQty,
                                'CementRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number'), 'SandRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number'), 'MetalRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number'), 'ThickQty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number'),
                                'WorkTypeId'=>$iworktypeid,'SortId'=>$this->bsf->isNullCheck($postData['sortid_' . $i], 'number'),'WorkTypeId'=>$this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number'),'WorkGroupName'=>$this->bsf->isNullCheck($postData['newworkgroupname_' . $i], 'string'),'MixType' => $this->bsf->isNullCheck($postData['ratetype_' . $i], 'string'),'Header'=>$iHeader));
                        } else {
                            $insert->Values(array('RFCRegisterId' => $identity, 'IOWId' => $iMiowid,  'WorkGroupId' => $iworkgroupid, 'ParentId' => $ipiowid,'ParentName'=>$sparentName, 'RefSerialNo' => $this->bsf->isNullCheck($postData['refserialno_' . $i], 'string'), 'SerialNo' => $this->bsf->isNullCheck($postData['serialno_' . $i], 'string'), 'Specification' => $this->bsf->isNullCheck($postData['spec_' . $i], 'string'),
                                'ShortSpec' => $this->bsf->isNullCheck($postData['shortspec_' . $i], 'string'), 'ParentText' => $this->bsf->isNullCheck($postData['parentid_' . $i], 'string'),'WorkTypeId'=>$iworktypeid, 'SortId'=>$this->bsf->isNullCheck($postData['sortid_' . $i], 'number'),'Header'=>$iHeader));
                        }
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $dWasteAmt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totwastage'], 'number');
                        $dBaseRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totbaserate'], 'number');
                        $dQualValue= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totqualrate'], 'number');
                        $dTotRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totrate'], 'number');
                        $dNetRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totnetrate'], 'number');

                        $dRWasteAmt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totwastage'], 'number');
                        $dRBaseRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totbaserate'], 'number');
                        $dRQualValue= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totqualrate'], 'number');
                        $dRTotRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totrate'], 'number');
                        $dRNetRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totnetrate'], 'number');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWRate');
                        $insert->Values(array('RFCTransId' => $itransid, 'WastageAmt' => $dWasteAmt, 'BaseRate' => $dBaseRate, 'QualifierValue' => $dQualValue,
                            'TotalRate' => $dTotRate, 'NetRate' => $dNetRate, 'RWastageAmt' => $dRWasteAmt, 'RBaseRate' => $dRBaseRate, 'RQualifierValue' => $dRQualValue,
                            'RTotalRate' => $dRTotRate, 'RNetRate' => $dRNetRate));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoid_' . $i], 'number');

                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_reskeyid_' . $j], 'string');
                            if (substr($iresid, 0, 2) == '0.') {
                                $iresid= 0;
                            }

                            $iiowid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_iowkeyid_' . $j], 'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j], 'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resdes_' . $j], 'string');
                            $irefid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_refid_' . $j], 'number');
                            $isortid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_rowrefid_' . $j], 'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j], 'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_ratetype_' . $j], 'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_newresname_' . $j], 'string');


                            if ($sratetype =="") $sratetype="L";

                            if ($stype == "") {
                                continue;
                            }

                            if ($stype == "I" && $iiowid == 0) {
                                continue;
                            } else if ($stype == "R" && ($iresid == 0 && $sresName =="")) {
                                continue;
                            } else if ($stype == "H" && $sdes == "") {
                                continue;
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype == "I") {
                                $check_value = isset($postData['rateanal_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid, 'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resamt_' . $j], 'number'),
                                    'Formula' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'S', 'TransType' => $stranstype, 'SortId' => $isortid, 'RateType' => $sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $check_value = 1;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'Description' => $sdes, 'MixType' => 'S', 'TransType' => $stranstype, 'SortId' => $isortid));
                            }
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['Qual_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Sign_' . $k], 'string');


                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'S'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['QualR_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['QualR_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Sign_' . $k], 'string');

                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');

                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess,'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'R'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $iactRowidR = $this->bsf->isNullCheck($postData['rowinfoidR_' . $i], 'number');
                        for ($j = 1; $j <= $iactRowidR; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_reskeyid_' . $j], 'string');
                            if (substr($iresid, 0, 2) == '0.') $iresid= 0;
                            $iiowid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_iowkeyid_' . $j], 'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j], 'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resdes_' . $j], 'string');
                            $irefid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_refid_' . $j], 'number');
                            $isortid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_rowrefid_' . $j], 'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j], 'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_ratetype_' . $j], 'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_newresname_' . $j], 'string');
                            if ($stype == "") {
                                continue;
                            }

                            if ($stype == "I" && $iiowid == 0) {
                                continue;
                            } else if ($stype == "R" && ($iresid == 0 && $sresName =="")) {
                                continue;
                            } else if ($stype == "H" && $sdes == "") {
                                continue;
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype == "I") {
                                $check_value = isset($postData['rateanalR_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid, 'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resamt_' . $j], 'number'), 'Formula' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'R', 'TransType' => $stranstype, 'SortId' => $isortid, 'RateType' => $sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $check_value = 1;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'Description' => $sdes, 'MixType' => 'R', 'TransType' => $stranstype, 'SortId' => $isortid));
                            }
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $iwgrowid = $this->bsf->isNullCheck($postData['newwgowid'], 'number');
                    for ($j = 1; $j <= $iwgrowid; $j++) {
                        $sWgCode = $this->bsf->isNullCheck($postData['newwgnameslno_' . $j], 'string');
                        $sWgName = $this->bsf->isNullCheck($postData['newwgname_' . $j], 'string');
                        $iWgTypeid = $this->bsf->isNullCheck($postData['newwgid_' . $j], 'number');
                        $iautoRA = $this->bsf->isNullCheck($postData['newwgrateanal_' . $j], 'number');

                        if ($sWgName == "" || $iWgTypeid == 0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'SerialNo'=> $sWgCode,'WorkTypeId' => $iWgTypeid, 'WorkGroupName' => $sWgName, 'AutoRateAnalysis' => $iautoRA));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {
                        $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                        $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                        $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                        $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                        $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                        $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                        if ($sresName == "" || $iresgroupid == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'Code'=>$srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                            'UnitId' => $iunitid,'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate,'Rate'=>$drate,'WorkRate'=>$dwrate,'LeadDays'=>$ilead,'MaterialType'=>$smattype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {
                    $mode = $postData['rfcmode'];
                    if ($mode == 'edit') {
                        $rfctype = 'IOW-Edit';
                    } else {
                        $rfctype = 'IOW-Add';
                    }

                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCFrom' => 'Library', 'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'Item of Work','Narration' => $this->bsf->isNullCheck($postData['Narration'],'string')));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $wgroupid = 0;
                        $myArray = explode('.', $postData['parentkeyid_' . $i]);
                        if (count($myArray) > 1) {
                            $wgroupid = $myArray[0];
                            $parentid = intval($myArray[1]);
                        } else {
                            $wgroupid = $myArray[0];
                            $parentid = 0;
                        }
                        if ($wgroupid==0) $parentid=0;

                        $iMiowid = $this->bsf->isNullCheck($postData['iowid_' . $i], 'number');
                        $headerrow =  $this->bsf->isNullCheck($postData['headerrow_' .$i],'number');
                        $iworktypeid = $this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number');
                        $iworkgroupid = $this->bsf->isNullCheck($postData['workgroupid_' . $i], 'string');
                        if (substr($iworkgroupid, 0, 2) == '0.') $iworkgroupid= 0;
                        $ipiowid = $this->bsf->isNullCheck($postData['piowid_' . $i], 'number');
                        $sparentName = $this->bsf->isNullCheck($postData['newparentname_' . $i], 'string');

                        $iHeader = $this->bsf->isNullCheck($postData['raheaderval_' . $i],'number');
                        if ($this->bsf->isNullCheck($postData['spec_' . $i], 'string') == "") continue;
//                        if ($wgroupid != 0) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        if ($headerrow==0) {
                            $dWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                            if ($dWorkingQty ==0) $dWorkingQty=1;
                            $dRWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                            if ($dRWorkingQty ==0) $dRWorkingQty=1;

                            $insert->Values(array('RFCRegisterId' => $identity, 'IOWId' => $iMiowid, 'WorkGroupId' => $iworkgroupid, 'ParentId' => $ipiowid,'ParentName'=>$sparentName,'RefSerialNo' => $this->bsf->isNullCheck($postData['refserialno_' . $i], 'string'), 'SerialNo' => $this->bsf->isNullCheck($postData['serialno_' . $i], 'string'), 'Specification' => $this->bsf->isNullCheck($postData['spec_' . $i], 'string'), 'UnitId' => $this->bsf->isNullCheck($postData['unitkeyid_' . $i], 'number'),
                                'ShortSpec' => $this->bsf->isNullCheck($postData['shortspec_' . $i], 'string'), 'ParentText' => $this->bsf->isNullCheck($postData['parentid_' . $i], 'string'), 'Rate' => $this->bsf->isNullCheck($postData['rate_' . $i], 'number'), 'WorkingQty' => $dWorkingQty, 'RWorkingQty' => $dRWorkingQty,
                                'CementRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number'), 'SandRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number'), 'MetalRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number'), 'ThickQty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number'),
                                'WorkTypeId'=>$iworktypeid,'SortId' => $this->bsf->isNullCheck($postData['sortid_' . $i], 'number'),'WorkTypeId'=>$this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number'),'WorkGroupName'=>$this->bsf->isNullCheck($postData['newworkgroupname_' . $i], 'string'), 'MixType' => $this->bsf->isNullCheck($postData['ratetype_' . $i], 'string'),'Header'=>$iHeader));

                        } else {
                            $insert->Values(array('RFCRegisterId' => $identity, 'IOWId' => $iMiowid, 'WorkGroupId' => $iworkgroupid, 'ParentId' => $ipiowid,'ParentName'=>$sparentName, 'RefSerialNo' => $this->bsf->isNullCheck($postData['refserialno_' . $i], 'string'), 'SerialNo' => $this->bsf->isNullCheck($postData['serialno_' . $i], 'string'), 'Specification' => $this->bsf->isNullCheck($postData['spec_' . $i], 'string'),
                                'ShortSpec' => $this->bsf->isNullCheck($postData['shortspec_' . $i], 'string'), 'ParentText' => $this->bsf->isNullCheck($postData['parentid_' . $i], 'string'),'WorkTypeId'=>$iworktypeid,'SortId' => $this->bsf->isNullCheck($postData['sortid_' . $i], 'number'),'Header'=>$iHeader));

                        }
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $dWasteAmt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totwastage'], 'number');
                        $dBaseRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totbaserate'], 'number');
                        $dQualValue= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totqualrate'], 'number');
                        $dTotRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totrate'], 'number');
                        $dNetRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totnetrate'], 'number');

                        $dRWasteAmt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totwastage'], 'number');
                        $dRBaseRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totbaserate'], 'number');
                        $dRQualValue= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totqualrate'], 'number');
                        $dRTotRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totrate'], 'number');
                        $dRNetRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totnetrate'], 'number');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWRate');
                        $insert->Values(array('RFCTransId' => $itransid, 'WastageAmt' => $dWasteAmt, 'BaseRate' => $dBaseRate, 'QualifierValue' => $dQualValue,
                            'TotalRate' => $dTotRate, 'NetRate' => $dNetRate, 'RWastageAmt' => $dRWasteAmt, 'RBaseRate' => $dRBaseRate, 'RQualifierValue' => $dRQualValue,
                            'RTotalRate' => $dRTotRate, 'RNetRate' => $dRNetRate));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoid_' . $i], 'number');

                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_reskeyid_' . $j], 'string');
                            if (substr($iresid, 0, 2) == '0.') $iresid = 0;
                            $iiowid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_iowkeyid_' . $j], 'number');
                            $irefid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_refid_' . $j], 'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j], 'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resdes_' . $j], 'string');
                            $isortid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_rowrefid_' . $j], 'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j], 'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_ratetype_' . $j], 'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_newresname_' . $j], 'string');

                            if ($stype == "" || ($stype == "I" && $iiowid == 0) || ($stype == "R" && $iresid == 0 && $sresName=="") || $stype == "H" && $sdes == "")
                                continue;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype == "I") {
                                $check_value = isset($postData['rateanal_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid, 'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resamt_' . $j], 'number'), 'Formula' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'S', 'TransType' => $stranstype, 'SortId' => $isortid, 'RateType' => $sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $check_value = 1;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'Description' => $sdes, 'MixType' => 'S', 'TransType' => $stranstype, 'SortId' => $isortid));
                            }
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }


                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['Qual_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Sign_' . $k], 'string');

                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');

                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess,'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'S'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['QualR_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['QualR_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Sign_' . $k], 'string');

                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessAmt_' . $k], 'number');

                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');
                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess,'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'R'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoidR_' . $i], 'number');

                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_reskeyid_' . $j], 'string');
                            if (substr($iresid, 0, 2) == '0.') $iresid = 0;
                            $iiowid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_iowkeyid_' . $j], 'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j], 'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resdes_' . $j], 'string');
                            $irefid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_refid_' . $j], 'number');
                            $isortid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_rowrefid_' . $j], 'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j], 'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_ratetype_' . $j], 'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_newresname_' . $j], 'string');

                            if ($stype == "" || ($stype == "I" && $iiowid == 0) || ($stype == "R" && $iresid == 0 && $sresName =="") || $stype == "H" && $sdes == "")
                                continue;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype == "I") {
                                $check_value = isset($postData['rateanal_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid, 'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resamt_' . $j], 'number'), 'Formula' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'R', 'TransType' => $stranstype, 'SortId' => $isortid, 'RateType' => $sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $check_value = 1;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'Description' => $sdes, 'MixType' => 'R', 'TransType' => $stranstype, 'SortId' => $isortid));
                            }

                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
//                        }
                    }

                    $iwgrowid = $this->bsf->isNullCheck($postData['newwgowid'], 'number');
                    for ($j = 1; $j <= $iwgrowid; $j++) {

                        $sWgCode = $this->bsf->isNullCheck($postData['newwgnameslno_' . $j], 'string');
                        $sWgName = $this->bsf->isNullCheck($postData['newwgname_' . $j], 'string');
                        $iWgTypeid = $this->bsf->isNullCheck($postData['newwgid_' . $j], 'number');
                        $iautoRA = $this->bsf->isNullCheck($postData['newwgrateanal_' . $j], 'number');

                        if ($sWgName == "" || $iWgTypeid == 0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'SerialNo'=> $sWgCode, 'WorkTypeId' => $iWgTypeid, 'WorkGroupName' => $sWgName, 'AutoRateAnalysis' => $iautoRA));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {
                        $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                        $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                        $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                        $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                        $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                        $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                        if ($sresName == "" || $iresgroupid == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'Code'=>$srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                            'UnitId' => $iunitid,'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate,'Rate'=>$drate,'WorkRate'=>$dwrate,'LeadDays'=>$ilead,'MaterialType'=>$smattype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);

                    if ($mode == 'edit') {
                        $this->redirect()->toRoute('project/default', array('controller' => 'main', 'action' => 'iowmasterview'));
                    } else {
                        $this->redirect()->toRoute('project/rfciow', array('controller' => 'rfc', 'action' => 'rfciow'));
                    }

                }
            } catch (PDOException $e) {
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            $rfcid = $this->params()->fromRoute('rfcId');
            $smode = $this->params()->fromRoute('mode');
            $editid = $this->params()->fromRoute('id');

            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            $select = $sql->select();
            $select->from('Proj_WorkGroupMaster')
                ->columns(array('WorkGroupId', 'SerialNo', 'WorkGroupName','WorkTypeId'))
                ->where(array("DeleteFlag" => 0));
            $statement = $sql->getSqlStringForSqlObject($select);
            $workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $parentdata = array();

            $k = 0;
            for ($i = 0; $i < count($workgroup); $i++) {
                $parentdata[$k]['data'] = $workgroup[$i]['WorkGroupId'];
                $parentdata[$k]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];
                $parentdata[$k]['worktypeid'] = $workgroup[$i]['WorkTypeId'];
                $parentdata[$k]['workgroupid'] = $workgroup[$i]['WorkGroupId'];
                $parentdata[$k]['iowid'] = 0;
                $parentdata[$k]['workgroupname'] = $workgroup[$i]['WorkGroupName'];
                $parentdata[$k]['parentname'] = "";
                $k = $k + 1;

                $select = $sql->select();
                $select->from('Proj_IOWMaster')
                    ->columns(array('IOWId', 'SerialNo', 'Specification'=>new expression("Specification"),'WorkTypeId'))
                    ->where(array("Header" => 1, "WorkGroupId" => $workgroup[$i]['WorkGroupId']));

                $statement = $sql->getSqlStringForSqlObject($select);
                $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                for ($j = 0; $j < count($parentiow); $j++) {
                    $parentdata[$k]['data'] = $workgroup[$i]['WorkGroupId'] . '.' . $parentiow[$j]['IOWId'];
                    $parentdata[$k]['value'] = $parentiow[$j]['SerialNo'] . '   ' . $parentiow[$j]['Specification'];
                    $parentdata[$k]['worktypeid'] = $workgroup[$i]['WorkTypeId'];
                    $parentdata[$k]['workgroupid'] = $workgroup[$i]['WorkGroupId'];
                    $parentdata[$k]['iowid'] = $parentiow[$j]['IOWId'];
                    $parentdata[$k]['workgroupname'] = $workgroup[$i]['WorkGroupName'];
                    $parentdata[$k]['parentname'] = $parentiow[$j]['Specification'];
                    $k = $k + 1;
                }
            }

            $this->_view->parentiow = $parentdata;

            $select = $sql->select();
            $select->from('Proj_UOM')
                ->columns(array("data" => 'UnitId', "value" => 'UnitName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_UOM')
                ->columns(array('data' => 'UnitId', 'value' => 'UnitName'))
                ->where(array('WorkUnit'=>1));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->wunit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_Resource')
                ->columns(array("id" => 'ResourceId', "type" => new Expression("'R'"), "value" => new Expression("Code + ' ' +ResourceName")))
                ->where(array("DeleteFlag" => '0'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_Resource'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array(), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array(), $select:: JOIN_LEFT)
                ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array(), $select:: JOIN_LEFT)
                ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array(), $select:: JOIN_LEFT)
                ->columns(array('ResourceId','TypeId','UnitId'=>new Expression("Case When a.TypeId=3 then a.WorkUnitId else a.UnitId end"),'Code','ResourceName','UnitName'=>new Expression("Case When a.TypeId=3 then e.UnitName else d.UnitName end"),'TypeName'=>new Expression('b.TypeName'),'ResourceGroup'=>new Expression('c.ResourceGroupName'),'Select'=>new Expression("'0'")))
                ->where(array("a.DeleteFlag" => '0'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->respicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_IOWMaster'))
                ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupId','WorkGroupName','WorkTypeId'), $select::JOIN_INNER)
                ->join(array('c' => 'Proj_WorkTypeMaster'), 'b.WorkTypeId=c.WorkTypeId', array('WorkTypeName'=>new Expression('WorkType')), $select::JOIN_INNER)
                ->columns(array('IOWId', 'SerialNo','Specification','Header','Select'=>new Expression("'0'")))
                ->where(array('a.DeleteFlag'=>0));
            $select->order(array('SlNo ASC'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->iowpicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_IOWMaster')
                ->columns(array("id" => 'IOWId', "type" => new Expression("'I'"), "value" => new Expression("SerialNo + ' ' +Specification ")))
                ->where(array("DeleteFlag" => '0'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->resiowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


            $select = $sql->select();
            $select->from('Proj_IOWMaster')
                ->columns(array('IOWId', 'Specification'));

            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->iowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ResourceGroup'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
                ->where(array("a.TypeId <> 4","a.LastLevel"=>1,"DeleteFlag" => '0'));

            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ResourceGroup'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
                ->where(array("a.LastLevel"=>1,"DeleteFlag" => '0'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->excelresgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_Resource'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array('WorkUnitName'=>new Expression("e.UnitName")), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' => 'ResourceName', 'TypeId','ResourceGroupId','MaterialType','UnitId','WorkUnitId'))
                ->where(array("a.DeleteFlag" => '0'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->excelresource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_WorkTypeMaster')
                ->columns(array('data' => 'WorkTypeId', 'value' => 'WorkType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->worktype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WorkGroupMaster'))
                ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType','WorkTypeId'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'WorkGroupId', "value"=> new Expression("WorkGroupName")))
                ->where(array("DeleteFlag"=>0));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array("a" => "Proj_QualifierTrans"))
                ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName','QualifierTypeId','RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                ->columns(array('QualifierId','YesNo','Expression','ExpPer','TaxablePer','TaxPer','Sign','SurCharge','EDCess','HEDCess','KKCess','SBCess','NetPer',
                    'BaseAmount'=> new Expression("CAST(0 As Decimal(18,2))"),
                    'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"),'TaxableAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'TaxAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'SurChargeAmt'=> new Expression("CAST(0 As Decimal(18,2))"),
                    'EDCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'HEDCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'KKCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'SBCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'NetAmt'=> new Expression("CAST(0 As Decimal(18,2))")));
            $select->where(array('a.QualType' => 'W'));
            $select->order('a.SortId ASC');
            $statement = $sql->getSqlStringForSqlObject($select);
            $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $sHtml=Qualifier::getQualifier($qualList);
            $this->_view->qualHtml = $sHtml;

            $sHtml=Qualifier::getQualifier($qualList,"R");
            $this->_view->qualRHtml = $sHtml;
//            print_r($this->_view->qualRHtml);
            if (!isset($rfcid)) $rfcid = 0;
            if (!isset($editid)) $editid = 0;

//            $tds = CommonHelper::getTDSSetting(11,date('Y/m/d'), $dbAdapter);
//            $st = CommonHelper::getSTSetting('F',date('Y/m/d'), $dbAdapter);

            if ($rfcid != 0) {
                $iRFCId = $rfcid;

                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate','Approve','Narration'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_RFCIOWRate'), 'a.RFCTransId=c.RFCTransId', array('WastageAmt','BaseRate','QualifierValue','TotalRate','NetRate','RWastageAmt','RBaseRate','RQualifierValue','RTotalRate','RNetRate'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=d.WorkTypeId', array('ConcreteMix','Cement','Sand','Metal','Thickness'), $select:: JOIN_LEFT)
                    ->columns(array('*'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $select->order(array('a.SortId ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->_view->rfctrans = $rfcTrans;

                $arrqual = array();
                foreach ($rfcTrans as $trans) {
                    $rfctransid = $trans['RFCTransId'];

                    $select = $sql->select();
                    $select->from(array("a" => "Proj_RFCIOWQualTrans"))
                        ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                        ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess','NetPer',
                            'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                            'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                            'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt','NetAmt'));
                    $select->where(array('a.MixType'=>'S','a.RFCTransId'=>$rfctransid));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $sHtml = Qualifier::getQualifier($qualList);
                    $arrqual[$rfctransid] = $sHtml;
                }

                $arrRqual = array();
                foreach ($rfcTrans as $trans) {
                    $rfctransid = $trans['RFCTransId'];

                    $select = $sql->select();
                    $select->from(array("a" => "Proj_RFCIOWQualTrans"))
                        ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                        ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess', 'NetPer',
                            'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                            'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                            'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt', 'NetAmt'));
                    $select->where(array('a.MixType'=>'R','a.RFCTransId'=>$rfctransid));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $sHtml = Qualifier::getQualifier($qualList,'R');
                    $arrRqual[$rfctransid] = $sHtml;
                }

                $this->_view->arrqual = $arrqual;
                $this->_view->arrRqual = $arrRqual;

                $subQuery = $sql->select();
                $subQuery->from("Proj_RFCIOWTrans")
                    ->columns(array("RFCTransId"));
                $subQuery->where(array('RFCRegisterId' => $iRFCId));

//                $select = $sql->select();
//                $select->from(array('a' => 'Proj_RFCRateAnalysis'))
//                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'TypeId'), $select:: JOIN_LEFT)
//                    ->join(array('c' => 'Proj_IOWMaster'), 'a.SubIOWId=c.IOWId', array('SerialNo', 'Specification'), $select:: JOIN_LEFT)
//                    ->join(array('d' => 'Proj_UOM'), 'b.UnitId=d.UnitId', array('UnitName'=>new Expression('c.UnitName')), $select:: JOIN_LEFT)
//                    ->join(array('e' => 'Proj_UOM'), 'c.UnitId=e.UnitId', array('IOWUnitName'=>new Expression('d.UnitName')), $select:: JOIN_LEFT)
//                    ->columns(array('RFCTransId', 'IncludeFlag', 'ReferenceId', 'SubIOWId', 'ResourceId', 'Qty', 'Rate', 'Amount', 'Formula', 'MixType', 'TransType', 'Description','Wastage','WastageQty','WastageAmount','Weightage','SortId','RateType'))
//                    ->where->expression('RFCTransId IN ?', array($subQuery));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'TypeId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_IOWMaster'), 'a.SubIOWId=c.IOWId', array('SerialNo', 'Specification'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), 'b.UnitId=d.UnitId', array('UnitName'=>new Expression('d.UnitName')), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'c.UnitId=e.UnitId', array('IOWUnitName'=>new Expression('e.UnitName')), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId', 'IncludeFlag', 'ReferenceId', 'SubIOWId', 'ResourceId', 'Qty', 'Rate', 'Amount', 'Formula', 'MixType', 'TransType', 'Description','Wastage','WastageQty','WastageAmount','Weightage','SortId','RateType'))
                    ->where->expression('RFCTransId IN ?', array($subQuery));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcrateanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            } else if ($editid != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->columns(array('IOWId', 'WorkGroupId', 'ParentId', 'SerialNo', 'RefSerialNo', 'Specification', 'ShortSpec', 'UnitId', 'WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty', 'Rate', 'ParentText', 'MixType','WorkTypeId','Header'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_IOWRate'), 'a.IOWId=c.IOWId', array('WastageAmt','BaseRate','QualifierValue','TotalRate','NetRate','RWastageAmt','RBaseRate','RQualifierValue','RTotalRate','RNetRate'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=d.WorkTypeId', array('ConcreteMix','Cement','Sand','Metal','Thickness'), $select:: JOIN_LEFT)
                    ->where(array("a.IOWId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'TypeId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_IOWMaster'), 'a.SubIOWId=c.IOWId', array('SerialNo', 'Specification'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), 'b.UnitId=d.UnitId', array('UnitName'=>new Expression('d.UnitName')), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'c.UnitId=e.UnitId', array('IOWUnitName'=>new Expression('e.UnitName')), $select:: JOIN_LEFT)
                    ->columns(array('IOWId', 'IncludeFlag', 'ReferenceId', 'SubIOWId','ResourceId', 'Qty', 'Rate', 'Amount', 'Formula', 'MixType', 'TransType','Description','Wastage','WastageQty','WastageAmount','Weightage','SortId','RateType'))
                    ->where(array("a.IOWId" => $editid));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcrateanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array("a" => "Proj_IOWQualTrans"))
                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                    ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess', 'NetPer',
                        'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                        'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                        'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt', 'NetAmt'));
                $select->where(array('a.MixType'=>'S','a.IOWId'=>$editid));
                $select->order('a.SortId ASC');

                $statement = $sql->getSqlStringForSqlObject($select);
                $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $sHtml = Qualifier::getQualifier($qualList);
                $arrqual[$editid] = $sHtml;

                $select = $sql->select();
                $select->from(array("a" => "Proj_IOWQualTrans"))
                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                    ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'KKCess','SBCess','NetPer',
                        'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                        'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                        'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt', 'NetAmt'));
                $select->where(array('a.MixType'=>'R','a.IOWId'=>$editid));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $sHtml = Qualifier::getQualifier($qualList,"R");
                $arrRqual[$editid] = $sHtml;

                $this->_view->arrqual = $arrqual;
                $this->_view->arrRqual = $arrRqual;
            }

            $wgcodegenType = 0;
            $select = $sql->select();
            $select->from('Proj_WorkGroupCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wgcodesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($wgcodesetup)) $wgcodegenType = $wgcodesetup['GenType'];
            $this->_view->wgcodegenType = $wgcodegenType;

            $codegenType = 0;
            $select = $sql->select();
            $select->from('Proj_ResourceCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
            $this->_view->codegenType = $codegenType;

            $this->_view->genType = $aVNo["genType"];
            $this->_view->mode = $smode;
            $this->_view->rfcid = (isset($rfcid) && $rfcid != 0) ? $rfcid : 0;
            $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;

            if ($rfcid == 0) {
                if ($aVNo["genType"] == false)
                    $this->_view->svNo = "";
                else
                    $this->_view->svNo = $aVNo["voucherNo"];
            }
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function rfcresourcedeleteAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Resource Delete");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            try {
                $postData = $request->getPost();
                $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));

                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCResourceDeleteTrans')
                        ->where(array("RFCRegisterId" => $identity));

                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ResourceId' => $postData['resid_' . $i]));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister', 'rfcid' => $iRFCId));
                } else {
                    try {
                        $rfctype = 'Resource-Delete';

                        $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true)
                            $sVno = $aVNo["voucherNo"];
                        else
                            $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Resource'));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                        for ($i = 1; $i <= $iRowId; $i++) {
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCResourceDeleteTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'ResourceId' => $this->bsf->isNullCheck($postData['resid_' . $i], 'number')));

                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                        $this->redirect()->toRoute('project/resourcemaster', array('controller' => 'main', 'action' => 'resourcemaster'));
                    } catch (PDOException $e) {
                        $connection->rollback();
                        print "Error!: " . $e->getMessage() . "</br>";
                    }
                }
            } catch (PDOException $e) {
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $id = $this->params()->fromRoute('id');
            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            if (!isset($iRFCId)) $iRFCId = 0;
            if (!isset($id)) $id = 0;

            if ($iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration','Approve'))
                    ->where(array("RFCRegisterId" => $iRFCId));

                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCResourceDeleteTrans'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'b.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_ResourceType'), 'b.TypeId=d.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId'), array('Code', 'ResourceName'), array('ResourceGroupName'), array('TypeName'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));

                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            } else if ($id != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=b.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceType'), 'b.TypeId=c.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->where(array('ResourceId' => $id));

                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            }
        }

        $this->_view->rfcid = $iRFCId != 0 ? $iRFCId : 0;
        $this->_view->resourceid = $id != 0 ? $id : 0;
        $this->_view->genType = $aVNo["genType"];

        if ($iRFCId == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }


    public function rfciowdeleteAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Item of Work Delete");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');

            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWDeleteTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'IOWId' => $this->bsf->isNullCheck($postData['iowid_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister', 'rfcid' => $iRFCId));
                } else {
                    $rfctype = 'IOW-Delete';
                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $postData['refno'];

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Item of Work'));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'IOWId' => $this->bsf->isNullCheck($postData['iowid_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/iowmasterview', array('controller' => 'main', 'action' => 'iowmasterview'));
                }
            } catch (PDOException $e) {
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $id = $this->params()->fromRoute('id');
            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            if (!isset($iRFCId)) $iRFCId = 0;
            if (!isset($id)) $id = 0;

            if ($iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCIOWDeleteTrans'))
                    ->join(array('b' => 'Proj_IOWMaster'), 'a.IOWId=b.IOWId', array('SerialNo', 'Specification'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_WorkGroupMaster'), 'b.WorkGroupId=c.WorkGroupId', array('WorkGroupName'), $select:: JOIN_LEFT)
                    ->columns(array('IOWId'), array('SerialNo', 'Specification'), array('WorkGroupName'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            } else if ($id != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->join(array('b' => 'Proj_WorkGroupMaster'), 'b.WorkGroupId=a.WorkGroupId', array('WorkGroupName'), $select:: JOIN_LEFT)
                    ->where(array('IOWId' => $id));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->iow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            }
        }

        $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
        $this->_view->iowid = (isset($id) && $id != 0) ? $id : 0;
        $this->_view->genType = $aVNo["genType"];

        if ($iRFCId == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function rfcworktypeAction() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" RFC Work Type");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if($this->getRequest()->isXmlHttpRequest())	{
            if ($request->isPost()) {
                $name = $this->bsf->isNullCheck($this->params()->fromPost('name'), 'string');
                $type = $this->bsf->isNullCheck($this->params()->fromPost('type'), 'number');

                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns( array( 'CheckListId'))
                    ->where("CheckListName='$name' AND TypeId='$type' AND DeleteFlag=0");
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (sizeof($results) !=0 )
                    return $this->getResponse()->setStatusCode(202)->setContent('Checklist already exists.');
                else {
                    $connection = $dbAdapter->getDriver()->getConnection();
                    $connection->beginTransaction();

                    // create new checklist
                    $insert = $sql->insert();
                    $insert->into('Proj_CheckListMaster')
                        ->Values(array('CheckListName' => $name, 'TypeId' => $type));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $id = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $connection->commit();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_CheckListMaster'))
                        ->columns(array('CheckListName', 'CheckListId'))
                        ->where("a.CheckListId='$id'");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    return $this->getResponse()
                        ->setStatusCode(200)
                        ->setContent(json_encode($results));
                }
            }
        } else {
            if ($request->isPost()) {
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                $postData = $request->getPost();
                $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');
                try {
                    if ($iRFCId != 0) {
                        $identity = $iRFCId;

                        $rfctype = '';
                        $select = $sql->select();
                        $select->from('Proj_RFCRegister')
                            ->columns(array('RFCType'))
                            ->where(array("RFCRegisterId" => $iRFCId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if (!empty($rfcreg)) $rfctype = $this->bsf->isNullCheck($rfcreg['RFCType'], 'string');
                        $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');
                        $update = $sql->update();
                        $update->table('Proj_RFCRegister');
                        $update->set(array(
                            'RefNo' => $sRefNo,
                            'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                            'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                        ));
                        $update->where(array('RFCRegisterId' => $identity));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $delete = $sql->delete();
                        $delete->from('Proj_RFCWorkTypeTrans')
                            ->where(array("RFCRegisterId" => $identity));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $subQuery = $sql->select();
                        $subQuery->from("Proj_RFCWorkTypeTrans")
                            ->columns(array("RFCTransId"));
                        $subQuery->where(array('RFCRegisterId' => $identity));

                        $delete = $sql->delete();
                        $delete->from('Proj_RFCWorkTypeAnalysis')
                            ->where->expression('RFCTransId IN ?', array($subQuery));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Proj_RFCResourceTrans')
                            ->where(array("RFCRegisterId" => $identity));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                        for ($i = 1; $i <= $iRowId; $i++) {
                            $bConcrete = isset($postData['concrete_' . $i]) ? 1 : 0;
                            $bCement = isset($postData['cement_' . $i]) ? 1 : 0;
                            $bSand = isset($postData['sand_' . $i]) ? 1 : 0;
                            $bMetal = isset($postData['metal_' . $i]) ? 1 : 0;
                            $bThick = isset($postData['thick_' . $i]) ? 1 : 0;
                            $bWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                            $bRworkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                            $bCementRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number');
                            $bSandRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number');
                            $bMetalRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number');
                            $bThickQty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number');
                            $workTypeId = $this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number');
                            if ($bWorkingQty == 0) $bWorkingQty = 1;
                            if ($bRworkingQty == 0) $bRworkingQty = 1;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCWorkTypeTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                'ConcreteMix' => $bConcrete, 'Cement' => $bCement, 'Sand' => $bSand, 'Metal' => $bMetal, 'Thickness' => $bThick,
                                'WorkingQty' => $bWorkingQty, 'RWorkingQty' => $bRworkingQty, 'CementRatio' => $bCementRatio,
                                'SandRatio' => $bSandRatio, 'MetalRatio' => $bMetalRatio, 'ThickQty' => $bThickQty));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();
                            $iTRowId = $this->bsf->isNullCheck($postData['wrowid_' . $i], 'number');
                            for ($j = 1; $j <= $iTRowId; $j++) {
                                $resourceId = $this->bsf->isNullCheck($postData['type_' . $i . '_resid_' . $j], 'string');
                                $referenceId = filter_var($postData['type_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                $qty = $this->bsf->isNullCheck($postData['type_' . $i . '_qty_' . $j], 'number');
                                $includeFlag = isset($postData['type_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $iSortId = $this->bsf->isNullCheck($postData['type_' . $i . '_rowrefid_' . $j], 'number');
                                $sRowType = $this->bsf->isNullCheck($postData['type_' . $i . '_rowtype_' . $j], 'string');
                                $sdesc = "";
                                $iNew = 0;
                                $sResName = "";
                                if (substr($resourceId, 0, 2) == '0.') {
                                    $resourceId = 0;
                                    $iNew = 1;
                                    $sResName = $this->bsf->isNullCheck($postData['type_' . $i . '_newresname_' . $j], 'string');
                                }
                                if ($sRowType == "H") {
                                    $resourceId = 0;
                                    $sdesc = $this->bsf->isNullCheck($postData['type_' . $i . '_resdes_' . $j], 'string');
                                } else $sRowType = "R";
                                if ($sRowType == "R") {
                                    if ($resourceId == 0) {
                                        if ($sResName == "") continue;
                                    }
                                } else {
                                    if ($sdesc == "") continue;
                                }
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeAnalysis');
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty
                                , 'CFormula' => $this->bsf->isNullCheck($postData['type_' . $i . '_formula_' . $j], 'string'), 'Type' => 'S', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                            $iTRowId = $this->bsf->isNullCheck($postData['wrowRid_' . $i], 'number');
                            for ($j = 1; $j <= $iTRowId; $j++) {
                                $resourceId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resid_' . $j], 'number');
                                $referenceId = filter_var($postData['typeR_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                $qty = $this->bsf->isNullCheck($postData['typeR_' . $i . '_qty_' . $j], 'number');
                                $includeFlag = isset($postData['typeR_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $iSortId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowrefid_' . $j], 'number');
                                $sRowType = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowtype_' . $j], 'string');
                                $sdesc = "";
                                $iNew = 0;
                                $sResName = "";
                                if (substr($resourceId, 0, 2) == '0.') {
                                    $resourceId = 0;
                                    $iNew = 1;
                                    $sResName = $this->bsf->isNullCheck($postData['typeR_' . $i . '_newresname_' . $j], 'string');
                                }
                                if ($sRowType == "H") {
                                    $resourceId = 0;
                                    $sdesc = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resdes_' . $j], 'string');
                                } else $sRowType = "R";

                                if ($sRowType == "R") {
                                    if ($resourceId == 0) {
                                        if ($sResName == "") continue;
                                    }
                                } else {
                                    if ($sdesc == "") continue;
                                }

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeAnalysis');
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId
                                , 'Qty' => $qty, 'CFormula' => $postData['typeR_' . $i . '_formula_' . $j], 'Type' => 'R', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // work checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkTypeWorkChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $workChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['wtype_'.$i.'_workchklist'], ','), 'string'));
                            foreach($workChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workchklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workcritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workpriority_'.$rowId], 'string');
                                $WhenType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeWorkChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // safety checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkTypeSafetyChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $safetyChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['stype_'.$i.'_safetychklist'], ','), 'string'));
                            foreach($safetyChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetychklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetycritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetypriority_'.$rowId], 'string');

                                $WhenType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeSafetyChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // quality checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkTypeQualityChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $qualityChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['qtype_'.$i.'_qualitychklist'], ','), 'string'));
                            foreach($qualityChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitychklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetycritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitypriority_'.$rowId], 'string');
                                $WhenType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeQualityChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority,  'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                        for ($j = 1; $j <= $iresrowid; $j++) {
                            $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                            $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                            $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                            $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                            $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                            $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                            $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                            $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                            $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                            $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                            if ($sresName == "" || $iresgroupid == 0) continue;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCResourceTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'Code' => $srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                                'UnitId' => $iunitid, 'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate, 'Rate' => $drate, 'WorkRate' => $dwrate, 'LeadDays' => $ilead, 'MaterialType' => $smattype));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            if ($iresgroupid != 0) {
                                $update = $sql->update();
                                $update->table('Proj_ResourceGroup');
                                $update->set(array(
                                    'GroupUsed' => 1,
                                ));
                                $update->where(array('ResourceGroupId' => $iresgroupid));
                                $statement = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                        }
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'), 'Request-For-Creation-Edit', 'E', $rfctype, $identity, 0, 0, 'Project', $sRefNo, $userId, 0, 0);
                        $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                    } else {
                        $rfctype = 'WorkType-Edit';
                        $editid = $this->params()->fromRoute('id');
                        $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true) $sVno = $aVNo["voucherNo"];
                        else $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype
                        , 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Work Type'));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $identity = $dbAdapter->getDriver()->getLastGeneratedValue();
                        $iRowId = $postData['rowid'];
                        for ($i = 1; $i <= $iRowId; $i++) {
                            $bConcrete = isset($postData['concrete_' . $i]) ? 1 : 0;
                            $bCement = isset($postData['cement_' . $i]) ? 1 : 0;
                            $bSand = isset($postData['sand_' . $i]) ? 1 : 0;
                            $bMetal = isset($postData['metal_' . $i]) ? 1 : 0;
                            $bThick = isset($postData['thick_' . $i]) ? 1 : 0;
                            $bWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                            $bRworkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                            $bCementRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number');
                            $bSandRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number');
                            $bMetalRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number');
                            $bThickQty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number');
                            $workTypeId = $this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number');
                            if ($bWorkingQty == 0) $bWorkingQty = 1;
                            if ($bRworkingQty == 0) $bRworkingQty = 1;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCWorkTypeTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId, 'ConcreteMix' => $bConcrete,
                                'Cement' => $bCement, 'Sand' => $bSand, 'Metal' => $bMetal, 'Thickness' => $bThick,
                                'WorkingQty' => $bWorkingQty, 'RWorkingQty' => $bRworkingQty, 'CementRatio' => $bCementRatio,
                                'SandRatio' => $bSandRatio, 'MetalRatio' => $bMetalRatio, 'ThickQty' => $bThickQty));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();
                            $iTRowId = $this->bsf->isNullCheck($postData['wrowid_' . $i], 'number');
                            for ($j = 1; $j <= $iTRowId; $j++) {
                                $resourceId = $this->bsf->isNullCheck($postData['type_' . $i . '_resid_' . $j], 'string');
                                $referenceId = filter_var($postData['type_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                $qty = $this->bsf->isNullCheck($postData['type_' . $i . '_qty_' . $j], 'number');
                                $includeFlag = isset($postData['type_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $iSortId = $this->bsf->isNullCheck($postData['type_' . $i . '_rowrefid_' . $j], 'number');
                                $sRowType = $this->bsf->isNullCheck($postData['type_' . $i . '_rowtype_' . $j], 'string');
                                $sdesc = "";
                                $iNew = 0;
                                $sResName = "";

                                if (substr($resourceId, 0, 2) == '0.') {
                                    $resourceId = 0;
                                    $iNew = 1;
                                    $sResName = $this->bsf->isNullCheck($postData['type_' . $i . '_newresname_' . $j], 'string');
                                }
                                if ($sRowType == "H") {
                                    $resourceId = 0;
                                    $sdesc = $this->bsf->isNullCheck($postData['type_' . $i . '_resdes_' . $j], 'string');
                                } else $sRowType = "R";

                                if ($sRowType == "R") {
                                    if ($resourceId == 0) {
                                        if ($sResName == "") continue;
                                    }
                                } else {
                                    if ($sdesc == "") continue;
                                }

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeAnalysis');
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty
                                , 'CFormula' => $this->bsf->isNullCheck($postData['type_' . $i . '_formula_' . $j], 'string'), 'Type' => 'S', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                            $iTRowId = $this->bsf->isNullCheck($postData['wrowRid_' . $i], 'number');
                            for ($j = 1; $j <= $iTRowId; $j++) {
                                $resourceId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resid_' . $j], 'string');
                                $referenceId = filter_var($postData['typeR_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                $qty = $this->bsf->isNullCheck($postData['typeR_' . $i . '_qty_' . $j], 'number');
                                $includeFlag = isset($postData['typeR_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $iSortId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowrefid_' . $j], 'number');
                                $sRowType = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowtype_' . $j], 'string');
                                $sdesc = "";
                                $iNew = 0;
                                $sResName = "";

                                if (substr($resourceId, 0, 2) == '0.') {
                                    $resourceId = 0;
                                    $iNew = 1;
                                    $sResName = $this->bsf->isNullCheck($postData['typeR_' . $i . '_newresname_' . $j], 'string');
                                }
                                if ($sRowType == "H") {
                                    $resourceId = 0;
                                    $sdesc = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resdes_' . $j], 'string');
                                } else $sRowType = "R";

                                if ($sRowType == "R") {
                                    if ($resourceId == 0) {
                                        if ($sResName == "") continue;
                                    }
                                } else {
                                    if ($sdesc == "") continue;
                                }

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeAnalysis');
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty
                                , 'CFormula' => $this->bsf->isNullCheck($postData['typeR_' . $i . '_formula_' . $j], 'string'), 'Type' => 'R', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // work checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkTypeWorkChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $workChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['wtype_'.$i.'_workchklist'], ','), 'string'));
                            foreach($workChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workchklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workcritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workpriority_'.$rowId], 'string');

                                $WhenType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeWorkChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // safety checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkTypeSafetyChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $safetyChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['stype_'.$i.'_safetychklist'], ','), 'string'));
                            foreach($safetyChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetychklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetycritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetypriority_'.$rowId], 'string');
                                $WhenType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeSafetyChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // quality checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkTypeQualityChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $qualityChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['qtype_'.$i.'_qualitychklist'], ','), 'string'));
                            foreach($qualityChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitychklistid_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitypriority_'.$rowId], 'string');
//                                $IsCritical = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitycritical_'.$rowId], 'number');

                                $WhenType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkTypeQualityChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'WorkTypeId' => $workTypeId,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                        $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                        for ($j = 1; $j <= $iresrowid; $j++) {
                            $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                            $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                            $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                            $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                            $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                            $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                            $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                            $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                            $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                            $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                            if ($sresName == "" || $iresgroupid == 0) continue;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCResourceTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'Code' => $srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                                'UnitId' => $iunitid, 'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate, 'Rate' => $drate, 'WorkRate' => $dwrate, 'LeadDays' => $ilead, 'MaterialType' => $smattype));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            if ($iresgroupid != 0) {
                                $update = $sql->update();
                                $update->table('Proj_ResourceGroup');
                                $update->set(array(
                                    'GroupUsed' => 1,
                                ));
                                $update->where(array('ResourceGroupId' => $iresgroupid));
                                $statement = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                        }

                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'), 'Request-For-Creation-Add', 'N', $rfctype, $identity, 0, 0, 'Project', $sVno, $userId, 0, 0);
                        $this->redirect()->toRoute('project/default', array('controller' => 'main', 'action' => 'worktypemaster'));
                    }
                } catch (PDOException $e) {
                    $connection->rollback();
                }
            }
            else {
                $iRFCId = $this->params()->fromRoute('rfcId');
                $editid = $this->params()->fromRoute('id');
                $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
                if (isset($iRFCId) && $iRFCId != 0) {
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RefNo', 'RefDate', 'Narration', 'Approve'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkTypeTrans'))
                        ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType'), $select:: JOIN_LEFT)
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkTypeAnalysis'))
                        ->join(array('b' => 'Proj_RFCWorkTypeTrans'), 'a.RFCTransId=b.RFCTransId', array('*'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_Resource'), 'c.ResourceId=a.ResourceId', array('*'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_UOM'), 'd.UnitId=c.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array("b.RFCRegisterId" => $iRFCId));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->worktypeanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkTypeWorkChecklistTrans'))
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedworkchks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkTypeSafetyChecklistTrans'))
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedsafetychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();$select = $sql->select();

                    $select->from(array('a' => 'Proj_RFCWorkTypeQualityChecklistTrans'))
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedqualitychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
                } else if (isset($editid) && $editid != 0) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkTypeMaster'))
                        ->where(array("WorkTypeId" => $editid));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkTypeAnalysis'))
                        ->join(array('b' => 'Proj_Resource'), 'b.ResourceId=a.ResourceId', array('*'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'c.UnitId=b.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array("a.WorkTypeId" => $editid));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->worktypeanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkTypeWorkChecklistTrans'))
                        ->where(array("a.WorkTypeId" => $editid));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedworkchks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkTypeSafetyChecklistTrans'))
                        ->where(array("a.WorkTypeId" => $editid));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedsafetychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();$select = $sql->select();

                    $select->from(array('a' => 'Proj_WorkTypeQualityChecklistTrans'))
                        ->where(array("a.WorkTypeId" => $editid));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedqualitychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
                }
//            $select = $sql->select();
//            $select->from(array('a' => 'Proj_Resource'))
//                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName', 'UnitId'), $select:: JOIN_LEFT)
//                ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"), 'Rate', 'TypeId', 'ResourceName'), array('UnitName', 'UnitId'))
//                ->where(array("DeleteFlag" => '0'));

                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns(array('CheckListId', 'CheckListName'))
                    ->where(array("TypeId=6", "DeleteFlag = 0"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->WorkCheckList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns(array('CheckListId', 'CheckListName'))
                    ->where(array("TypeId=7", "DeleteFlag = 0"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->SafetyCheckList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns(array('CheckListId', 'CheckListName'))
                    ->where(array("TypeId=8", "DeleteFlag = 0"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->QualityCheckList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array(), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.WorkUnitId=c.UnitId', array(), $select:: JOIN_LEFT)
                    ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"),
                        'Rate' => new Expression("Case When a.TypeId<>3 then Rate Else WorkRate End"),
                        'UnitName' => new Expression("Case When a.TypeId<>3 then b.UnitName else C.UnitName end"),
                        'UnitId' => new Expression("Case When a.TypeId<>3 then a.UnitId else a.WorkUnitId end"),
                        'TypeId', 'ResourceName'))
                    ->where(array("DeleteFlag" => '0'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array(), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array(), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array(), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array(), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId','TypeId','UnitId'=>new Expression("Case When a.TypeId=3 then a.WorkUnitId else a.UnitId end"),'Code','ResourceName','UnitName'=>new Expression("Case When a.TypeId=3 then e.UnitName else d.UnitName end"),'TypeName'=>new Expression('b.TypeName'),'ResourceGroup'=>new Expression('c.ResourceGroupName'),'Select'=>new Expression("'0'")))
                    ->where(array("a.DeleteFlag" => '0'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->respicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
                    ->where(array("a.TypeId <> 4", "a.LastLevel" => 1, "DeleteFlag" => '0'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_UOM')
                    ->columns(array('data' => 'UnitId', 'value' => 'UnitName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_UOM')
                    ->columns(array('data' => 'UnitId', 'value' => 'UnitName'))
                    ->where(array('WorkUnit'=>1));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->wunit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            }

            $codegenType = 0;
            $select = $sql->select();
            $select->from('Proj_ResourceCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
            $this->_view->codegenType = $codegenType;


            $this->_view->genType = $aVNo["genType"];
            $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
            $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;
            if (!isset($iRFCId) || $iRFCId == 0) {
                if ($aVNo["genType"] == false) $this->_view->svNo = "";
                else $this->_view->svNo = $aVNo["voucherNo"];
            }
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
            return $this->_view;
        }
    }

    public function rfcworkgroupAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Work Group");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if($this->getRequest()->isXmlHttpRequest())	{
            if ($request->isPost()) {
                $postType = $this->bsf->isNullCheck($this->params()->fromPost('postType'), 'string');
                switch($postType) {
                    case 'chklist':
                        $name = $this->bsf->isNullCheck($this->params()->fromPost('name'), 'string');
                        $type = $this->bsf->isNullCheck($this->params()->fromPost('type'), 'number');
                        $select = $sql->select();
                        $select->from('Proj_CheckListMaster')
                            ->columns( array( 'CheckListId'))
                            ->where("CheckListName='$name' AND TypeId='$type' AND DeleteFlag=0");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        if (sizeof($results) !=0 )
                            return $this->getResponse()->setStatusCode(202)->setContent('Checklist already exists.');
                        else {
                            $connection = $dbAdapter->getDriver()->getConnection();
                            $connection->beginTransaction();

                            // create new checklist
                            $insert = $sql->insert();
                            $insert->into('Proj_CheckListMaster')
                                ->Values(array('CheckListName' => $name, 'TypeId' => $type));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $id = $dbAdapter->getDriver()->getLastGeneratedValue();

                            $connection->commit();

                            $select = $sql->select();
                            $select->from(array('a' => 'Proj_CheckListMaster'))
                                ->columns(array('CheckListName', 'CheckListId'))
                                ->where("a.CheckListId='$id'");
                            $statement = $sql->getSqlStringForSqlObject($select);
                            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                            return $this->getResponse()
                                ->setStatusCode(200)
                                ->setContent(json_encode($results));
                        }
                        break;
                    case 'worktype-chklist':
                        $WorkTypeId = $this->bsf->isNullCheck($this->params()->fromPost('WorkTypeId'), 'number');

                        $select = $sql->select();
                        $select->from(array('a' => 'Proj_WorkTypeWorkChecklistTrans'))
                            ->join(array('b' => 'Proj_CheckListMaster'), 'a.CheckListId=b.CheckListId', array('CheckListName', 'CheckListId'), $select::JOIN_LEFT)
                            ->columns(array('Priority','WhenType','WhenPeriod','WhenPeriodType','FrequencyPeriod','FrequencyPeriodType'))
                            ->where("a.WorkTypeId='$WorkTypeId'");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $workChks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        $select = $sql->select();
                        $select->from(array('a' => 'Proj_WorkTypeSafetyChecklistTrans'))
                            ->join(array('b' => 'Proj_CheckListMaster'), 'a.CheckListId=b.CheckListId', array('CheckListName', 'CheckListId'), $select::JOIN_LEFT)
                            ->columns(array('Priority','WhenType','WhenPeriod','WhenPeriodType','FrequencyPeriod','FrequencyPeriodType'))
                            ->where("a.WorkTypeId='$WorkTypeId'");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $safetyChks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        $select = $sql->select();
                        $select->from(array('a' => 'Proj_WorkTypeQualityChecklistTrans'))
                            ->join(array('b' => 'Proj_CheckListMaster'), 'a.CheckListId=b.CheckListId', array('CheckListName', 'CheckListId'), $select::JOIN_LEFT)
                            ->columns(array('Priority','WhenType','WhenPeriod','WhenPeriodType','FrequencyPeriod','FrequencyPeriodType'))
                            ->where("a.WorkTypeId='$WorkTypeId'");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $qualityChks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        if(sizeof($workChks) || sizeof($safetyChks)  || sizeof($qualityChks) ) {
                            return $this->getResponse()
                                ->setStatusCode(200)
                                ->setContent(json_encode(array('workchks' => $workChks,'safetychks' => $safetyChks,
                                    'qualitychks' => $qualityChks)));
                        } else {
                            return $this->getResponse()
                                ->setStatusCode(201)
                                ->setContent('No data.');
                        }
                        break;
                    default:
                        return $this->getResponse()
                            ->setStatusCode(400)
                            ->setContent('Bad Request.');
                        break;
                }
            }
        } else {
            if ($request->isPost()) {
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                $postData = $request->getPost();
                $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');
                try {
                    if ($iRFCId != 0) {
                        $identity = $iRFCId;

                        $rfctype = '';
                        $select = $sql->select();
                        $select->from('Proj_RFCRegister')
                            ->columns(array('RFCType'))
                            ->where(array("RFCRegisterId" => $iRFCId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if (!empty($rfcreg)) $rfctype = $this->bsf->isNullCheck($rfcreg['RFCType'], 'string');
                        $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');

                        $update = $sql->update();
                        $update->table('Proj_RFCRegister');
                        $update->set(array(
                            'RefNo' => $sRefNo,
                            'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                            'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                        ));
                        $update->where(array('RFCRegisterId' => $identity));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Proj_RFCWorkGroupTrans')
                            ->where(array("RFCRegisterId" => $identity));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $subQuery = $sql->select();
                        $subQuery->from("Proj_RFCWorkGroupTrans")
                            ->columns(array("RFCTransId"));
                        $subQuery->where(array('RFCRegisterId' => $identity));

                        $delete = $sql->delete();
                        $delete->from('Proj_RFCWorkGroupAnalysis')
                            ->where->expression('RFCTransId IN ?', array($subQuery));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Proj_RFCResourceTrans')
                            ->where(array("RFCRegisterId" => $identity));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                        for ($i = 1; $i <= $iRowId; $i++) {
                            $bConcrete = isset($postData['concrete_' . $i]) ? 1 : 0;
                            $bCement = isset($postData['cement_' . $i]) ? 1 : 0;
                            $bSand = isset($postData['sand_' . $i]) ? 1 : 0;
                            $bMetal = isset($postData['metal_' . $i]) ? 1 : 0;
                            $bThick = isset($postData['thick_' . $i]) ? 1 : 0;
                            $bWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                            $bRworkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                            $bCementRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number');
                            $bSandRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number');
                            $bMetalRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number');
                            $bThickQty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number');
                            $sSlNo = $this->bsf->isNullCheck($postData['slno_' . $i], 'string');
                            if ($bWorkingQty == 0) $bWorkingQty = 1;
                            if ($bRworkingQty == 0) $bRworkingQty = 1;
                            $bAutoRateAnalysis = isset($postData['wrateanal_' . $i]) ? 1 : 0;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCWorkGroupTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'SerialNo' => $sSlNo, 'WorkTypeId' => $this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number'),
                                'WorkGroupName' => $this->bsf->isNullCheck($postData['workgroupname_' . $i], 'string'), 'WorkGroupId' => $this->bsf->isNullCheck($postData['workgroupid_' . $i], 'number'),
                                'ConcreteMix' => $bConcrete, 'Cement' => $bCement, 'Sand' => $bSand, 'Metal' => $bMetal, 'Thickness' => $bThick,
                                'WorkingQty' => $bWorkingQty, 'RWorkingQty' => $bRworkingQty, 'CementRatio' => $bCementRatio,
                                'SandRatio' => $bSandRatio, 'MetalRatio' => $bMetalRatio, 'ThickQty' => $bThickQty, 'AutoRateAnalysis' => $bAutoRateAnalysis));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();
                            $iTRowId = $this->bsf->isNullCheck($postData['wrowid_' . $i], 'number');
                            for ($j = 1; $j <= $iTRowId; $j++) {
                                $resourceId = $this->bsf->isNullCheck($postData['type_' . $i . '_resid_' . $j], 'string');
                                $referenceId = filter_var($postData['type_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                $qty = $this->bsf->isNullCheck($postData['type_' . $i . '_qty_' . $j], 'number');
                                $includeFlag = isset($postData['type_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $iSortId = $this->bsf->isNullCheck($postData['type_' . $i . '_rowrefid_' . $j], 'number');
                                $sRowType = $this->bsf->isNullCheck($postData['type_' . $i . '_rowtype_' . $j], 'string');
                                $sdesc = "";
                                $iNew = 0;
                                $sResName = "";
                                if (substr($resourceId, 0, 2) == '0.') {
                                    $resourceId = 0;
                                    $iNew = 1;
                                    $sResName = $this->bsf->isNullCheck($postData['type_' . $i . '_newresname_' . $j], 'string');
                                }
                                if ($sRowType == "H") {
                                    $resourceId = 0;
                                    $sdesc = $this->bsf->isNullCheck($postData['type_' . $i . '_resdes_' . $j], 'string');
                                } else $sRowType = "R";

                                if ($sRowType == "R") {
                                    if ($resourceId == 0) {
                                        if ($sResName == "") continue;
                                    }
                                } else {
                                    if ($sdesc == "") continue;
                                }
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkGroupAnalysis');
                                $insert->Values(array('TransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty,
                                    'CFormula' => $this->bsf->isNullCheck($postData['type_' . $i . '_formula_' . $j], 'string'), 'Type' => 'S', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                            $iTRowId = $postData['wrowRid_' . $i];
                            for ($j = 1; $j <= $iTRowId; $j++) {
                                $resourceId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resid_' . $j], 'string');
                                $referenceId = filter_var($postData['typeR_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                $qty = $this->bsf->isNullCheck($postData['typeR_' . $i . '_qty_' . $j], 'number');
                                $includeFlag = isset($postData['typeR_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $iSortId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowrefid_' . $j], 'number');
                                $sRowType = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowtype_' . $j], 'string');
                                $sdesc = "";
                                $iNew = 0;
                                $sResName = "";

                                if (substr($resourceId, 0, 2) == '0.') {
                                    $resourceId = 0;
                                    $iNew = 1;
                                    $sResName = $this->bsf->isNullCheck($postData['typeR_' . $i . '_newresname_' . $j], 'string');
                                }
                                if ($sRowType == "H") {
                                    $resourceId = 0;
                                    $sdesc = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resdes_' . $j], 'string');
                                } else $sRowType = "R";

                                if ($sRowType == "R") {
                                    if ($resourceId == 0) {
                                        if ($sResName == "") continue;
                                    }
                                } else {
                                    if ($sdesc == "") continue;
                                }

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkGroupAnalysis');
                                $insert->Values(array('TransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty,
                                    'CFormula' => $this->bsf->isNullCheck($postData['typeR_' . $i . '_formula_' . $j], 'string'), 'Type' => 'R', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // work checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkGroupWorkChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $workChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['wtype_'.$i.'_workchklist'], ','), 'string'));
                            foreach($workChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workchklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workcritical_'.$rowId], 'number');

                                $sPeriority = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workpriority_'.$rowId], 'string');
                                $WhenType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkGroupWorkChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'RFCTransId' => $itransid,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // safety checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkGroupSafetyChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $safetyChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['stype_'.$i.'_safetychklist'], ','), 'string'));
                            foreach($safetyChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetychklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetycritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetypriority_'.$rowId], 'string');
                                $WhenType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkGroupSafetyChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'RFCTransId' => $itransid,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            // quality checklists
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCWorkGroupQualityChecklistTrans')
                                ->where("RFCRegisterId=$identity");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            $qualityChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['qtype_'.$i.'_qualitychklist'], ','), 'string'));
                            foreach($qualityChkLists as $index => $rowId) {
                                $chkId = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitychklistid_'.$rowId], 'number');
//                                $IsCritical = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetycritical_'.$rowId], 'number');
                                $sPeriority = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitypriority_'.$rowId], 'string');
                                $WhenType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhentype_'.$rowId], 'string');
                                $WhenPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiod_'.$rowId], 'number');
                                $WhenPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiodtype_'.$rowId], 'string');
                                $FreqPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiod_'.$rowId], 'number');
                                $FreqPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiodtype_'.$rowId], 'string');

                                if($chkId == 0)
                                    continue;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkGroupQualityChecklistTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'RFCTransId' => $itransid,
                                    'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                    'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                        for ($j = 1; $j <= $iresrowid; $j++) {
                            $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                            $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                            $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                            $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                            $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                            $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                            $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                            $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                            $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                            $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                            if ($sresName == "" || $iresgroupid == 0) continue;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCResourceTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'Code' => $srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                                'UnitId' => $iunitid, 'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate, 'Rate' => $drate, 'WorkRate' => $dwrate, 'LeadDays' => $ilead, 'MaterialType' => $smattype));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            if ($iresgroupid != 0) {
                                $update = $sql->update();
                                $update->table('Proj_ResourceGroup');
                                $update->set(array(
                                    'GroupUsed' => 1,
                                ));
                                $update->where(array('ResourceGroupId' => $iresgroupid));
                                $statement = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                        }

                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'), 'Request-For-Creation-Edit', 'E', $rfctype, $identity, 0, 0, 'Project', $sRefNo, $userId, 0, 0);
                        $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                    } else {
                        $mode = $postData['rfcmode'];
                        if ($mode == 'edit') {
                            $rfctype = 'WorkGroup-Edit';
                        } else {
                            $rfctype = 'WorkGroup-Add';
                        }

                        $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                        if ($aVNo["genType"] == true)
                            $sVno = $aVNo["voucherNo"];
                        else
                            $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype,
                            'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Work Group'));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                        for ($i = 1; $i <= $iRowId; $i++) {
                            if ($this->bsf->isNullCheck($postData['workgroupname_' . $i], 'string') != "") {
                                $bConcrete = isset($postData['concrete_' . $i]) ? 1 : 0;
                                $bCement = isset($postData['cement_' . $i]) ? 1 : 0;
                                $bSand = isset($postData['sand_' . $i]) ? 1 : 0;
                                $bMetal = isset($postData['metal_' . $i]) ? 1 : 0;
                                $bThick = isset($postData['thick_' . $i]) ? 1 : 0;
                                $bWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                                $bRworkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                                $bCementRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number');
                                $bSandRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number');
                                $bMetalRatio = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number');
                                $bThickQty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number');
                                $sSlNo = $this->bsf->isNullCheck($postData['slno_' . $i], 'string');
                                if ($bWorkingQty == 0) $bWorkingQty = 1;
                                if ($bRworkingQty == 0) $bRworkingQty = 1;

                                $bAutoRateAnalysis = isset($postData['wrateanal_' . $i]) ? 1 : 0;
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCWorkGroupTrans');
                                $insert->Values(array('RFCRegisterId' => $identity, 'SerialNo' => $sSlNo, 'WorkTypeId' => $this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number'),
                                    'WorkGroupName' => $this->bsf->isNullCheck($postData['workgroupname_' . $i], 'string'), 'WorkGroupId' => $this->bsf->isNullCheck($postData['workgroupid_' . $i], 'number'),
                                    'ConcreteMix' => $bConcrete, 'Cement' => $bCement, 'Sand' => $bSand, 'Metal' => $bMetal, 'Thickness' => $bThick,
                                    'WorkingQty' => $bWorkingQty, 'RWorkingQty' => $bRworkingQty, 'CementRatio' => $bCementRatio,
                                    'SandRatio' => $bSandRatio, 'MetalRatio' => $bMetalRatio, 'ThickQty' => $bThickQty,
                                    'AutoRateAnalysis' => $bAutoRateAnalysis));

                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                                $iTRowId = intval($this->bsf->isNullCheck($postData['wrowid_' . $i], 'number'));
                                for ($j = 1; $j <= $iTRowId; $j++) {
                                    $resourceId = $this->bsf->isNullCheck($postData['type_' . $i . '_resid_' . $j], 'number');
                                    $referenceId = filter_var($postData['type_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                    $qty = $this->bsf->isNullCheck($postData['type_' . $i . '_qty_' . $j], 'number');
                                    $includeFlag = isset($postData['type_' . $i . '_inc_' . $j]) ? 1 : 0;
                                    $iSortId = $this->bsf->isNullCheck($postData['type_' . $i . '_rowrefid_' . $j], 'number');
                                    $sRowType = $this->bsf->isNullCheck($postData['type_' . $i . '_rowtype_' . $j], 'string');
                                    $sdesc = "";
                                    $iNew = 0;
                                    $sResName = "";
                                    if (substr($resourceId, 0, 2) == '0.') {
                                        $resourceId = 0;
                                        $iNew = 1;
                                        $sResName = $this->bsf->isNullCheck($postData['type_' . $i . '_newresname_' . $j], 'string');
                                    }
                                    if ($sRowType == "H") {
                                        $resourceId = 0;
                                        $sdesc = $this->bsf->isNullCheck($postData['type_' . $i . '_resdes_' . $j], 'string');
                                    } else $sRowType = "R";

                                    if ($sRowType == "R") {
                                        if ($resourceId == 0) {
                                            if ($sResName == "") continue;
                                        }
                                    } else {
                                        if ($sdesc == "") continue;
                                    }

                                    $insert = $sql->insert();
                                    $insert->into('Proj_RFCWorkGroupAnalysis');
                                    $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty,
                                        'CFormula' => $this->bsf->isNullCheck($postData['type_' . $i . '_formula_' . $j], 'string'), 'Type' => 'S', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }

                                $iTRowId = $this->bsf->isNullCheck($postData['wrowRid_' . $i], 'number');
                                for ($j = 1; $j <= $iTRowId; $j++) {
                                    $resourceId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resid_' . $j], 'string');
                                    $referenceId = filter_var($postData['typeR_' . $i . '_ref_' . $j], FILTER_SANITIZE_NUMBER_INT);
                                    $qty = $this->bsf->isNullCheck($postData['typeR_' . $i . '_qty_' . $j], 'number');
                                    $includeFlag = isset($postData['typeR_' . $i . '_inc_' . $j]) ? 1 : 0;
                                    $iSortId = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowrefid_' . $j], 'number');
                                    $sRowType = $this->bsf->isNullCheck($postData['typeR_' . $i . '_rowtype_' . $j], 'string');
                                    $sdesc = "";
                                    $iNew = 0;
                                    $sResName = "";

                                    if (substr($resourceId, 0, 2) == '0.') {
                                        $resourceId = 0;
                                        $iNew = 1;
                                        $sResName = $this->bsf->isNullCheck($postData['typeR_' . $i . '_newresname_' . $j], 'string');
                                    }
                                    if ($sRowType == "H") {
                                        $resourceId = 0;
                                        $sdesc = $this->bsf->isNullCheck($postData['typeR_' . $i . '_resdes_' . $j], 'string');
                                    } else $sRowType = "R";

                                    if ($sRowType == "R") {
                                        if ($resourceId == 0) {
                                            if ($sResName == "") continue;
                                        }
                                    } else {
                                        if ($sdesc == "") continue;
                                    }

                                    $insert = $sql->insert();
                                    $insert->into('Proj_RFCWorkGroupAnalysis');
                                    $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $includeFlag, 'ReferenceId' => $referenceId, 'ResourceId' => $resourceId, 'Qty' => $qty,
                                        'CFormula' => $this->bsf->isNullCheck($postData['typeR_' . $i . '_formula_' . $j], 'string'), 'Type' => 'R', 'SortId' => $iSortId, 'TransType' => $sRowType, 'Description' => $sdesc, 'NewId' => $iNew, 'ResourceName' => $sResName));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }


                                // work checklists
                                $delete = $sql->delete();
                                $delete->from('Proj_RFCWorkGroupWorkChecklistTrans')
                                    ->where("RFCRegisterId=$identity");
                                $statement = $sql->getSqlStringForSqlObject($delete);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


                                $workChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['wtype_'.$i.'_workchklist'], ','), 'string'));
                                foreach($workChkLists as $index => $rowId) {
                                    $chkId = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workchklistid_'.$rowId], 'number');
                                    $sPeriority = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workpriority_'.$rowId], 'string');
//                                    $IsCritical = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workcritical_'.$rowId], 'number');
                                    $WhenType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhentype_'.$rowId], 'string');
                                    $WhenPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiod_'.$rowId], 'number');
                                    $WhenPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workwhenperiodtype_'.$rowId], 'string');
                                    $FreqPeriod = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiod_'.$rowId], 'number');
                                    $FreqPeriodType = $this->bsf->isNullCheck($postData['wtype_'.$i.'_workfreqperiodtype_'.$rowId], 'string');

                                    if($chkId == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Proj_RFCWorkGroupWorkChecklistTrans');
                                    $insert->Values(array('RFCRegisterId' => $identity, 'RFCTransId' => $itransid,
                                        'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                        'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }

                                // safety checklists
                                $delete = $sql->delete();
                                $delete->from('Proj_RFCWorkGroupSafetyChecklistTrans')
                                    ->where("RFCRegisterId=$identity");
                                $statement = $sql->getSqlStringForSqlObject($delete);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                $safetyChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['stype_'.$i.'_safetychklist'], ','), 'string'));
                                foreach($safetyChkLists as $index => $rowId) {
                                    $chkId = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetychklistid_'.$rowId], 'number');
//                                    $IsCritical = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetycritical_'.$rowId], 'number');
                                    $sPeriority = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetypriority_'.$rowId], 'string');
                                    $WhenType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhentype_'.$rowId], 'string');
                                    $WhenPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiod_'.$rowId], 'number');
                                    $WhenPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetywhenperiodtype_'.$rowId], 'string');
                                    $FreqPeriod = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiod_'.$rowId], 'number');
                                    $FreqPeriodType = $this->bsf->isNullCheck($postData['stype_'.$i.'_safetyfreqperiodtype_'.$rowId], 'string');

                                    if($chkId == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Proj_RFCWorkGroupSafetyChecklistTrans');
                                    $insert->Values(array('RFCRegisterId' => $identity, 'RFCTransId' => $itransid,
                                        'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                        'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }

                                // quality checklists
                                $delete = $sql->delete();
                                $delete->from('Proj_RFCWorkGroupQualityChecklistTrans')
                                    ->where("RFCRegisterId=$identity");
                                $statement = $sql->getSqlStringForSqlObject($delete);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                $qualityChkLists = explode(',', $this->bsf->isNullCheck(trim($postData['qtype_'.$i.'_qualitychklist'], ','), 'string'));
                                foreach($qualityChkLists as $index => $rowId) {
                                    $chkId = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitychklistid_'.$rowId], 'number');
//                                    $IsCritical = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitycritical_'.$rowId], 'number');
                                    $sPeriority = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitypriority_'.$rowId], 'string');
                                    $WhenType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhentype_'.$rowId], 'string');
                                    $WhenPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiod_'.$rowId], 'number');
                                    $WhenPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualitywhenperiodtype_'.$rowId], 'string');
                                    $FreqPeriod = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiod_'.$rowId], 'number');
                                    $FreqPeriodType = $this->bsf->isNullCheck($postData['qtype_'.$i.'_qualityfreqperiodtype_'.$rowId], 'string');

                                    if($chkId == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Proj_RFCWorkGroupQualityChecklistTrans');
                                    $insert->Values(array('RFCRegisterId' => $identity, 'RFCTransId' => $itransid,
                                        'CheckListId' => $chkId, 'Priority' => $sPeriority, 'WhenType' => $WhenType, 'WhenPeriod' => $WhenPeriod,
                                        'WhenPeriodType' => $WhenPeriodType, 'FrequencyPeriod' => $FreqPeriod, 'FrequencyPeriodType' => $FreqPeriodType));
                                    $statement = $sql->getSqlStringForSqlObject($insert);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }
                            }
                        }

                        $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'], 'number');
                        for ($j = 1; $j <= $iresrowid; $j++) {
                            $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                            $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                            $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                            $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                            $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                            $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                            $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                            $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                            $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                            $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                            if ($sresName == "" || $iresgroupid == 0) continue;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCResourceTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'Code' => $srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                                'UnitId' => $iunitid, 'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate, 'Rate' => $drate, 'WorkRate' => $dwrate, 'LeadDays' => $ilead, 'MaterialType' => $smattype));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            if ($iresgroupid != 0) {
                                $update = $sql->update();
                                $update->table('Proj_ResourceGroup');
                                $update->set(array(
                                    'GroupUsed' => 1,
                                ));
                                $update->where(array('ResourceGroupId' => $iresgroupid));
                                $statement = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                        }

                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'), 'Request-For-Creation-Add', 'N', $rfctype, $identity, 0, 0, 'Project', $sVno, $userId, 0, 0);
                        if ($mode == 'edit') {
                            $this->redirect()->toRoute('project/default', array('controller' => 'main', 'action' => 'workgroupmaster'));
                        } else {
                            $this->redirect()->toRoute('project/rfcworkgroup', array('controller' => 'rfc', 'action' => 'rfcworkgroup', 'rfcid' => 0));
                        }
                    }
                } catch (PDOException $e) {
                    $connection->rollback();
                }
            } else {
                $iRFCId = $this->params()->fromRoute('rfcId');
                $smode = $this->params()->fromRoute('mode');
                $editid = $this->params()->fromRoute('id');
                $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
                if (isset($iRFCId) && $iRFCId != 0) {
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RefNo', 'RefDate', 'Narration', 'Approve'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkGroupTrans'))
                        ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType', 'WorkTypeId'), $select:: JOIN_LEFT)
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkGroupAnalysis'))
                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCTransId=b.RFCTransId', array('*'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_Resource'), 'c.ResourceId=a.ResourceId', array('*'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_UOM'), 'd.UnitId=c.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array("b.RFCRegisterId" => $iRFCId));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->worktypeanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkGroupWorkChecklistTrans'))
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedworkchks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkGroupSafetyChecklistTrans'))
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedsafetychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();$select = $sql->select();

                    $select->from(array('a' => 'Proj_RFCWorkGroupQualityChecklistTrans'))
                        ->where(array("a.RFCRegisterId" => $iRFCId));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedqualitychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
                } else if (isset($editid) && $editid != 0) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupMaster'))
                        ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType', 'WorkTypeId'), $select:: JOIN_LEFT)
                        ->where(array("WorkGroupId" => $editid));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupAnalysis'))
                        ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('*'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_Resource'), 'c.ResourceId=a.ResourceId', array('*'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_UOM'), 'd.UnitId=c.UnitId', array('*'), $select::JOIN_LEFT)
                        ->where(array("a.WorkGroupId" => $editid));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->worktypeanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupWorkChecklistTrans'))
                        ->where(array("a.WorkGroupId" => $editid));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedworkchks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupSafetyChecklistTrans'))
                        ->where(array("a.WorkGroupId" => $editid));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedsafetychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();$select = $sql->select();

                    $select->from(array('a' => 'Proj_WorkGroupQualityChecklistTrans'))
                        ->where(array("a.WorkGroupId" => $editid));
                    $select->order('a.TransId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->selectedqualitychks = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
                }

                $select = $sql->select();
                $select->from('Proj_WorkTypeMaster')
                    ->columns(array('data' => 'WorkTypeId', 'value' => 'WorkType'));

                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->worktype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array(), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.WorkUnitId=c.UnitId', array(), $select:: JOIN_LEFT)
                    ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"),
                        'Rate' => new Expression("Case When a.TypeId<>3 then Rate Else WorkRate End"),
                        'UnitName' => new Expression("Case When a.TypeId<>3 then b.UnitName else C.UnitName end"),
                        'UnitId' => new Expression("Case When a.TypeId<>3 then a.UnitId else a.WorkUnitId end"),
                        'TypeId', 'ResourceName'))
                    ->where(array("DeleteFlag" => '0'));

//            $select = $sql->select();
//            $select->from(array('a' => 'Proj_Resource'))
//                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName', 'UnitId'), $select:: JOIN_LEFT)
//                ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"), 'Rate', 'TypeId', 'ResourceName'), array('UnitName', 'UnitId'))
//                ->where(array("DeleteFlag" => '0'));

                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array(), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array(), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array(), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array(), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId','TypeId','UnitId'=>new Expression("Case When a.TypeId=3 then a.WorkUnitId else a.UnitId end"),'Code','ResourceName','UnitName'=>new Expression("Case When a.TypeId=3 then e.UnitName else d.UnitName end"),'TypeName'=>new Expression('b.TypeName'),'ResourceGroup'=>new Expression('c.ResourceGroupName'),'Select'=>new Expression("'0'")))
                    ->where(array("a.DeleteFlag" => '0'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->respicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
                    ->where(array("a.TypeId <> 4", "a.LastLevel" => 1, "DeleteFlag" => '0'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_UOM')
                    ->columns(array('data' => 'UnitId', 'value' => 'UnitName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_UOM')
                    ->columns(array('data' => 'UnitId', 'value' => 'UnitName'))
                    ->where(array('WorkUnit'=>1));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->wunit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns(array('CheckListId', 'CheckListName'))
                    ->where(array("TypeId=6", "DeleteFlag = 0"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->WorkCheckList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns(array('CheckListId', 'CheckListName'))
                    ->where(array("TypeId=7", "DeleteFlag = 0"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->SafetyCheckList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_CheckListMaster')
                    ->columns(array('CheckListId', 'CheckListName'))
                    ->where(array("TypeId=8", "DeleteFlag = 0"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->QualityCheckList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            }
            $smode = $this->params()->fromRoute('mode');

            $codegenType = 0;
            $select = $sql->select();
            $select->from('Proj_WorkGroupCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
            $this->_view->codegenType = $codegenType;

            $codegenType = 0;
            $select = $sql->select();
            $select->from('Proj_ResourceCodeSetup')
                ->columns(array('GenType'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
            $this->_view->rescodegenType = $codegenType;

            $this->_view->genType = $aVNo["genType"];
            $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
            $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;
            $this->_view->mode = $smode;

            if (!isset($iRFCId) || $iRFCId == 0) {
                if ($aVNo["genType"] == false) $this->_view->svNo = "";
                else $this->_view->svNo = $aVNo["voucherNo"];
            }
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
            return $this->_view;
        }
    }

    public function rfcresourcegroupAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Resource Group");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);
        $request = $this->getRequest();
        $smode="";
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');
            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');

                    $sRefNo =$this->bsf->isNullCheck($postData['refno'], 'string');
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCResourceGroupTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    //sleep(60);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $typeId = $this->bsf->isNullCheck($postData['typeid_' . $i], 'number');
                        $resGroupName = $this->bsf->isNullCheck($postData['groupname_' . $i], 'string');
                        if ($typeId == 0 || $resGroupName == "") continue;
                        $parentname = $this->bsf->isNullCheck($postData['parentname_' . $i], 'string');
                        $iParentId = 0;
                        $iNew = 0;
                        if ($this->bsf->isNullCheck($postData['parentid_' . $i], 'string') != 'New') {
                            $iParentId = $this->bsf->isNullCheck($postData['parentid_' . $i], 'number');
                        } else $iNew = 1;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ResourceGroupId' => $this->bsf->isNullCheck($postData['groupid_' . $i], 'number'), 'TypeId' => $typeId
                        , 'ParentId' => $iParentId,'ParentName' =>$parentname, 'NewGroup' => $iNew, 'Code' => $this->bsf->isNullCheck($postData['code_' . $i], 'string'), 'ResourceGroupName' => $resGroupName));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        if ($iParentId !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'LastLevel' => 0,
                            ));
                            $update->where(array('ResourceGroupId' => $iParentId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister', 'rfcid' => $iRFCId));

                } else {
                    $mode = $postData['rfcmode'];

                    if ($mode == 'edit')
                        $rfctype = 'Resource-Group-Edit';
                    else
                        $rfctype = 'Resource-Group-Add';

                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Resource Group',
                        'RevRFCId' => $this->bsf->isNullCheck($postData['rfcregisterid'], 'number')));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $typeId = $this->bsf->isNullCheck($postData['typeid_' . $i], 'number');
                        $resGroupName = $this->bsf->isNullCheck($postData['groupname_' . $i], 'string');
                        $parentname = $this->bsf->isNullCheck($postData['parentname_' . $i], 'string');

                        if ($typeId == 0 || $resGroupName == "") continue;
                        $iParentId = 0;
                        $iNew = 0;
                        if ($this->bsf->isNullCheck($postData['parentid_' . $i], 'string') != 'New') {
                            $iParentId = $this->bsf->isNullCheck($postData['parentid_' . $i], 'number');
                        } else $iNew = 1;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ResourceGroupId' => $this->bsf->isNullCheck($postData['groupid_' . $i], 'number'), 'TypeId' => $typeId
                        , 'ParentId' => $iParentId,'ParentName' => $parentname ,'NewGroup' => $iNew, 'Code' => $this->bsf->isNullCheck($postData['code_' . $i], 'string'), 'ResourceGroupName' => $resGroupName));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        if ($iParentId !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'LastLevel' => 0,
                            ));
                            $update->where(array('ResourceGroupId' => $iParentId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    //$this->_approveFromRFC($identity);

                    if ($mode == 'edit') {
                        $this->redirect()->toRoute('project/resgroupmaster', array('controller' => 'main', 'action' => 'resgroupmaster'));
                    } else {
                        $this->redirect()->toRoute('project/rfcresourcegroup', array('controller' => 'rfc', 'action' => 'rfcresourcegroup', 'rfcid' => 0));
                    }
                }
            } catch (PDOException $e) {
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {

            $iRFCId = $this->params()->fromRoute('rfcId');
            $smode = $this->params()->fromRoute('mode');
            $editid = $this->params()->fromRoute('id');

            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
            if (isset($iRFCId) && $iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration','Approve'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCResourceGroupTrans'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'a.ParentId=c.ResourceGroupId', array(), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId', 'TypeId', 'ParentId','ParentName', 'Code', 'ResourceGroupName'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            } else if (isset($editid)) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'a.ParentId=c.ResourceGroupId', array('ParentName' => 'ResourceGroupName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId', 'TypeId', 'ParentId','Code', 'ResourceGroupName','RFCRegisterId'))
                    ->where(array("a.ResourceGroupId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            }
            $select = $sql->select();
            $select->from('Proj_ResourceType')
                ->columns(array('data' => 'TypeId', 'value' => 'TypeName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->restype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ResourceGroup'))
                ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName', 'TypeId'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName'))
                ->where(array("a.GroupUsed" => 0,"DeleteFlag"=>0));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }

        $codegenType = 0;
        $select = $sql->select();
        $select->from('Proj_RGCodeSetup')
            ->columns(array('GenType'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
        $this->_view->codegenType = $codegenType;

        $this->_view->genType = $aVNo["genType"];
        $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
        $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;
        $this->_view->mode = $smode;

        if (!isset($iRFCId) || $iRFCId == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function rfcresgroupdeleteAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Resource Group Delete");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;

        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');

            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');

                    $sRefNo=$this->bsf->isNullCheck($postData['refno'], 'string');
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCResGroupDeleteTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResGroupDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ResourceGroupId' => $this->bsf->isNullCheck($postData['groupid_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E','Resource-Group-Delete',$iRFCId,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister', 'rfcid' => $iRFCId));

                } else {
                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $rfctype = 'Resource-Group-Delete';
                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Resource Group'));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResGroupDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ResourceGroupId' => $this->bsf->isNullCheck($postData['groupid_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/resgroupmaster', array('controller' => 'main', 'action' => 'resgroupmaster'));
                }
            } catch (PDOException $e) {
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $id = $this->params()->fromRoute('id');
            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            if (isset($iRFCId) && $iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCResGroupDeleteTrans'))
                    ->join(array('b' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=b.ResourceGroupId', array('Code', 'ResourceGroupName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceType'), 'b.TypeId=c.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId'), array('Code', 'ResourceGroupName'), array('TypeName'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            } else if (isset($id) && $id != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->where(array('ResourceGroupId' => $id));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->resource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            }
        }

        $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
        $this->_view->resourceid = (isset($id) && $id != 0) ? $id : 0;
        $this->_view->genType = $aVNo["genType"];

        if (!isset($iRFCId) || $iRFCId == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }


    public function checkWorkGroupUsedAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $id = $request->getPost('id');
                $ans = 'N';

                $select = $sql->select();
                $select->from('Proj_ProjectIOWMaster')
                    ->columns(array('WorkGroupId'))
                    ->where(array('WorkGroupId'=>$id,'DeleteFlag'=>0));

                $select1 = $sql->select();
                $select1->from('Proj_IOWMaster')
                    ->columns(array('WorkGroupId'))
                    ->where(array('WorkGroupId'=>$id,'DeleteFlag'=>0));
                $select->combine($select1, 'UNION ALL');
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (!empty($results)) $ans = 'Y';

                if ($ans=='N') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCWorkGroupDeleteTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('WorkGroupId'))
                        ->where("b.Approve<>'Y' and a.WorkGroupId=$id");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    if (!empty($results)) $ans = 'U';
                }

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkResourceGroupUsedAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $id = $request->getPost('id');
                $ans = 'N';

                $select1 = $sql->select();
                $select1->from('Proj_Resource')
                    ->columns(array('ResourceGroupId'))
                    ->where(array('ResourceGroupId'=>$id,'DeleteFlag'=>0));

                $select2 = $sql->select();
                $select2->from('Proj_ResourceGroup')
                    ->columns(array('ResourceGroupId'))
                    ->where(array('ParentId'=>$id,'DeleteFlag'=>0));
                $select2->combine($select1, 'UNION ALL');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCResourceTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                    ->columns(array('ResourceGroupId'))
                    ->where("b.Approve<>'Y' and a.ResourceGroupId=$id");
                $select->combine($select2, 'UNION ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (!empty($results)) $ans = 'Y';

                if ($ans=='N') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCResGroupDeleteTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('ResourceGroupId'))
                        ->where("b.Approve<>'Y' and a.ResourceGroupId=$id");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    if (!empty($results)) $ans = 'U';
                }

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkResourceUsedAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $id = $request->getPost('id');
                $ans = 'N';

                $select1 = $sql->select();
                $select1->from('Proj_ResourceActivityTrans')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));

                $select2 = $sql->select();
                $select2->from('Proj_ResourceSteelTrans')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select2->combine($select1, 'UNION ALL');

                $select3 = $sql->select();
                $select3->from('Proj_IOWRateAnalysis')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select3->combine($select2, 'UNION ALL');

                $select4 = $sql->select();
                $select4->from('Proj_WorkGroupAnalysis')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select4->combine($select3, 'UNION ALL');

                $select5 = $sql->select();
                $select5->from('Proj_WorkTypeAnalysis')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select5->combine($select4, 'UNION ALL');

                $select6 = $sql->select();
                $select6->from('Proj_RFCRateAnalysis')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select6->combine($select5, 'UNION ALL');

                $select7 = $sql->select();
                $select7->from('Proj_RFCWorkGroupAnalysis')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select7->combine($select6, 'UNION ALL');

                $select8 = $sql->select();
                $select8->from('Proj_RFCWorkTypeAnalysis')
                    ->columns(array('ResourceId'))
                    ->where(array('ResourceId'=>$id));
                $select8->combine($select7, 'UNION ALL');

                $statement = $sql->getSqlStringForSqlObject($select8);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (!empty($results)) $ans = 'Y';

                if ($ans=='N') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCResourceDeleteTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('ResourceId'))
                        ->where("b.Approve<>'Y' and a.ResourceId=$id");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    if (!empty($results)) $ans = 'U';
                }

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }


    public function checkIOWUsedAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $id = $request->getPost('id');
                $ans = 'N';

                $select1 = $sql->select();
                $select1->from('Proj_ProjectIOWMaster')
                    ->columns(array('IOWId'))
                    ->where(array('IOWId'=>$id,'DeleteFlag'=>0));

                $select2 = $sql->select();
                $select2->from('Proj_IOWMaster')
                    ->columns(array('IOWId'))
                    ->where(array('ParentId'=>$id,'DeleteFlag'=>0));
                $select2->combine($select1, 'UNION ALL');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                    ->columns(array('IOWId'))
                    ->where("b.Approve<>'Y' and a.IOWId=$id and b.RFCFrom='Project'");
                $select->combine($select2, 'UNION ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (!empty($results)) $ans = 'Y';

                if ($ans=='N') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCIOWDeleteTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('IOWId'))
                        ->where("b.Approve<>'Y' and a.IOWId=$id");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    if (!empty($results)) $ans = 'U';
                }

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkProjectIOWUsedAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $id = $request->getPost('id');
                $ans = 'N';

                $select1 = $sql->select();
                $select1->from('Proj_ProjectIOWPlan')
                    ->columns(array('ProjectIOWId'))
                    ->where(array('ProjectIOWId'=>$id));

//                $select2 = $sql->select();
//                $select2->from('Proj_IOWMaster')
//                    ->columns(array('IOWId'))
//                    ->where(array('ParentId'=>$id,'DeleteFlag'=>0));
//                $select2->combine($select1, 'UNION ALL');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                    ->columns(array('IOWId'))
                    ->where("b.Approve<>'Y' and a.ProjectIOWId=$id and b.RFCFrom='Project' and b.ProjectType='P'");
                $select->combine($select1, 'UNION ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (!empty($results)) $ans = 'Y';

                if ($ans=='N') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_RFCProjectIOWDeleteTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('ProjectIOWId'))
                        ->where("b.Approve<>'Y' and a.ProjectIOWId=$id");
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    if (!empty($results)) $ans = 'U';
                }

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkrfcdeleteAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $id = $request->getPost('id');
                $sql = new Sql($dbAdapter);
                $select = $sql->select();

                switch ($request->getPost('type')) {
                    case 'Resource':
                        $select->from('Proj_RFCResourceDeleteTrans')
                            ->where(array("ResourceId=$id"));
                        break;
                    case 'ResourceGroup':
                        $select->from('Proj_RFCResGroupDeleteTrans')
                            ->where(array("ResourceGroupId=$id"));
                        break;
                    case 'WorkGroup':
                        $select->from('Proj_RFCWorkGroupDeleteTrans')
                            ->where(array("WorkGroupId=$id"));
                        break;
                    case 'IOW':
                        $select->from('Proj_RFCIOWDeleteTrans')
                            ->where(array("IOWId=$id"));
                        break;
                }
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $response = $this->getResponse();
                if ($results == FALSE) {
                    $response->setContent('No Request Found');
                    return $response;
                }

                $response->setContent('Already found in delete request!');
                $response->setStatusCode('204');
                return $response;
            }
        }
    }

    public function rfcworkgroupdeleteAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Work Group Delete");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);
        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');
            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCWorkGroupDeleteTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');

                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'WorkGroupId' => $this->bsf->isNullCheck($postData['groupid_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister', 'rfcid' => $iRFCId));
                } else {
                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $rfctype = 'WorkGroup-Delete';
                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Work Group'));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $postData['rowid'];

                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'WorkGroupId' => $this->bsf->isNullCheck($postData['groupid_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/workgroupmaster', array('controller' => 'main', 'action' => 'workgroupmaster'));
                }
            } catch (PDOException $e) {
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $id = $this->params()->fromRoute('id');
            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            if (isset($iRFCId) && $iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCWorkGroupDeleteTrans'))
                    ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('SerialNo', 'WorkGroupName'), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId'), array('SerialNo', 'WorkGroupName'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);

                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            } else if (isset($id) && $id != 0) {
                $select = $sql->select();
                $select->from('Proj_WorkGroupMaster')
                    ->where(array('WorkGroupId' => $id));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->worktype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            }
        }
        $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
        $this->_view->worktypeid = (isset($id) && $id != 0) ? $id : 0;
        $this->_view->genType = $aVNo["genType"];
        if (!isset($iRFCId) || $iRFCId == 0) {
            if ($aVNo["genType"] == false) $this->_view->svNo = "";
            else $this->_view->svNo = $aVNo["voucherNo"];
        }
        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function getresourceunitAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $resId = $this->params()->fromRoute('resId');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array(), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.WorkUnitId=c.UnitId', array(), $select:: JOIN_LEFT)
                    ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"),
                        'Rate'=>new Expression("Case When a.TypeId<>3 then Rate Else WorkRate End"),
                        'UnitName'=> new Expression("Case When a.TypeId<>3 then b.UnitName else C.UnitName end"), 'TypeId'))
                    ->where(array("ResourceId=$resId"));

//                $select->from(array('a' => 'Proj_Resource'))
//                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
//                    ->columns(array('ResourceName', 'Code', 'Rate', 'TypeId'), array('UnitName'))
//                    ->where(array("ResourceId=$resId"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_Resource')
                    ->columns(array('AnalysisMQty', 'AnalysisAQty', 'RateType', 'LRate', 'MRate', 'ARate'))
                    ->where(array("ResourceId=$resId"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName'=> new Expression("b.Code + ' ' +b.ResourceName")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'))
                    ->where(array("MResourceId=$resId"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();;

                $data = array();
                $data['details'] = $results;
                $data['trans'] = $rfctrans;
                $data['activity'] = $rfcactivity;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getiowunitAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $resId = $this->params()->fromRoute('resId');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('Specification', 'SerialNo'))
                    ->where(array("IOWId=$resId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->columns(array('WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty', 'MixType'))
                    ->join(array('b' => 'Proj_IOWRate'), 'a.IOWId=b.IOWId', array('SRate'=> new expression("NetRate"),'RRate'=>new expression("RNetRate")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=c.WorkTypeId', array('ConcreteMix','Cement','Sand','Metal','Thickness'), $select:: JOIN_LEFT)
                    ->where(array("a.IOWId" => $resId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName', 'Code','TypeId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'Rate', 'Amount', 'Formula','RateType','MixType','Wastage','WastageQty','WastageAmount','Weightage'))
                    ->where(array("IOWId=$resId"));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['details'] = $results;
                $data['trans'] = $rfctrans;
                $data['activity'] = $rfcactivity;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getrfcregisterdetailsAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $postParams = $request->getPost();

                $iProjectId =  intval($this->bsf->isNullCheck($postParams['ProjectId'],'number'));
                $dFromDate= $this->bsf->isNullCheck($postParams['FromDate'],'date');
                $dToDate= $this->bsf->isNullCheck($postParams['ToDate'],'date');

                $sql = new Sql($dbAdapter);
                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCRegister'))
                    ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array(), $select::JOIN_LEFT)
                    ->columns(array('RFCRegisterId', 'RefNo', 'RefDate', 'RFCType', 'RFCFrom' => new Expression("Case When a.ProjectId=0 then a.RFCFrom else b.ProjectName end"), 'Type', 'Approve'));

                $where = "a.DeleteFlag = 0 and a.RefDate >= '" . date('d-M-Y', strtotime($dFromDate)) . "' and a.RefDate <='". date('d-M-Y', strtotime($dToDate)) ."'";
                if ($iProjectId ==-1) {
                    $where =  $where . " and a.RFCFrom = 'Library'";
                } else if ($iProjectId ==-2) {
                    $where =  $where . " and a.RFCFrom = 'Project'";
                }  else if ($iProjectId !=0) {
                    $where =  $where . " and a.ProjectId = " . $iProjectId;
                }

                $select->where($where);
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCRegister'))
                    ->columns(array('RFCType','RFCCount' => new Expression("Count(RFCType)"),
                        'ApproveCount' => new Expression( "CAST(0 As Decimal(18,2))")));
                $select1->where($where);
                $select1->group('RFCType');

                $select2 = $sql->select();
                $select2->from(array('a' => 'Proj_RFCRegister'))
                    ->columns(array('RFCType','RFCCount'=> new Expression( "CAST(0 As Decimal(18,2))"),'ApproveCount'=> new Expression( "Count(RFCType)")));
                $select2->where($where);
                $select2->group('RFCType');
                $select2->combine( $select1, 'Union ALL' );

                $select3 = $sql->select();
                $select3->from( array( "g" => $select2 ))
                    ->columns(array('RFCType'=> new Expression("g.RFCType"),'RFCCount'=> new Expression("sum(g.RFCCount)"),'ApproveCount'=> new Expression("sum(g.ApproveCount)")));
                $select3->group(array('g.RFCType'));
                $statement = $sql->getSqlStringForSqlObject($select3);
                $rfcregisterrfctypecount = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $where = "DeleteFlag = 0 and RefDate >= '" . date('d-M-Y', strtotime($dFromDate)) . "' and RefDate <='". date('d-M-Y', strtotime($dToDate)) ."'";
                if ($iProjectId ==-1) {
                    $where =  $where . " and RFCFrom = 'Library'";
                } else if ($iProjectId ==-2) {
                    $where =  $where . " and RFCFrom = 'Project'";
                }  else if ($iProjectId !=0) {
                    $where =  $where . " and ProjectId = " . $iProjectId;
                }

                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")));
                $select->where($where);
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctotal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")));
                $where1 =  $where . " and Approve = 'P'";
                $select->where($where1);
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcprogress = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")));
                $where1 =  $where . " and Approve = 'Y'";
                $select->where($where1);
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcapprove = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")));
                $where1 =  $where . " and Approve = 'N'";
                $select->where($where1);
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcpending = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $data = array();
                $data['rfcregister'] = $rfcregister;
                $data['rfcregisterrfctypecount'] = $rfcregisterrfctypecount;
                $data['rfctotal'] = $rfctotal;
                $data['rfcprogress'] = $rfcprogress;
                $data['rfcapprove'] = $rfcapprove;
                $data['rfcpending'] = $rfcpending;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function checkSerialFoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);
                $postParams = $request->getPost();
                $slno = $postParams['serialno'];
                $projectid =  intval($this->bsf->isNullCheck($postParams['projectid'],'number'));
                $iowid =  intval($this->bsf->isNullCheck($postParams['iowid'],'number'));
                $select = $sql->select();
                if ($projectid==0) {
                    $select->from('Proj_IOWMaster')
                        ->columns(array('IOWId'))
                        ->where(array("DeleteFlag"=>0,"SerialNo" => $slno,"IOWId !=$iowid"));
                    $select1 = $sql->select();
                    $select1->from(array('a' => 'Proj_RFCIOWTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('IOWId'))
                        ->where(array("SerialNo" => $slno, "Approve !='Y'", "RFCFrom" => 'Library', 'ProjectId' => 0,"RFCTRansId !=$iowid"));
                    $select->combine($select1, 'Union ALL');
                } else {
                    $select->from('Proj_ProjectIOWMaster')
                        ->columns(array('IOWId'))
                        ->where(array("DeleteFlag"=>0,"RefSerialNo" => $slno,'ProjectId'=>$projectid,"ProjectIOWId !=$iowid"));
                    $select1 = $sql->select();
                    $select1->from(array('a' => 'Proj_RFCIOWTrans'))
                        ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                        ->columns(array('IOWId'))
                        ->where(array("SerialNo" => $slno, "Approve !='Y'","RFCFrom" => 'Project', 'ProjectId' => $projectid,"RFCTRansId !=$iowid"));
                    $select->combine($select1, 'Union ALL');
                }
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $ans = 'N';
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkresgroupserialfoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {

                $postParams = $request->getPost();
                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $sSlNo =  $this->bsf->isNullCheck($postParams['slno'],'string');
                $igroupid =  intval($this->bsf->isNullCheck($postParams['groupid'],'number'));
                $ans = 'N';

                $select = $sql->select();
                $select->from('Proj_ResourceGroup')
                    ->columns(array('ResourceGroupId'))
                    ->where(array("DeleteFlag"=>0,"Code" => $sSlNo,"ResourceGroupId !=$igroupid"));
                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCResourceGroupTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                    ->columns(array('ResourceGroupId'))
                    ->where(array("a.Code" => $sSlNo, "Approve !='Y'","a.RFCRegisterId !=$rfcid"));
                $select->combine($select1, 'Union ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }


    public function checkresgroupnamefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $sgroupname =  $this->bsf->isNullCheck($postParams['groupname'],'string');
//                $sgroupname =  str_replace(' ', '', $sgroupname);
                $sgroupname = $this->bsf->sanitizeString($sgroupname);
                $igroupid =  intval($this->bsf->isNullCheck($postParams['groupid'],'number'));

                $ans = 'N';


                $select = $sql->select();
                $select->from('Proj_ResourceGroup')
                    ->columns(array('ResourceGroupId'))
                    ->where("DeleteFlag = 0 and dbo.fn_StripCharacters(ResourceGroupName,'^a-zA-Z0-9') ='$sgroupname' and ResourceGroupId <> $igroupid");

                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCResourceGroupTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
                    ->columns(array('ResourceGroupId'))
                    ->where("Approve <> 'Y' and dbo.fn_StripCharacters(ResourceGroupName,'^a-zA-Z0-9') ='$sgroupname' and a.RFCRegisterId <> $rfcid");

                $select->combine($select1, 'Union ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }


    public function checkiowrefnofoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $refno =  $this->bsf->isNullCheck($postParams['refno'],'string');
                $iiowid =  intval($this->bsf->isNullCheck($postParams['iowid'],'number'));
                if ($rfcid !=0) $iiowid=0;

                $ans = 'N';
                $select = $sql->select();
                $select->from('Proj_IOWMaster')
                    ->columns(array('RefSerialNo'))
                    ->where("DeleteFlag = 0 and RefSerialNo ='$refno' and IOWId <>$iiowid");
                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('RefSerialNo'))
                    ->where("Approve <> 'Y' and RefSerialNo ='$refno' and a.RFCRegisterId <> $rfcid");
                $select->combine($select1, 'Union ALL');

                echo $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }
    public function checkiowspecfoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $spec =  $this->bsf->isNullCheck($postParams['spec'],'string');
//                $spec =  str_replace(' ', '', $spec);
                $spec = $this->bsf->sanitizeString($spec);
                $iiowid =  intval($this->bsf->isNullCheck($postParams['iowid'],'number'));
                if ($rfcid !=0) $iiowid=0;



                $ans = 'N';
                $select = $sql->select();
                $select->from('Proj_IOWMaster')
                    ->columns(array('IOWId'))
                    ->where("DeleteFlag = 0 and dbo.fn_StripCharacters(Specification,'^a-zA-Z0-9') ='$spec' and IOWId <> $iiowid");

                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('IOWId'))
                    ->where("Approve <> 'Y' and dbo.fn_StripCharacters(Specification,'^a-zA-Z0-9') ='$spec' and a.RFCRegisterId <> $rfcid and b.ProjectId=0");
                $select->combine($select1, 'Union ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkprojectiowspecfoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $projectid =  intval($this->bsf->isNullCheck($postParams['projectid'],'number'));
                $spec =  $this->bsf->isNullCheck($postParams['spec'],'string');
//                $spec =  str_replace(' ', '', $spec);
                $spec = $this->bsf->sanitizeString($spec);
                $iiowid =  intval($this->bsf->isNullCheck($postParams['iowid'],'number'));
//                if ($rfcid !=0) $iiowid=0;

                $ans = 'N';
                $select = $sql->select();
                $select->from('Proj_ProjectIOWMaster')
                    ->columns(array('ProjectIOWId'))
                    ->where("DeleteFlag = 0 and dbo.fn_StripCharacters(Specification,'^a-zA-Z0-9') ='$spec' and ProjectIOWId <> $iiowid and ProjectId=$projectid");

                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('ProjectIOWId'))
                    ->where("Approve <> 'Y' and dbo.fn_StripCharacters(Specification,'^a-zA-Z0-9') ='$spec' and a.RFCRegisterId <> $rfcid and b.ProjectId=$projectid");
                $select->combine($select1, 'Union ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }
    public function checkresnamefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $resname =  $this->bsf->isNullCheck($postParams['resname'],'string');
                $iresid =  intval($this->bsf->isNullCheck($postParams['resid'],'number'));

                //$resname =  str_replace(' ', '', $resname);
                $resname = $this->bsf->sanitizeString($resname);
                $ans = 'N';

                $select = $sql->select();
                $select->from('Proj_Resource')
                    ->columns(array('ResourceName'))
                    ->where("DeleteFlag = 0 and dbo.fn_StripCharacters(ResourceName,'^a-zA-Z0-9') ='$resname' and ResourceId <> $iresid");
                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCResourceTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('ResourceName'))
                    ->where("Approve <> 'Y' and dbo.fn_StripCharacters(ResourceName,'^a-zA-Z0-9') ='$resname' and a.RFCRegisterId <> $rfcid");
                $select->combine($select1, 'Union ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }
    public function checkrescodefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            if ($request->isPost()) {
                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $srescode =  $this->bsf->isNullCheck($postParams['rescode'],'string');
                $iresid =  intval($this->bsf->isNullCheck($postParams['resid'],'number'));

                $ans = 'N';
                $select = $sql->select();
                $select->from('Proj_Resource')
                    ->columns(array('ResourceName'))
                    ->where("DeleteFlag = 0 and Code ='$srescode' and ResourceId <>$iresid");
                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCResourceTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('ResourceName'))
                    ->where("Approve <> 'Y' and Code ='$srescode' and a.RFCRegisterId <> $rfcid");
                $select->combine($select1, 'Union ALL');

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkworkgroupnamefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);
                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $sgroupname =  $this->bsf->isNullCheck($postParams['groupname'],'string');
//                $sgroupname =  str_replace(' ', '', $sgroupname);
                $sgroupname = $this->bsf->sanitizeString($sgroupname);

                $igroupid =  intval($this->bsf->isNullCheck($postParams['groupid'],'number'));

//                $sgroupname = $this->bsf->isNullCheck($this->params()->fromRoute('groupname'), 'string');
//                $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');
//                $mode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'), 'string');



                $ans = 'N';
                $select = $sql->select();
                $select->from('Proj_WorkGroupMaster')
                    ->columns(array('WorkGroupName'))
                    ->where("DeleteFlag = 0 and dbo.fn_StripCharacters(WorkGroupName,'^a-zA-Z0-9') ='$sgroupname' and WorkGroupId <> $igroupid");
                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCWorkGroupTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('WorkGroupName'))
                    ->where("Approve <> 'Y' and dbo.fn_StripCharacters(WorkGroupName,'^a-zA-Z0-9') ='$sgroupname' and a.RFCRegisterId <> $rfcid");
                $select->combine($select1, 'Union ALL');

//                $ans = 'N';
//                if ($mode == 'edit') {
//                    $select = $sql->select();
//                    $select->from(array('a' => 'Proj_WorkGroupMaster'))
//                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
//                        ->columns(array('RFCRegisterId'))
//                        //->where("b.WorkGroupName='$sgroupname' and b.RFCRegisterId<>$rfcid and a.Approve='Y'");
//                        ->where(array('b.WorkGroupName' => $sgroupname, 'a.Approve' => 'Y'))
//                        ->where->notEqualTo('b.RFCRegisterId',$rfcid);
//                } else {
//                    $select = $sql->select();
//                    $select->from(array('a' => 'Proj_RFCRegister'))
//                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
//                        ->columns(array('RFCRegisterId'))
//                        //->where("b.WorkGroupName='$sgroupname' and b.RFCRegisterId<>$rfcid and a.Approve='Y'");
//                        ->where(array('b.WorkGroupName' => $sgroupname, 'a.Approve' => 'Y'))
//                        ->where->notEqualTo('b.RFCRegisterId',$rfcid);
//                    $select1 = $sql->select();
//                    $select1->from(array('a' => 'Proj_RFCRegister'))
//                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
//                        ->columns(array('RFCRegisterId'))
//                        //->where("b.WorkGroupName='$sgroupname' and b.RFCRegisterId<>$rfcid and a.Approve<>'Y'");
//                        ->where(array('b.WorkGroupName' => $sgroupname, 'a.Approve' => 'Y'))
//                        ->where->notEqualTo('b.RFCRegisterId',$rfcid);
//                    $select->combine($select1, 'UNION ALL');
//                }
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkworkgroupslnofoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

                $postParams = $request->getPost();

                $rfcid =  intval($this->bsf->isNullCheck($postParams['rfcid'],'number'));
                $sslno =  $this->bsf->isNullCheck($postParams['slno'],'string');
                $igroupid =  intval($this->bsf->isNullCheck($postParams['groupid'],'number'));


                $sql = new Sql($dbAdapter);
//                $sslno = $this->bsf->isNullCheck($this->params()->fromRoute('slno'), 'string');
//                $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');
//                $mode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'), 'string');


                $ans = 'N';
                $select = $sql->select();
                $select->from('Proj_WorkGroupMaster')
                    ->columns(array('SerialNo'))
                    ->where("DeleteFlag = 0 and SerialNo ='$sslno' and WorkGroupId <>$igroupid");
                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_RFCWorkGroupTrans'))
                    ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                    ->columns(array('SerialNo'))
                    ->where("Approve <> 'Y' and SerialNo ='$sslno' and a.RFCRegisterId <> $rfcid");
                $select->combine($select1, 'Union ALL');


//                $ans = 'N';
//                if ($mode == 'edit') {
//                    $select = $sql->select();
//                    $select->from(array('a' => 'Proj_WorkGroupMaster'))
//                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
//                        ->columns(array('RFCRegisterId'))
//                        //->where("b.WorkGroupName='$sgroupname' and b.RFCRegisterId<>$rfcid and a.Approve='Y'");
//                        ->where(array('b.SerialNo' => $sslno, 'a.Approve' => 'Y'))
//                        ->where->notEqualTo('b.RFCRegisterId',$rfcid);
//                } else {
//                    $select = $sql->select();
//                    $select->from(array('a' => 'Proj_RFCRegister'))
//                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
//                        ->columns(array('RFCRegisterId'))
//                        //->where("b.WorkGroupName='$sgroupname' and b.RFCRegisterId<>$rfcid and a.Approve='Y'");
//                        ->where(array('b.SerialNo' => $sslno, 'a.Approve' => 'Y'))
//                        ->where->notEqualTo('b.RFCRegisterId',$rfcid);
//                    $select1 = $sql->select();
//                    $select1->from(array('a' => 'Proj_RFCRegister'))
//                        ->join(array('b' => 'Proj_RFCWorkGroupTrans'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select::JOIN_INNER)
//                        ->columns(array('RFCRegisterId'))
//                        //->where("b.WorkGroupName='$sgroupname' and b.RFCRegisterId<>$rfcid and a.Approve<>'Y'");
//                        ->where(array('b.SerialNo' => $sslno, 'a.Approve' => 'Y'))
//                        ->where->notEqualTo('b.RFCRegisterId',$rfcid);
//                    $select->combine($select1, 'UNION ALL');
//                }
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                if (!empty($results)) $ans = 'Y';

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkresparentnamefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $sgroupname = $this->params()->fromRoute('groupname');
                $select = $sql->select();
                $select->from('Proj_ResourceGroup')
                    ->columns(array('ResourceGroupId'))
                    ->where(array("ResourceGroupName='$sgroupname'"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $ans = '0';
                if (!empty($results)) $ans = $results['ResourceGroupId'];

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkworktypenamefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $sgroupname = $this->params()->fromRoute('typename');
                $select = $sql->select();
                $select->from('Proj_WorkTypeMaster')
                    ->columns(array('WorkTypeId'))
                    ->where(array("WorkType='$sgroupname'"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $ans = '0';
                if (!empty($results)) $ans = $results['WorkTypeId'];
                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkrestypefoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);
                $stypename = $this->params()->fromRoute('typename');

                $select = $sql->select();
                $select->from('Proj_ResourceType')
                    ->columns(array('TypeId'))
                    ->where(array("TypeName='$stypename'"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $ans = '0';
                if (!empty($results)) $ans = $results['TypeId'];

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function checkunitfoundAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);
                $sunit = $this->params()->fromRoute('unitname');

                $select = $sql->select();
                $select->from('Proj_UOM')
                    ->columns(array('UnitId'))
                    ->where(array("UnitName='$sunit'"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $ans = '0';
                if (!empty($results)) $ans = $results['UnitId'];

                $response = $this->getResponse();
                $response->setContent($ans);
                return $response;
            }
        }
    }

    public function getresourcetypeAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $postParams = $request->getPost();
                $resId = $postParams['resId'];

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->columns(array('TypeId'), array('TypeName'))
                    ->where(array("ResourceGroupId" => $resId));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $data = array();
                $data['trans'] = $results;
                $data['anal'] = '';

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

//    function _GetResCode($typeId, $groupId, $dbAdapter)
//    {
//        $resCode = "";
//
//        $sql = new Sql($dbAdapter);
//        $select = $sql->select();
//
//        $select->from('Proj_ResourceCodeSetup')
//            ->columns(array('GenType', 'Prefix', 'PType', 'PGroup', 'Suffix', 'Width', 'GroupLevel', 'CountLevel', 'MaxNo'));
//        $statement = $sql->getSqlStringForSqlObject($select);
//
//        $code = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//
//        if ($code['GenType'] == 1) {
//            $sPrefix = $code['Prefix'];
//            $sSuffix = $code['Suffix'];
//            $iWidth = $code['Width'];
//            $iTMaxNo = 0;
//            $sTPrefix = "";
//            $sGPrefix = "";
//            $iGMaxNo = 0;
//
//            if ($code['PType'] == 1) {
//                $iTMaxNo = $this->_getTypeMaxNo($typeId, $dbAdapter);
//                $sTPrefix = $this->_getTypeCode($typeId, $dbAdapter);
//                $this->_UpdateTypeMaxNo($iTMaxNo, $typeId, $dbAdapter);
//            }
//            if ($code['PGroup'] == 1) {
//                $iGMaxNo = $this->_getGroupMaxNo($groupId, $dbAdapter);
//                $sGPrefix = $this->_getResGroupCode($groupId, $dbAdapter);
//                $this->_UpdateGroupMaxNo($iGMaxNo, $groupId, $dbAdapter);
//            }
//
//            $iVNo = $code['MaxNo'] + 1;
//
//            if ($code['CountLevel'] == 'G') {
//                $iVNo = $iGMaxNo;
//            } else if ($code['CountLevel'] == 'T') {
//                $iVNo = $iTMaxNo;
//            }
//            $iLen = $iWidth - strlen($iVNo);
//            $sPre = "";
//            for ($i = 1; $i < $iLen; $i++) {
//                $sPre = $sPre . "0";
//            }
//            $resCode = $sPrefix . $sTPrefix . $sGPrefix . $sPre . $iVNo . $sSuffix;
//        }
//        return $resCode;
//    }
//
//    function  _getTypeCode($typeid, $dbAdapter)
//    {
//        $typecode = "";
//
//        $sql = new Sql($dbAdapter);
//
//        $select = $sql->select();
//        $select->from('Proj_ResourceType')
//            ->columns(array('TypeCode'))
//            ->where(array('TypeId' => $typeid));
//
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $restype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//        $typecode = $restype['TypeCode'];
//
//        return $typecode;
//    }
//
//    function  _getTypeMaxNo($typeid, $dbAdapter)
//    {
//        $iMaxno = 0;
//
//        $sql = new Sql($dbAdapter);
//
//        $select = $sql->select();
//        $select->from('Proj_ResourceType')
//            ->columns(array('MaxNo'))
//            ->where(array('TypeId' => $typeid));
//
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $restype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//        $iMaxno = $restype['MaxNo'];
//        $iMaxno = $iMaxno + 1;
//        return $iMaxno;
//    }
//
//    function  _getResGroupCode($groupid, $dbAdapter)
//    {
//        $groupcode = "";
//
//        $sql = new Sql($dbAdapter);
//
//        $select = $sql->select();
//        $select->from('Proj_ResourceGroup')
//            ->columns(array('Code'))
//            ->where(array('ResourceGroupId' => $groupid));
//
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//        $groupcode = $resgroup['Code'];
//
//        return $groupcode;
//    }
//
//    function  _getGroupMaxNo($groupid, $dbAdapter)
//    {
//        $iMaxno = 0;
//
//        $sql = new Sql($dbAdapter);
//
//        $select = $sql->select();
//        $select->from('Proj_ResourceGroup')
//            ->columns(array('MaxNo'))
//            ->where(array('ResourceGroupId' => $groupid));
//
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//
//        $iMaxno = $resgroup['MaxNo'];
//        $iMaxno = $iMaxno + 1;
//
//        return $iMaxno;
//    }
//
//    function  _UpdateGroupMaxNo($maxno, $groupid, $dbAdapter)
//    {
//        $sql = new Sql($dbAdapter);
//
//        $update = $sql->update();
//        $update->table('Proj_ResourceGroup');
//        $update->set(array(
//            'MaxNo' => $maxno,
//        ));
//        $update->where(array('ResourceGroupId' => $groupid));
//
//        $statement = $sql->getSqlStringForSqlObject($update);
//        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//    }
//
//    function  _UpdateTypeMaxNo($maxno, $typeid, $dbAdapter)
//    {
//        $sql = new Sql($dbAdapter);
//
//        $update = $sql->update();
//        $update->table('Proj_ResourceType');
//        $update->set(array(
//            'MaxNo' => $maxno,
//        ));
//        $update->where(array('TypeId' => $typeid));
//
//        $statement = $sql->getSqlStringForSqlObject($update);
//        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//    }

    public function getresourcecodeAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resId = $postParams['resId'];

                $sql = new Sql($dbAdapter);
                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->columns(array('Code'))
                    ->where(array("ResourceId=$resId"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                $response = $this->getResponse();
                $response->setContent(json_encode($results->toArray()));
                return $response;
            }
        }
    }

    public function getresourceAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $sql = new Sql($dbAdapter);
            $select = $sql->select();
            $select->from(array('a' => 'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                ->columns(array('ResourceId', 'ResourceName', 'Code'), array('UnitName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function updaterfcAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();

                $sql = new Sql($dbAdapter);
                $data = $request->getPost();
                try {
                    if (isset($data['json2'])) {
                        $rfctype = 'R';
                        $obj1 = json_decode($data['json2']);
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $obj1[0]->refno, 'RefDate' => date('Y-m-d', strtotime($obj1[0]->refdate)), 'RFCType' => $rfctype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $identity = $dbAdapter->getDriver()->getLastGeneratedValue();
                    }

                    if (isset($data['json1'])) {
                        $obj = json_decode($data['json1']);
                        $statement = "";
                        foreach ($obj as $data) {
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCResourceTrans');
                            $insert->Values(array('Code' => $data->Code, 'ResourceName' => $data->ResourceName, 'ResourceGroupId' => $data->ResourceGroupId, 'TypeId' => $data->TypeId, 'UnitId' => $data->UnitId, 'RFCREgisterId' => $identity));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            if ($data->ResourceGroupId !=0) {
                                $update = $sql->update();
                                $update->table('Proj_ResourceGroup');
                                $update->set(array(
                                    'GroupUsed' => 1,
                                ));
                                $update->where(array('ResourceGroupId' => $data->ResourceGroupId));
                                $statement = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                        }
                    }
                    $connection->commit();
                } catch (PDOException $e) {
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }
                $response->setContent($identity);
                return $response;
            }
        }
    }

    protected function _stdToArray($obj)
    {
        $reaged = (array)$obj;
        foreach ($reaged as $key => &$field) {
            if (is_object($field)) $field = stdToArray($field);
        }
        return $reaged;
    }

    public function getresourcegroupAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $sql = new Sql($dbAdapter);
            $select = $sql->select();
            $select->from('Proj_ResourceGroup')
                ->columns(array('ResourceGroupId', 'ResourceGroupName', 'TypeId'));

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getuomAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $sql = new Sql($dbAdapter);
                $select = $sql->select();

                $select->from('Proj_UOM')
                    ->columns(array('UnitId', 'UnitName'));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                $response = $this->getResponse();
                $response->setContent(json_encode($results->toArray()));
                return $response;
            }
        }
    }

    public function getrfcregisterAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $rfcid = $this->params()->fromRoute('rfcId');
        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from(array('a' => 'Proj_RFCRegister'))
            ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array(), $select::JOIN_LEFT)
            ->columns(array('RFCRegisterId', 'RefNo', 'RefDate', 'RFCType', 'RFCFrom' => new Expression("Case When a.ProjectId=0 then a.RFCFrom else b.ProjectName end"), 'Type', 'Approve'))
            ->where(array('a.DeleteFlag' => 0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
        $response = $this->getResponse();
        $response->setContent(json_encode($results->toArray()));
        return $response;
    }

    public function deleterfcregisterAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $status = "failed";

                $connection = $dbAdapter->getDriver()->getConnection();
                try {
                    $RFCRegisterId = $this->params()->fromPost('rfcId');
                    $sql = new Sql($dbAdapter);

                    $response = $this->getResponse();

                    // check if not approved
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->where(array('RFCRegisterId' => $RFCRegisterId, 'Approve' => 'N'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    if (empty($result)) {
                        $response->setContent('This request is already approved, You cannot delete this!');
                        $response->setStatusCode('403');
                        return $response;
                    }

                    $rfctype='';
                    $sRefNo='';

                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType','RefNo'))
                        ->where(array("RFCRegisterId" => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) {
                        $rfctype = $this->bsf->isNullCheck($rfcreg['RFCType'], 'string');
                        $rRefNo = $this->bsf->isNullCheck($rfcreg['RefNo'], 'string');
                    }

                    $connection->beginTransaction();

                    // get RFCTransId of Proj_RFCResourceTrans
                    $subQueryResourceTrans = $sql->select();
                    $subQueryResourceTrans->from('Proj_RFCResourceTrans')
                        ->columns(array('RFCTransId'))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));

                    // update DeleteFlag Proj_RFCActivityTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCActivityTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where->expression('RFCTransId IN ?', array($subQueryResourceTrans));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCIOWDeleteTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCIOWDeleteTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCIOWTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCIOWTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // get RFCTransId of Proj_RFCIOWTrans
                    $subQueryIOWTrans = $sql->select();
                    $subQueryIOWTrans->from('Proj_RFCIOWTrans')
                        ->columns(array('RFCTransId'))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));

                    // update DeleteFlag Proj_RFCRateAnalysis
                    $update = $sql->update();
                    $update->table('Proj_RFCRateAnalysis')
                        ->set(array('DeleteFlag' => 1))
                        ->where->expression('RFCTransId IN ?', array($subQueryIOWTrans));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCResGroupDeleteTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCResGroupDeleteTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCResourceDeleteTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCResourceDeleteTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCResourceGroupTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCResourceGroupTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCSteelTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCSteelTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where->expression('RFCTransId IN ?', array($subQueryResourceTrans));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCResourceTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCResourceTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // get Proj_RFCWorkGroupTrans
                    $subQueryWorkGroupTrans = $sql->select();
                    $subQueryWorkGroupTrans->from('Proj_RFCWorkGroupTrans')
                        ->columns(array('RFCTransId'))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));

                    // update DeleteFlag Proj_RFCWorkGroupAnalysis
                    $update = $sql->update();
                    $update->table('Proj_RFCWorkGroupAnalysis')
                        ->set(array('DeleteFlag' => 1))
                        ->where->expression('RFCTransId IN ?', array($subQueryWorkGroupTrans));
                    $statement = $sql->getSqlStringForSqlObject($update);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCWorkGroupTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCWorkGroupTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // get Proj_RFCWorkTypeTrans
                    $subQueryWorkTypeTrans = $sql->select();
                    $subQueryWorkTypeTrans->from('Proj_RFCWorkTypeTrans')
                        ->columns(array('RFCTransId'))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));

                    // update DeleteFlag Proj_RFCWorkTypeAnalysis
                    $update = $sql->update();
                    $update->table('Proj_RFCWorkTypeAnalysis')
                        ->set(array('DeleteFlag' => 1))
                        ->where->expression('RFCTransId IN ?', array($subQueryWorkTypeTrans));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCWorkTypeTrans
                    $update = $sql->update();
                    $update->table('Proj_RFCWorkTypeTrans')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    // update DeleteFlag Proj_RFCRegister
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister')
                        ->set(array('DeleteFlag' => 1))
                        ->where(array('RFCRegisterId' => $RFCRegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Delete','D',$rfctype,$RFCRegisterId,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $status = 'deleted';
                } catch (PDOException $e) {
                    $connection->rollback();
                    print "Error!: " . $e->getMessage() . "</br>";
                }

                $response->setContent($status);
                return $response;
            }
        }
    }

    public function getrfcresourcepicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $sql = new Sql($dbAdapter);

            $subQuery = $sql->select();
            $subQuery->from("Proj_RFCResourceDeleteTrans")
                ->columns(array("ResourceId"));
            $subQuery->where(array("RFCRegisterId != '" . $iRFCId . "'"));

            $select = $sql->select();
            if (isset($iRFCId) && $iRFCId != 0) {
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_RFCResourceDeleteTrans'), new Expression("a.ResourceId=d.ResourceId and d.RFCRegisterId ='" . $iRFCId . "'"), array("available" => new Expression("Case When d.ResourceId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId', 'Code', 'ResourceName'), array('TypeName'), array('ResourceGroupName'), array('available'))
                    ->where->expression('a.DeleteFlag=0 and a.ResourceId Not IN ?', array($subQuery));
            } else {
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId', 'Code', 'ResourceName', "available" => new Expression("'false'")), array('TypeName'), array('ResourceGroupName'))
                    ->where->expression('a.DeleteFlag=0 and a.ResourceId Not IN ?', array($subQuery));
            }

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getrfcresgrouppicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $sql = new Sql($dbAdapter);

            $subQuery = $sql->select();
            $subQuery->from("Proj_RFCResGroupDeleteTrans")
                ->columns(array("ResourceGroupId"));
            $subQuery->where(array("RFCRegisterId != '" . $iRFCId . "'", 'DeleteFlag' => '0'));

            $select = $sql->select();
            if (isset($iRFCId) && $iRFCId != 0) {
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_RFCResGroupDeleteTrans'), new Expression("a.ResourceGroupId=c.ResourceGroupId and c.RFCRegisterId ='" . $iRFCId . "'"), array("available" => new Expression("Case When c.ResourceGroupId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId', 'Code', 'ResourceGroupName'), array('TypeName'), array('available'))
                    ->where->expression('a.DeleteFlag=0 and a.ResourceGroupId Not IN ?', array($subQuery));
            } else {
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId', 'Code', 'ResourceGroupName', "available" => new Expression("'false'")), array('TypeName'))
                    ->where->expression('a.DeleteFlag=0 and a.ResourceGroupId Not IN ?', array($subQuery));
            }

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getrfcworkgrouppicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        if ($this->getRequest()->isXmlHttpRequest()) {
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);

            $iRFCId = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');

            $select = $sql->select();
            if ($iRFCId != 0) {
                $subQuery = $sql->select();
                $subQuery->from("Proj_RFCWorkGroupDeleteTrans")
                    ->columns(array("WorkGroupId"));
                $subQuery->where(array("RFCRegisterId = '" . $iRFCId . "'"));

                $select->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->join(array('b' => 'Proj_WorkTypeMaster'), ('a.WorkTypeId=b.WorkTypeId'), array('WorkType'), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId', 'SerialNo', 'WorkGroupName', "available" => new Expression("'false'")), array('WorkType'))
                    ->where->expression('a.DeleteFlag=0 and a.WorkGroupId Not IN ?', array($subQuery));

                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->join(array('b' => 'Proj_WorkTypeMaster'), ('a.WorkTypeId=b.WorkTypeId'), array('WorkType'), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId', 'SerialNo', 'WorkGroupName', "available" => new Expression("'true'")), array('WorkType'))
                    ->where->expression('a.DeleteFlag=0 and a.WorkGroupId IN ?', array($subQuery));
                $select->combine($select1, 'Union ALL');
            } else {
                $subQuery = $sql->select();
                $subQuery->from("Proj_RFCWorkGroupDeleteTrans")
                    ->columns(array("WorkGroupId"));
                $subQuery->where(array("RFCRegisterId != '" . $iRFCId . "'"));

                $select->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->join(array('b' => 'Proj_WorkTypeMaster'), ('a.WorkTypeId=b.WorkTypeId'), array('WorkType'), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId', 'SerialNo', 'WorkGroupName', "available" => new Expression("'false'")), array('WorkType'))
                    ->where->expression('a.DeleteFlag=0 and a.WorkGroupId Not IN ?', array($subQuery));
            }

            $selectmaster = $sql->select();
            $selectmaster->from(array("g" => $select))
                ->columns(array('*'))
                ->order(new expression('g.available DESC, g.WorkGroupName'));

            $statement = $sql->getSqlStringForSqlObject($selectmaster);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getrfciowpicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $iRFCId = $this->params()->fromRoute('rfcId');

            $sql = new Sql($dbAdapter);
            $subQuery = $sql->select();
            $subQuery->from("Proj_RFCIOWDeleteTrans")
                ->columns(array("IOWId"));
            $subQuery->where(array("RFCRegisterId != '" . $iRFCId . "'"));

            $select = $sql->select();
            if (isset($iRFCId) && $iRFCId != 0) {
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_RFCIOWDeleteTrans'), new Expression("a.IOWId=c.IOWId and c.RFCRegisterid ='" . $iRFCId . "'"), array('IOWId', "available" => new Expression("Case When c.IOWId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('IOWId', 'SerialNo', 'Specification'), array('WorkGroupName'), array('available'))
                    ->where->expression('a.DeleteFlag=0 and a.IOWID Not IN ?', array($subQuery));
            } else {
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupName'), $select:: JOIN_LEFT)
                    ->columns(array('IOWId', 'SerialNo', 'Specification', "available" => new Expression("'false'")), array('WorkGroupName'))
                    ->where->expression('a.DeleteFlag=0 and a.IOWID Not IN ?', array($subQuery));
            }

            $statement = $sql->getSqlStringForSqlObject($select);

            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getrfcworktypepicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $iRFCId = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
            $editId = $this->bsf->isNullCheck($this->params()->fromRoute('editId'), 'number');
            $sql = new Sql($dbAdapter);
            $select = $sql->select();

            if ($iRFCId != 0) {
                $select->from(array('a' => 'Proj_WorkTypeMaster'))
                    ->join(array('b' => 'Proj_RFCWorkTypeTrans'), new Expression("a.WorkTypeId=b.WorkTypeId and b.RFCRegisterid ='" . $iRFCId . "'")
                        , array("available" => new Expression("Case When b.WorkTypeId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('WorkTypeId', 'WorkType'), array('available'));
            } else if ($editId != 0) {
                $select->from('Proj_WorkTypeMaster')
                    ->columns(array('WorkTypeId', 'WorkType', "available" => new Expression("'false'")))
                    ->where("WorkTypeId <> $editId");

                $select1 = $sql->select();
                $select1->from('Proj_WorkTypeMaster')
                    ->columns(array('WorkTypeId', 'WorkType', "available" => new Expression("'true'")))
                    ->where("WorkTypeId = $editId");

                $select->combine($select1, 'Union ALL');
            } else {
                $select->from('Proj_WorkTypeMaster')
                    ->columns(array('WorkTypeId', 'WorkType', "available" => new Expression("'false'")));
            }

            $selectmaster = $sql->select();
            $selectmaster->from(array("g" => $select))
                ->columns(array('*'))
                ->order(new expression('g.available DESC, g.WorkTypeId'));

            $statement = $sql->getSqlStringForSqlObject($selectmaster);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getrfcworkgroupeditpicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $iRFCId = $this->params()->fromRoute('rfcId');
            $sql = new Sql($dbAdapter);
            $select = $sql->select();

            if (isset($iRFCId) && $iRFCId != 0) {
                $select->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->join(array('b' => 'Proj_RFCWorkGroupTrans'), new Expression("a.WorkGroupId=b.WorkGroupId and b.RFCRegisterid ='" . $iRFCId . "'"), array('WorkGroupId', "available" => new Expression("Case When b.WorkGroupId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId', 'WorkGroupName', 'WorkTypeId'), array('available'));
            } else {
                $select->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->columns(array('WorkGroupId', 'WorkGroupName', 'WorkTypeId', "available" => new Expression("'false'")));
            }

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getrfcresourcegrouppicklistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {

            $iRFCId = $this->params()->fromRoute('rfcId');
            $editid = $this->params()->fromRoute('id');
            $sql = new Sql($dbAdapter);
            $select = $sql->select();

            if (isset($iRFCId) && $iRFCId != 0) {
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_RFCResourceGroupTrans'), new Expression("a.ResourceGroupId=b.ResourceGroupId and b.RFCRegisterid ='" . $iRFCId . "'"), array("available" => new Expression("Case When b.ResourceGroupId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId', 'ResourceGroupName'), array('available'));
            } else if (isset($editid) && $editid != 0) {
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->join(array('b' => 'Proj_ResourceGroup'), new Expression("a.ResourceGroupId='" . $editid . "'"), array("available" => new Expression("Case When b.ResourceGroupId is Null then 'false' else 'true' end")), $select:: JOIN_LEFT)
                    ->columns(array('ResourceGroupId', 'ResourceGroupName'), array('available'));
            } else {
                $select->from(array('a' => 'Proj_ResourceGroup'))
                    ->columns(array('ResourceGroupId', 'ResourceGroupName', "available" => new Expression("'false'")));
            }

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getresourceeditAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['ids'];
                $sql = new Sql($dbAdapter);

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_Resource'))
                        ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                        ->join(array('d' => 'Proj_ResourceType'), 'a.TypeId=d.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Code', 'ResourceName', 'ResourceGroupId', 'TypeId', 'UnitId'), array('UnitName'), array('ResourceGroupName'), array('TypeName'))
                        ->where("ResourceId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount'), array('ResourceName'), array('UnitName'))
                        ->where("a.ResourceId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();;

                    $select = $sql->select();
                    $select->from('Proj_ResourceSteelTrans')
                        ->columns(array('SteelDescription', 'SteelDia', 'Factor', 'Wastage'))
                        ->where("ResourceId IN ($resid)");
                    $statement = $sql->getSqlStringForSqlObject($select);

                    $rfcsteel = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();;
                }

                $data = array();
                $data['trans'] = $rfctrans;
                $data['activity'] = $rfcactivity;
                $data['steel'] = $rfcsteel;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getioweditAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);
                $postParams = $request->getPost();
                $resid = $postParams['ids'];

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from('Proj_IOWMaster')
                        ->columns(array('IOWId', 'ParentId', 'RefSerialNo', 'SerialNo', 'Specification', 'ShortSpec', 'WorkGroupId', 'UnitId'))
                        ->where("IOWId IN ($resid)");
                    $statement = $sql->getSqlStringForSqlObject($select);

                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_IOWRateAnalysis'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('IOWId', 'ResourceId', 'Qty', 'Rate', 'Amount'), array('ResourceName'), array('UnitName'))
                        ->where("a.IOWId IN ($resid)");

                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                }

                $data = array();
                $data['trans'] = $rfctrans;
                $data['activity'] = $rfcactivity;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getactivityresourcedetailsAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from('Proj_Resource')
                    ->columns(array('AnalysisMQty', 'AnalysisAQty', 'RateType', 'LRate', 'MRate', 'ARate'))
                    ->where(array("ResourceId=$resid"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'), array('ResourceName'), array('UnitName'))
                    ->where(array("MResourceId=$resid"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();;

                $data = array();
                $data['trans'] = $rfctrans;
                $data['activity'] = $rfcactivity;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getsubiowdetailsAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from('Proj_IOWMaster')
                    ->columns(array('WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty'))
                    ->where(array("IOWId=$resid"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName', 'Code'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'Rate', 'Amount', 'Formula', 'MixType','Wastage','WastageQty','WastageAmount','Weightage'), array('ResourceName', 'Code'), array('UnitName'))
                    ->where(array("IOWId=$resid"));

                $select->order('a.SortId ASC');

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['trans'] = $rfctrans;
                $data['activity'] = $rfcactivity;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getresourcedeletelistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['ids'];
                $sql = new Sql($dbAdapter);

                if (!empty($resid)) {
                    $select = $sql->select();

                    $select->from(array('a' => 'Proj_Resource'))
                        ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Code', 'ResourceName'), array('TypeName'), array('ResourceGroupName'))
                        ->where("ResourceId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $response = $this->getResponse();
                $response->setContent(json_encode($rfctrans));
                return $response;
            }
        }
    }

    public function getresgroupdeletelistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['ids'];
                $sql = new Sql($dbAdapter);

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceGroup'))
                        ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceGroupId', 'Code', 'ResourceGroupName'), array('TypeName'), array('ResourceGroupName'))
                        ->where("ResourceGroupId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $response = $this->getResponse();
                $response->setContent(json_encode($rfctrans));
                return $response;
            }
        }
    }

    public function getworkgroupdeletelistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);

                $postParams = $request->getPost();
                $resid = $postParams['ids'];

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupMaster'))
                        ->columns(array('WorkGroupId', 'SerialNo', 'WorkGroupName'))
                        ->where("WorkGroupId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $response = $this->getResponse();
                $response->setContent(json_encode($rfctrans));
                return $response;
            }
        }
    }

    public function getiowdeletelistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['ids'];
                $sql = new Sql($dbAdapter);

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_IOWMaster'))
                        ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupName'), $select:: JOIN_LEFT)
                        ->columns(array('IOWId', 'SerialNo', 'Specification'), array('WorkGroupName'))
                        ->where("IOWId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $response = $this->getResponse();
                $response->setContent(json_encode($rfctrans));
                return $response;
            }
        }
    }

    public function getworktypelistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                //$resid = $postParams['ids'];
                $resid = $this->params()->fromRoute('ids');
                $sql = new Sql($dbAdapter);
                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkTypeMaster'))
                        ->columns(array('WorkTypeId', 'WorkType', 'ConcreteMix', 'Cement', 'Sand', 'Metal', 'Thickness', 'WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty'))
                        ->where("WorkTypeId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkTypeAnalysis'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->columns(array('WorkTypeId', 'IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'CFormula', 'Type', 'TransType', 'Description'), array('Code', 'ResourceName'), array('UnitName'))
                        ->where("WorkTypeId IN ($resid)");

                    $select->order('a.SortId ASC');

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }
                $data = array();
                $data['trans'] = $rfctrans;
                $data['anal'] = $rfcanal;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getworkgrouplistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resid = $postParams['ids'];
                $sql = new Sql($dbAdapter);

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupMaster'))
                        ->join(array('b' => 'Proj_WorkTypeMaster'), ('a.WorkTypeId=b.WorkTypeId'), array('WorkType', 'WorkTypeId'), $select:: JOIN_LEFT)
                        ->columns(array('WorkGroupId', 'WorkGroupName', 'ConcreteMix', 'Cement', 'Sand', 'Metal', 'Thickness', 'WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty'), array('WorkType', 'WorkTypeId'))
                        ->where("WorkGroupId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WorkGroupAnalysis'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'Rate', 'ResourceName'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('WorkGroupId', 'IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'CFormula', 'Type'), array('Code', 'Rate', 'ResourceName'), array('UnitName'))
                        ->where("a.WorkGroupId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $data = array();
                $data['trans'] = $rfctrans;
                $data['anal'] = $rfcanal;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getworktypenewdetailsAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resId = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkTypeMaster'))
                    ->columns(array('WorkTypeId','WorkType','ConcreteMix', 'Cement', 'Sand', 'Metal', 'Thickness', 'WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty'))
                    ->where(array("WorkTypeId=$resId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkTypeAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceId','TypeId','Code', 'Rate', 'ResourceName'=>new Expression("Code + ' ' +b.ResourceName")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IncludeFlag', 'ReferenceId','ResourceId','Qty', 'CFormula', 'Type','TransType', 'Description','Wastage'=> new Expression("'0'"),'WastageAmount'=> new Expression("'0'"),'WastageQty'=> new Expression("'0'"),'Weightage'=> new Expression("'0'")))
                    ->where(array("a.WorkTypeId=$resId"));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $anal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['trans'] = $results;
                $data['anal'] = $anal;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }



    public function getworktypedetailsAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resId = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkTypeMaster'))
                    ->columns(array('ConcreteMix', 'Cement', 'Sand', 'Metal', 'Thickness', 'WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty'))
                    ->where(array("WorkTypeId=$resId"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkTypeAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'UnitId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'CFormula', 'Type', 'TransType', 'Description'))
                    ->where(array("WorkTypeId=$resId"));
                $select->order('a.SortId ASC');

                $statement = $sql->getSqlStringForSqlObject($select);
                $anal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['trans'] = $results;
                $data['anal'] = $anal;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getlibraryiowAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resId = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from('Proj_IOWMaster')
                    ->columns(array("data"=>'IOWId',"value"=> new Expression("SerialNo + ' ' +Specification")))
                    ->where(array("DeleteFlag" => '0','WorkTypeId'=>$resId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['trans'] = $results;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getMaxSlNo() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resId = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from('Proj_IOWMaster')
                    ->columns(array('SlNo'=>new Expression("Max(PSlNo)")))
                    ->where(array("ParentId"=>$resId));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $slNo = '0';
                if (!empty($results)) $slNo = $results['SlNo'];

                $response = $this->getResponse();
                $response->setContent($slNo);
                return $response;
            }
        }
    }

    public function getiowdetailsfromLibraryAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $iowid= $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupId','WorkTypeId','WorkGroupName','ConcreteMix', 'Cement', 'Sand', 'Metal', 'Thickness'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=d.WorkTypeId', array('WorkType'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IOWId','SerialNo','Specification','ShortSpec','UnitId','WorkingQty','RWorkingQty','CementRatio','SandRatio','MetalRatio','ThickQty','SRate','RRate','ParentText','Rate','ParentText'=>new Expression("ParentText + '->'+ Specification")))
                    ->where(array("a.IOWId=$iowid"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code','TypeId', 'Rate', 'ResourceName'=> new Expression("Code + ' ' +b.ResourceName")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'Formula', 'MixType','Wastage','WastageAmount','WastageQty','Weightage','TransType','Description'))
                    ->where(array("a.IOWId=$iowid"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $anal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['trans'] = $results;
                $data['anal'] = $anal;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function getiowslnoAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $iowid= $this->bsf->isNullCheck($postParams['iowId'],'number');
                $wgid= $this->bsf->isNullCheck($postParams['wgId'],'number');
                $sql = new Sql($dbAdapter);

                $sSerialNo="";
                $sCode ="";

                $select = $sql->select();
                if ($iowid==0) {
                    $select->from('Proj_WorkGroupMaster')
                        ->columns(array('SerialNo'))
                        ->where(array('WorkGroupId' => $wgid));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $wg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($wg)) $sCode = $wg['SerialNo'];
                } else {
                    $select->from('Proj_IOWMaster')
                        ->columns(array('SerialNo'))
                        ->where(array('IOWId' => $iowid));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $wg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($wg)) $sCode = $wg['SerialNo'];
                }

                $sPSlNo=0;
                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->columns(array('PSLNo'=>new Expression("Max(PSLNo)")))
                    ->where(array("a.WorkGroupId=$wgid and a.ParentId=$iowid"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $wgm = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                if (!empty($wgm)) $sPSlNo = intval($this->bsf->isNullCheck($wgm['PSLNo'],'number'));
                $sPSlNo = $sPSlNo+1;
                $iWidth=5;
                $iLen = $iWidth - strlen($sPSlNo);
                $sPre = "";
                for ($i = 1; $i < $iLen; $i++) {
                    $sPre = $sPre . "0";
                }
                $sSerialNo = $sCode .'.'.$sPre.$sPSlNo;

                $data = array($sSerialNo,$sPSlNo,$sCode);

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
//                $response = $this->getResponse();
//                $response->setContent($sSerialNo);
                return $response;
            }
        }
    }

    public function getworkgroupdetailsAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $resId = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->join(array('d' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=d.WorkTypeId', array('WorkType'), $select:: JOIN_LEFT)
                    ->columns(array('WorkTypeId','ConcreteMix', 'Cement', 'Sand', 'Metal', 'Thickness', 'WorkingQty', 'RWorkingQty', 'CementRatio', 'SandRatio', 'MetalRatio', 'ThickQty','AutoRateAnalysis'))
                    ->where(array("WorkGroupId=$resId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkGroupAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceId','TypeId','Code', 'Rate', 'ResourceName'=>new Expression("Code + ' ' +b.ResourceName")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('IncludeFlag', 'ReferenceId','ResourceId','Qty', 'CFormula', 'Type','TransType', 'Description','Wastage'=> new Expression("'0'"),'WastageAmount'=> new Expression("'0'"),'WastageQty'=> new Expression("'0'"),'Weightage'=> new Expression("'0'")))
                    ->where(array("a.WorkGroupId=$resId"));
                $select->order('a.SortId ASC');

                $statement = $sql->getSqlStringForSqlObject($select);
                $anal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $data = array();
                $data['trans'] = $results;
                $data['anal'] = $anal;

                $response = $this->getResponse();
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function updatecopyanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $session_anal = new Container('anal');
                $session_anal->anal = $postParams['ids'];

                $response = $this->getResponse();
                $response->setContent(json_encode($session_anal->anal));
                return $response;
            }
        }
    }

    public function getcopyanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $session_anal = new Container('anal');
            $response = $this->getResponse();
            $response->setContent(json_encode($session_anal->anal));
            return $response;
        }
    }

    public function updatecopywganalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $session_wganal = new Container('wganal');
                $session_wganal->wganal = $postParams['ids'];
                $response = $this->getResponse();
                $response->setContent(json_encode($session_wganal->wganal));
                return $response;
            }
        }
    }

    public function getcopywganalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $session_wganal = new Container('wganal');
            $response = $this->getResponse();
            $response->setContent(json_encode($session_wganal->wganal));
            return $response;
        }
    }

    public function updatecopywtanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $session_wtanal = new Container('wtanal');
                $session_wtanal->wtanal = $postParams['ids'];

                $response = $this->getResponse();
                $response->setContent(json_encode($session_wtanal->wtanal));
                return $response;
            }
        }
    }

    public function getcopywtanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $session_wtanal = new Container('wtanal');
            $response = $this->getResponse();
            $response->setContent(json_encode($session_wtanal->wtanal));
            return $response;
        }
    }

    public function updatecopyresanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $session_resanal = new Container('resanal');
                $session_resanal->resanal = $postParams['ids'];

                $response = $this->getResponse();
                $response->setContent(json_encode($session_resanal->resanal));
                return $response;
            }
        }
    }

    public function getcopyresanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $session_resanal = new Container('resanal');
            $response = $this->getResponse();
            $response->setContent(json_encode($session_resanal->resanal));
            return $response;
        }
    }

    public function getresourcegrouplistAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $sql = new Sql($dbAdapter);
                $postParams = $request->getPost();
                $resid = $postParams['ids'];

                if (!empty($resid)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceGroup'))
                        ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_ResourceGroup'), 'a.ParentId=c.ResourceGroupId', array('ParentName' => 'ResourceGroupName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceGroupId', 'ResourceGroupName', 'TypeId', 'ParentId', 'Code'))
                        ->where("a.ResourceGroupId IN ($resid)");

                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                $response = $this->getResponse();
                $response->setContent(json_encode($rfctrans));
                return $response;
            }
        }
    }

    public function uploaddataAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $file_csv = "public/uploads/Project/tmp/" . md5(time()) . ".csv";
                $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                $data = array();
                $file = fopen($file_csv, "r");

                $icount = 0;
                $col_1 = "TypeName";

                while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                    if ($icount == 0) {
                        foreach ($xlData as $j => $value) {
                            if (trim($value) == "TypeName")
                                $col_1 = $j;
                            if (trim($value) == "ResourceGroup")
                                $col_2 = $j;
                            if (trim($value) == "Code")
                                $col_3 = $j;
                            if (trim($value) == "ResourceName")
                                $col_4 = $j;
                            if (trim($value) == "Unit")
                                $col_5 = $j;
                            if (trim($value) == "Rate")
                                $col_6 = $j;
                        }
                    } else {
                        $TypeId = $this->_getTypeid($xlData[0]);
                        $GroupId = $this->_getResGroupId($xlData[1]);
                        $UnitId = $this->_getUnitId($xlData[4]);

                        $data[] = array('TypeId' => $TypeId, 'GroupId' => $GroupId, 'Code' => $xlData[2], 'ResourceName' => $xlData[3], 'UnitId' => $UnitId, 'Rate' => $xlData[5]);
                    }
                    $icount = $icount + 1;
                }
                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function UploadIOWDataAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $file_csv = "public/uploads/Project/tmp/" . md5(time()) . ".csv";
                $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                $data = array();
                $file = fopen($file_csv, "r");

                $icount = 0;
                $iowid = 0;
                $bValid = true;

                while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                    if ($icount == 0) {
                        foreach ($xlData as $j => $value) {
                            if (strtolower(trim($value)) == "serialno")
                                $col_1 = $j;
                            if (strtolower(trim($value)) == "specification")
                                $col_2 = $j;
                            if (strtolower(trim($value)) == "unit")
                                $col_3 = $j;
                            if (strtolower(trim($value)) == "qty")
                                $col_4 = $j;
                            if (strtolower(trim($value)) == "rate")
                                $col_5 = $j;
                            if (strtolower(trim($value)) == "code")
                                $col_6 = $j;
                        }
                    } else {

                        if (!isset($col_1) || !isset($col_2) || !isset($col_3) || !isset($col_4) || !isset($col_5) || !isset($col_6)) {
                            $bValid = false;
                            break;
                        }

                        $sSlText = $xlData[$col_1];
                        if ($sSlText != "") {
                            $SlArray = explode('.', $sSlText);
                            $iWGId = 0;
                            $parent = "";
                            $parentspec = "";
                            $refslNo = "";
                            $slNo = "";
                            $parentId = 0;

                            if (count($SlArray) > 1) {
                                $iWGId = $SlArray[0];
                            }
                            for ($i = 0; $i < count($SlArray) - 1; $i++) {
                                $parent = $parent + $SlArray[$i] + ".";
                            }
                            if (count($SlArray) > 2) {
                                $refslNo = $SlArray[count($SlArray) - 1];
                            }
                            $parent = rtrim($parent, '.');
                            $slNo = $parent + "." + $refslNo;
                            $spec = $xlData[$col_2];

                            if ($parent != "") {
                                $parentId = $this->_getParentId($parent);
                            }
                            if ($parentId != 0) $parentspec = $this->_getParentSpec($parentId, 0);
                            else $parentspec = $this->_getParentSpec(0, $iWGId);

                            $iowid = $iowid + 1;
                            $rowtype = "I";
                            $UnitId = 0;
                            $iows = 0;
                            $iResid = 0;
                            $scode = "";
                            $UnitName = $xlData[$col_3];
                            if ($UnitName != "") {
                                $UnitId = $this->_getUnitId($xlData[$col_3]);
                            }

                            if ($UnitId != 0) {
                                $iows = 1;
                            }
                        } else {
                            $iWGId = 0;
                            $parentId = 0;
                            $parentspec = "";
                            $iResid = 0;
                            $scode = $xlData[$col_6];
                            $resname = $xlData[$col_2];

                            //$UnitName = $xlData[$col_3];
                            $UnitName = "";
                            if ($scode != "") {
                                $iResid = $this->_getResIdbyCode($scode);
                            }
                            if ($iResid == 0 && $resname != "") {
                                $iResid = $this->_getResIdbyName($resname);
                                $scode = $this->_getResCodebyId($iResid);
                            } else {
                                $resname = $this->_getResNamebyId($iResid);
                            }
                            if ($iResid != 0) $UnitName = $this->_getResUnitNamebyId($iResid);
                            $spec = $resname;
                            if ($iResid != 0) $parentspec = $this->_getResNameWithCode($iResid);

                            $rowtype = "R";

                            $iows = 0;
                        }
                        if (is_null($parentId)) {
                            $parentId = 0;
                        }

                        $qty = $xlData[$col_4];
                        $rate = $xlData[$col_5];

                        $data[] = array('Valid' => $bValid, 'IOWId' => $iowid, 'SerialNo' => $sSlText, 'RefSerialNo' => $refslNo, 'Code' => $scode, 'WGId' => $iWGId, 'ParentId' => $parentId, 'Specification' => $spec, 'UnitName' => $UnitName, 'IOWs' => $iows, 'UnitId' => $UnitId, 'Qty' => $qty, 'Rate' => $rate, 'ResourceId' => $iResid, 'RowType' => $rowtype, 'ParentSpec' => $parentspec);
                        //print_r($data);
                    }
                    $icount = $icount + 1;
                }

                if ($bValid == false) {
                    $data[] = array('Valid' => $bValid);
                }

                // delete csv file
                fclose($file);
                unlink($file_csv);

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function uploadresourcedataAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $file_csv = "public/uploads/project/tmp/" . md5(time()) . ".csv";
                $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                $data = array();
                $file = fopen($file_csv, "r");

                $icount = 0;
                $bValid = true;

                while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                    if ($icount == 0) {
                        foreach ($xlData as $j => $value) {
                            if (strtolower(trim($value)) == "resourcegroup") $col_1 = $j;
                            if (strtolower(trim($value)) == "resourcename") $col_2 = $j;
                            if (strtolower(trim($value)) == "unit") $col_3 = $j;
                            if (strtolower(trim($value)) == "rate") $col_4 = $j;
                            if (strtolower(trim($value)) == "workingunit") $col_5 = $j;
                            if (strtolower(trim($value)) == "workingrate") $col_6 = $j;
                        }
                    } else {
                        if (!isset($col_1) || !isset($col_2) || !isset($col_3) || !isset($col_4) || !isset($col_5) || !isset($col_6)) {
                            $bValid = false;
                            break;
                        }
                        $resgroupname = $xlData[$col_1];
                        $resname = $xlData[$col_2];
                        $unitname = $xlData[$col_3];
                        $rate = $xlData[$col_4];
                        $wunitname = $xlData[$col_5];
                        $wrate = $xlData[$col_6];
                        $UnitId = 0;
                        if ($unitname != "") $UnitId = $this->_getUnitId($unitname);
                        $WUnitId = 0;
                        if ($wunitname != "") $WUnitId = $this->_getUnitId($wunitname);
                        $GroupId = $this->_getResGroupId($resgroupname);
                        $TypeId = $this->_getTypeIdbyResGroupId($GroupId);
                        $typename = $this->_getTypeNamebyTypeId($TypeId);

                        $data[] = array('Valid' => $bValid, 'GroupName' => $resgroupname, 'ResName' => $resname, 'UnitName' => $unitname, 'Rate' => $rate, 'UnitId' => $UnitId, 'GroupId' => $GroupId, 'TypeName' => $typename, 'TypeId' => $TypeId, 'WUnitName' => $wunitname, 'WRate' => $wrate, 'WUnitId' => $WUnitId);
                    }
                    $icount = $icount + 1;
                }

                if ($bValid == false) {
                    $data[] = array('Valid' => $bValid);
                }

                // delete csv file
                fclose($file);
                unlink($file_csv);

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function uploadresgroupdataAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $file_csv = "public/uploads/project/tmp/" . md5(time()) . ".csv";
                $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                $data = array();
                $file = fopen($file_csv, "r");

                $icount = 0;
                $bValid = true;

                while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                    if ($icount == 0) {
                        foreach ($xlData as $j => $value) {
                            if (trim($value) == "Parent")
                                $col_1 = $j;
                            if (trim($value) == "Type")
                                $col_2 = $j;
                            if (trim($value) == "Code")
                                $col_3 = $j;
                            if (trim($value) == "ResourceGroup")
                                $col_4 = $j;
                        }
                    } else {

                        if (!isset($col_1) || !isset($col_2) || !isset($col_3) || !isset($col_4)) {
                            $bValid = false;
                            break;
                        }

                        $parentname = $xlData[$col_1];
                        $typename = $xlData[$col_2];
                        $TypeId = $this->_getTypeid($xlData[$col_2]);
                        $ParentId = $this->_getResGroupId($xlData[$col_1]);
                        $Code = $xlData[$col_3];
                        $GroupName = $xlData[$col_4];

                        $data[] = array('Valid' => $bValid, 'ParentName' => $parentname, 'TypeName' => $typename, 'TypeId' => $TypeId, 'ParentId' => $ParentId, 'Code' => $Code, 'ResGroupName' => $GroupName);
                    }
                    $icount = $icount + 1;
                }

                if ($bValid == false) {
                    $data[] = array('Valid' => $bValid);
                }

                // delete csv file
                fclose($file);
                unlink($file_csv);

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function uploadworkgroupdataAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $file_csv = "public/uploads/project/tmp/" . md5(time()) . ".csv";
                $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                $data = array();
                $file = fopen($file_csv, "r");

                $icount = 0;
                $bValid = true;

                while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                    if ($icount == 0) {
                        foreach ($xlData as $j => $value) {
                            if (trim($value) == "WorkType")
                                $col_1 = $j;
                            if (trim($value) == "WorkGroup")
                                $col_2 = $j;
                        }
                    } else {

                        if (!isset($col_1) || !isset($col_2)) {
                            $bValid = false;
                            break;
                        }

                        $TypeName = $xlData[$col_1];
                        $TypeId = $this->_getWorkTypeId($xlData[$col_1]);
                        $GroupName = $xlData[$col_2];
                        $data[] = array('Valid' => $bValid, 'TypeName' => $TypeName, 'TypeId' => $TypeId, 'WorkGroupName' => $GroupName);
                    }
                    $icount = $icount + 1;
                }

                if ($bValid == false) {
                    $data[] = array('Valid' => $bValid);
                }

                // delete csv file
                fclose($file);
                unlink($file_csv);

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    function _validateUploadFile($file)
    {
        $ext = pathinfo($file['file']['name'], PATHINFO_EXTENSION);
        $mime_types = array('application/octet-stream', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/plain', 'application/csv', 'text/comma-separated-values', 'application/excel');
        $exts = array('csv', 'xls', 'xlsx');

        if (!in_array($file['file']['type'], $mime_types) || !in_array($ext, $exts))
            return false;

        return true;
    }

    function  _getTypeId($TypeName)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_ResourceType')
            ->columns(array('TypeId'))
            ->where(array("TypeName='$TypeName'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $typeid = $row['TypeId'];

        return $typeid;
    }

    function  _getTypeNamebyTypeId($TypeId)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_ResourceType')
            ->columns(array('TypeName'))
            ->where(array("TypeId='$TypeId'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $typename = $row['TypeName'];

        return $typename;
    }

    function  _getTypeIdbyResGroupId($resgroupid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_ResourceGroup')
            ->columns(array('TypeId'))
            ->where(array("ResourceGroupId='$resgroupid'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $typeid = $row['TypeId'];

        return $typeid;
    }

    function  _getParentId($SlNo)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_IOWMaster')
            ->columns(array('IOWId'))
            ->where(array("SerialNo='$SlNo'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $parentid = $row['IOWId'];

        return $parentid;
    }

    function  _getParentSpec($IOWId, $WGId)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $parentSpec = "";

        if ($IOWId != 0) {
            $select->from('Proj_IOWMaster')
                ->columns(array('IOWId', 'SerialNo', 'Specification'))
                ->where(array("IOWId" => $IOWId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
            $row = $results->current();
            $parentSpec = $row['SerialNo'] . '   ' . $row['Specification'];
        } else {
            $select->from('Proj_WorkGroupMaster')
                ->columns(array('WorkGroupId', 'SerialNo', 'WorkGroupName'))
                ->where(array("WorkGroupId" => $WGId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
            $row = $results->current();
            $parentSpec = $row['SerialNo'] . '   ' . $row['WorkGroupName'];
        }

        return $parentSpec;
    }

    function _getResNameWithCode($resid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $resname = "";
        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from('Proj_Resource')
            ->columns(array('ResourceId', 'Code', 'ResourceName'))
            ->where(array("ResourceId" => $resid));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
        $row = $results->current();
        $resname = $row['Code'] . ' ' . $row['ResourceName'];
        return $resname;
    }

    function  _getResIdbyCode($code)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_Resource')
            ->columns(array('ResourceId'))
            ->where(array("Code='$code'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $resid = $row['ResourceId'];

        return $resid;
    }

    function  _getResCodebyId($resid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_Resource')
            ->columns(array('Code'))
            ->where(array("ResourceId='$resid'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $rescode = $row['Code'];

        return $rescode;
    }

    function  _getResNamebyId($resid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_Resource')
            ->columns(array('ResourceName'))
            ->where(array("ResourceId='$resid'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $resname = $row['ResourceName'];

        return $resname;
    }

    function _getResUnitNamebyId($resid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from(array('a' => 'Proj_Resource'))
            ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
            ->columns(array('ResourceId'), array('UnitName'))
            ->where("a.ResourceId='$resid'");
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
        $row = $results->current();
        $resunit = $row['UnitName'];
        return $resunit;
    }

    function _getResWBSIdbyName($name, $projectid=NULL) {
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $whereCond = "a.WBSName='$name'";
        if($projectid != NULL) {
            $whereCond .= ' AND a.ProjectId='.$projectid;
        }
        $select = $sql->select();
        $select->from(array('a' => 'Proj_WBSMaster'))
            ->columns(array('WBSId', 'WBS'=> new Expression("ParentText +'->'+WBSName")))
            ->where($whereCond);
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if($results != FALSE)
            return $results;
        else
            return array();
    }

    function  _getResIdbyName($name)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_Resource')
            ->columns(array('ResourceId'))
            ->where(array("ResourceName='$name'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $resid = $row['ResourceId'];

        return $resid;
    }

    function  _getWorkTypeId($TypeName)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_WorkTypeMaster')
            ->columns(array('WorkTypeId'))
            ->where(array("WorkType='$TypeName'"));
        $statement = $sql->getSqlStringForSqlObject($select);
        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $typeid = $row['WorkTypeId'];

        return $typeid;
    }


    function  _getResGroupId($GroupName)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_ResourceGroup')
            ->columns(array('ResourceGroupId'))
            ->where(array("ResourceGroupName='$GroupName'"));
        $statement = $sql->getSqlStringForSqlObject($select);

        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $Groupid = $row['ResourceGroupId'];

        return $Groupid;
    }

    function  _getUnitId($UnitName)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();

        $select->from('Proj_UOM')
            ->columns(array('UnitId'))
            ->where(array("UnitName='$UnitName'"));
        $statement = $sql->getSqlStringForSqlObject($select);

        $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

        $row = $results->current();
        $UnitId = $row['UnitId'];

        return $UnitId;
    }


    function _convertXLStoCSV($infile, $outfile) {
        $fileType = PHPExcel_IOFactory::identify($infile);
        $objReader = PHPExcel_IOFactory::createReader($fileType);

        $objReader->setReadDataOnly(true);
        $objPHPExcel = $objReader->load($infile);

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');
        $objWriter->save($outfile);

        return $objPHPExcel->getActiveSheet()->getTitle();
    }


    function _DeleteRFCRegister($rfcid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCType'))
            ->where(array("RFCRegisterId='$rfcid'"));

        $statement = $sql->getSqlStringForSqlObject($select);

        $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        $rfctype = $rfcregister['RFCType'];

        if ($rfctype == 'I') {

            $subQuery = $sql->select();
            $subQuery->from("Proj_RFCIOWTrans")
                ->columns(array("RFCTransId"));
            $subQuery->where(array('RFCRegisterId' => $rfcid));

            $delete = $sql->delete();
            $delete->from('Proj_RFCRateAnalysis')
                ->where->expression('RFCTransId IN ?', array($subQuery));
            $statement = $sql->getSqlStringForSqlObject($delete);
            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $delete = $sql->delete();
            $delete->from('Proj_RFCIOWTrans')
                ->where(array("RFCRegisterId" => $rfcid));
            $statement = $sql->getSqlStringForSqlObject($delete);
            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);


        } elseif ($rfctype == "R") {

            $subQuery = $sql->select();
            $subQuery->from("Proj_RFCResourceTrans")
                ->columns(array("RFCTransId"));
            $subQuery->where(array('RFCRegisterId' => $rfcid));

            $delete = $sql->delete();
            $delete->from('Proj_RFCActivityTrans')
                ->where->expression('RFCTransId IN ?', array($subQuery));
            $statement = $sql->getSqlStringForSqlObject($delete);
            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $delete = $sql->delete();
            $delete->from('Proj_RFCSteelTrans')
                ->where->expression('RFCTransId IN ?', array($subQuery));
            $statement = $sql->getSqlStringForSqlObject($delete);
            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $delete = $sql->delete();
            $delete->from('Proj_RFCResourceTrans')
                ->where(array("RFCRegisterId" => $rfcid));
            $statement = $sql->getSqlStringForSqlObject($delete);
            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
        }
    }

    function _UpdateMasterFromRFC($rfcid)
    {
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCType'))
            ->where(array("RFCRegisterId='$rfcid'"));

        $statement = $sql->getSqlStringForSqlObject($select);

        $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        $rfctype = $rfcregister['RFCType'];

        if ($rfctype == 'R') {
            $select = $sql->select();
            $select->from('Proj_RFCResourceTrans')
                ->columns(array('RFCTransId', 'Code', 'ResourceName', 'ResourceGroupId', 'TypeId', 'UnitId', 'LeadDays', 'AnalysisAQty', 'AnalysisMQty'))
                ->where(array("RFCRegisterId='$rfcid'"));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            foreach ($rfctrans as $trans) {
                $rfctransid = $trans['RFCTransId'];

                $insert = $sql->insert();
                $insert->into('Proj_Resource');
                $insert->Values(array('Code' => $trans['Code'], 'ResourceName' => $trans['ResourceName'], 'ResourceGroupId' => $trans['ResourceGroupId'], 'TypeId' => $trans['TypeId'], 'UnitId' => $trans['UnitId'], 'LeadDays' => $trans['LeadDays'], 'AnalysisAQty' => $trans['AnalysisAQty'], 'AnalysisMQty' => $trans['AnalysisMQty']));
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                $resid = $dbAdapter->getDriver()->getLastGeneratedValue();

                $update = $sql->update();
                $update->table('Proj_RFCResourceTrans');
                $update->set(array(
                    'ResourceId' => $resid,
                ));
                $update->where(array('RFCTransId' => $rfctransid));
                $statement = $sql->getSqlStringForSqlObject($update);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                $select = $sql->select();
                $select->from('Proj_RFCActivityTrans')
                    ->columns(array('ActivityType', 'ResourceId', 'Qty', 'Rate', 'Amount'))
                    ->where(array("RFCTransId='$rfctransid'"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                foreach ($rfcactivity as $atrans) {
                    $insert = $sql->insert();
                    $insert->into('Proj_ResourceActivityTrans');
                    $insert->Values(array('MResourceId' => $resid, 'ActivityType' => $atrans['ActivityType'], 'ResourceId' => $atrans['ResourceId'], 'Qty' => $atrans['Qty'], 'Rate' => $atrans['Rate'], 'Amount' => $atrans['Amount']));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                }

                $select = $sql->select();
                $select->from('Proj_RFCSteelTrans')
                    ->columns(array('SteelDescription', 'SteelDia', 'Factor', 'Wastage'))
                    ->where(array("RFCTransId='$rfctransid'"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcsteel = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                foreach ($rfcsteel as $strans) {
                    $insert = $sql->insert();
                    $insert->into('Proj_ResourceSteelTrans');
                    $insert->Values(array('ResourceId' => $resid, 'SteelDescription' => $strans['SteelDescription'], 'SteelDia' => $strans['SteelDia'], 'Factor' => $strans['Factor'], 'Wastage' => $strans['Wastage'], 'RFCTransId' => $rfctransid));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                }
            }
        } elseif ($rfctype == "I") {
            $select = $sql->select();
            $select->from('Proj_RFCIOWTrans')
                ->columns(array('RFCTransId', 'WorkGroupId', 'ParentId', 'SerialNo', 'Specification', 'IOWs', 'UnitId', 'Rate'))
                ->where(array("RFCRegisterId='$rfcid'"));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            foreach ($rfctrans as $trans) {
                $rfctransid = $trans['RFCTransId'];
                $insert = $sql->insert();
                $insert->into('Proj_IOWMaster');
                $insert->Values(array('WorkGroupId' => $trans['WorkGroupId'], 'ParentId' => $trans['ParentId'], 'SerialNo' => $trans['SerialNo'], 'Specification' => $trans['Specification'], 'IOWs' => $trans['IOWs'], 'UnitId' => $trans['UnitId'], 'Rate' => $trans['Rate']));
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                $iowid = $dbAdapter->getDriver()->getLastGeneratedValue();

                $update = $sql->update();
                $update->table('Proj_RFCIOWTrans');
                $update->set(array(
                    'IOWId' => $iowid,
                ));
                $update->where(array('RFCTransId' => $rfctransid));
                $statement = $sql->getSqlStringForSqlObject($update);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                $select = $sql->select();
                $select->from('Proj_RFCRateAnalysis')
                    ->columns(array('IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'Rate', 'Amount', 'Formula'))
                    ->where(array("RFCTransId='$rfctransid'"));

                $select->order('SortId ASC');

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                foreach ($rfcanal as $atrans) {
                    $insert = $sql->insert();
                    $insert->into('Proj_IOWRateAnalysis');
                    $insert->Values(array('IOWId' => $iowid, 'IncludeFlag' => $atrans['IncludeFlag'], 'ReferenceId' => $atrans['ReferenceId'], 'ResourceId' => $atrans['ResourceId'], 'Qty' => $atrans['Qty'], 'Rate' => $atrans['Rate'], 'Amount' => $atrans['Amount'], 'Formula' => $atrans['Formula']));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                }
            }
        }
    }

    public function getworkgroupanalysisAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $WGId = $postParams['resId'];
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkGroupAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code'), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId', 'IncludeFlag', 'ReferenceId', 'ResourceId', 'Qty', 'CFormula', 'Type'), array('Code'))
                    ->where(array("a.WorkGroupId=$WGId"));

                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                $response = $this->getResponse();
                $response->setContent(json_encode($results->toArray()));
                return $response;
            }
        }
    }

//    function _rateAnalysisUpdateFromLibrary($argProjectId,$argRevisionType,$argProjectIOWId)
//    {
//
//        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
//        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
//        $sql = new Sql($dbAdapter);
//
//        $connection = $dbAdapter->getDriver()->getConnection();
//        $connection->beginTransaction();
//        try {
//
//            //Select IncludeFlag,ReferenceId,ResourceId,Description,Qty,Rate,Amount,Formula,MixType from Proj_IOWRateAnalysis
//
//                $select = $sql->select();
//                $select->from('Proj_IOWRateAnalysis')
//                    ->columns(array('RFCType', 'ProjectId', 'ProjectType'))
//                    ->where(array("RFCRegisterId='$rfcid'"));
//
//
//                $select->from(array('a' => 'Proj_IOWRateAnalysis'))
//                    ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId=b.ProjectIOWId', array(), $select:: JOIN_INNER)
//                    ->join(array('c' => 'Proj_ProjectIOWPlan'), 'a.TypeId=b.TypeId', array(), $select:: JOIN_INNER)
//                    ->columns(array('a.ProjectId', 'a.ProjectIOWId', 'a.ResourceId', 'a.IncludeFlag', 'a.Rate', 'Qty' => new Expression("(A.Qty/B.WorkingQty)*C.Qty"), 'Amount' => new Expression("((A.Qty/B.WorkingQty)*C.Qty)*A.Rate")))
//                    ->where(array("a.ProjectIOWId=$iProjIOWId"));
//
//
//                $statement = $sql->getSqlStringForSqlObject($select);
//                $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//
//                $connection->commit();
//            } catch (PDOException $e) {
//                $connection->rollback();
//                print "Error!: " . $e->getMessage() . "</br>";
//            }
//    }

    function _rateAnalysisUpdateToProject()
    {

    }

    function _UnapproveFromRFC($rfcid){
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCType'))
            ->where(array("RFCRegisterId='$rfcid'"));

        $statement = $sql->getSqlStringForSqlObject($select);

        $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        $rfctype = $rfcregister['RFCType'];

        if ($rfctype == 'R') {
            $select = $sql->select();
            $select->from('Proj_RFCResourceTrans')
                ->columns(array('ResourceId'))
                ->where(array("RFCRegisterId='$rfcid'"));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            foreach ($rfctrans as $trans) {
                $resid = $trans['ResourceId'];

                $sql = new Sql($dbAdapter);
                $update = $sql->update();
                $update->table('Proj_Resource');
                $update->set(array(
                    'DeleteFlag' => 1,
                ));
                $update->where(array('ResourceId' => $resid));
                $statement = $sql->getSqlStringForSqlObject($update);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
            }
        } elseif ($rfctype == "I") {
            $select = $sql->select();
            $select->from('Proj_RFCIOWTrans')
                ->columns(array('IOWId'))
                ->where(array("RFCRegisterId='$rfcid'"));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            foreach ($rfctrans as $trans) {
                $iowid = $trans['IOWId'];

                $insert = $sql->insert();
                $insert->into('Proj_IOWMaster');
                $insert->Values(array('WorkGroupId' => $trans['WorkGroupId'], 'ParentId' => $trans['ParentId'], 'SerialNo' => $trans['SerialNo'], 'Specification' => $trans['Specification'], 'IOWs' => $trans['IOWs'], 'UnitId' => $trans['UnitId'], 'Rate' => $trans['Rate']));
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                $iowid = $dbAdapter->getDriver()->getLastGeneratedValue();

                $update = $sql->update();
                $update->table('Proj_IOWMaster');
                $update->set(array(
                    'DeleteFlag' => 1,
                ));
                $update->where(array('IOWId' => $iowid));
                $statement = $sql->getSqlStringForSqlObject($update);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
            }
        }
    }

    public function rfcWhatAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC What");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        // get project list
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'))
            ->where('DeleteFlag=0');
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        return $this->_view;
    }

    public function photoprogressAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();
            $files = $request->getFiles();

            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $iProjectId = $this->bsf->isNullCheck( $postData[ 'project_id' ], 'number' );
            $dDate = date('Y-m-d', strtotime( $postData[ 'date' ]));

            $TransId =0;
            $select = $sql->select();
            $select->from('Proj_PhotoProgress')
                ->columns(array('TransId'))
                ->where(array('ProjectId'=>$iProjectId,'Date'=>$dDate));
            $statement = $sql->getSqlStringForSqlObject($select);
            $reg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            if (!empty($reg)) $TransId = $reg['TransId'];

            if ($TransId ==0) {
                $insert = $sql->insert();
                $insert->into('Proj_PhotoProgress');
                $insert->Values(array('ProjectId' =>$iProjectId, 'Date' =>$dDate));
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                $TransId = $dbAdapter->getDriver()->getLastGeneratedValue();
            }

            // save photos & video
            foreach ( $files[ 'attachedfiles' ] as $file ) {
                if ( !$file[ 'name' ] )
                    continue;

                $dir = 'public/uploads/project/photoprogress/' . $TransId . '/';
                $filename = $this->bsf->uploadFile( $dir, $file );

                // update valid files only
                if ( !$filename )
                    continue;

                $url = '/uploads/project/photoprogress/' . $TransId . '/' . $filename;

                $imgExts = array( 'jpeg', 'jpg', 'png' );
                $videoExts = array( 'mp4' );
                $ext = pathinfo( $file[ 'name' ], PATHINFO_EXTENSION );
                if ( in_array( $ext, $imgExts ) )
                    $type = 'image';
                else if ( in_array( $ext, $videoExts ) )
                    $type = 'video';

                $insert = $sql->insert();
                $insert->into( 'Proj_PhotoProgressFiles' );
                $insert->Values( array( 'PhotoProgressTransId' => $TransId, 'URL' => $url, 'FileType' => $type ) );
                $statement = $sql->getSqlStringForSqlObject( $insert );
                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
            }

            $connection->commit();
            $this->redirect()->toRoute("project/default", array("controller" => "main","action" => "photo-progress"));
        }
    }
    public function rfcregisterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Register");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        $sql = new Sql($dbAdapter);
        $select = $sql->select();
        $select->from(array('a' => 'Proj_RFCRegister'))
            ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array(), $select::JOIN_LEFT)
            ->columns(array('RFCRegisterId', 'RefNo', 'RefDate', 'RFCType', 'RFCFrom' => new Expression("Case When a.ProjectId=0 then a.RFCFrom else b.ProjectName end"), 'Type', 'Approve'=>new Expression("Case When Approve='Y' then 'Yes' When Approve='P' then 'Partial' else 'No' End")))
            ->where(array('a.DeleteFlag' => 0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select1 = $sql->select();
        $select1->from(array('a' => 'Proj_RFCRegister'))
            ->columns(array('RFCType','RFCCount' => new Expression("Count(RFCType)"),
                'ApproveCount' => new Expression( "CAST(0 As Decimal(18,2))")))
            ->where(array('DeleteFlag' => 0))
            ->group('RFCType');

        $select2 = $sql->select();
        $select2->from(array('a' => 'Proj_RFCRegister'))
            ->columns(array('RFCType','RFCCount'=> new Expression( "CAST(0 As Decimal(18,2))"),'ApproveCount'=> new Expression( "Count(RFCType)")))
            ->where(array('DeleteFlag' => 0))
            ->group('RFCType');
        $select2->combine( $select1, 'Union ALL' );

        $select3 = $sql->select();
        $select3->from( array( "g" => $select2 ))
            ->columns(array('RFCType'=> new Expression("g.RFCType"),'RFCCount'=> new Expression("sum(g.RFCCount)"),'ApproveCount'=> new Expression("sum(g.ApproveCount)")));
        $select3->group(array('g.RFCType'));
        $statement = $sql->getSqlStringForSqlObject($select3);
        $this->_view->rfcregisterrfctypecount = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")))
            ->where(array('DeleteFlag' => 0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->rfctotal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")))
            ->where(array('DeleteFlag' => 0,'Approve' => 'P'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->rfcprogress = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")))
            ->where(array('DeleteFlag' => 0,'Approve' => 'Y'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->rfcapprove = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('RFCCount' =>new Expression("Count(RFCFrom)")))
            ->where(array('DeleteFlag' => 0,'Approve' => 'N'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->rfcpending = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'))
            ->where('DeleteFlag=0');
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $dMaxdate = date('Y-m-d');
        $dMindate = date('Y-m-d');

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('MaxDate'=>new Expression("Max(RefDate)")))
            ->where('DeleteFlag=0');
        $statement = $sql->getSqlStringForSqlObject($select);
        $mdate = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if (!empty($mdate)) $dMaxdate = $mdate['MaxDate'];

        $select = $sql->select();
        $select->from('Proj_RFCRegister')
            ->columns(array('MinDate'=>new Expression("Min(RefDate)")))
            ->where('DeleteFlag=0');
        $statement = $sql->getSqlStringForSqlObject($select);
        $mdate = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if (!empty($mdate)) $dMindate = $mdate['MinDate'];

        $this->_view->minDate = $dMindate;
        $this->_view->maxDate = $dMaxdate;

//        $totrfc=0;
//        $apprfc=0;
//        $unapprfc=0;
//
//        $select = $sql->select();
//        $select->from('Proj_RFCRegister')
//               ->columns(array('RFCFromCount' =>new Expression("Count(RFCRegisterId)")))
//               ->where(array('DeleteFlag' => 0));
//        echo $statement = $sql->getSqlStringForSqlObject($select);
//        $totalcur = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//        if (!$totalcur) {
//            $totrfc = $totalcur['RFCFromCount'];
//        }
//
//        $select = $sql->select();
//        $select->from('Proj_RFCRegister')
//            ->columns(array('RFCFromCount' =>new Expression("Count(RFCRegisterId)")))
//            ->where(array('DeleteFlag' => 0,'Approve'=>'Y'));
//        echo $statement = $sql->getSqlStringForSqlObject($select);
//        $totalcur = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//        if (!$totalcur) {
//            $apprfc = $totalcur['RFCFromCount'];
//        }
//        Select Count(RFCRegisterId) from
//Proj_RFCRegister


        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function rfcprojectiowAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" RFC Project IOW");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
        $smode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'), 'string');
        $editid = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');

        $iProjectId =0;
        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $identity = 0;
            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'],'number');
            try {
                if (!is_null($postData['frm_what'])) {
                    // get project list

                    $iProjectId =$this->bsf->isNullCheck($postData['project_id'], 'number');
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName','KickoffId','WORegisterId'))
                        ->where(array('ProjectId' => $iProjectId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $this->_view->projectinfo = $projinfo;
                    $ikickoffid = 0;
                    $iworegid=0;
                    if (!empty($projinfo)) {
                        $ikickoffid = $projinfo['KickoffId'];
                        $iworegid = $projinfo['WORegisterId'];
                    }

                    if ($ikickoffid !=0 && $iworegid==0) {
                        $subQuery = $sql->select();
                        $subQuery->from("Proj_ProjectWorkGroup")
                            ->columns(array("WorkGroupId"));
                        $subQuery->where(array('ProjectId' => $iProjectId));

                        $select = $sql->select();
                        $select->from('Proj_WorkGroupMaster')
                            ->columns(array('ProjectId'=> new Expression("'$iProjectId'"),'SerialNo','WorkGroupName','WorkGroupId','WorkTypeId','AutoRateAnalysis'))
                            ->where->expression('DeleteFlag=0 and WorkGroupId Not IN ?', array($subQuery));

                        $insert = $sql->insert();
                        $insert->into('Proj_ProjectWorkGroup');
                        $insert->columns(array('ProjectId','SerialNo','WorkGroupName','WorkGroupId','WorkTypeId','AutoRateAnalysis'));
                        $insert->Values($select);
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $connection->commit();
                    }


                    $this->_view->frmwhat = $postData['frm_what'];
                    $this->_view->projecttype = $postData['type_name'];
                    $this->_view->revrequired= $postData['revrequired'];
                    if ($postData['type_name'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($postData['type_name'] == 'P')
                        $this->_view->projecttypename = 'Plan';

                } elseif ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $sRefNo='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType','RefNo'))
                        ->where(array("RFCRegisterId" => $rfcid));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) {
                        $rfctype = $this->bsf->isNullCheck($rfcreg['RFCType'], 'string');
                        $sRefNo = $this->bsf->isNullCheck($rfcreg['RefNo'], 'string');
                    }

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $this->bsf->isNullCheck($postData['refno'],'string'),
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['Narration'],'string'),
                        'RevRequired'=>$irevrequired
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCWorkGroupTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCProjectResourceRate')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCResourceTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCActivityTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $subQuery = $sql->select();
                    $subQuery->from("Proj_RFCIOWTrans")
                        ->columns(array("RFCTransId"));
                    $subQuery->where(array('RFCRegisterId' => $identity));

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWRate')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCRateAnalysis')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWQualTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWWBSTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $irateresRowId = $this->bsf->isNullCheck($postData['rateresrowid'],'number');
                    for ($i = 1; $i <= $irateresRowId; $i++) {
                        $iResId = $this->bsf->isNullCheck($postData['rateresid_' . $i],'number');
                        if (substr($iResId, 0, 2) == '0.') $iResId= 0;
                        $sResRatetype = $this->bsf->isNullCheck($postData['raterestype_' . $i],'string');
                        $dRate = floatval($this->bsf->isNullCheck($postData['rateresrate_' . $i],'number'));
                        $dOldRate = floatval($this->bsf->isNullCheck($postData['raterescurprate_' . $i],'number'));

                        if (($dRate != $dOldRate) && $iResId !=0)
                        {
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCProjectResourceRate');
                            $insert->Values(array('RFCRegisterId' => $identity, 'ResourceId' => $iResId, 'Rate' => $dRate,'RateType'=>$sResRatetype));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $array = json_decode($postData['activityresourcedata'], true );
                    foreach($array as $item) {
                        $mresid = $item['activityid'];
                        $atype = $item['activitytype'];
                        $resid = $item['resourceid'];
                        $resname = $item['resourcename'];
                        $qty = $item['qty'];
                        $rate = $item['rate'];
                        $amount = $item['amount'];

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCActivityTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'MResourceId'=>$mresid,'ActivityType'=>$atype,'ResourceId' => $resid,'Qty'=>$qty, 'Rate' => $rate,'Amount'=>$amount));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }


                    $iRowId = $this->bsf->isNullCheck($postData['rowid'],'number');
                    for ($i = 1; $i <= $iRowId; $i++) {

                        $wgroupid=$this->bsf->isNullCheck($postData['workgroupid_' . $i],'number');
                        if (strpos($wgroupid, '0.') !== false) $wgroupid =0;
//                        $parentid =  $this->bsf->isNullCheck($postData['parentkeyid_' . $i],'number');
                        $libiowid =  $this->bsf->isNullCheck($postData['libiowkeyid_' . $i],'number');
                        $iHeader = $this->bsf->isNullCheck($postData['raheaderval_' . $i],'number');
                        $sparentName = $this->bsf->isNullCheck($postData['newparentname_' . $i], 'string');
                        $ipiowid = $this->bsf->isNullCheck($postData['piowid_' . $i], 'number');
                        $iprojectiowid=$this->bsf->isNullCheck($postData['projectiowid_' . $i], 'number');


//                        if (substr($parentid, 0, 2) == '0.') {
//                            $parentid = 0;
//                        }

                        $pWorkGroupId = $this->bsf->isNullCheck($postData['pworkgroupid_'. $i],'string');
                        if (strpos($pWorkGroupId, '0.') !== false) $pWorkGroupId  =0;

                        $sSpec = $this->bsf->isNullCheck($postData['spec_' . $i], 'string');
                        if ($sSpec =="") continue;
//                        $myArray = explode('.', $postData['parentid_' . $i]);
//                        if (count($myArray) >1) {$wgroupid=$myArray[0];$parentid=intval($myArray[1]); }
//                        else{ $wgroupid=$myArray[0];$parentid=0;}

                        $dWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                        if ($dWorkingQty ==0) $dWorkingQty=1;
                        $dRWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                        if ($dRWorkingQty ==0) $dRWorkingQty=1;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ParentId'=>$ipiowid, 'WorkGroupId' => $wgroupid, 'IOWId' => $libiowid, 'RefSerialNo' => $this->bsf->isNullCheck($postData['refserialno_' . $i], 'string'),'Header'=>$iHeader
                        , 'SerialNo' => $this->bsf->isNullCheck($postData['serialno_' . $i], 'string'), 'Specification' => $sSpec
                        , 'UnitId' => $this->bsf->isNullCheck($postData['unitkeyid_' . $i], 'number'), 'ShortSpec'=>$this->bsf->isNullCheck($postData['shortspec_' . $i],'string')
                        , 'ParentText'=>$this->bsf->isNullCheck($postData['parentid_' . $i],'string'),'Rate' => $this->bsf->isNullCheck($postData['rate_' . $i], 'number')
                        , 'Amount' => $this->bsf->isNullCheck($postData['amt_' . $i], 'number'), 'Qty' => $this->bsf->isNullCheck($postData['qty_' . $i], 'number')
                        , 'WorkingQty' => $dWorkingQty, 'RWorkingQty' => $dRWorkingQty
                        , 'CementRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number'), 'SandRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number')
                        , 'MetalRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number'), 'ThickQty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number')
                        , 'PWorkGroupId' => $pWorkGroupId,'WorkTypeId'=>$this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number'), 'PWorkGroupName' => $this->bsf->isNullCheck($postData['pworkgroupname_'. $i],'string'), 'SiteMixRatio' => $this->bsf->isNullCheck($postData['sitemixper_'. $i],'number')
                        , 'ProjectIOWId'=>$iprojectiowid,'ReadyMixRatio' => $this->bsf->isNullCheck($postData['readymixper_'. $i],'number'),'ParentName'=>$sparentName));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $dWasteAmt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totwastage'], 'number');
                        $dBaseRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totbaserate'], 'number');
                        $dQualValue= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totqualrate'], 'number');
                        $dTotRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totrate'], 'number');
                        $dNetRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totnetrate'], 'number');

                        $dRWasteAmt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totwastage'], 'number');
                        $dRBaseRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totbaserate'], 'number');
                        $dRQualValue= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totqualrate'], 'number');
                        $dRTotRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totrate'], 'number');
                        $dRNetRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totnetrate'], 'number');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWRate');
                        $insert->Values(array('RFCTransId' => $itransid, 'WastageAmt' => $dWasteAmt, 'BaseRate' => $dBaseRate, 'QualifierValue' => $dQualValue,
                            'TotalRate' => $dTotRate, 'NetRate' => $dNetRate, 'RWastageAmt' => $dRWasteAmt, 'RBaseRate' => $dRBaseRate, 'RQualifierValue' => $dRQualValue,
                            'RTotalRate' => $dRTotRate, 'RNetRate' => $dRNetRate));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dwbsqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_qty_' . $n],'number'));

                            // measurement sheet
                            $measurement = $this->bsf->isNullCheck( $postData[ 'wbstable_' . $i .'_Measurement_' . $n ], 'string' );
                            $cellname = $this->bsf->isNullCheck( $postData[ 'wbstable_' . $i .'_CellName_' . $n ], 'string' );
                            $SelectedColumns = $this->bsf->isNullCheck( $postData[ 'wbstable_' . $i .'_SelectedColumns_' . $n ], 'string' );

                            if ($dwbsqty !=0 && $iwbsId !=0) {
                                $values = array('RFCTransId' => $itransid, 'WBSId' => $iwbsId, 'Qty' => $dwbsqty);
                                if($measurement != '') {
                                    $values['Measurement'] = $measurement;
                                    $values['CellName'] = $cellname;
                                    $values['SelectedColumns'] = $SelectedColumns;
                                }

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCIOWWBSTrans');
                                $insert->Values($values);
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoid_' . $i],'number');
                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_reskeyid_' . $j], 'string');
                            if (substr($iresid, 0, 2) == '0.') $iresid= 0;
                            $iiowid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_iowkeyid_' . $j],'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j],'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resdes_' . $j],'string');
                            $irefid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_refid_' . $j],'number');
                            $isortid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_rowrefid_' . $j],'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j],'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_ratetype_' . $j],'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_newresname_' . $j], 'string');

                            if ($stype=="") { continue;}
                            if ($sratetype =="") $sratetype="L";

                            if ($stype=="I" &&  $iiowid ==0) { continue;}
                            else if ($stype=="R" &&  ($iresid == 0 && $sresName =="")) { continue;}
                            else if ($stype=="H" &&  $sdes =="") { continue;}

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype=="I") {
                                $check_value = isset($postData['rateanal_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid, 'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resamt_' . $j], 'number'),
                                    'Formula' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'S','TransType' => $stranstype,'SortId' =>$isortid,'RateType'=>$sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $check_value = 1;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'Description' => $sdes , 'MixType' => 'S','TransType' => $stranstype,'SortId' =>$isortid));
                            }
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $iactRowidR = $this->bsf->isNullCheck($postData['rowinfoidR_' . $i],'number');
                        for ($j = 1; $j <= $iactRowidR; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_reskeyid_' . $j],'string');
                            if (substr($iresid, 0, 2) == '0.') {
                                $iresid= 0;
                            }
                            $iiowid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_iowkeyid_' . $j],'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j],'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resdes_' . $j],'string');
                            $irefid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_refid_' . $j],'number');
                            $isortid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_rowrefid_' . $j],'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j],'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_ratetype_' . $j],'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_newresname_' . $j], 'string');

                            if ($stype=="") { continue;}
                            if ($sratetype =="") $sratetype="L";

                            if ($stype=="I" &&  $iiowid ==0) { continue;}
                            else if ($stype=="R" &&  ($iresid == 0 && $sresName =="")) { continue;}
                            else if ($stype=="H" &&  $sdes =="") { continue;}

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype=="I") {
                                $check_value = isset($postData['rateanalR_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid, 'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resamt_' . $j], 'number'), 'Formula' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'R','TransType' => $stranstype,'SortId' =>$isortid,'RateType'=>$sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $check_value = 1;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'Description' => $sdes , 'MixType' => 'R','TransType' => $stranstype,'SortId' =>$isortid));
                            }
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['Qual_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Sign_' . $k], 'string');


                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'S'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['QualR_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['QualR_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Sign_' . $k], 'string');

                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');

                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess,'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'R'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $iwgrowid = $this->bsf->isNullCheck($postData['newwgowid'],'number');
                    for ($j = 1; $j <= $iwgrowid; $j++) {
                        $sWgslNo = $this->bsf->isNullCheck($postData['newwgslno_' . $j],'string');
                        $sWgName = $this->bsf->isNullCheck($postData['newwgname_' . $j],'string');
                        $ilWgid = $this->bsf->isNullCheck($postData['newlwgid_' . $j],'number');
                        $iWgtypeid = $this->bsf->isNullCheck($postData['newwgtypeid_' . $j],'number');

                        if ($sWgName =="" || $iWgtypeid ==0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'SerialNo' =>$sWgslNo, 'WorkGroupId' => $ilWgid, 'WorkGroupName' => $sWgName,'WorkTypeId'=>$iWgtypeid));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'],'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {
                        $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                        $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                        $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                        $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                        $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                        $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                        if ($sresName == "" || $iresgroupid == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'Code'=>$srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                            'UnitId' => $iunitid,'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate,'Rate'=>$drate,'WorkRate'=>$dwrate,'LeadDays'=>$ilead,'MaterialType'=>$smattype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {

                    $mode = $postData['rfcmode'];
                    if ($mode=='edit') {$rfctype='ProjectIOW-Edit';}
                    else {$rfctype='ProjectIOW-Add';}

                    $aVNo = CommonHelper::getVoucherNo(101,date('Y-m-d', strtotime($postData['refdate'])) ,0,0, $dbAdapter,"I");
                    if ($aVNo["genType"] ==true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'],'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'Item of Work', 'ProjectId' => $postData['project_id'], 'ProjectType' => $postData['project_type'],'Narration' => $this->bsf->isNullCheck($postData['Narration'],'string'),'RevRequired'=>$irevrequired));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $irateresRowId = $this->bsf->isNullCheck($postData['rateresrowid'],'number');
                    for ($i = 1; $i <= $irateresRowId; $i++) {
                        $iResId = $this->bsf->isNullCheck($postData['rateresid_' . $i],'string');
                        if (substr($iResId, 0, 2) == '0.') $iResId= 0;
                        $sResRatetype = $this->bsf->isNullCheck($postData['raterestype_' . $i],'string');
                        $dRate = floatval($this->bsf->isNullCheck($postData['rateresrate_' . $i],'number'));
                        $dOldRate = floatval($this->bsf->isNullCheck($postData['raterescurprate_' . $i],'number'));
                        if (($dRate != $dOldRate) && $iResId !=0)
                        {
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCProjectResourceRate');
                            $insert->Values(array('RFCRegisterId' => $identity, 'ResourceId' => $iResId, 'Rate' => $dRate,'RateType'=>$sResRatetype));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $array = json_decode($postData['activityresourcedata'], true );
                    foreach($array as $item) {
                        $mresid = $item['activityid'];
                        $atype = $item['activitytype'];
                        $resid = $item['resourceid'];
                        $resname = $item['resourcename'];
                        $qty = $item['qty'];
                        $rate = $item['rate'];
                        $amount = $item['amount'];

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCActivityTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'MResourceId'=>$mresid,'ActivityType'=>$atype,'ResourceId' => $resid,'Qty'=>$qty, 'Rate' => $rate,'Amount'=>$amount));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'],'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $wgroupid=$this->bsf->isNullCheck($postData['workgroupid_' . $i],'string');
                        if (strpos($wgroupid, '0.') !== false) $wgroupid =0;
//                      $myArray = explode('.', $postData['parentkeyid_' . $i]);
//                        $parentid =  $this->bsf->isNullCheck($postData['parentkeyid_' . $i],'number');
                        $libiowid =  $this->bsf->isNullCheck($postData['libiowkeyid_' . $i],'number');
                        $sparentName = $this->bsf->isNullCheck($postData['newparentname_' . $i], 'string');
                        $ipiowid = $this->bsf->isNullCheck($postData['piowid_' . $i], 'number');

//                        if (substr($parentid, 0, 2) == '0.') {
//                            $parentid = 0;
//                        }


                        $iHeader = $this->bsf->isNullCheck($postData['raheaderval_' . $i],'number');
//                        if (count($myArray) >1) {$wgroupid=$myArray[0];$parentid=intval($myArray[1]); }
//                        else{ $wgroupid=$myArray[0];$parentid=0;}

//                        if ($wgroupid !=0) {
                        $pWorkGroupId = $this->bsf->isNullCheck($postData['pworkgroupid_'. $i],'string');
                        if (strpos($pWorkGroupId, '0.') !== false) $pWorkGroupId  =0;

                        $sSpec = $this->bsf->isNullCheck($postData['spec_' . $i], 'string');
                        if ($sSpec =="") continue;

                        $dWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanal_' . $i . '_AnalQty'], 'number'));
                        if ($dWorkingQty ==0) $dWorkingQty=1;
                        $dRWorkingQty = floatval($this->bsf->isNullCheck($postData['rateanalR_' . $i . '_AnalQty'], 'number'));
                        if ($dRWorkingQty ==0) $dRWorkingQty=1;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ParentId'=>$ipiowid,'WorkGroupId' => $wgroupid, 'IOWId' => $libiowid, 'RefSerialNo' => $this->bsf->isNullCheck($postData['refserialno_' . $i], 'string'),'Header'=>$iHeader
                        , 'SerialNo' => $this->bsf->isNullCheck($postData['serialno_' . $i], 'string'), 'Specification' => $sSpec
                        , 'UnitId' => $this->bsf->isNullCheck($postData['unitkeyid_' . $i], 'number'), 'ShortSpec'=>$this->bsf->isNullCheck($postData['shortspec_' . $i],'string')
                        , 'ParentText'=>$this->bsf->isNullCheck($postData['parentid_' . $i],'string'),'Rate' => $this->bsf->isNullCheck($postData['rate_' . $i], 'number')
                        , 'Amount' => $this->bsf->isNullCheck($postData['amt_' . $i], 'number'), 'Qty' => $this->bsf->isNullCheck($postData['qty_' . $i], 'number')
                        , 'WorkingQty' => $dWorkingQty, 'RWorkingQty' => $dRWorkingQty
                        , 'CementRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_AQty'], 'number'), 'SandRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_BQty'], 'number')
                        , 'MetalRatio' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_CQty'], 'number'), 'ThickQty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_thick'], 'number')
                        , 'PWorkGroupId' => $pWorkGroupId, 'PWorkGroupName' => $this->bsf->isNullCheck($postData['pworkgroupname_'. $i],'string'),'WorkTypeId'=>$this->bsf->isNullCheck($postData['worktypeid_' . $i], 'number'), 'SiteMixRatio' => $this->bsf->isNullCheck($postData['sitemixper_'. $i],'number')
                        , 'ProjectIOWId'=>$editid,'ReadyMixRatio' => $this->bsf->isNullCheck($postData['readymixper_'. $i],'number'),'ParentName'=>$sparentName));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $dWasteAmt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totwastage'], 'number');
                        $dBaseRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totbaserate'], 'number');
                        $dQualValue= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totqualrate'], 'number');
                        $dTotRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totrate'], 'number');
                        $dNetRate= $this->bsf->isNullCheck($postData['rateanal_' . $i . '_totnetrate'], 'number');

                        $dRWasteAmt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totwastage'], 'number');
                        $dRBaseRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totbaserate'], 'number');
                        $dRQualValue= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totqualrate'], 'number');
                        $dRTotRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totrate'], 'number');
                        $dRNetRate= $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_totnetrate'], 'number');

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWRate');
                        $insert->Values(array('RFCTransId' => $itransid, 'WastageAmt' => $dWasteAmt, 'BaseRate' => $dBaseRate, 'QualifierValue' => $dQualValue,
                            'TotalRate' => $dTotRate, 'NetRate' => $dNetRate, 'RWastageAmt' => $dRWasteAmt, 'RBaseRate' => $dRBaseRate, 'RQualifierValue' => $dRQualValue,
                            'RTotalRate' => $dRTotRate, 'RNetRate' => $dRNetRate));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dwbsqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_qty_' . $n],'number'));

                            // measurement sheet
                            $measurement = $this->bsf->isNullCheck( $postData[ 'wbstable_' . $i .'_Measurement_' . $n ], 'string' );
                            $cellname = $this->bsf->isNullCheck( $postData[ 'wbstable_' . $i .'_CellName_' . $n ], 'string' );
                            $SelectedColumns = $this->bsf->isNullCheck( $postData[ 'wbstable_' . $i .'_SelectedColumns_' . $n ], 'string' );

                            if ($dwbsqty !=0 && $iwbsId!=0) {
                                $values = array('RFCTransId' => $itransid, 'WBSId' => $iwbsId, 'Qty' => $dwbsqty);
//                                if($measurement != '') {
                                $values['Measurement'] = $measurement;
                                $values['CellName'] = $cellname;
                                $values['SelectedColumns'] = $SelectedColumns;

                                $insert = $sql->insert();
                                $insert->into('Proj_RFCIOWWBSTrans');
                                $insert->Values($values);
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoid_' . $i],'number');
                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_reskeyid_' . $j],'string');
                            if (substr($iresid, 0, 2) == '0.') {
                                $iresid= 0;
                            }
                            $iiowid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_iowkeyid_' . $j],'number');
                            $irefid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_refid_' . $j],'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j],'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resdes_' . $j],'string');
                            $isortid = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_rowrefid_' . $j],'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_type_' . $j],'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_ratetype_' . $j],'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanal_' . $i . '_newresname_' . $j], 'string');

                            if ($stype=="") { continue;}

                            if ($stype=="I" &&  $iiowid ==0) { continue;}
                            else if ($stype=="R" &&  ($iresid == 0 && $sresName =="")) { continue;}
                            else if ($stype=="H" &&  $sdes =="") { continue;}

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');
                            if ($stype == "R" || $stype=="I") {
                                $check_value = isset($postData['rateanal_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid,  'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_resamt_' . $j], 'number'), 'Formula' => $this->bsf->isNullCheck($postData['rateanal_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'S','TransType' => $stranstype,'SortId' =>$isortid,'RateType'=>$sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => 1, 'Referenceid' => $irefid, 'Description' => $sdes , 'MixType' => 'S','TransType' => $stranstype,'SortId' =>$isortid));
                            }
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $iactRowid = $this->bsf->isNullCheck($postData['rowinfoidR_' . $i],'number');

                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $iresid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_reskeyid_' . $j],'string');
                            if (substr($iresid, 0, 2) == '0.')$iresid= 0;
                            $iiowid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_iowkeyid_' . $j],'number');
                            $stype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j],'string');
                            $sdes = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resdes_' . $j],'string');
                            $irefid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_refid_' . $j],'number');
                            $isortid = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_rowrefid_' . $j],'number');
                            $stranstype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_type_' . $j],'string');
                            $sratetype = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_ratetype_' . $j],'string');
                            $dweigtage = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Weightage_' . $j], 'number');
                            $dwasteper = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_Wastage_' . $j], 'number');
                            $dwasteqty = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageQty_' . $j], 'number');
                            $dwasteamt = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_WastageAmount_' . $j], 'number');
                            $sresName = $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_newresname_' . $j], 'string');

                            if ($stype=="") { continue;}

                            if ($stype=="I" &&  $iiowid ==0) { continue;}
                            else if ($stype=="R" &&  ($iresid == 0 && $sresName =="")) { continue;}
                            else if ($stype=="H" &&  $sdes =="") { continue;}

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCRateAnalysis');

                            if ($stype == "R" || $stype=="I") {
                                $check_value = isset($postData['rateanal_' . $i . '_inc_' . $j]) ? 1 : 0;
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid, 'ResourceId' => $iresid,'SubIOWId' => $iiowid, 'Qty' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resqty_' . $j], 'number'), 'Rate' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resrate_' . $j], 'number'), 'Amount' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_resamt_' . $j], 'number'), 'Formula' => $this->bsf->isNullCheck($postData['rateanalR_' . $i . '_formula_' . $j], 'string'), 'MixType' => 'R','TransType' => $stranstype,'SortId' =>$isortid,'RateType'=>$sratetype,'Weightage'=>$dweigtage,'Wastage'=>$dwasteper,'WastageQty'=>$dwasteqty,'WastageAmount'=>$dwasteamt,'ResourceName'=>$sresName));
                            } else {
                                $insert->Values(array('RFCTransId' => $itransid, 'IncludeFlag' => 1, 'Referenceid' => $irefid, 'Description' => $sdes , 'MixType' => 'R','TransType' => $stranstype,'SortId' =>$isortid));
                            }

                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
//                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['Qual_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['Qual_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Sign_' . $k], 'string');


                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_NetAmt_' . $k], 'number');
                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['Qual_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess, 'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'S'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                        $qRowCount =   $this->bsf->isNullCheck($postData['QualRRowId_'.$i],'number');
                        for ($k = 1; $k <= $qRowCount; $k++) {
                            $iQualifierId = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Id_' . $k], 'number');
                            $iYesNo = isset($postData['QualR_' . $i . '_YesNo_' . $k]) ? 1 : 0;
                            $sExpression = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Exp_' . $k], 'string');
                            $dExpAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                            $dExpPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                            $iQualTypeId= $this->bsf->isNullCheck($postData['QualR_' . $i . '_TypeId_' . $k], 'number');
                            $sSign = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Sign_' . $k], 'string');

                            $dCessPer = 0;
                            $dEDPer = 0;
                            $dHEdPer = 0;
                            $dKKCess=0;
                            $dSBCess=0;
                            $dCessAmt = 0;
                            $dEDAmt = 0;
                            $dHEdAmt = 0;
                            $dKKCessAmt=0;
                            $dSBCessAmt=0;

                            if ($iQualTypeId==1) {
                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dCessPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessPer_' . $k], 'number');
                                $dEDPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessPer_' . $k], 'number');
                                $dHEdPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_CessAmt_' . $k], 'number');
                                $dEDAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_EduCessAmt_' . $k], 'number');
                                $dHEdAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_HEduCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');
                            } else if ($iQualTypeId==2) {

                                $dTaxablePer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxablePer_' . $k], 'number');
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPer_' . $k], 'number');
                                $dKKCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCess_' . $k], 'number');
                                $dSBCess = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCess_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetPer_' . $k], 'number');

                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxableAmt_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_TaxPerAmt_' . $k], 'number');
                                $dKKCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_KKCessAmt_' . $k], 'number');
                                $dSBCessAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_SBCessAmt_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_NetAmt_' . $k], 'number');

                            } else {
                                $dTaxablePer = 100;
                                $dTaxPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dNetPer = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpPer_' . $k], 'number');
                                $dTaxableAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_ExpValue_' . $k], 'number');
                                $dTaxAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                                $dNetAmt = $this->bsf->isNullCheck($postData['QualR_' . $i . '_Amount_' . $k], 'number');
                            }

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWQualTrans');
                            $insert->Values(array('RFCTransId' =>$itransid,
                                'QualifierId'=>$iQualifierId,'YesNo'=>$iYesNo,'Expression'=>$sExpression,'ExpPer'=>$dExpPer,'TaxablePer'=>$dTaxablePer,'TaxPer'=>$dTaxPer,
                                'Sign'=>$sSign,'SurCharge'=>$dCessPer,'EDCess'=>$dEDPer,'HEDCess'=>$dHEdPer,'KKCess'=>$dKKCess,'SBCess'=>$dSBCess,'NetPer'=>$dNetPer,'ExpressionAmt'=>$dExpAmt,'TaxableAmt'=>$dTaxableAmt,
                                'TaxAmt'=>$dTaxAmt,'SurChargeAmt'=>$dCessAmt,'EDCessAmt'=>$dEDAmt,'HEDCessAmt'=>$dHEdAmt,'KKCessAmt'=>$dKKCessAmt,'SBCessAmt'=>$dSBCessAmt,'NetAmt'=>$dNetAmt,'MixType'=>'R'));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $iwgrowid = $this->bsf->isNullCheck($postData['newwgowid'],'number');
                    for ($j = 1; $j <= $iwgrowid; $j++) {
                        $sWgslNo = $this->bsf->isNullCheck($postData['newwgslno_' . $j],'string');
                        $sWgName = $this->bsf->isNullCheck($postData['newwgname_' . $j],'string');
                        $ilWgid = $this->bsf->isNullCheck($postData['newlwgid_' . $j],'number');
                        $iWgtypeid = $this->bsf->isNullCheck($postData['newwgtypeid_' . $j],'number');

                        if ($sWgName =="" || $iWgtypeid ==0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'SerialNo' =>$sWgslNo, 'WorkGroupId' => $ilWgid, 'WorkGroupName' => $sWgName,'WorkTypeId'=>$iWgtypeid));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['newresrowid'],'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {

                        $srescode = $this->bsf->isNullCheck($postData['newrescode_' . $j], 'string');
                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j], 'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j], 'number');
                        $irestypeid = $this->bsf->isNullCheck($postData['newrestypeid_' . $j], 'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j], 'number');
                        $iwunitid = $this->bsf->isNullCheck($postData['newwresunitid_' . $j], 'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j], 'number');
                        $dwrate = $this->bsf->isNullCheck($postData['newwresrate_' . $j], 'number');
                        $ilead = $this->bsf->isNullCheck($postData['newreslead_' . $j], 'number');
                        $smattype = $this->bsf->isNullCheck($postData['newresmattype_' . $j], 'string');

                        if ($sresName == "" || $iresgroupid == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $identity,'Code'=>$srescode, 'ResourceName' => $sresName, 'ResourceGroupId' => $iresgroupid, 'TypeId' => $irestypeid,
                            'UnitId' => $iunitid,'WorkUnitId' => $iwunitid, 'RateType' => 'L', 'LRate' => $drate,'Rate'=>$drate,'WorkRate'=>$dwrate,'LeadDays'=>$ilead,'MaterialType'=>$smattype));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $connection->commit();

                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);

                    // $this->_approveFromRFC($identity);

                    if ($mode=='edit')
                        $this->redirect()->toRoute('project/projboq', array('controller' => 'rfc', 'action' => 'projboq','projectId'=>$postData['project_id'],'type'=>'B'));
                    else
                        $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister'));
                }
            } catch(PDOException $e){
                $connection->rollback();
            }
        } else {

            if(!$this->getRequest()->isPost() && $rfcid == 0 && $editid == 0) {
                $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
            }

            if ($rfcid != 0) {
                $iRFCId = $rfcid;

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCRegister'))
                    ->join(array('b' => 'Proj_ProjectMaster'),'a.ProjectId=b.ProjectId', array('ProjectId', 'ProjectName'), $select::JOIN_LEFT)
                    ->columns(array('RefNo', 'RefDate','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end"), 'ProjectType','Approve','ProjectTypeName' => new Expression("Case a.ProjectType When  'B' then 'Budget' When 'P' then 'Plan' end"),'Narration'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                if (!empty($rfcregister)) $this->_view->revrequired = $rfcregister['RevRequired'];

                $this->_view->rfcregister=$rfcregister;

                $select = $sql->select();
                $select->from(array('a'=>'Proj_RFCIOWTrans'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectWorkGroup'), 'a.PWorkGroupId=c.PWorkGroupId', array('ProjectWorkGroupName' => new Expression("c.SerialNo + ' ' +c.WorkGroupName")), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=e.WorkGroupId', array('LWorkGroupName' => new Expression("c.SerialNo + ' ' +c.WorkGroupName")), $select:: JOIN_LEFT)
                    ->join(array('f' => 'Proj_RFCIOWRate'), 'a.RFCTransId=f.RFCTransId', array('WastageAmt','BaseRate','QualifierValue','TotalRate','NetRate','RWastageAmt','RBaseRate','RQualifierValue','RTotalRate','RNetRate'), $select:: JOIN_LEFT)
                    ->join(array( 'd' => 'Proj_RFCProjectIOWMeasurement' ), 'a.RFCTransId=d.RFCTransId', array( 'Measurement','CellName', 'SelectedColumns'), $select::JOIN_LEFT )
                    ->join(array('h' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=h.WorkTypeId', array('ConcreteMix','Cement','Sand','Metal','Thickness','WorkType'), $select:: JOIN_LEFT)
                    ->join(array('g' => 'Proj_IOWMaster'), 'a.IOWId=g.IOWId', array('LSpecification' => new Expression("g.Specification"),'LSerialNo' => new Expression("g.SerialNo")), $select:: JOIN_LEFT)
                    ->columns(array('*'),array('UnitName'), array('ProjectWorkGroupName'))
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $this->_view->rfctrans =$rfcTrans;
                $arrqual = array();
                foreach ($rfcTrans as $trans) {
                    $rfctransid = $trans['RFCTransId'];

                    $select = $sql->select();
                    $select->from(array("a" => "Proj_RFCIOWQualTrans"))
                        ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                        ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess', 'NetPer',
                            'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                            'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                            'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt', 'NetAmt'));
                    $select->where(array('a.MixType'=>'S','a.RFCTransId'=>$rfctransid));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $sHtml = Qualifier::getQualifier($qualList);
                    $arrqual[$rfctransid] = $sHtml;
                }

                $arrRqual = array();
                foreach ($rfcTrans as $trans) {
                    $rfctransid = $trans['RFCTransId'];
                    $select = $sql->select();
                    $select->from(array("a" => "Proj_RFCIOWQualTrans"))
                        ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                        ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess', 'NetPer',
                            'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                            'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                            'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt', 'NetAmt'));
                    $select->where(array('a.MixType'=>'R','a.RFCTransId'=>$rfctransid));
                    $select->order('a.SortId ASC');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $sHtml = Qualifier::getQualifier($qualList,'R');
                    $arrRqual[$rfctransid] = $sHtml;
                }

                $this->_view->arrqual = $arrqual;
                $this->_view->arrRqual = $arrRqual;

                $subQuery = $sql->select();
                $subQuery->from("Proj_RFCIOWTrans")
                    ->columns(array("RFCTransId"));
                $subQuery->where(array('RFCRegisterId' => $iRFCId));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'TypeId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId', 'IncludeFlag', 'ReferenceId', 'SubIOWId','ResourceId', 'ResourceName'=> new Expression("Case When a.ResourceId=0 then a.ResourceName else B.ResourceName End"), 'Qty', 'Rate', 'Amount','Formula', 'MixType', 'TransType','Wastage','WastageQty','WastageAmount','Weightage','SortId','RateType'))
                    ->where->expression('RFCTransId IN ?', array($subQuery));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcrateanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCIOWWBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName'=> new Expression("ParentText +'->'+WBSName")), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId', 'WBSId', 'Qty','Measurement', 'CellName', 'SelectedColumns'))
                    ->where->expression('a.RFCTransId IN ?', array($subQuery));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcwbstrans= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            } else if ($editid != 0) {

                $this->_view->revrequired = 'N';

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectWorkGroup'), 'a.PWorkGroupId=c.PWorkGroupId', array('ProjectWorkGroupName' => new Expression("c.SerialNo + ' ' +c.WorkGroupName"),'PWorkGroupName'=>new Expression("c.WorkGroupName")), $select:: JOIN_LEFT)
                    ->join(array('g' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=g.WorkGroupId', array('LWorkGroupName'=>new Expression("g.WorkGroupName")), $select:: JOIN_LEFT)
                    ->join( array('d' => 'Proj_ProjectIOWMeasurement' ), 'a.ProjectIOWId=d.ProjectIOWId', array( 'Measurement','CellName', 'SelectedColumns'), $select::JOIN_LEFT )
                    ->join( array('f' => 'Proj_ProjectIOW' ), 'a.ProjectIOWId=f.ProjectIOWId', array('Qty', 'Rate', 'Amount','WastageAmt','BaseRate','QualifierValue','TotalRate','NetRate','RWastageAmt','RBaseRate','RQualifierValue','RTotalRate','RNetRate','SiteMixRatio','ReadyMixRatio'), $select::JOIN_LEFT )
                    ->join(array('h' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=h.WorkTypeId', array('ConcreteMix','Cement','Sand','Metal','Thickness','WorkType'), $select:: JOIN_LEFT)
                    ->join(array('i' => 'Proj_IOWMaster'), 'a.IOWId=i.IOWId', array('LSpecification' => new Expression("i.Specification"),'LSerialNo' => new Expression("i.SerialNo")), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId'=>new Expression("a.ProjectIOWId"),'ProjectId','IOWId','WorkGroupId','WorkTypeId','PWorkGroupId','ProjectIOWId','ParentId', 'RefSerialNo', 'SerialNo', 'ShortSpec', 'Specification', 'UnitId', 'WorkingQty','RWorkingQty','CementRatio','SandRatio','MetalRatio','ThickQty'
                    ,'MixType','Header','ParentText' => new Expression("a.SerialNo + ' ' + a.Specification")))
                    ->where(array("a.ProjectIOWId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'TypeId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId'=>new Expression("ProjectIOWId"), 'IncludeFlag', 'MixType', 'TransType','ReferenceId', 'ResourceId', 'Qty', 'Rate', 'Amount','Formula','Wastage','WastageQty','WastageAmount','Weightage','SortId','RateType'))
                    ->where(array("ProjectIOWId" => $editid));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcrateanal = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName'=> new Expression("ParentText +'->'+WBSName")), $select:: JOIN_LEFT)
                    ->columns(array('RFCTransId'=>new Expression("ProjectIOWId"), 'WBSId', 'Qty','Measurement', 'CellName', 'SelectedColumns'))
                    ->where(array("ProjectIOWId" => $editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcwbstrans= $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array("a" => "Proj_ProjectIOWQualTrans"))
                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                    ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess', 'KKCess','SBCess','NetPer',
                        'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                        'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'KKCessAmt','SBCessAmt','SurChargeAmt',
                        'EDCessAmt', 'HEDCessAmt', 'NetAmt'));
                $select->where(array('a.MixType'=>'S','a.ProjectIOWId'=>$editid));
                $select->order('a.SortId ASC');

                $statement = $sql->getSqlStringForSqlObject($select);
                $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $sHtml = Qualifier::getQualifier($qualList);
                $arrqual[$editid] = $sHtml;

                $select = $sql->select();
                $select->from(array("a" => "Proj_ProjectIOWQualTrans"))
                    ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName', 'QualifierTypeId', 'RefId' => new Expression("RefNo")), $select::JOIN_INNER)
                    ->columns(array('QualifierId', 'YesNo', 'Expression', 'ExpPer', 'TaxablePer', 'TaxPer', 'Sign', 'SurCharge', 'EDCess', 'HEDCess','KKCess','SBCess', 'NetPer',
                        'BaseAmount' => new Expression("CAST(0 As Decimal(18,2))"),
                        'ExpressionAmt', 'TaxableAmt', 'TaxAmt', 'SurChargeAmt',
                        'EDCessAmt', 'HEDCessAmt','KKCessAmt','SBCessAmt', 'NetAmt'));
                $select->where(array('a.MixType'=>'R','a.ProjectIOWId'=>$editid));
                $select->order('a.SortId ASC');
                $statement = $sql->getSqlStringForSqlObject($select);
                $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $sHtml = Qualifier::getQualifier($qualList,"R");
                $arrRqual[$editid] = $sHtml;

                $this->_view->arrqual = $arrqual;
                $this->_view->arrRqual = $arrRqual;

                // get project
                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster' ))
                    ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array( 'ProjectId', 'ProjectName' ), $select:: JOIN_LEFT)
                    ->columns( array() )
                    ->where(array("a.ProjectIOWId" => $editid));
                $statement = $sql->getSqlStringForSqlObject( $select );
                $projectinfo= $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->current();
                $this->_view->projectinfo = $projectinfo;

                if (!empty($projectinfo)) $iProjectId = $projectinfo['ProjectId'];

                $typename =  $this->bsf->isNullCheck($this->params()->fromRoute('projecttype'), 'string' );
                $this->_view->projecttype = $typename;
                if ( $typename == 'B' )
                    $this->_view->projecttypename = 'Budget';
                else if ( $typename == 'P' )
                    $this->_view->projecttypename = 'Plan';
            }
        }

        $select = $sql->select();
        $select->from(array("a" => "Proj_QualifierTrans"))
            ->join(array("b" => "Proj_QualifierMaster"), "a.QualifierId=b.QualifierId", array('QualifierName','QualifierTypeId','RefId' => new Expression("RefNo")), $select::JOIN_INNER)
            ->columns(array('QualifierId','YesNo','Expression','ExpPer','TaxablePer','TaxPer','Sign','SurCharge','EDCess','HEDCess','KKCess','SBCess','NetPer',
                'BaseAmount'=> new Expression("CAST(0 As Decimal(18,2))"),
                'ExpressionAmt' => new Expression("CAST(0 As Decimal(18,2))"),'TaxableAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'TaxAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'SurChargeAmt'=> new Expression("CAST(0 As Decimal(18,2))"),
                'EDCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'HEDCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'KKCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'SBCessAmt'=> new Expression("CAST(0 As Decimal(18,2))"),'NetAmt'=> new Expression("CAST(0 As Decimal(18,2))")));
        $select->where(array('a.QualType' => 'W'));
        $select->order('a.SortId ASC');
        $statement = $sql->getSqlStringForSqlObject($select);
        $qualList = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        $sHtml=Qualifier::getQualifier($qualList);
        $this->_view->qualHtml = $sHtml;

        $sHtml=Qualifier::getQualifier($qualList,"R");
        $this->_view->qualRHtml = $sHtml;

        $sHtml=Qualifier::getQualifierG($qualList);
        $this->_view->qualGHtml = $sHtml;


//        $select = $sql->select();
//        $select->from('Proj_IOWMaster')
//            ->columns(array('data'=>'IOWId', 'value' => new Expression("SerialNo + '  ' + Specification")))
//            ->where("UnitId <>0 and DeleteFlag=0");
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $parentdata = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $select = $sql->select();
        $select->from('Proj_ProjectWorkGroup')
            ->columns(array('PWorkGroupId', 'SerialNo', 'WorkGroupName','WorkTypeId','WorkGroupId'))
            ->where(array("ProjectId"=>$iProjectId,"DeleteFlag" => 0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $parentdata = array();

        $k = 0;
        for ($i = 0; $i < count($workgroup); $i++) {
            $parentdata[$k]['data'] = $workgroup[$i]['PWorkGroupId'];
            $parentdata[$k]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];
            $parentdata[$k]['worktypeid'] = $workgroup[$i]['WorkTypeId'];
            $parentdata[$k]['workgroupid'] = $workgroup[$i]['WorkGroupId'];
            $parentdata[$k]['pworkgroupid'] = $workgroup[$i]['PWorkGroupId'];
            $parentdata[$k]['iowid'] = 0;
            $parentdata[$k]['workgroupname'] = $workgroup[$i]['WorkGroupName'];
            $parentdata[$k]['parentname'] = "";
            $k = $k + 1;

            $select = $sql->select();
            $select->from('Proj_ProjectIOWMaster')
                ->columns(array('ProjectIOWId', 'SerialNo', 'Specification'=>new expression("Specification"),'WorkTypeId'))
                ->where(array("Header" => 1, "PWorkGroupId" => $workgroup[$i]['PWorkGroupId']));

            $statement = $sql->getSqlStringForSqlObject($select);
            $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            for ($j = 0; $j < count($parentiow); $j++) {
                $parentdata[$k]['data'] = $workgroup[$i]['PWorkGroupId'] . '.' . $parentiow[$j]['ProjectIOWId'];
                $parentdata[$k]['value'] = $parentiow[$j]['SerialNo'] . '   ' . $parentiow[$j]['Specification'];
                $parentdata[$k]['worktypeid'] = $workgroup[$i]['WorkTypeId'];
                $parentdata[$k]['workgroupid'] = $workgroup[$i]['WorkGroupId'];
                $parentdata[$k]['pworkgroupid'] = $workgroup[$i]['PWorkGroupId'];
                $parentdata[$k]['iowid'] = $parentiow[$j]['ProjectIOWId'];
                $parentdata[$k]['workgroupname'] = $workgroup[$i]['WorkGroupName'];
                $parentdata[$k]['parentname'] = $parentiow[$j]['Specification'];
                $k = $k + 1;
            }
        }

//        $select = $sql->select();
//        $select->from('Proj_WorkGroupMaster')
//            ->columns(array('WorkGroupId','SerialNo', 'WorkGroupName'));
//
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//        $parentdata = array();
//
//        $k=0;
//        for ($i=0;$i < count($workgroup);$i++) {
//            $parentdata[$k]['data'] = $workgroup[$i]['WorkGroupId'];
//            $parentdata[$k]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];
//
//            $k=$k+1;
//
//            $select = $sql->select();
//            $select->from('Proj_IOWMaster')
//                ->columns(array('IOWId', 'SerialNo', 'Specification'))
//                ->where(array("IOWs" => 1,"WorkGroupId"=>$workgroup[$i]['WorkGroupId']));
//
//            $statement = $sql->getSqlStringForSqlObject($select);
//            $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//            for ($j=0;$j < count($parentiow);$j++) {
//                $parentdata[$k]['data'] =  $workgroup[$i]['WorkGroupId'].'.'.$parentiow[$j]['IOWId'];
//                $parentdata[$k]['value'] = $parentiow[$j]['SerialNo'] . '   ' .$parentiow[$j]['Specification'];
//                $k=$k+1;
//            }
//        }

        $this->_view->parentiow = $parentdata;

        $select = $sql->select();
        $select->from('Proj_UOM')
            ->columns(array("data"=>'UnitId', "value"=>'UnitName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_UOM')
            ->columns(array('data' => 'UnitId', 'value' => 'UnitName'))
            ->where(array('WorkUnit'=>1));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->wunit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_Resource')
            ->columns(array("id"=>'ResourceId',"type"=>new Expression("'R'"),"value"=> new Expression("Code + ' ' +ResourceName")))
            ->where(array("DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_Resource'))
            ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array(), $select:: JOIN_LEFT)
            ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array(), $select:: JOIN_LEFT)
            ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array(), $select:: JOIN_LEFT)
            ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array(), $select:: JOIN_LEFT)
            ->columns(array('ResourceId','TypeId','UnitId'=>new Expression("Case When a.TypeId=3 then a.WorkUnitId else a.UnitId end"),'Code','ResourceName','UnitName'=>new Expression("Case When a.TypeId=3 then e.UnitName else d.UnitName end"),'TypeName'=>new Expression('b.TypeName'),'ResourceGroup'=>new Expression('c.ResourceGroupName'),'Select'=>new Expression("'0'")))
            ->where(array("a.DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->respicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_IOWMaster'))
            ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupId','WorkGroupName','WorkTypeId'), $select::JOIN_INNER)
            ->join(array('c' => 'Proj_WorkTypeMaster'), 'b.WorkTypeId=c.WorkTypeId', array('WorkTypeName'=>new Expression('WorkType')), $select::JOIN_INNER)
            ->columns(array('IOWId', 'SerialNo','Specification','Header','Select'=>new Expression("'0'")))
            ->where(array('a.DeleteFlag'=>0));
        $select->order(array('SlNo ASC'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->iowpicklist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_IOWMaster')
            ->columns(array("id"=>'IOWId',"type"=>new Expression("'I'"),"value"=> new Expression("SerialNo + ' ' +Specification ")))
            ->where(array("DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resiowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_IOWMaster')
            ->columns(array('IOWId', 'Specification'))
            ->where(array('DeleteFlag' => 0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->iowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_ResourceGroup'))
            ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
            ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName','TypeId'), array('TypeName'))
            ->where(array("a.TypeId <> 4","a.LastLevel"=>1,"DeleteFlag"=>0));

        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_ResourceGroup'))
            ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
            ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName', 'TypeId'))
            ->where(array("a.LastLevel"=>1,"DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->excelresgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_Resource'))
            ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
            ->join(array('c' => 'Proj_ResourceGroup'), 'a.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
            ->join(array('d' => 'Proj_UOM'), 'a.UnitId=d.UnitId', array('UnitName'), $select:: JOIN_LEFT)
            ->join(array('e' => 'Proj_UOM'), 'a.WorkUnitId=e.UnitId', array('WorkUnitName'=>new Expression("e.UnitName")), $select:: JOIN_LEFT)
            ->columns(array('data' => 'ResourceId', 'value' => 'ResourceName', 'TypeId','ResourceGroupId','MaterialType','UnitId','WorkUnitId'))
            ->where(array("a.DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->excelresource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_WorkTypeMaster')
            ->columns(array('data' => 'WorkTypeId', 'value' => 'WorkType'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->worktype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_WorkGroupMaster'))
            ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType','WorkTypeId'), $select:: JOIN_LEFT)
            ->columns(array('data' => 'WorkGroupId', "value"=> new Expression("WorkGroupName")))
            ->where(array("DeleteFlag"=>0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_ProjectResource'))
            ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code','ResourceName'=>new Expression("Case When a.RateType='M' then ResourceName+' (Manual)' when a.RateType='A' then ResourceName+' (Machinery)' else  ResourceName end")), $select:: JOIN_LEFT)
            ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
            ->columns(array('ResourceId','Rate','RateType'))
            ->where(array("ProjectId"=>$iProjectId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectresource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_ProjectWorkGroup'))
            ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType','WorkTypeId'), $select:: JOIN_LEFT)
            ->columns(array('data' => 'PWorkGroupId', "value"=> new Expression("SerialNo + ' ' +WorkGroupName"),'WorkGroupName'))
            ->where(array("a.DeleteFlag"=>0,"ProjectId"=>$iProjectId));
//        $select = $sql->select();
//        $select->from('Proj_ProjectWorkGroup')
//            ->columns(array('data' => 'PWorkGroupId', "value"=> new Expression("SerialNo + ' ' +WorkGroupName"),'WorkGroupName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectworkgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        // Excel Templates
        $select = $sql->select();
        $select->from('Proj_MeasurementTemplate')
            ->columns(array('TemplateId','TemplateName','Description'))
            ->where(array('DeleteFlag' => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->exceltemplates = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $wgcodegenType = 0;
        $select = $sql->select();
        $select->from('Proj_WorkGroupCodeSetup')
            ->columns(array('GenType'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $wgcodesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if (!empty($wgcodesetup)) $wgcodegenType = $wgcodesetup['GenType'];
        $this->_view->wgcodegenType = $wgcodegenType;

        $codegenType = 0;
        $select = $sql->select();
        $select->from('Proj_ResourceCodeSetup')
            ->columns(array('GenType'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $codesetup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if (!empty($codesetup)) $codegenType = $codesetup['GenType'];
        $this->_view->codegenType = $codegenType;

        $this->_view->genType = $aVNo["genType"];
        $this->_view->mode = $smode;
        $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
        $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;

        if (!isset($rfcid) || $rfcid == 0 ) {
            if ($aVNo["genType"] ==false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function rfcwbsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" RFC WBS");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $connection = $dbAdapter->getDriver()->getConnection();
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);


        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();

            $rfcid = $this->bsf->isNullCheck($postData['rfcId'],'number');
            if (isset($postData['frm_what'])) {
                // get project list
                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId', 'ProjectName'))
                    ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $this->_view->frmwhat = $postData['frm_what'];
                $this->_view->projecttype = $postData['type_name'];
                if ($postData['type_name'] == 'B')
                    $this->_view->projecttypename = 'Budget';
                else if ($postData['type_name'] == 'P')
                    $this->_view->projecttypename = 'Plan';

            } else if ($rfcid != 0) {
                try {
                    $connection->beginTransaction();

                    $connection->commit();
                    $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
                } catch (PDOException $e) {
                    $connection->rollback();
                }
            } else {
                try{
                    $mode = $postData['rfcmode'];
                    if ($mode == 'edit') {
                        $rfctype = 'WBS-Edit';
                    } else {
                        $rfctype = 'WBS-Add';
                    }
                    $connection->beginTransaction();

                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');


                    $refDate = $this->bsf->isNullCheck($postData['refdate'],'date');
                    $refNo = $sVno;
                    $projectId = $this->bsf->isNullCheck($postData['project_id'],'number');
                    $projectType = $this->bsf->isNullCheck($postData['project_type'],'string');
                    $wbsRequest = json_decode($this->bsf->isNullCheck($postData['wbs'],'string'), true);

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $refNo, 'RefDate' => date('Y-m-d', strtotime($refDate))
                    , 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N'
                    , 'Type' => 'WBS', 'ProjectId' => $projectId, 'ProjectType' => $projectType));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $RFCRegisterId = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $tempTransIds = array();
                    foreach($wbsRequest as $request) {
                        $wbsId = $this->bsf->isNullCheck($request['id'],'number');
                        $wbsName = $this->bsf->isNullCheck($request['name'],'string');
                        $action= $this->bsf->isNullCheck($request['action'],'string');

                        $parentId = 0;
                        if(isset($request[ 'parentid' ])) {
                            $parentId = $this->bsf->isNullCheck($request[ 'parentid' ],'number');
                        }

                        switch($action) {
                            case 'delete':
                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCWBSDeleteTrans' );
                                $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'WBSId' => $wbsId ) );
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                break;
                            case 'create':
                                $parentId = $request[ 'parentid' ];
                                $wbsId = $request[ 'id' ];
                                $tempParentId = 0;
                                if(isset($tempTransIds[$parentId])) {
                                    $tempParentId = $tempTransIds[$parentId];
                                    $parentId = 0;
                                }

                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCWBSTrans' );
                                $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'ProjectId' => $projectId, 'TempParentId' => $tempParentId
                                ,'ParentId' => $parentId, 'WBSName' => $wbsName) );
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                $tempTransIds[$wbsId] = $dbAdapter->getDriver()->getLastGeneratedValue();
                                break;
                            case 'update':
                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCWBSTrans' );
                                $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'WBSId' => $wbsId, 'ProjectId' => $projectId, 'ParentId' => $parentId, 'WBSName' => $wbsName ) );
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                break;
                        }
                    }

                    // insert iow
                    $newiowids = json_decode($this->bsf->isNullCheck($postData['newIOWRowId'],'string'), true);
                    foreach($newiowids as $iowid) {
                        $iRowId = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rowid' ], 'number' );

                        if (strpos($iowid, 'jqxWidget') !== false) {
                            $wbsTransId = $tempTransIds[$iowid];
                            $wbsId = 0;
                        } else {
                            $wbsTransId = 0;
                            $wbsId = $iowid;
                        }

                        for ( $i = 1; $i <= $iRowId; $i++ ) {
                            $wgroupid = 0;
                            $myArray = explode( '.', $postData[ 'newiow_'.$iowid.'_parentkeyid_' . $i ] );

                            if ( count( $myArray ) > 1 ) {
                                $wgroupid = $myArray[ 0 ];
                                $parentid = intval( $myArray[ 1 ] );
                            }
                            else {
                                $wgroupid = $myArray[ 0 ];
                                $parentid = 0;
                            }

                            if ( $wgroupid == 0 ) {
                                continue;
                            }

                            $dWorkingQty = floatval($this->bsf->isNullCheck($postData['newiow_'.$iowid.'_rateanal_' . $i . '_AnalQty'], 'number'));
                            if ($dWorkingQty ==0) $dWorkingQty=1;
                            $dRWorkingQty = floatval($this->bsf->isNullCheck($postData['newiow_'.$iowid.'_rateanalR_' . $i . '_AnalQty'], 'number'));
                            if ($dRWorkingQty ==0) $dRWorkingQty=1;


                            $insert = $sql->insert();
                            $insert->into( 'Proj_RFCWBSIOWTrans' );
                            $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'WorkGroupId' => $wgroupid, 'ParentId' => $parentid, 'WBSId' => $wbsId
                            , 'WBSTransId' => $wbsTransId, 'RefSerialNo' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_refserialno_' . $i ], 'string' )
                            , 'SerialNo' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_serialno_' . $i ], 'string' ), 'Specification' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_spec_' . $i ], 'string' )
                            , 'UnitId' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_unitkeyid_' . $i ], 'number' ), 'ShortSpec' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_shortspec_' . $i ], 'string' )
                            , 'ParentText' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_parentid_' . $i ], 'string' ), 'Rate' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rate_' . $i ], 'number' )
                            , 'Amount' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_amt_' . $i ], 'number' ), 'Qty' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_qty_' . $i ], 'number' )
                            , 'WorkingQty' => $dWorkingQty, 'RWorkingQty' => $dRWorkingQty
                            , 'CementRatio' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_AQty' ], 'number' ), 'SandRatio' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_BQty' ], 'number' )
                            , 'MetalRatio' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_CQty' ], 'number' ), 'ThickQty' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_thick' ], 'number' )
                            , 'WorkGroupId' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_workgroupid_' . $i ], 'number' ), 'SiteMixRatio' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_sitemixper_' . $i ], 'number' )
                            , 'ReadyMixRatio' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_readymixper_' . $i ], 'number' ) ) );
                            $statement = $sql->getSqlStringForSqlObject( $insert );
                            $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                            $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                            $iactRowid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rowinfoid_' . $i ], 'number' );

                            for ( $j = 1; $j <= $iactRowid; $j++ ) {
                                $iresid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_reskeyid_' . $j ], 'number' );
                                $iiowid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_iowkeyid_' . $j ], 'number' );
                                $irefid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_refid_' . $j ], 'number' );
                                $stype = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_type_' . $j ], 'string' );
                                $sdes = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_resdes_' . $j ], 'string' );
                                $isortid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_rowrefid_' . $j ], 'number' );
                                $stranstype = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_type_' . $j ], 'string' );
                                $sratetype = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_ratetype_' . $j ], 'string' );

                                if ( $stype == "" ) {
                                    continue;
                                }

                                if ( $stype == "I" && $iiowid == 0 ) {
                                    continue;
                                }
                                else if ( $stype == "R" && $iresid == 0 ) {
                                    continue;
                                }
                                else if ( $stype == "H" && $sdes == "" ) {
                                    continue;
                                }

                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCWBSRateAnalysis' );
                                if ( $stype == "R" || $stype == "I" ) {
                                    $check_value = isset( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_inc_' . $j ] ) ? 1 : 0;
                                    $insert->Values( array( 'RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid
                                    , 'ResourceId' => $iresid, 'SubIOWId' => $iiowid
                                    , 'Qty' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_resqty_' . $j ], 'number' )
                                    , 'Rate' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_resrate_' . $j ], 'number' )
                                    , 'Amount' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_resamt_' . $j ], 'number' )
                                    , 'Formula' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_formula_' . $j ], 'string' )
                                    , 'MixType' => 'S', 'TransType' => $stranstype, 'SortId' => $isortid, 'RateType' => $sratetype ) );
                                }
                                else {
                                    $insert->Values( array( 'RFCTransId' => $itransid, 'IncludeFlag' => 1, 'Referenceid' => $irefid
                                    , 'Description' => $sdes, 'MixType' => 'S', 'TransType' => $stranstype, 'SortId' => $isortid ) );
                                }
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                            }

                            $iactRowid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rowinfoidR_' . $i ], 'number' );

                            for ( $j = 1; $j <= $iactRowid; $j++ ) {
                                $iresid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_reskeyid_' . $j ], 'number' );
                                $iiowid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_iowkeyid_' . $j ], 'number' );
                                $stype = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_type_' . $j ], 'string' );
                                $sdes = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_resdes_' . $j ], 'string' );
                                $irefid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_refid_' . $j ], 'number' );
                                $isortid = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_rowrefid_' . $j ], 'number' );
                                $stranstype = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_type_' . $j ], 'string' );
                                $sratetype = $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_ratetype_' . $j ], 'string' );

                                if ( $stype == "" ) {
                                    continue;
                                }

                                if ( $stype == "I" && $iiowid == 0 ) {
                                    continue;
                                }
                                else if ( $stype == "R" && $iresid == 0 ) {
                                    continue;
                                }
                                else if ( $stype == "H" && $sdes == "" ) {
                                    continue;
                                }

                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCWBSRateAnalysis' );


                                if ( $stype == "R" || $stype == "I" ) {
                                    $check_value = isset( $postData[ 'newiow_'.$iowid.'_rateanal_' . $i . '_inc_' . $j ] ) ? 1 : 0;
                                    $insert->Values( array( 'RFCTransId' => $itransid, 'IncludeFlag' => $check_value, 'Referenceid' => $irefid
                                    , 'ResourceId' => $iresid, 'SubIOWId' => $iiowid
                                    , 'Qty' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_resqty_' . $j ], 'number' )
                                    , 'Rate' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_resrate_' . $j ], 'number' )
                                    , 'Amount' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_resamt_' . $j ], 'number' )
                                    , 'Formula' => $this->bsf->isNullCheck( $postData[ 'newiow_'.$iowid.'_rateanalR_' . $i . '_formula_' . $j ], 'string' )
                                    , 'MixType' => 'R', 'TransType' => $stranstype, 'SortId' => $isortid, 'RateType' => $sratetype ) );
                                }
                                else {
                                    $insert->Values( array( 'RFCTransId' => $itransid, 'IncludeFlag' => 1, 'Referenceid' => $irefid, 'Description' => $sdes
                                    , 'MixType' => 'R', 'TransType' => $stranstype, 'SortId' => $isortid ) );
                                }

                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                            }
                        }
                    }

                    $iwgrowid = $this->bsf->isNullCheck($postData['newwgowid'],'number');
                    for ($j = 1; $j <= $iwgrowid; $j++) {

                        $sWgName = $this->bsf->isNullCheck($postData['newwgname_' . $j],'string');
                        $iWgTypeid = $this->bsf->isNullCheck($postData['newwgid_' . $j],'number');
                        $iautoRA = $this->bsf->isNullCheck($postData['newwgrateanal_' . $j],'number');
                        if ($sWgName =="" || $iWgTypeid ==0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWorkGroupTrans');
                        $insert->Values(array('RFCRegisterId' => $RFCRegisterId, 'WorkTypeId' => $iWgTypeid, 'WorkGroupName' => $sWgName
                        , 'AutoRateAnalysis' => $iautoRA));
                    }

                    $iresrowid = $this->bsf->isNullCheck($postData['resrowid'],'number');
                    for ($j = 1; $j <= $iresrowid; $j++) {

                        $sresName = $this->bsf->isNullCheck($postData['newresname_' . $j],'string');
                        $iresgroupid = $this->bsf->isNullCheck($postData['newresgroupid_' . $j],'number');
                        $irestypeid= $this->bsf->isNullCheck($postData['newrestypeid_' . $j],'number');
                        $iunitid = $this->bsf->isNullCheck($postData['newresunitid_' . $j],'number');
                        $drate = $this->bsf->isNullCheck($postData['newresrate_' . $j],'string');

                        if ($sresName =="" || $iresgroupid==0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $RFCRegisterId, 'ResourceName'=> $sresName ,'ResourceGroupId' => $iresgroupid
                        ,'TypeId' => $irestypeid ,'UnitId'=> $iunitid,'RateType'=>'L','LRate'=>$drate));

                        if ($iresgroupid !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $iresgroupid));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }

                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);


                } catch ( PDOException $e ) {
                    $connection->rollback();
                }
                $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
            }

        } else {

        }

        $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
        $smode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'), 'string');
        $editid = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');

        if(!$this->getRequest()->isPost() && $editid == 0) {
            $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
        }

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

        $select = $sql->select();
        $select->from('Proj_WorkGroupMaster')
            ->columns(array('WorkGroupId','SerialNo', 'WorkGroupName'));

        $statement = $sql->getSqlStringForSqlObject($select);
        $workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $parentdata = array();
        $projectiowdata = array();
        $k=0;
        $p=0;
        for ($i=0;$i < count($workgroup);$i++) {
            // iow master
            $parentdata[$k]['data'] = $workgroup[$i]['WorkGroupId'];
            $parentdata[$k]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];

            $k=$k+1;

            $select = $sql->select();
            $select->from('Proj_IOWMaster')
                ->columns(array('IOWId', 'SerialNo', 'Specification'))
                ->where(array("Header" => 1,"WorkGroupId"=>$workgroup[$i]['WorkGroupId']));

            $statement = $sql->getSqlStringForSqlObject($select);
            $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            for ($j=0;$j < count($parentiow);$j++) {
                $parentdata[$k]['id'] =  $workgroup[$i]['WorkGroupId'].'.'.$parentiow[$j]['IOWId'];
                $parentdata[$k]['value'] = $parentiow[$j]['SerialNo'] . '   ' .$parentiow[$j]['Specification'];
                $k=$k+1;
            }

            // project iow master
            $projectiowdata[$p]['data'] = $workgroup[$i]['WorkGroupId'];
            $projectiowdata[$p]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];

            $p=$p+1;

            $select = $sql->select();
            $select->from(array('a' =>'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId',array('UnitName'), $select:: JOIN_LEFT)
                ->columns(array('IOWId', 'SerialNo', 'Specification', 'UnitId'), array('UnitName'))
                ->where(array("a.WorkGroupId"=>$workgroup[$i]['WorkGroupId']));

            $statement = $sql->getSqlStringForSqlObject($select);
            $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            for ($j=0;$j < count($parentiow);$j++) {
                $projectiowdata[$p]['id'] =  $workgroup[$i]['WorkGroupId'].'.'.$parentiow[$j]['IOWId'];
                $projectiowdata[$p]['value'] = $parentiow[$j]['SerialNo'] . '   ' .$parentiow[$j]['Specification'];
                $p=$p+1;
            }
        }

        $this->_view->parentiow = $parentdata;
        $this->_view->parentprojiow = $projectiowdata;

        $select = $sql->select();
        $select->from('Proj_UOM')
            ->columns(array("data"=>'UnitId', "value"=>'UnitName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_Resource')
            ->columns(array("id"=>'ResourceId',"type"=>new Expression("'R'"),"value"=> new Expression("Code + ' ' +ResourceName")))
            ->where(array("DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_IOWMaster')
            ->columns(array("id"=>'IOWId',"type"=>new Expression("'I'"),"value"=> new Expression("SerialNo + ' ' +Specification ")))
            ->where(array("DeleteFlag" => '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resiowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_IOWMaster')
            ->columns(array('IOWId', 'Specification'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->iowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from(array('a' => 'Proj_ResourceGroup'))
            ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeName'), $select:: JOIN_LEFT)
            ->columns(array('data' => 'ResourceGroupId', 'value' => 'ResourceGroupName'), array('TypeName'))
            ->where(array("a.TypeId <> 4","a.LastLevel"=>1,"DeleteFlag"=>0));

        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->resgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_WorkTypeMaster')
            ->columns(array('data' => 'WorkTypeId', 'value' => 'WorkType'));

        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->worktype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $select = $sql->select();
        $select->from('Proj_ProjectWorkGroup')
            ->columns(array('data' => 'PWorkGroupId', "value"=> new Expression("SerialNo + ' ' +WorkGroupName")));

        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectworkgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $this->_view->mode = $smode;
        $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
        $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;
        $this->_view->genType = $aVNo["genType"];

        if (!isset($rfcid) || $rfcid == 0 ) {
            if ($aVNo["genType"] ==false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function rfciowplanAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);


        $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'),'number');
        $smode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'),'string');
        $editid = $this->bsf->isNullCheck($this->params()->fromRoute('id'),'number');
        $iprojectId=0;

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            $identity = 0;
            $postData = $request->getPost();
            $iRFCId = $postData['rfcUId'];
            try {
                if (!is_null($postData['frm_what'])) {
                    // get project list
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $iprojectId = $this->bsf->isNullCheck($postData['project_id'],'number');

                    $this->_view->frmwhat = $postData['frm_what'];
                    $this->_view->projecttype = $postData['type_name'];
                    $this->_view->revrequired= $postData['revrequired'];

                    if ($postData['type_name'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($postData['type_name'] == 'P')
                        $this->_view->projecttypename = 'Plan';
                } else if ($iRFCId != 0) {

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo=$this->bsf->isNullCheck($postData['refno'],'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $identity = $iRFCId;
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'RevRequired'=>$irevrequired
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $subQuery = $sql->select();
                    $subQuery->from("Proj_RFCIOWTrans")
                        ->columns(array("RFCTransId"));
                    $subQuery->where(array('RFCRegisterId' => $identity));

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWWBSTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $postData['rowid'];
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $qty = $this->bsf->isNullCheck($postData['curplanqty_' . $i],'number');
                        $prevqty = $this->bsf->isNullCheck($postData['prevplanqty_' . $i],'number');

                        $iProjIOWId = $this->bsf->isNullCheck($postData['piowid_' . $i],'number');

                        if ($qty == 0) continue;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $iProjIOWId, 'Qty' => $qty,'PrevQty'=>$prevqty));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dwbsqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbscurplanqty_' . $n],'number'));
                            if ($dwbsqty !=0 && $iwbsId !=0) {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCIOWWBSTrans');
                                $insert->Values(array('RFCTransId' => $iTransId, 'WBSId' => $iwbsId, 'Qty' => $dwbsqty));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfciowplan', array('controller' => 'rfc', 'action' => 'rfciowplan'));
                } else {
                    $mode = $postData['rfcmode'];
                    if ($mode=='edit') {$rfctype='IOWPlan-Edit';}
                    else {$rfctype='IOWPlan-Add';}

                    $aVNo = CommonHelper::getVoucherNo(101,date('Y-m-d', strtotime($postData['refdate'])) ,0,0, $dbAdapter,"I");
                    if ($aVNo["genType"] ==true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RefDate' => date('Y-m-d', strtotime($this->bsf->isNullCheck($postData['refdate'], 'string'))), 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'IOW Plan', 'ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number'),'ProjectType' => 'P', 'RevRequired'=>$irevrequired));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $postData['rowid'];
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $qty = $this->bsf->isNullCheck($postData['curplanqty_' . $i],'number');
                        $prevqty = $this->bsf->isNullCheck($postData['prevplanqty_' . $i],'number');
                        $iProjIOWId = $this->bsf->isNullCheck($postData['piowid_' . $i],'number');
                        if ($qty == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $iProjIOWId, 'Qty' => $qty,'PrevQty'=>$prevqty));

                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dwbsqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbscurplanqty_' . $n],'number'));
                            if ($dwbsqty !=0 && $iwbsId !=0) {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCIOWWBSTrans');
                                $insert->Values(array('RFCTransId' => $iTransId, 'WBSId' => $iwbsId, 'Qty' => $dwbsqty));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/rfciowplan', array('controller' => 'rfc', 'action' => 'rfciowplan'));
                }
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            if(!$this->getRequest()->isPost() && $rfcid == 0 && $editid == 0) {
                $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
            }

            if ($rfcid !=0) {
                $iRFCId = $rfcid;

                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate','ProjectId','Approve','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end")))
                    ->where(array("RFCRegisterId" => $iRFCId));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                if (!empty($rfcregister)) $this->_view->revrequired =$rfcregister['RevRequired'];

                $this->_view->rfcregister =$rfcregister;
                $projId=0;
                if (!empty($rfcregister)) $projId =$this->bsf->isNullCheck($rfcregister['ProjectId'],'number');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'=>new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectIOW'), 'a.ProjectIOWId=c.ProjectIOWId', array('BudgetQty'=>new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_ProjectIOWPlan'), 'a.ProjectIOWId=d.ProjectIOWId', array('PrevPlanQty'=>new Expression("isnull(d.Qty,0)")), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_RFCIOWTrans'), new Expression("a.ProjectIOWId=e.ProjectIOWId and e.RFCRegisterId=$iRFCId"), array('CurPlanQty'=>new Expression("isnull(e.Qty,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId','RefSerialNo', 'Specification'))
                    ->where(array("a.ProjectId"=>$projId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                    ->join(array('e' => 'Proj_RFCIOWTrans'), new Expression("a.ProjectIOWId=e.ProjectIOWId and e.RFCRegisterId=$iRFCId"), array(), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_RFCIOWWBSTrans'), new Expression("e.RFCTransId=c.RFCTransId and a.WBSId=c.WBSId"), array('PrevPlanQty' => new Expression("isnull(c.PrevQty,0)"),'CurPlanQty'=>new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId','WBSId','BudgetQty'=>new Expression("a.Qty")))
                    ->where(array("a.ProjectId"=>$projId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            } else if ($editid !=0){
                $this->_view->revrequired ='N';
                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'=>new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectIOW'), 'a.ProjectIOWId=c.ProjectIOWId', array('BudgetQty'=>new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_ProjectIOWPlan'), 'a.ProjectIOWId=d.ProjectIOWId', array('PrevPlanQty'=>new Expression("isnull(d.Qty,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId','RefSerialNo', 'Specification'))
                    ->where(array("a.ProjectIOWId"=>$editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                    ->join(array('c' => 'Proj_WBSTransPlan'), new Expression("a.WBSId=c.WBSId and a.ProjectIOWId=c.ProjectIOWId"), array('PrevPlanQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId','WBSId','BudgetQty'=>new Expression("a.Qty"),'CurPlanQty' => new Expression("'0'")))
                    ->where(array("a.ProjectIOWId"=>$editid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            }

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName'), $select:: JOIN_INNER)
                ->columns(array('WBSId' => new Expression('DISTINCT(a.WBSId)')))
                ->where(array("a.ProjectId"=>$editid));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
        if(empty($rfctrans) && $iprojectId!=0) {
            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName' => new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_ProjectIOW'), 'a.ProjectIOWId=c.ProjectIOWId', array('BudgetQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                ->join(array('d' => 'Proj_ProjectIOWPlan'), 'a.ProjectIOWId=d.ProjectIOWId', array('PrevPlanQty' => new Expression("isnull(d.Qty,0)")), $select:: JOIN_LEFT)
                ->columns(array('ProjectIOWId', 'RefSerialNo', 'Specification', 'CurPlanQty' => new Expression("'0'")))
                ->where(array("a.ProjectId"=>$iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                ->join(array('c' => 'Proj_WBSTransPlan'), new Expression("a.WBSId=c.WBSId and a.ProjectIOWId=c.ProjectIOWId"), array('PrevPlanQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                ->columns(array('ProjectIOWId','WBSId','BudgetQty'=>new Expression("a.Qty"),'CurPlanQty' => new Expression("'0'")))
                ->where(array("a.ProjectId"=>$iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('value' => 'WBSName'), $select:: JOIN_INNER)
                ->columns(array('data' => new Expression('DISTINCT(a.WBSId)')))
                ->where(array("a.ProjectId"=>$iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }
        $this->_view->rfctrans= $rfctrans;
        $this->_view->wbsList= $wbslist;
        $this->_view->wbstrans= $wbstrans;

//        $select = $sql->select();
//        $select->from('Proj_WorkGroupMaster')
//            ->columns(array('WorkGroupId','SerialNo', 'WorkGroupName'));
//
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//        $parentdata = array();
//
//        $k=0;
//        for ($i=0;$i < count($workgroup);$i++) {
//            $parentdata[$k]['data'] = $workgroup[$i]['WorkGroupId'];
//            $parentdata[$k]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];
//
//            $k=$k+1;
//
//            $select = $sql->select();
//            $select->from(array('a' =>'Proj_ProjectIOWMaster'))
//                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId',array('UnitName'), $select:: JOIN_LEFT)
//                ->columns(array('IOWId', 'SerialNo', 'Specification', 'UnitId'), array('UnitName'))
//                ->where(array("a.WorkGroupId"=>$workgroup[$i]['WorkGroupId']));
//
//            $statement = $sql->getSqlStringForSqlObject($select);
//            $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//            for ($j=0;$j < count($parentiow);$j++) {
//                $parentdata[$k]['data'] =  $workgroup[$i]['WorkGroupId'].'.'.$parentiow[$j]['IOWId'];
//                $parentdata[$k]['value'] = $parentiow[$j]['SerialNo'] . '   ' .$parentiow[$j]['Specification'];
//                $parentdata[$k]['UnitId'] = $parentiow[$j]['UnitId'];
//                $parentdata[$k]['UnitName'] = $parentiow[$j]['UnitName'];
//                $k=$k+1;
//            }
//        }
//        $this->_view->parentiow = $parentdata;

        $this->_view->genType = $aVNo["genType"];
        $this->_view->mode = $smode;
        $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
        $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;

        if (!isset($rfcid) || $rfcid == 0 ) {
            if ($aVNo["genType"] ==false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function rfcresourcerateAction()
    {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Resource Rate");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);
        $request = $this->getRequest();

        if ($request->isPost()) {
            $postData = $request->getPost();
            if (!is_null($postData['frm_what'])) {
                // get project list
                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId', 'ProjectName'))
                    ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $this->_view->frmwhat = $postData['frm_what'];
                $this->_view->projecttype = $postData['type_name'];
                $this->_view->revrequired= $postData['revrequired'];

                if ($postData['type_name'] == 'P') {
                    $this->_view->projecttypename = 'Plan';
                } else {
                    $this->_view->projecttypename = 'Budget';
                }

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectResource'))
                    ->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array('Code', 'ResourceName'=>new Expression("Case When a.RateType='M' then ResourceName+' (Manual)' when a.RateType='A' then ResourceName+' (Machinery)' else  ResourceName end"), 'TypeId', 'UnitId'),$select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceType'),'b.TypeId=c.TypeId', array('TypeName'),$select::JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'),'b.UnitId=d.UnitId', array('UnitName'),$select::JOIN_LEFT)
                    ->columns(array('TransId','ResourceId','Qty','IncludeFlag','RateType','Rate','Amount','CInc'=>new Expression("IncludeFlag"),'CRate'=>new Expression("'0'"),'CAmount'=>new Expression("'0'")))
                    ->where(array('a.ProjectId' => $postData['project_id']));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectdetails = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from('Proj_WBSMaster')
                    ->columns(array('WBSId', 'WBSName', 'ParentId'))
                    ->where('ProjectId = ' . $postData['project_id']);
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projWBS = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                // get activity rate analysis
                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectResource'))
                    ->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array('ResourceName','ResourceGroupId','Code', 'TypeId'
                    , 'UnitId','LeadDays','AnalysisMQty','AnalysisAQty','LRate','MRate','ARate'
                    , 'AnalysisMQty', 'AnalysisAQty'),$select::JOIN_LEFT)
                    ->columns(array('ResourceId', 'Rate','RateType'))
                    ->where(array('a.ProjectId' => $postData['project_id'], 'b.TypeId' => '4',"a.RateType<>'L'"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projectdetailsactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                foreach($projectdetailsactivity as &$activity) {
                    $iResId = $activity['ResourceId'];
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceId', 'ResourceName', 'Code'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitId', 'UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'))
                        ->where(array("a.MResourceId" => $iResId, 'ActivityType' => 'M'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $activity['rateAnalysis'] = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceId', 'ResourceName', 'Code'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitId', 'UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'))
                        ->where(array("a.MResourceId" => $iResId, 'ActivityType' => 'A'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $activity['rateAnalysisR'] = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }
                $this->_view->projectdetailsactivity = $projectdetailsactivity;

                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"), 'Rate', 'TypeId'), array('UnitName'))
                    ->where("a.DeleteFlag='0' and a.TypeId !='4' and (a.TypeId !='2' or MaterialType='F')");
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            }
        }

        $iRFCId = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'),'number');
        if(!$this->getRequest()->isPost() && $iRFCId == 0) {
            $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
        }
        if ($iRFCId !=0) {
            $select = $sql->select();
            $select->from('Proj_RFCRegister')
                ->columns(array('RefNo', 'RefDate','Approve','Narration','ProjectId','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end")))
                ->where(array("RFCRegisterId" => $iRFCId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            $iProjectId = 0;
            if (!empty($rfcregister)) {
                $iProjectId =$rfcregister ['ProjectId'];
                $this->_view->revrequired = $rfcregister['RevRequired'];
            }
            $this->_view->rfcregister=$rfcregister;

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectResource'))
                ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName'=>new Expression("Case When a.RateType='M' then ResourceName+' (Manual)' when a.RateType='A' then ResourceName+' (Machinery)' else  ResourceName end"), 'TypeId', 'UnitId'), $select::JOIN_LEFT)
                ->join(array('c' => 'Proj_ResourceType'), 'b.TypeId=c.TypeId', array('TypeName'), $select::JOIN_LEFT)
                ->join(array('d' => 'Proj_UOM'), 'b.UnitId=d.UnitId', array('UnitName'), $select::JOIN_LEFT)
                ->join(array('e' => 'Proj_RFCProjectResourceRate'), new Expression("a.ResourceId=e.ResourceId and a.RateType=e.RateType and e.RFCRegisterId=$iRFCId"), array('CRate' => new Expression("e.Rate"), 'CAmount' => new Expression("e.Rate*a.Qty"),'CInc' => new Expression("e.IncludeFlag")), $select::JOIN_LEFT)
                ->columns(array('TransId', 'ResourceId', 'Qty', 'IncludeFlag'=>new Expression("a.IncludeFlag"), 'Rate', 'Amount','RateType'))
                ->where(array('a.ProjectId' => $iProjectId ));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->projectdetails = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from('Proj_WBSMaster')
                ->columns(array('WBSId', 'WBSName', 'ParentId'))
                ->where('ProjectId = ' . $iProjectId );
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->projWBS = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            // get activity rate analysis
            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectResource'))
                ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceName', 'ResourceGroupId', 'Code', 'TypeId'
                , 'UnitId', 'LeadDays', 'AnalysisMQty', 'AnalysisAQty','LRate', 'MRate', 'ARate'
                , 'AnalysisMQty', 'AnalysisAQty'), $select::JOIN_LEFT)
                ->columns(array('ResourceId', 'Rate','RateType'))
                ->where(array('a.ProjectId' => $iProjectId , 'b.TypeId' => '4'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $projectdetailsactivity = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            foreach ($projectdetailsactivity as &$activity) {
                $iResId = $activity['ResourceId'];
                $sResType = $activity['RateType'];

                if ($sResType=='A') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceId', 'ResourceName', 'Code'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitId', 'UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'))
                        ->where(array("a.MResourceId" => $iResId, 'ActivityType' => 'M'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $activity['rateAnalysis'] = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }

                if ($sResType=='M') {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ResourceActivityTrans'))
                        ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('ResourceId', 'ResourceName', 'Code'), $select:: JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitId', 'UnitName'), $select:: JOIN_LEFT)
                        ->columns(array('ResourceId', 'Qty', 'Rate', 'Amount', 'ActivityType'))
                        ->where(array("a.MResourceId" => $iResId, 'ActivityType' => 'A'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $activity['rateAnalysisR'] = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }
            }
            $this->_view->projectdetailsactivity = $projectdetailsactivity;

            $select = $sql->select();
            $select->from(array('a' => 'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' => new Expression("Code + ' ' +ResourceName"), 'Rate', 'TypeId'), array('UnitName'))
                ->where("a.DeleteFlag='0' and a.TypeId !='4' and (a.TypeId !='2' or MaterialType='F')");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->reslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

        $this->_view->genType = $aVNo["genType"];
        $this->_view->rfcid = $iRFCId;

        if ($iRFCId == 0 ) {
            if ($aVNo["genType"] ==false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function updateresourcerateAction() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $request = $this->getRequest();
        if ($request->isXmlHttpRequest()) {
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $userId = $this->auth->getIdentity()->UserId;
            $sql = new Sql($dbAdapter);
            $connection = $dbAdapter->getDriver()->getConnection();
            if ($request->isPost()) {
                try {
                    $connection->beginTransaction();

                    $postData = $request->getPost();
                    $iRFCId = $this->bsf->isNullCheck($postData['RFCId'],'number');
                    $sRFCNo = $this->bsf->isNullCheck($postData['RefNo'],'string');
                    $sRFCDate = $this->bsf->isNullCheck($postData['RefDate'],'string');
                    $iProjectId = $this->bsf->isNullCheck($postData['ProjectId'],'number');

                    $rfctype='Project-Resource';
                    if ($iRFCId ==0) {
                        $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($sRFCDate)), 0, 0, $dbAdapter, "I");

                        if ($aVNo["genType"] == true) {
                            $sVno = $aVNo["voucherNo"];
                        } else {
                            $sVno = $postData['refno'];
                        }


                        $irevrequired=0;
                        if ($postData['revrequired'] =='Y') $irevrequired=1;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Project', 'RefDate' => date('Y-m-d', strtotime($sRFCDate)),
                            'RFCType' => $rfctype, 'Approve' => 'N','ProjectId'=>$iProjectId,'Type' => 'Project-Resource','ProjectType'=>'B','RevRequired'=>$irevrequired));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iRFCId = $dbAdapter->getDriver()->getLastGeneratedValue();
                    } else {

                        $irevrequired=0;
                        if ($postData['revrequired'] =='Y') $irevrequired=1;

                        $update = $sql->update();
                        $update->table('Proj_RFCRegister');
                        $update->set(array(
                            'RefNo' => $this->bsf->isNullCheck($postData['refno'],'string'),
                            'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                            'RevRequired'=>$irevrequired
                        ));

                        $update->where(array('RFCRegisterId' => $iRFCId));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $delete = $sql->delete();
                        $delete->from('Proj_RFCProjectResourceRate')
                            ->where(array("RFCRegisterId" => $iRFCId));
                        $statement = $sql->getSqlStringForSqlObject($delete);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $data = json_decode($request->getPost('rowdata'));
                    foreach($data as $tdata) {
                        $rate = floatval($this->bsf->isNullCheck($tdata->Rate,'number'));
                        $cRate = floatval($this->bsf->isNullCheck($tdata->CRate,'number'));
                        $iResourceId = $this->bsf->isNullCheck($tdata->ResourceId,'number');

                        if ($cRate !=0) {
                            if ($rate != $cRate)
                            {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCProjectResourceRate');
                                $insert->Values(array('RFCRegisterId' => $iRFCId, 'ResourceId' => $iResourceId, 'Rate' => $cRate));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                $rfcTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                                foreach($postData['wbsWise'] as $wbsData) {
                                    if($iResourceId == $wbsData['resourceId']) {
                                        $insert = $sql->insert();
                                        $insert->into('Proj_WBSWiseResourceRate');
                                        $insert->Values(array('RFCTransId' => $rfcTransId, 'ResourceId' => $iResourceId, 'WBSId' => $wbsData['wbsId'], 'ParentId' => $wbsData['parentId'], 'LiftingCharge' => $this->bsf->isNullCheck($wbsData['liftCharge'],'number'), 'FloorWiseRate' => $this->bsf->isNullCheck($wbsData['floorRate'],'number')));
                                        $statement = $sql->getSqlStringForSqlObject($insert);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }
                                }
                            }
                        }
                    }

                    //activities
//                    $rfctype = 'Project-Resource';
//                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
//                    $sVno = $aVNo["voucherNo"];
//
//                    $insert = $sql->insert();
//                    $insert->into('Proj_RFCRegister');
//                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Project', 'RefDate' => date('Y-m-d'), 'RFCType' => $rfctype, 'Approve' => 'N','ProjectId'=>$iProjectId, 'Type' => 'Project-Resource'));
//                    $statement = $sql->getSqlStringForSqlObject($insert);
//                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
//                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    // parse form serialize data
                    $postActivityData = array();
                    parse_str($postData['activities'], $postActivityData);

                    $iRowId = $this->bsf->isNullCheck($postActivityData['activityrowid'],'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $resGroupId = $this->bsf->isNullCheck($postActivityData['resgroupid_' . $i], 'number');
                        $resName = $this->bsf->isNullCheck($postActivityData['resname_' . $i], 'string');

                        if ($resGroupId == "" && $resName == "")
                            continue;

                        $rateType = $this->bsf->isNullCheck($postActivityData['analrate_' . $i], 'string');
                        $mRate = $this->bsf->isNullCheck($postActivityData['analrateM_' . $i], 'number');
                        $lRate = $this->bsf->isNullCheck($postActivityData['analrateLS_' . $i], 'number');
                        $aRate = $this->bsf->isNullCheck($postActivityData['analrateA_' . $i], 'number');
                        $mQty = $this->bsf->isNullCheck($postActivityData['activity_' . $i . '_AnalQty'], 'number');
                        $aQty = $this->bsf->isNullCheck($postActivityData['activityR_' . $i . '_AnalQty'], 'number');

                        if ($mRate == 0 && $lRate == 0 && $aRate == 0)
                            $rateType = '';

                        if ($rateType=="") $rateType="L";

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCResourceTrans');
                        $insert->Values(array('RFCRegisterId' => $iRFCId, 'Code' => $postActivityData['code_' . $i], 'ResourceName' => $resName,
                            'ResourceGroupId' => $resGroupId, 'TypeId' => $this->bsf->isNullCheck($postActivityData['typeid_' . $i], 'number'), 'UnitId' => $this->bsf->isNullCheck($postActivityData['unitid_' . $i], 'number'),
                            'Rate' => $this->bsf->isNullCheck($postActivityData['rate_' . $i], 'number'), 'AnalysisAQty' => $aQty, 'AnalysisMQty' => $mQty, 'RateType' => $rateType, 'LRate' => $lRate, 'MRate' => $mRate, 'ARate' => $aRate,
//                                            'LeadDays' => $leadDays, 'CreditDays' => $creditDays, 'WorkUnitId' => $wUnitId, 'WorkRate' => $wRate, 'MaterialType' => $materialType
                        ));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                        if ($resGroupId !=0) {
                            $update = $sql->update();
                            $update->table('Proj_ResourceGroup');
                            $update->set(array(
                                'GroupUsed' => 1,
                            ));
                            $update->where(array('ResourceGroupId' => $resGroupId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }



                        $iactRowid = $this->bsf->isNullCheck($postActivityData['rowinfoid_' . $i], 'number');
                        for ($j = 1; $j <= $iactRowid; $j++) {
                            $resid = $this->bsf->isNullCheck($postActivityData['activity_' . $i . '_resid_' . $j], 'number');
                            $qty = $this->bsf->isNullCheck($postActivityData['activity_' . $i . '_resqty_' . $j], 'number');
                            $rate = $this->bsf->isNullCheck($postActivityData['activity_' . $i . '_resrate_' . $j], 'number');
                            $amt = $this->bsf->isNullCheck($postActivityData['activity_' . $i . '_resamt_' . $j], 'number');

                            if ($resid != 0) {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCActivityTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'ActivityType' => 'M', 'ResourceId' => $resid, 'Qty' => $qty, 'Rate' => $rate, 'Amount' => $amt));
                                $statement = $sql->getSqlStringForSqlObject($insert);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iactMRowid = $this->bsf->isNullCheck($postActivityData['rowinfoidR_' . $i], 'number');
                        for ($j = 1; $j <= $iactMRowid; $j++) {
                            $resid = $this->bsf->isNullCheck($postActivityData['activityR_' . $i . '_resid_' . $j], 'number');
                            $qty = $this->bsf->isNullCheck($postActivityData['activityR_' . $i . '_resqty_' . $j], 'number');
                            $rate = $this->bsf->isNullCheck($postActivityData['activityR_' . $i . '_resrate_' . $j], 'number');
                            $amt = $this->bsf->isNullCheck($postActivityData['activityR_' . $i . '_resamt_' . $j], 'number');

                            if ($resid != 0) {
                                $insert = $sql->insert();
                                $insert->into('Proj_RFCActivityTrans');
                                $insert->Values(array('RFCTransId' => $itransid, 'ActivityType' => 'A', 'ResourceId' => $resid, 'Qty' => $qty, 'Rate' => $rate, 'Amount' => $amt));
                                $statement = $sql->getSqlStringForSqlObject($insert);

                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$iRFCId,0, 0, 'Project',$sVno,$userId, 0 ,0);

//                    $owners = "sucess";
                    $response = $this->getResponse();
                    return $response->setContent('success')
                        ->setStatusCode('200');

//                    if (!count($owners)) {
//                        $response->setContent('No Data');
//                        $response->setStatusCode('204');
//                    } else {
//                        $response->setContent(json_encode($owners));
//                    }
                } catch (PDOException $e) {
                    $connection->rollback();
                    return $response->setContent("Bad Request")
                        ->setStatusCode("400");
                }
            }
        }
    }

    public function rfcwbsplanAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast | RFC WBS Plan");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();
            if (!is_null($postData['frm_what'])) {
                // get project list
                $select = $sql->select();
                $select->from('Proj_ProjectMaster')
                    ->columns(array('ProjectId', 'ProjectName'))
                    ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $this->_view->frmwhat = $postData['frm_what'];
                $this->_view->projecttype = $postData['type_name'];
                if ($postData['type_name'] == 'B')
                    $this->_view->projecttypename = 'Budget';
                else if ($postData['type_name'] == 'P')
                    $this->_view->projecttypename = 'Plan';

            }
        } else {

        }

        $rfcid = $this->params()->fromRoute('rfcId');
        $smode = $this->params()->fromRoute('mode');
        $editid = $this->params()->fromRoute('id');

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

        $select = $sql->select();
        $select->from('Proj_WorkGroupMaster')
            ->columns(array('WorkGroupId','SerialNo', 'WorkGroupName'));

        $statement = $sql->getSqlStringForSqlObject($select);
        $workgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $parentdata = array();

        $k=0;
        for ($i=0;$i < count($workgroup);$i++) {
            $parentdata[$k]['data'] = $workgroup[$i]['WorkGroupId'];
            $parentdata[$k]['value'] = $workgroup[$i]['SerialNo'] . '   ' . $workgroup[$i]['WorkGroupName'];

            $k=$k+1;

            $select = $sql->select();
            $select->from(array('a' =>'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId',array('UnitName'), $select:: JOIN_LEFT)
                ->columns(array('IOWId', 'SerialNo', 'Specification', 'UnitId'), array('UnitName'))
                ->where(array("a.WorkGroupId"=>$workgroup[$i]['WorkGroupId']));

            $statement = $sql->getSqlStringForSqlObject($select);
            $parentiow = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            for ($j=0;$j < count($parentiow);$j++) {
                $parentdata[$k]['data'] =  $workgroup[$i]['WorkGroupId'].'.'.$parentiow[$j]['IOWId'];
                $parentdata[$k]['value'] = $parentiow[$j]['SerialNo'] . '   ' .$parentiow[$j]['Specification'];
                $parentdata[$k]['UnitId'] = $parentiow[$j]['UnitId'];
                $parentdata[$k]['UnitName'] = $parentiow[$j]['UnitName'];
                $k=$k+1;
            }
        }
        $this->_view->parentiow = $parentdata;

        $this->_view->mode = $smode;
        $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
        $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;
        $this->_view->genType = $aVNo["genType"];

        if (!isset($rfcid) || $rfcid == 0 ) {
            if ($aVNo["genType"] ==false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function projboqAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || Project BOQ");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $projectId = $this->params()->fromRoute('projectId');
        $this->_view->type = $this->params()->fromRoute('type');
        $this->_view->gpage = $this->params()->fromRoute('page');

        if($projectId == '' && $this->_view->type == '') {
            $this->redirect()->toRoute('project/projboq', array('controller' => 'rfc', 'action' => 'projectboq'));
        }
        $this->_view->projectId = $projectId;

        $sessionProjBoqSearch = new Container('sessionProjBoqSearch');

        if($this->_view->gpage == '') {
            $sessionProjBoqSearch->search = array();
        }

        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();
            $sessionProjBoqSearch->search = $postData;

//            $subQuery = $sql->select();
//            $subQuery->from("Proj_ProjectIOWMaster")
//                ->columns(array("PWorkGroupId"));
//            $subQuery->where(array('ProjectId' => $postData['projectId']));

            $select = $sql->select();
            $select->from('Proj_ProjectWorkGroup')
                ->where('ProjectId = ' . $postData['projectId'])
                ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
                ->order(array('SortId ASC','PworkGroupId ASC'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $projboq = array();
            foreach($projWGRes as $pwg) {
                if($postData['serialNo'] != '' || $postData['specification'] != '') {
                    if($postData['serialNo'] == $pwg['SerialNo'] || stristr($postData['specification'],$pwg['WorkGroupName'])) {
                        $projboq['Type'][] = '1';
                        $projboq['SerialNo'][] = $pwg['SerialNo'];
                        $projboq['Name'][] = $pwg['WorkGroupName'];
                        $projboq['Unit'][] = '';
                        $projboq['Quanity'][] = '';
                        $projboq['Rate'][] = '';
                        $projboq['Amount'][] = '';
                        $projboq['QualRate'][] = '';
                        $projboq['QualAmount'][] = '';
                        $projboq['IOWTransId'][] = '';
                        $projboq['ProjectIOWId'][] = '';
                        $projboq['Header'][] = '1';
                    }
                }

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                    ->columns(array('RefSerialNo', 'Specification','ProjectIOWId','Header'))
                    ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']));

                if($postData['serialNo'] != '') {
                    $select->where->like('a.SerialNo', "%".$postData['serialNo']."%");
                }
                if($postData['specification'] != '') {
                    $select->where->like('a.Specification', "%".$postData['specification']."%");
                }
                if($postData['amount'] != '') {
                    $select->where(array('b.Amount' => $postData['amount']));
                }
                $select->order(array('a.SortId ASC','a.ParentId ASC','a.ProjectIOWId ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                foreach($projIowPRes as $piowp) {

                    $projboq['Type'][] = '2';
                    $projboq['SerialNo'][] = $piowp['RefSerialNo'];
                    $projboq['Name'][] = $piowp['Specification'];
                    $projboq['Unit'][] = $piowp['UnitName'];
                    $projboq['Quanity'][] = $piowp['Qty'];
                    $projboq['Rate'][] = $piowp['Rate'];
                    $projboq['Amount'][] = $piowp['Amount'];
                    $projboq['QualRate'][] = $piowp['QualRate'];
                    $projboq['QualAmount'][] = $piowp['QualAmount'];
                    $projboq['IOWTransId'][] = $piowp['IOWTransId'];
                    $projboq['ProjectIOWId'][] = $piowp['ProjectIOWId'];
                    $projboq['Header'][] = $piowp['Header'];
                }
            }
            $this->_view->projboq = $projboq;
        } else {
            if(count($sessionProjBoqSearch->search) > 0) {
                $select = $sql->select();
                $select->from('Proj_ProjectWorkGroup')
                    ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
                    ->where('ProjectId = ' . $sessionProjBoqSearch->search['projectId'])
                    ->order(array('SortId ASC','PworkGroupId ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $projboq = array();
                foreach($projWGRes as $pwg) {
                    if($sessionProjBoqSearch->search['serialNo'] != '' || $sessionProjBoqSearch->search['specification'] != '') {
                        if($sessionProjBoqSearch->search['serialNo'] == $pwg['SerialNo'] || stristr($sessionProjBoqSearch->search['specification'],$pwg['WorkGroupName'])) {
                            $projboq['Type'][] = '1';
                            $projboq['SerialNo'][] = $pwg['SerialNo'];
                            $projboq['Name'][] = $pwg['WorkGroupName'];
                            $projboq['Unit'][] = '';
                            $projboq['Quanity'][] = '';
                            $projboq['Rate'][] = '';
                            $projboq['Amount'][] = '';
                            $projboq['QualRate'][] = '';
                            $projboq['QualAmount'][] = '';
                            $projboq['IOWTransId'][] = '';
                            $projboq['ProjectIOWId'][] = '';
                            $projboq['Header'][] = '1';
                        }
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                        ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->columns(array('RefSerialNo', 'Specification','ProjectIOWId','Header'))
                        ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']));
                    if($sessionProjBoqSearch->search['serialNo'] != '') {
                        $select->where->like('a.SerialNo', "%".$sessionProjBoqSearch->search['serialNo']."%");
                    }
                    if($sessionProjBoqSearch->search['specification'] != '') {
                        $select->where->like('a.Specification', "%".$sessionProjBoqSearch->search['specification']."%");
                    }
                    if($sessionProjBoqSearch->search['amount'] != '') {
                        $select->where(array('b.Amount' => $sessionProjBoqSearch->search['amount']));
                    }
                    $select->order(array('a.SortId ASC','a.ParentId ASC','a.ProjectIOWId ASC'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    foreach($projIowPRes as $piowp) {
                        $projboq['Type'][] = '2';
                        $projboq['SerialNo'][] = $piowp['RefSerialNo'];
                        $projboq['Name'][] = $piowp['Specification'];
                        $projboq['Unit'][] = $piowp['UnitName'];
                        $projboq['Quanity'][] = $piowp['Qty'];
                        $projboq['Rate'][] = $piowp['Rate'];
                        $projboq['Amount'][] = $piowp['Amount'];
                        $projboq['QualRate'][] = $piowp['QualRate'];
                        $projboq['QualAmount'][] = $piowp['QualAmount'];
                        $projboq['IOWTransId'][] = $piowp['IOWTransId'];
                        $projboq['ProjectIOWId'][] = $piowp['ProjectIOWId'];
                        $projboq['Header'][] = $piowp['Header'];
                    }
                }
                $this->_view->projboq = $projboq;
            } else {
                $sessionProjBoqSearch->search = array();
                // General
                $select = $sql->select();
                $select->from('Proj_ProjectWorkGroup')
                    ->where('ProjectId = ' . $projectId)
                    ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
                    ->order(array('SortId ASC','PworkGroupId ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $projboq = array();
                foreach($projWGRes as $pwg) {
                    $projboq['Type'][] = '1';
                    $projboq['SerialNo'][] = $pwg['SerialNo'];
                    $projboq['Name'][] = $pwg['WorkGroupName'];
                    $projboq['Unit'][] = '';
                    $projboq['Quanity'][] = '';
                    $projboq['Rate'][] = '';
                    $projboq['Amount'][] = '';
                    $projboq['QualRate'][] = '';
                    $projboq['QualAmount'][] = '';
                    $projboq['IOWTransId'][] = '';
                    $projboq['ProjectIOWId'][] = '';
                    $projboq['Header'][] = '1';

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                        ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']))
                        ->columns(array('RefSerialNo', 'Specification','ProjectIOWId','Header'))
                        ->order(array('a.SortId ASC','a.ParentId ASC','a.ProjectIOWId ASC'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                    foreach($projIowPRes as $piowp) {
                        $projboq['Type'][] = '2';
                        $projboq['SerialNo'][] = $piowp['RefSerialNo'];
                        $projboq['Name'][] = $piowp['Specification'];
                        $projboq['Unit'][] = $piowp['UnitName'];
                        $projboq['Quanity'][] = $piowp['Qty'];
                        $projboq['Rate'][] = $piowp['Rate'];
                        $projboq['Amount'][] = $piowp['Amount'];
                        $projboq['QualRate'][] = $piowp['QualRate'];
                        $projboq['QualAmount'][] = $piowp['QualAmount'];
                        $projboq['IOWTransId'][] = $piowp['IOWTransId'];
                        $projboq['ProjectIOWId'][] = $piowp['ProjectIOWId'];
                        $projboq['Header'][] = $piowp['Header'];

//                        $select = $sql->select();
//                        $select->from(array('a' => 'Proj_ProjectIOWMaster'))
//                            ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
//                            ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
//                            ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId'], 'a.ParentId' => $piowp['ProjectIOWId']));
//                        $statement = $sql->getSqlStringForSqlObject($select);
//                        $projIowCRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//                        foreach($projIowCRes as $piowc) {
//                            $projboq['Type'][] = '3';
//                            $projboq['SerialNo'][] = $piowc['SerialNo'];
//                            $projboq['Name'][] = $piowc['Specification'];
//                            $projboq['Unit'][] = $piowc['UnitName'];
//                            $projboq['Quanity'][] = $piowc['Qty'];
//                            $projboq['Rate'][] = $piowc['Rate'];
//                            $projboq['Amount'][] = $piowc['Amount'];
//                            $projboq['QualRate'][] = $piowc['QualRate'];
//                            $projboq['QualAmount'][] = $piowc['QualAmount'];
//                            $projboq['IOWTransId'][] = $piowc['IOWTransId'];
//                            $projboq['ProjectIOWId'][] = $piowc['ProjectIOWId'];
//                        }
                    }
                }
                $this->_view->projboq = $projboq;
            }
        }

        // For Search
        $select = $sql->select();

        $select->from('Proj_ProjectWorkGroup')
            ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
            ->where('ProjectId = ' . $projectId);
        $statement = $sql->getSqlStringForSqlObject($select);
        $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $searchboq = array();
        foreach($projWGRes as $pwg) {
            $searchboq['SerialNo'][] = $pwg['SerialNo'];
            $searchboq['Name'][] = $pwg['WorkGroupName'];

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                ->columns(array('RefSerialNo', 'Specification'))
                ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']));
            $statement = $sql->getSqlStringForSqlObject($select);
            $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            foreach($projIowPRes as $piowp) {
                $searchboq['SerialNo'][] = $piowp['RefSerialNo'];
                $searchboq['Name'][] = $piowp['Specification'];
            }
        }

        $arrSerialNos = array();
        $arrSpecifications = array();
        if(!empty($searchboq)) {
            for($i=0;$i<count($searchboq['SerialNo']);$i++) {
                $arrSerialNos[] = $searchboq['SerialNo'][$i];
                $arrSpecifications[] = $searchboq['Name'][$i];
            }
        }
        $this->_view->serialNos = $arrSerialNos;
        $this->_view->specifications = $arrSpecifications;
        $this->_view->search = $sessionProjBoqSearch->search;
        // For Search

        // project lists
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function projboqplanAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" Project BOQ Plan");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('projectId'), 'number');

        if($this->getRequest()->isXmlHttpRequest())	{
            $response = $this->getResponse();
            $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('projectId'), 'number');

            if ($projectId == 0) {
                $response->setStatusCode(401)
                    ->setContent('Invalid Project');
                return $response;
            } else {
//                $select = $sql->select();
//                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
//                    ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('Qty' => new Expression('SUM(b.Qty)'), 'Rate' => new Expression('SUM(b.Rate)'),
//                        'Amount' => new Expression('SUM(b.Amount)')), $select::JOIN_LEFT)
//                    ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
//                    ->join(array('d' => 'Proj_ProjectWorkGroup'), 'a.PWorkGroupId=d.PWorkGroupId', array('SerialNo', 'WorkGroupName', 'PWorkGroupId'), $select::JOIN_INNER)
//                    ->join(array('e' => 'Proj_ProjectIOWPlan'), 'a.ProjectIOWId=e.ProjectIOWId', array('CurQty' => new Expression('SUM(e.CurQty)'),
//                        'CurRate' => new Expression('SUM(e.Rate)'), 'CurAmount' => new Expression('SUM(e.Rate * e.CurQty)')), $select::JOIN_LEFT)
//                    ->join(array('f' => 'Proj_ProjectIOWTrans'), 'a.ProjectIOWId=f.ProjectIOWId', array('PrevQty' => new Expression('SUM(f.CurQty)'),
//                        'PrevRate' => new Expression('SUM(f.Rate)'), 'PrevAmount' => new Expression('SUM(f.Rate * f.CurQty)')), $select::JOIN_LEFT)
//                    ->where('a.ProjectId = ' . $projectId)
//                    ->columns(array('RefSerialNo', 'Specification', 'ProjectIOWId', 'CumQty' => new Expression('SUM(e.CurQty) + SUM(f.CurQty)'),
//                        'CumRate' => new Expression('SUM(e.Rate) + SUM(f.Rate)'), 'CumAmount' => new Expression('SUM(e.Rate * e.CurQty) + SUM(f.Rate * f.CurQty)')))
//                    ->group(new Expression('a.PWorkGroupId,a.RefSerialNo,a.Specification,a.ProjectIOWId,c.UnitName,d.SerialNo,d.WorkGroupName,d.PWorkGroupId'))
//                    ->order(array('a.PWorkGroupId ASC'));

                $select1 = $sql->select();
                $select1->from(array('a' => 'Proj_ProjectIOW'))
                    ->columns(array('ProjectIOWId','Qty','Rate','Amount','CumQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'CumRate' => new Expression( "CAST(0 As Decimal(18,2))"),'CumAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'PrevQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'PrevRate' => new Expression( "CAST(0 As Decimal(18,2))"),'PrevAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'CurQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'CurRate' => new Expression( "CAST(0 As Decimal(18,2))"),'CurAmount' => new Expression( "CAST(0 As Decimal(18,2))")))
                    ->where(array('a.ProjectId'=>$projectId));

                $select2 = $sql->select();
                $select2->from(array('a' => 'Proj_ProjectIOWPlan'))
                    ->columns(array('ProjectIOWId','Qty'=> new Expression( "CAST(0 As Decimal(18,2))"),'Rate'=> new Expression( "CAST(0 As Decimal(18,2))"),'Amount'=> new Expression( "CAST(0 As Decimal(18,2))"),'CumQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'CumRate' => new Expression( "CAST(0 As Decimal(18,2))"),'CumAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'PrevQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'PrevRate' => new Expression( "CAST(0 As Decimal(18,2))"),'PrevAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'CurQty' => new Expression("CurQty"),
                        'CurRate' => new Expression("Rate"),'CurAmount' => new Expression("CurQty*Rate")))
                    ->where(array('a.ProjectId'=>$projectId));
                $select2->combine( $select1, 'Union ALL' );

                $select3 = $sql->select();
                $select3->from(array('a' => 'Proj_ProjectIOWTrans'))
                    ->join(array('b' => 'Proj_RevisionMaster'), 'a.RevisionId= b.RevisionId', array(),$select3::JOIN_INNER)
                    ->columns(array('ProjectIOWId','Qty'=> new Expression( "CAST(0 As Decimal(18,2))"),'Rate'=> new Expression( "CAST(0 As Decimal(18,2))"),'Amount'=> new Expression( "CAST(0 As Decimal(18,2))"),'CumQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'CumRate' => new Expression("CAST(0 As Decimal(18,2))"),'CumAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                        'PrevQty' => new Expression("sum(Qty)"),
                        'PrevRate' => new Expression("Case When sum(Qty) <>0 then sum(Amount)/sum(Qty) else 0 end"),'PrevAmount' => new Expression("sum(Amount)"),
                        'CurQty' => new Expression("CAST(0 As Decimal(18,2))"),
                        'CurRate' => new Expression("CAST(0 As Decimal(18,2))"),'CurAmount' => new Expression("CAST(0 As Decimal(18,2))")))
                    ->where("a.ProjectId=$projectId and b.RevisionType='P'")
                    ->group("a.ProjectIOWId");
                $select3->combine( $select2, 'Union ALL' );

                $select4 = $sql->select();
                $select4->from( array( "g" => $select3 ))
                    ->join(array('b' => 'Proj_ProjectIOWMaster'), 'g.ProjectIOWId= b.ProjectIOWId', array('RefSerialNo','Specification'),$select4::JOIN_INNER)
                    ->join(array('c' => 'Proj_ProjectWorkGroup'), 'b.PWorkGroupId=c.PWorkGroupId', array('WorkGroupName'), $select4::JOIN_INNER)
                    ->join(array('d' => 'Proj_UOM'), 'b.UnitId = d.UnitId', array('UnitName'), $select4::JOIN_LEFT)
                    ->columns(array('Qty'=> new Expression("Sum(g.Qty)"),'Rate'=> new Expression("Case When sum(g.Qty) <>0 then sum(g.Amount)/sum(g.Qty) else 0 end"),'Amount'=> new Expression("sum(g.Amount)"),
                        'CumQty' => new Expression("sum(g.CurQty)+sum(g.PrevQty)"),
                        'CumRate' => new Expression("Case When (sum(g.CurQty)+sum(g.PrevQty)) <>0 then (sum(g.CurAmount)+sum(g.PrevAmount))/(sum(g.CurQty)+sum(g.PrevQty)) else 0 end"),'CumAmount' => new Expression("sum(g.CurAmount)+sum(g.PrevAmount)"),
                        'PrevQty' => new Expression("sum(g.PrevQty)"),
                        'PrevRate' => new Expression("Case When sum(g.PrevQty) <>0 then sum(g.PrevAmount)/sum(g.PrevQty) else 0 end"),'PrevAmount' => new Expression("sum(g.PrevAmount)"),
                        'CurQty' => new Expression("sum(g.CurQty)"),
                        'CurRate' => new Expression("Case When sum(g.CurQty) <>0 then sum(g.CurAmount)/sum(g.CurQty) else 0 end"),'CurAmount' => new Expression("sum(g.CurAmount)")));
                $select4->group(array('g.ProjectIOWId','b.RefSerialNo','b.Specification','UnitName','WorkGroupName'));
                $statement = $sql->getSqlStringForSqlObject($select4);

//                $statement = $sql->getSqlStringForSqlObject($select);
                $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                $response->setContent(json_encode($results->toArray()));
                return $response;
            }
        } else {
            if ($projectId == 0)
                $this->redirect()->toRoute('project/projboq', array('controller' => 'rfc', 'action' => 'projectboq'));

            $this->_view->projectId = $projectId;

            $request = $this->getRequest();
            if ($request->isPost())
                $this->redirect()->toRoute('project/projboq', array('controller' => 'rfc', 'action' => 'projectboq'));

            $select1 = $sql->select();
            $select1->from(array('a' => 'Proj_ProjectIOW'))
                ->columns(array('ProjectIOWId','Qty','Rate','Amount','CumQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'CumRate' => new Expression( "CAST(0 As Decimal(18,2))"),'CumAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'PrevQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'PrevRate' => new Expression( "CAST(0 As Decimal(18,2))"),'PrevAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'CurQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'CurRate' => new Expression( "CAST(0 As Decimal(18,2))"),'CurAmount' => new Expression( "CAST(0 As Decimal(18,2))")))
                ->where(array('a.ProjectId'=>$projectId));

            $select2 = $sql->select();
            $select2->from(array('a' => 'Proj_ProjectIOWPlan'))
                ->columns(array('ProjectIOWId','Qty'=> new Expression( "CAST(0 As Decimal(18,2))"),'Rate'=> new Expression( "CAST(0 As Decimal(18,2))"),'Amount'=> new Expression( "CAST(0 As Decimal(18,2))"),'CumQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'CumRate' => new Expression( "CAST(0 As Decimal(18,2))"),'CumAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'PrevQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'PrevRate' => new Expression( "CAST(0 As Decimal(18,2))"),'PrevAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'CurQty' => new Expression("CurQty"),
                    'CurRate' => new Expression("Rate"),'CurAmount' => new Expression("CurQty*Rate")))
                ->where(array('a.ProjectId'=>$projectId));
            $select2->combine( $select1, 'Union ALL' );

            $select3 = $sql->select();
            $select3->from(array('a' => 'Proj_ProjectIOWTrans'))
                ->join(array('b' => 'Proj_RevisionMaster'), 'a.RevisionId= b.RevisionId', array(),$select3::JOIN_INNER)
                ->columns(array('ProjectIOWId','Qty'=> new Expression( "CAST(0 As Decimal(18,2))"),'Rate'=> new Expression( "CAST(0 As Decimal(18,2))"),'Amount'=> new Expression( "CAST(0 As Decimal(18,2))"),'CumQty' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'CumRate' => new Expression("CAST(0 As Decimal(18,2))"),'CumAmount' => new Expression( "CAST(0 As Decimal(18,2))"),
                    'PrevQty' => new Expression("sum(Qty)"),
                    'PrevRate' => new Expression("Case When sum(Qty) <>0 then sum(Amount)/sum(Qty) else 0 end"),'PrevAmount' => new Expression("sum(Amount)"),
                    'CurQty' => new Expression("CAST(0 As Decimal(18,2))"),
                    'CurRate' => new Expression("CAST(0 As Decimal(18,2))"),'CurAmount' => new Expression("CAST(0 As Decimal(18,2))")))
                ->where("a.ProjectId=$projectId and b.RevisionType='P'")
                ->group("a.ProjectIOWId");
            $select3->combine( $select2, 'Union ALL' );

            $select4 = $sql->select();
            $select4->from( array( "g" => $select3 ))
                ->join(array('b' => 'Proj_ProjectIOWMaster'), 'g.ProjectIOWId= b.ProjectIOWId', array('RefSerialNo','Specification'),$select4::JOIN_INNER)
                ->join(array('c' => 'Proj_ProjectWorkGroup'), 'b.PWorkGroupId=c.PWorkGroupId', array('WorkGroupName'), $select4::JOIN_INNER)
                ->join(array('d' => 'Proj_UOM'), 'b.UnitId = d.UnitId', array('UnitName'), $select4::JOIN_LEFT)
                ->columns(array('Qty'=> new Expression("Sum(g.Qty)"),'Rate'=> new Expression("Case When sum(g.Qty) <>0 then sum(g.Amount)/sum(g.Qty) else 0 end"),'Amount'=> new Expression("sum(g.Amount)"),
                    'CumQty' => new Expression("sum(g.CurQty)+sum(g.PrevQty)"),
                    'CumRate' => new Expression("Case When (sum(g.CurQty)+sum(g.PrevQty)) <>0 then (sum(g.CurAmount)+sum(g.PrevAmount))/(sum(g.CurQty)+sum(g.PrevQty)) else 0 end"),'CumAmount' => new Expression("sum(g.CurAmount)+sum(g.PrevAmount)"),
                    'PrevQty' => new Expression("sum(g.PrevQty)"),
                    'PrevRate' => new Expression("Case When sum(g.PrevQty) <>0 then sum(g.PrevAmount)/sum(g.PrevQty) else 0 end"),'PrevAmount' => new Expression("sum(g.PrevAmount)"),
                    'CurQty' => new Expression("sum(g.CurQty)"),
                    'CurRate' => new Expression("Case When sum(g.CurQty) <>0 then sum(g.CurAmount)/sum(g.CurQty) else 0 end"),'CurAmount' => new Expression("sum(g.CurAmount)")));
            $select4->group(array('g.ProjectIOWId','b.RefSerialNo','b.Specification','UnitName','WorkGroupName'));
            $statement = $sql->getSqlStringForSqlObject($select4);
            $this->_view->projboq = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            // project lists
            $select = $sql->select();
            $select->from('Proj_ProjectMaster')
                ->columns(array('ProjectId', 'ProjectName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
            return $this->_view;
        }
    }

    public function projectboqAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || Project BOQ");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function getprojectboqmasterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest())	{
            $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('projectId'), 'number');

            $sql = new Sql($dbAdapter);
            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectMaster'))
                ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectId=b.ProjectId', array('SerialNo', 'Specification'), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_ProjectIOW'), 'b.IOWId=c.ProjectIOWId', array('IOWTransId','Qty', 'Rate', 'Amount'), $select:: JOIN_LEFT)
                ->columns(array('ProjectId'), array('SerialNo', 'Specification'), array('IOWTransId','Qty', 'Rate', 'Amount'))
                ->where('a.ProjectId = '.$projectId.' AND b.IOWId IS NOT NULL AND c.ProjectIOWId IS NOT NULL');

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getprojectboqdetailsAction() {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $TransId = $this->bsf->isNullCheck($request->getPost('TransId'), 'number');
                $sql = new Sql($dbAdapter);
                $select = $sql->select();

                $select->from(array('a' => 'Proj_ProjectIOW'))
                    ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId=b.ProjectIOWId', array('SerialNo', 'Specification','WorkingQty','RWorkingQty','CementRatio','SandRatio','MetalRatio','ThickQty'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), 'b.UnitId=d.Unitid', array('UnitName'), $select:: JOIN_LEFT)
                    ->join(array( 'c' => 'Proj_ProjectIOWMeasurement' ), 'a.ProjectIOWId=c.ProjectIOWId', array( 'Measurement','CellName', 'SelectedColumns'), $select::JOIN_LEFT )
                    ->join(array('h' => 'Proj_WorkTypeMaster'), 'b.WorkTypeId=h.WorkTypeId', array('ConcreteMix','Cement','Sand','Metal','Thickness','WorkType'), $select:: JOIN_LEFT)
                    ->columns(array('IOWTransId','ProjectIOWId','Qty', 'Rate', 'Amount','WastageAmt','BaseRate','QualifierValue','TotalRate','NetRate'))
                    ->where(array("a.IOWTransId=$TransId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->details = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectRateAnalysis'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName','TypeId'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_ResourceType'), 'b.TypeId=c.TypeId', array('TypeName'), $select:: JOIN_LEFT)
                    ->join(array('d' => 'Proj_ResourceGroup'), 'b.ResourceGroupId=d.ResourceGroupId', array('ResourceGroupName'), $select:: JOIN_LEFT)
                    ->join(array('e' => 'Proj_UOM'), 'b.UnitId=e.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('*'),array('Code', 'ResourceName'))
                    ->where(array("a.ProjectIOWId=".$this->_view->details['ProjectIOWId']));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->analysis = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectDetails'))
                    ->join(array('b' => 'Proj_Resource'), 'a.ResourceId=b.ResourceId', array('Code', 'ResourceName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('Qty'=>new expression("Sum(a.Qty)"),'Amount'=>new Expression("sum(a.Amount)")))
                    ->where(array("a.ProjectIOWId=".$this->_view->details['ProjectIOWId']))
                    ->group(array('b.Code','b.ResourceName','c.UnitName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->iowresource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), "a.WBSId=b.WBSId", array('ParentText', 'WBSName'), $select::JOIN_LEFT)
                    ->columns(array('Qty','Rate','Amount'))
                    ->where(array("a.ProjectIOWId=".$this->_view->details['ProjectIOWId']));
                $statement = $sql->getSqlStringForSqlObject($select);;
                $this->_view->wbsabstract = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->setTerminal(true);
                $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
                return $this->_view;
            }
        }
    }

    public function projwbsAction()
    {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || Project BOQ");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $projectId = $this->params()->fromRoute('projectId');
        $this->_view->type = $this->params()->fromRoute('type');
        $this->_view->gpage = $this->params()->fromRoute('page');

        if($projectId == '' && $this->_view->type == '') {
            $this->redirect()->toRoute('project/projwbs', array('controller' => 'rfc', 'action' => 'projectwbs'));
        }
        $this->_view->projectId = $projectId;

        $sessionProjWbsSearch = new Container('sessionProjWbsSearch');

        if($this->_view->gpage == '') {
            $sessionProjWbsSearch->search = array();
        }

        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();
            $sessionProjWbsSearch->search = $postData;

            $select = $sql->select();
            $select->from('Proj_WBSMaster')
                ->where('ProjectId = ' . $postData['projectId']);
            $statement = $sql->getSqlStringForSqlObject($select);
            $projWBSRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $projwbs = array();
            foreach($projWBSRes as $pwbs) {
                if($postData['specification'] != '') {
                    if(stristr($postData['specification'],$pwbs['WBSName'])) {
                        if($pwbs['ParentId'] == 0) {
                            $projwbs['Type'][] = '1';
                        } else {
                            $projwbs['Type'][] = '2';
                        }
                        $projwbs['TransId'][] = 0;
                        $projwbs['SerialNo'][] = '';
                        $projwbs['Name'][] = $pwbs['WBSName'];
                        $projwbs['Unit'][] = '';
                        $projwbs['Quanity'][] = '';
                        $projwbs['Rate'][] = '';
                        $projwbs['Amount'][] = '';
                        $projwbs['IOWTransId'][] = '';
                        $projwbs['ProjectIOWId'][] = '';
                        $projwbs['WBSId'][] = $pwbs['WBSId'];
                    }
                }

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId = b.ProjectIOWId', array('ParentId', 'SerialNo', 'Specification'), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                    ->join(array('d' => 'Proj_ProjectIOW'), 'b.ProjectIOWId = d.ProjectIOWId', array('IOWTransId'), $select::JOIN_LEFT)
                    ->where(array('a.WBSId' => $pwbs['WBSId']));
                if($postData['serialNo'] != '') {
                    $select->where->like('b.SerialNo', "%".$postData['serialNo']."%");
                }
                if($postData['specification'] != '') {
                    $select->where->like('b.Specification', "%".$postData['specification']."%");
                }
                if($postData['amount'] != '') {
                    $select->where(array('a.Amount' => $postData['amount']));
                }
                $statement = $sql->getSqlStringForSqlObject($select);
                $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                foreach($projIowPRes as $piowp) {
                    if($piowp['ParentId'] == 0) {
                        $projwbs['Type'][] = '3';
                    } else if($piowp['ParentId'] != 0) {
                        $projwbs['Type'][] = '4';
                    }
                    $projwbs['TransId'][] = $piowp['TransId'];
                    $projwbs['SerialNo'][] = $piowp['SerialNo'];
                    $projwbs['Name'][] = $piowp['Specification'];
                    $projwbs['Unit'][] = $piowp['UnitName'];
                    $projwbs['Quanity'][] = $piowp['Qty'];
                    $projwbs['Rate'][] = $piowp['Rate'];
                    $projwbs['Amount'][] = $piowp['Amount'];
                    $projwbs['IOWTransId'][] = $piowp['IOWTransId'];
                    $projwbs['ProjectIOWId'][] = $piowp['ProjectIOWId'];
                    $projwbs['WBSId'][] = $piowp['WBSId'];
                }
            }
            $this->_view->projwbs = $projwbs;
        } else {
            if(count($sessionProjWbsSearch->search) > 0) {
                $select = $sql->select();
                $select->from('Proj_WBSMaster')
                    ->where('ProjectId = ' . $sessionProjWbsSearch->search['projectId']);
                $statement = $sql->getSqlStringForSqlObject($select);
                $projWBSRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $projwbs = array();
                foreach($projWBSRes as $pwbs) {
                    if($sessionProjWbsSearch->search['specification'] != '') {
                        if(stristr($sessionProjWbsSearch->search['specification'],$pwbs['WBSName'])) {
                            if($pwbs['ParentId'] == 0) {
                                $projwbs['Type'][] = '1';
                            } else {
                                $projwbs['Type'][] = '2';
                            }
                            $projwbs['TransId'][] = 0;
                            $projwbs['SerialNo'][] = '';
                            $projwbs['Name'][] = $pwbs['WBSName'];
                            $projwbs['Unit'][] = '';
                            $projwbs['Quanity'][] = '';
                            $projwbs['Rate'][] = '';
                            $projwbs['Amount'][] = '';
                            $projwbs['IOWTransId'][] = '';
                            $projwbs['ProjectIOWId'][] = '';
                            $projwbs['WBSId'][] = $pwbs['WBSId'];
                        }
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WBSTrans'))
                        ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId = b.ProjectIOWId', array('ParentId', 'SerialNo', 'Specification'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_ProjectIOW'), 'b.ProjectIOWId = d.ProjectIOWId', array('IOWTransId'), $select::JOIN_LEFT)
                        ->where(array('a.WBSId' => $pwbs['WBSId']));
                    if($sessionProjWbsSearch->search['serialNo'] != '') {
                        $select->where->like('b.SerialNo', "%".$sessionProjWbsSearch->search['serialNo']."%");
                    }
                    if($sessionProjWbsSearch->search['specification'] != '') {
                        $select->where->like('b.Specification', "%".$sessionProjWbsSearch->search['specification']."%");
                    }
                    if($sessionProjWbsSearch->search['amount'] != '') {
                        $select->where(array('a.Amount' => $sessionProjWbsSearch->search['amount']));
                    }
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    foreach($projIowPRes as $piowp) {
                        if($piowp['ParentId'] == 0) {
                            $projwbs['Type'][] = '3';
                        } else if($piowp['ParentId'] != 0) {
                            $projwbs['Type'][] = '4';
                        }
                        $projwbs['TransId'][] = $piowp['TransId'];
                        $projwbs['SerialNo'][] = $piowp['SerialNo'];
                        $projwbs['Name'][] = $piowp['Specification'];
                        $projwbs['Unit'][] = $piowp['UnitName'];
                        $projwbs['Quanity'][] = $piowp['Qty'];
                        $projwbs['Rate'][] = $piowp['Rate'];
                        $projwbs['Amount'][] = $piowp['Amount'];
                        $projwbs['IOWTransId'][] = $piowp['IOWTransId'];
                        $projwbs['ProjectIOWId'][] = $piowp['ProjectIOWId'];
                        $projwbs['WBSId'][] = $piowp['WBSId'];
                    }
                }
                $this->_view->projwbs = $projwbs;
            } else {
                $sessionProjWbsSearch->search = array();
                // General
                $select = $sql->select();
                $select->from('Proj_WBSMaster')
                    ->where(array('ProjectId' => $projectId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projWBSRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $projwbs = array();
                foreach($projWBSRes as $pwbs) {
                    if($pwbs['ParentId'] == 0) {
                        $projwbs['Type'][] = '1';
                    } else {
                        $projwbs['Type'][] = '2';
                    }
                    $projwbs['TransId'][] = 0;
                    $projwbs['SerialNo'][] = '';
                    $projwbs['Name'][] = $pwbs['WBSName'];
                    $projwbs['Unit'][] = '';
                    $projwbs['Quanity'][] = '';
                    $projwbs['Rate'][] = '';
                    $projwbs['Amount'][] = '';
                    $projwbs['IOWTransId'][] = '';
                    $projwbs['WBSId'][] = $pwbs['WBSId'];

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WBSTrans'))
                        ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId = b.ProjectIOWId', array('SerialNo', 'Specification'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'b.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_ProjectIOW'), 'b.ProjectIOWId = d.ProjectIOWId', array('IOWTransId'), $select::JOIN_LEFT)
                        ->where(array('a.WBSId' => $pwbs['WBSId']));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    foreach($projIowPRes as $piowp) {
                        $projwbs['Type'][] = '3';
                        $projwbs['TransId'][] = $piowp['TransId'];
                        $projwbs['SerialNo'][] = $piowp['SerialNo'];
                        $projwbs['Name'][] = $piowp['Specification'];
                        $projwbs['Unit'][] = $piowp['UnitName'];
                        $projwbs['Quanity'][] = $piowp['Qty'];
                        $projwbs['Rate'][] = $piowp['Rate'];
                        $projwbs['Amount'][] = $piowp['Amount'];
                        $projwbs['IOWTransId'][] = $piowp['IOWTransId'];
                        $projwbs['WBSId'][] = $piowp['WBSId'];

                        $select = $sql->select();
                        $select->from(array('a' => 'Proj_WBSTrans'))
                            ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId = b.ProjectIOWId', array('SerialNo', 'Specification'), $select::JOIN_LEFT)
                            ->join(array('c' => 'Proj_UOM'), 'b.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                            ->join(array('d' => 'Proj_ProjectIOW'), 'b.ProjectIOWId = d.ProjectIOWId', array('IOWTransId'), $select::JOIN_LEFT)
                            ->where(array('a.WBSId' => $pwbs['WBSId']));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $projIowCRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                        foreach($projIowCRes as $piowc) {
                            $projwbs['Type'][] = '4';
                            $projwbs['TransId'][] = $piowc['TransId'];
                            $projwbs['SerialNo'][] = $piowc['SerialNo'];
                            $projwbs['Name'][] = $piowc['Specification'];
                            $projwbs['Unit'][] = $piowc['UnitName'];
                            $projwbs['Quanity'][] = $piowc['Qty'];
                            $projwbs['Rate'][] = $piowc['Rate'];
                            $projwbs['Amount'][] = $piowc['Amount'];
                            $projwbs['IOWTransId'][] = $piowc['IOWTransId'];
                            $projwbs['WBSId'][] = $piowc['WBSId'];
                        }
                    }
                }
                $this->_view->projwbs = $projwbs;
            }
        }

        // For Search
        $select = $sql->select();
        $select->from('Proj_WBSMaster')
            ->where(array('ProjectId' => $projectId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $projWBSRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $searchwbs = array();
        foreach($projWBSRes as $pwbs) {
            $searchwbs['SerialNo'][] = '';
            $searchwbs['Name'][] = $pwbs['WBSName'];

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId = b.ProjectIOWId', array('SerialNo', 'Specification'), $select::JOIN_LEFT)
                ->where(array('a.WBSId' => $pwbs['WBSId']));
            $statement = $sql->getSqlStringForSqlObject($select);
            $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            foreach($projIowPRes as $piowp) {
                $searchwbs['SerialNo'][] = $piowp['SerialNo'];
                $searchwbs['Name'][] = $piowp['Specification'];
            }
        }

        $arrSerialNos = array();
        $arrSpecifications = array();
        if(!empty($searchwbs)) {
            for($i=0;$i<count($searchwbs['Name']);$i++) {
                $arrSerialNos[] = $searchwbs['SerialNo'][$i];
                $arrSpecifications[] = $searchwbs['Name'][$i];
            }
        }
        $this->_view->serialNos = $arrSerialNos;
        $this->_view->specifications = $arrSpecifications;
        $this->_view->search = $sessionProjWbsSearch->search;
        // For Search

        // project lists
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function projectwbsAction()
    {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || Project WBS");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('projectId'), 'number');
        $projectType = $this->bsf->isNullCheck($this->params()->fromRoute('projectType'), 'string');


        if($this->getRequest()->isXmlHttpRequest())	{
            $this->_view->setTerminal(true);
            $request = $this->getRequest();
            if ($request->isPost()) {
                $Type = $this->bsf->isNullCheck($this->params()->fromPost('Type'), 'string');
                $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number');
                $ProjectType = $this->bsf->isNullCheck($this->params()->fromPost('ProjectType'), 'string');
                switch($Type) {
                    case 'getwbs':
                        $select = $sql->select();
                        $select->from(array('a' => 'Proj_WBSMaster'))
                            ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => "WBSName"))
                            ->where("a.ProjectId=$ProjectId");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $result = json_encode($dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray());

                        if(count($result) > 0)
                            return $this->getResponse()->setContent($result);
                        else
                            return $this->getResponse()->setStatusCode('201')
                                ->setContent('No data.');
                        break;
                    case 'getiows':
                        $WBSId = $this->bsf->isNullCheck($this->params()->fromPost('WBSId'), 'number');
                        $select = $sql->select();

                        if ($ProjectType =="P") $select->from(array('a' => 'Proj_WBSTransPlan'));
                        else $select->from(array('a' => 'Proj_WBSTrans'));

                        $select->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId=b.ProjectIOWId' , array('RefSerialNo', 'Specification', 'WorkGroupId'), $select::JOIN_LEFT)
                            ->join(array('c' => 'Proj_UOM'), 'b.UnitId=c.UnitId' , array('UnitName'), $select::JOIN_LEFT)
                            ->columns(array('WBSId', 'ProjectIOWId', 'Qty'))
                            ->where("a.WBSId=$WBSId AND b.UnitId<>0");
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                        if(count($result) > 0) {
                            return $this->getResponse()->setContent(json_encode(array('wbs'=> $result)));
                        } else
                            return $this->getResponse()->setStatusCode('201')
                                ->setContent('No data.');
                        break;
                    case 'default':
                        return $this->getResponse()->setStatusCode('400')
                            ->setContent('Bad Request');
                        break;
                }
            }
        }


        $this->_view->projectId = $projectId;
        $this->_view->projectType = $projectType;

        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function getprojectwbsmasterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest())	{
            $projectId = $this->bsf->isNullCheck($this->params()->fromRoute('projectId'), 'number');

            $sql = new Sql($dbAdapter);
            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSMaster'))
                ->columns(array('WBSId', 'ParentId','WBSName','LastLevel','Amount'=>new Expression("'0'")))
                ->where('a.ProjectId = '.$projectId);
            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

            $response = $this->getResponse();
            $response->setContent(json_encode($results->toArray()));
            return $response;
        }
    }

    public function getprojectwbsmasterlistingAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        if($this->getRequest()->isXmlHttpRequest())	{
            $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
            $sql = new Sql($dbAdapter);
            $request = $this->getRequest();
            $projectId = $this->bsf->isNullCheck($request->getPost('projectid'), 'number');

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId= b.ProjectIOWId', array('SerialNo','Specification'), $select::JOIN_LEFT)
                ->columns(array('ProjectIOWId'))
                ->where(array("a.ProjectId"=>$projectId))
                ->group(new Expression('a.ProjectIOWId,b.SerialNo,b.Specification'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $iowlist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('value' => 'WBSName'), $select:: JOIN_INNER)
                ->columns(array('data' => new Expression('DISTINCT(a.WBSId)')))
                ->where(array("a.ProjectId"=>$projectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->columns(array('Qty', 'WBSId', 'ProjectIOWId'))
                ->where(array("a.ProjectId"=>$projectId))
                ->order('a.ProjectIOWId');
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbsqtylist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $response = $this->getResponse();
            $response->setContent(json_encode(array('iowlist' => $iowlist, 'wbslist' => $wbslist, 'wbsqtylist' => $wbsqtylist)));
            return $response;
        }
    }

    public function getprojectwbsdetailsAction()
    {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $this->_view->setTerminal(true);
                $wBSId= $this->bsf->isNullCheck($request->getPost('WBSId'), 'number');
                $sType= $this->bsf->isNullCheck($request->getPost('ProjectType'), 'string');

                $sql = new Sql($dbAdapter);
                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSMeasurement'))
                    ->columns(array( 'WBSTransId','Measurement','CellName', 'SelectedColumns'))
                    ->where(array("a.WBSId=$wBSId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $details = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                if ($sType =="P") $select->from(array('a' => 'Proj_WBSTransPlan'));
                else $select->from(array('a' => 'Proj_WBSTrans'));
                $select->join(array('b' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId= b.ProjectIOWId', array('RefSerialNo','Specification'), $select::JOIN_LEFT)
                    ->join(array('e' => 'Proj_ProjectIOW'), 'b.ProjectIOWId = e.ProjectIOWId', array('Rate'), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'b.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                    ->columns(array( 'WBSId','Qty'))
                    ->where(array("a.WBSId=$wBSId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $iowtrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->iowtrans = $iowtrans;

//                if($details == FALSE)
//                    return $this->response->setContent('')->setStatusCode(201);

                $this->_view->details = $details;

                $this->_view->setTerminal(true);
                $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
                return $this->_view;
            }
        }
    }

    public function resourcerateviewAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || RFC Resource Rate");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
//                $Type = $this->bsf->isNullCheck($this->params()->fromPost('Type'), 'string');
//                $ProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number');
//                $ProjectType = $this->bsf->isNullCheck($this->params()->fromPost('ProjectType'), 'string');
//                if($Type == "grid") {
//                    //Project wise filter for grid
//                    $select = $sql->select();
//
//                    if ($ProjectType=="P") $select->from(array('a' => 'Proj_ProjectResourcePlan'));
//                    else $select->from(array('a' => 'Proj_ProjectResource'));
//
//                    $select->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'TypeId', 'UnitId'),$select::JOIN_LEFT)
//                        ->join(array('c' => 'Proj_ResourceType'),'b.TypeId=c.TypeId', array('TypeName'),$select::JOIN_LEFT)
//                        ->join(array('d' => 'Proj_UOM'),'b.UnitId=d.UnitId', array('UnitName'),$select::JOIN_LEFT)
//                        ->columns(array('ResourceId','Qty', 'IncludeFlag','Rate','Amount'))
//                        ->where(array('ProjectId'=>$ProjectId));
//                    $statement = $sql->getSqlStringForSqlObject($select);
//                    $result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $result = json_encode($result);
//
//                    $this->_view->setTerminal(true);
//                    $response = $this->getResponse()->setContent($result);
//                    return $response;
//                }
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postData = $request->getPost();
                if($postData['submitType'] == "new"){
                    $project_idNew =$this->bsf->isNullCheck($postData['project_idNew'], 'number');
                    $type_nameNew = $this->bsf->isNullCheck($postData['type_nameNew'], 'string');

                    $select = $sql->select();
                    if ($type_nameNew=="P") $select->from(array('a' => 'Proj_ProjectResourcePlan'));
                    else $select->from(array('a' => 'Proj_ProjectResource'));

                    $select->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array('Code', 'ResourceName'=>new Expression("Case When a.RateType='M' then ResourceName+' (Manual)' when a.RateType='A' then ResourceName+' (Machinery)' else  ResourceName end"), 'TypeId', 'UnitId'),$select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_ResourceType'),'b.TypeId=c.TypeId', array('TypeName'),$select::JOIN_LEFT)
                        ->join(array('d' => 'Proj_UOM'),'b.UnitId=d.UnitId', array('UnitName'),$select::JOIN_LEFT)
                        ->columns(array('ResourceId','Qty', 'IncludeFlag','Rate','Amount','RateType'))
                        ->where(array('ProjectId'=>$project_idNew));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->projectdetails = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->proj_id = $project_idNew;
                    $this->_view->proj_type= $type_nameNew;

                    //Resource Group Pie Chart
                    $select = $sql->select();
                    if ($type_nameNew=="P") $select->from(array('a' => 'Proj_ProjectResourcePlan'));
                    else $select->from(array('a' => 'Proj_ProjectResource'));
                    $select->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array(),$select::JOIN_INNER)
                        ->join(array('c' => 'Proj_ResourceGroup'),'b.ResourceGroupId=c.ResourceGroupId', array('ResourceGroupName'),$select::JOIN_INNER)
                        ->where(array('ProjectId'=>$project_idNew))
                        ->columns(array('Amount'=>new Expression("Sum(A.Amount)")))
                        ->group('c.ResourceGroupName');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->Resgrp = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    //Resource Type Pie Chart
                    $select = $sql->select();
                    if ($type_nameNew=="P") $select->from(array('a' => 'Proj_ProjectResourcePlan'));
                    else $select->from(array('a' => 'Proj_ProjectResource'));
                    $select->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array(),$select::JOIN_INNER)
                        ->join(array('c' => 'Proj_ResourceType'),'b.TypeId=c.TypeId', array('TypeName'),$select::JOIN_INNER)
                        ->where(array('ProjectId'=>$project_idNew))
                        ->columns(array('Amount'=>new Expression("Sum(A.Amount)")))
                        ->group('c.TypeName');
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->Restype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }
//                if (!is_null($postData['frm_what'])) {
//                    // get project list
//                    $select = $sql->select();
//                    $select->from('Proj_ProjectMaster')
//                        ->columns(array('ProjectId', 'ProjectName'))
//                        ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
//                    $statement = $sql->getSqlStringForSqlObject($select);
//                    $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
//
//                    $this->_view->frmwhat = $postData['frm_what'];
//                    $this->_view->projecttype = $postData['type_name'];
//
////                if ($postData['type_name'] == 'B')
////                    $this->_view->projecttypename = 'Budget';
//                    if ($postData['type_name'] == 'P')
//                        $this->_view->projecttypename = 'Plan';
//                    else {
//                        $this->_view->projecttype = 'B';
//                        $this->_view->projecttypename = 'Budget';
//                    }
//
//                } else {
//                    $connection = $dbAdapter->getDriver()->getConnection();
//                    $connection->beginTransaction();
//                    try {
//                        $connection->commit();
//                    } catch (PDOException $e) {
//                        $connection->rollback();
//                    }
//                }
            }
        }

//        $rfcid = $this->params()->fromRoute('rfcId');
//        $smode = $this->params()->fromRoute('mode');
//
//        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
//
//        $this->_view->genType = $aVNo["genType"];
//        $this->_view->mode = $smode;
//        $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
//
//        if (!isset($rfcid) || $rfcid == 0 ) {
//            if ($aVNo["genType"] ==false)
//                $this->_view->svNo = "";
//            else
//                $this->_view->svNo = $aVNo["voucherNo"];
//        }

        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        //Resource Type
//        $select = $sql->select();
//        $select->from('Proj_ResourceType')
//            ->columns(array('TypeName', 'TypeCount' =>new Expression("Count(TypeName)")))
//            ->group('TypeName');
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $this->_view->ResourceType = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

//        $select = $sql->select();
//        $select->from(array('a' => 'Proj_ProjectResource'))
//            ->join(array('b' => 'Proj_Resource'),'a.ResourceId=b.ResourceId', array('Code', 'ResourceName', 'TypeId', 'UnitId'),$select::JOIN_LEFT)
//            ->join(array('c' => 'Proj_ResourceType'),'b.TypeId=c.TypeId', array('TypeName'),$select::JOIN_LEFT)
//            ->join(array('d' => 'Proj_UOM'),'b.UnitId=d.UnitId', array('UnitName'),$select::JOIN_LEFT)
//            ->columns(array('ResourceId','Qty', 'IncludeFlag','Rate','Amount'));
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $this->_view->projectdetails = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();


        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

        return $this->_view;
    }

    public function wbsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" RFC WBS");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $connection = $dbAdapter->getDriver()->getConnection();
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent("");
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postData = $request->getPost();

                $rfcid = $this->bsf->isNullCheck($postData['rfcId'],'number');
                if (isset($postData['frm_what'])) {
                    // get project list
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projectInfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $this->_view->projectinfo = $projectInfo;

                    $this->_view->frmwhat = $postData['frm_what'];
                    $this->_view->projecttype = $postData['type_name'];
                    if ($postData['type_name'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($postData['type_name'] == 'P')
                        $this->_view->projecttypename = 'Plan';

                    // wbs master
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WBSMaster'))
                        ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => 'WBSName'))
                        ->where('a.ProjectId='.$projectInfo['ProjectId']);
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    if (empty($arr_wbslist)) {
                        $iProjectId = $projectInfo['ProjectId'];

                        $insert = $sql->insert();
                        $insert->into( 'Proj_WBSMaster' );
                        $insert->Values( array( 'ProjectId' => $iProjectId, 'WBSName' => 'WBSName'));
                        $statement = $sql->getSqlStringForSqlObject( $insert );
                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                        $select = $sql->select();
                        $select->from(array('a' => 'Proj_WBSMaster'))
                            ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => 'WBSName'))
                            ->where('a.ProjectId='.$projectInfo['ProjectId']);
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    }


                    $this->_view->arr_wbslist = json_encode($arr_wbslist);


                } else if ($rfcid != 0) {
                    try{
                        $connection->beginTransaction();

                        $rfctype='';
                        $select = $sql->select();
                        $select->from('Proj_RFCRegister')
                            ->columns(array('RFCType'))
                            ->where(array("RFCRegisterId" => $iRFCId));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                        if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');

                        $refDate = $this->bsf->isNullCheck($postData['refdate'],'date');
                        $refNo = $this->bsf->isNullCheck($postData['refno'],'string');
                        $projectId = $this->bsf->isNullCheck($postData['project_id'],'number');
                        $projectType = $this->bsf->isNullCheck($postData['project_type'],'string');
                        $wbsRequest = json_decode($this->bsf->isNullCheck($postData['wbs'],'string'), true);

                        $update = $sql->update();
                        $update->table('Proj_RFCRegister');
                        $update->set(array('RefNo' => $refNo, 'RefDate' => date('Y-m-d', strtotime($refDate))
                        , 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N'
                        , 'Type' => 'WBS', 'ProjectId' => $projectId, 'ProjectType' => $projectType));
                        $update->where(array('RFCRegisterId' => $rfcid));
                        $statement = $sql->getSqlStringForSqlObject($update);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        $tempTransIds = array();
                        foreach($wbsRequest as $request) {
                            $wbsId = $this->bsf->isNullCheck($request['id'],'number');
                            $wbsName = $this->bsf->isNullCheck($request['name'],'string');
                            $action= $this->bsf->isNullCheck($request['action'],'string');

                            $parentId = 0;
                            if(isset($request[ 'parentid' ])) {
                                $parentId = $this->bsf->isNullCheck($request[ 'parentid' ],'number');
                            }

                            switch($action) {
                                case 'delete':
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSDeleteTrans' );
                                    $insert->Values( array( 'RFCRegisterId' => $rfcid, 'WBSId' => $wbsId ) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    break;
                                case 'create':
                                    $parentId = $request[ 'parentid' ];
                                    $wbsId = $request[ 'id' ];
                                    $tempParentId = 0;
                                    if(isset($tempTransIds[$parentId])) {
                                        $tempParentId = $tempTransIds[$parentId];
                                        $parentId = 0;
                                    }

                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSTrans' );
                                    $insert->Values( array( 'RFCRegisterId' => $rfcid, 'ProjectId' => $projectId, 'TempParentId' => $tempParentId
                                    ,'ParentId' => $parentId, 'WBSName' => $wbsName) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    $tempTransIds[$wbsId] = $dbAdapter->getDriver()->getLastGeneratedValue();
                                    break;
                                case 'update':
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSTrans' );
                                    $insert->Values( array( 'RFCRegisterId' => $rfcid, 'WBSId' => $wbsId, 'ProjectId' => $projectId, 'ParentId' => $parentId, 'WBSName' => $wbsName ) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    break;
                            }
                        }

                        // insert project iow
                        $newiowids = json_decode($this->bsf->isNullCheck($postData['newIOWRowId'],'string'), true);
                        foreach($newiowids as $iowid) {
                            $iRowId = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_rowid' ], 'number' );

                            if (strpos($iowid, 'jqxWidget') !== false) {
                                $wbsTransId = $tempTransIds[$iowid];
                                $wbsId = 0;
                            } else {
                                $wbsTransId = 0;
                                $wbsId = $iowid;
                            }

                            $deleteids = rtrim($this->bsf->isNullCheck($postData[ 'newiow_' . $iowid . '_deleteids' ],'string'), ",");
                            if($deleteids !== '') {
                                $delete = $sql->delete();
                                $delete->from('Proj_RFCWBSIOWTrans')
                                    ->where("RFCTransId IN ($deleteids)");
                                $statement = $sql->getSqlStringForSqlObject($delete);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            for ( $i = 1; $i <= $iRowId; $i++ ) {
                                $parentid = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_parentid_' . $i ], 'number' );
                                $qty = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_qty_' . $i ], 'number' );
                                $transid = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_transid_' . $i ], 'number' );
                                $updateRow = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_updaterow_' . $i ], 'number' );

                                // measurement sheet
                                $measurement = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_Measurement_' . $i ], 'string' );
                                $cellname = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_CellName_' . $i ], 'string' );
                                $SelectedColumns = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_SelectedColumns_' . $i ], 'string' );

                                if($parentid == 0 || $qty == 0) {
                                    continue;
                                }

                                $values = array('RFCRegisterId' => $rfcid, 'WBSId' => $wbsId, 'WBSTransId' => $wbsTransId
                                , 'ProjectIOWId' => $parentid, 'Qty' => $qty);
                                if($measurement != '') {
                                    $values['Measurement'] = $measurement;
                                    $values['CellName'] = $cellname;
                                    $values['SelectedColumns'] = $SelectedColumns;
                                }

                                if($updateRow == 0 && $transid == 0) { // New Row
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSIOWTrans' );
                                    $insert->Values( $values );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    $rfctransid = $dbAdapter->getDriver()->getLastGeneratedValue();
                                } else if ($updateRow == 1 && $transid != 0) { // Update Row
                                    $update = $sql->update();
                                    $update->table('Proj_RFCWBSIOWTrans');
                                    $update->set($values);
                                    $update->where(array('RFCTransId' => $transid));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }
                            }
                        }
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$iRFCId,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                        $this->redirect()->toRoute('project/rfcregister', array('controller' => 'rfc', 'action' => 'rfcregister'));

                    } catch ( PDOException $e ) {
                        $connection->rollback();
                    }

                } else {
                    try{
                        $connection->beginTransaction();

                        $mode = $postData['rfcmode'];
                        if ($mode == 'edit') {
                            $rfctype = 'WBS-Edit';
                        } else {
                            $rfctype = 'WBS-Add';
                        }

                        $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true)
                            $sVno = $aVNo["voucherNo"];
                        else
                            $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                        $refDate = $this->bsf->isNullCheck($postData['refdate'],'date');
                        $refNo = $sVno;
                        $projectId = $this->bsf->isNullCheck($postData['project_id'],'number');
                        $projectType = $this->bsf->isNullCheck($postData['project_type'],'string');
                        $wbsRequest = json_decode($this->bsf->isNullCheck($postData['wbs'],'string'), true);

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $refNo, 'RefDate' => date('Y-m-d', strtotime($refDate))
                        , 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N'
                        , 'Type' => 'WBS', 'ProjectId' => $projectId, 'ProjectType' => $projectType));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $RFCRegisterId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $tempTransIds = array();
                        foreach($wbsRequest as $request) {
                            $wbsId = $this->bsf->isNullCheck($request['id'],'number');
                            $wbsName = $this->bsf->isNullCheck($request['name'],'string');
                            $action= $this->bsf->isNullCheck($request['action'],'string');

                            $parentId = 0;
                            if(isset($request[ 'parentid' ])) {
                                $parentId = $this->bsf->isNullCheck($request[ 'parentid' ],'number');
                            }

                            switch($action) {
                                case 'delete':
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSDeleteTrans' );
                                    $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'WBSId' => $wbsId ) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    break;
                                case 'create':
                                    $parentId = $request[ 'parentid' ];
                                    $wbsId = $request[ 'id' ];
                                    $tempParentId = 0;
                                    if(isset($tempTransIds[$parentId])) {
                                        $tempParentId = $tempTransIds[$parentId];
                                        $parentId = 0;
                                    }

                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSTrans' );
                                    $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'ProjectId' => $projectId, 'TempParentId' => $tempParentId
                                    ,'ParentId' => $parentId, 'WBSName' => $wbsName) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    $tempTransIds[$wbsId] = $dbAdapter->getDriver()->getLastGeneratedValue();
                                    break;
                                case 'update':
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSTrans' );
                                    $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'WBSId' => $wbsId, 'ProjectId' => $projectId, 'ParentId' => $parentId, 'WBSName' => $wbsName ) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    break;
                            }
                        }

                        // insert project iow
                        $newiowids = json_decode($this->bsf->isNullCheck($postData['newIOWRowId'],'string'), true);
                        foreach($newiowids as $iowid) {
                            $iRowId = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_rowid' ], 'number' );
                            if (strpos($iowid, 'jqxWidget') !== false) {
                                if (!empty($tempTransIds)) $wbsTransId = $tempTransIds[$iowid];
                                else $wbsTransId =0;
                                $wbsId = 0;
                            } else {
                                $wbsTransId = 0;
                                $wbsId = $iowid;
                            }

                            for ( $i = 1; $i <= $iRowId; $i++ ) {
                                $parentid = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_parentid_' . $i ], 'number' );
                                $qty = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_qty_' . $i ], 'number' );

                                if($parentid == 0 || $qty == 0) {
                                    continue;
                                }

                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCWBSIOWTrans' );
                                $insert->Values( array( 'RFCRegisterId' => $RFCRegisterId, 'WBSId' => $wbsId, 'WBSTransId' => $wbsTransId
                                , 'ProjectIOWId' => $parentid, 'Qty' => $qty ) );
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                $rfctransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                                // measurement sheet
                                $measurement = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_Measurement_' . $i ], 'string' );
                                $cellname = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_CellName_' . $i ], 'string' );
                                $SelectedColumns = $this->bsf->isNullCheck( $postData[ 'newiow_' . $iowid . '_SelectedColumns_' . $i ], 'string' );
                                if($measurement != '') {
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_RFCWBSIOWMeasurement' );
                                    $insert->Values( array( 'RFCTransId' => $rfctransid, 'Measurement' => $measurement, 'CellName' => $cellname
                                    , 'SelectedColumns' => $SelectedColumns) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                }
                            }
                        }

                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$RFCRegisterId,0, 0, 'Project',$sVno,$userId, 0 ,0);
                        $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
                    } catch ( PDOException $e ) {
                        $connection->rollback();
                    }
                }
            } else {

            }

            $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
            $smode = $this->bsf->isNullCheck($this->params()->fromRoute('mode'), 'string');
            $editid = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');

            if(!$this->getRequest()->isPost() && $rfcid == 0) {
                $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
            }

            if($rfcid != 0) {
                // get project list
                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCRegister'))
                    ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                    ->columns(array('ProjectId', 'ProjectType', 'RefDate' => new Expression( "FORMAT(a.RefDate, 'dd-MM-yyyy')" ), 'RefNo'))
                    ->where(array('a.RFCRegisterId' => $rfcid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcRegister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $this->_view->rfcregister = $rfcRegister;
                $this->_view->projecttype = $rfcRegister['ProjectType'];
                if ($rfcRegister['ProjectType'] == 'B')
                    $this->_view->projecttypename = 'Budget';
                else if ($rfcRegister['ProjectType'] == 'P')
                    $this->_view->projecttypename = 'Plan';

                // wbs list from master
                $subQuery = $sql->select();
                $subQuery->from("Proj_RFCWBSDeleteTrans")
                    ->columns(array("WBSId"));
                $subQuery->where(array("RFCRegisterId = '".$rfcid."'"));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSMaster'))
                    ->join(array('b' => 'Proj_RFCWBSTrans'), new Expression("a.WBSId=b.WBSId AND b.RFCRegisterId='".$rfcid."' AND b.WBSId <> 0"), array(), $select::JOIN_LEFT)
//                    ->join(array('c' => 'Proj_RFCWBSIOWTrans'), new Expression("a.WBSId=c.WBSId AND c.RFCRegisterId='".$rfcid."' AND c.WBSId <> 0"), array(), $select::JOIN_LEFT)
                    ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => new Expression("CASE WHEN b.WBSName <> '' THEN b.WBSName ELSE a.WBSName END")
//                              , 'IOW' => new Expression("CASE WHEN COUNT(c.WBSId)>0 THEN '1' ELSE '0' END")
                    ))
                    ->where->expression('a.ProjectId='.$rfcRegister['ProjectId'].' AND a.WBSId Not IN ?', array($subQuery));
//                $select->group(new Expression('a.WBSId,a.ParentId,b.WBSName,a.WBSName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->arr_wbslist = json_encode($dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray());

                //wbs iows
                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCWBSIOWTrans'))
                    ->join(array('b' => 'Proj_ProjectIOWMaster'), new Expression("a.ProjectIOWId=b.ProjectIOWId"), array('ProjectIOWId', 'ParentName' => new Expression("b.SerialNo + ' ' + b.Specification")), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectIOW'), new Expression("b.ProjectIOWId=c.ProjectIOWId"), array('Rate'), $select::JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), new Expression("b.UnitId=d.UnitId"), array('UnitName'), $select::JOIN_LEFT)
                    ->join(array('e' => 'Proj_RFCWBSIOWMeasurement'), 'a.RFCTransId=e.RFCTransId', array( 'Measurement','CellName', 'SelectedColumns'), $select::JOIN_LEFT )
                    ->columns(array('RFCTransId','WBSId', 'ParentId' => 'ProjectIOWId', 'Qty'))
                    ->where('a.RFCRegisterId='.$rfcid.' AND a.WBSId <> 0');
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->arr_wbsiowlist = json_encode($dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray());
            }

            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId=b.ProjectIOWId', array('Rate'), $select::JOIN_LEFT)
                ->join(array('c' => 'Proj_UOM'), 'a.UnitId=c.UnitId',array('UnitName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'ProjectIOWId','value' => new Expression("SerialNo + ' ' +Specification")))
                ->where('a.UnitId = 1');
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->projectiows = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            // Excel Templates
            $select = $sql->select();
            $select->from('Proj_MeasurementTemplate')
                ->columns(array('TemplateId','TemplateName','Description'))
                ->where(array('DeleteFlag' => '0'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->exceltemplates = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $this->_view->mode = $smode;
            $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
            $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;
            $this->_view->genType = $aVNo["genType"];

            if (!isset($rfcid) || $rfcid == 0 ) {
                if ($aVNo["genType"] ==false)
                    $this->_view->svNo = "";
                else
                    $this->_view->svNo = $aVNo["voucherNo"];
            }

            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function rfcothercostAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" Other Cost");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $connection = $dbAdapter->getDriver()->getConnection();
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
        $editid = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            $postData = $request->getPost();
            $projectId = $this->bsf->isNullCheck($postData['project_id'], 'number');
            if ($request->isPost()) {
                if (!is_null($postData['frm_what'])) {
                    // get project list
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('ProjectId' => $projectId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $this->_view->frmwhat = $postData['frm_what'];
                    $this->_view->projecttype = $postData['type_name'];
                    $this->_view->revrequired= $postData['revrequired'];

                    if ($postData['type_name'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($postData['type_name'] == 'P')
                        $this->_view->projecttypename = 'Plan';
                } else if($rfcid != 0) {
                    try {

                        $rfctype='';
                        $sRefNo='';
                        $select = $sql->select();
                        $select->from('Proj_RFCRegister')
                            ->columns(array('RFCType','RefNo','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end")))
                            ->where(array("RFCRegisterId" => $rfcid));
                        $statement = $sql->getSqlStringForSqlObject($select);
                        $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                        if (!empty($rfcreg)) {
                            $rfctype = $this->bsf->isNullCheck($rfcreg['RFCType'], 'string');
                            $sRefNo = $this->bsf->isNullCheck($rfcreg['RefNo'], 'string');
                            $this->_view->revrequired=$rfcreg['RevRequired'];
                        }

                        $arr_type_tables = array('1' => 'Proj_RFCOHItemTrans', '2' => 'Proj_RFCOHMaterialTrans'
                        , '3' => 'Proj_RFCOHLabourTrans', '4' => 'Proj_RFCOHServiceTrans', '5' => 'Proj_RFCOHMachineryTrans'
                        , '6' => 'Proj_RFCOHAdminExpenseTrans' , '7' => 'Proj_RFCOHSalaryTrans', '8' => 'Proj_RFCOHFuelTrans');
                        $arr_type_fields = array('1' => 'ProjectIOWId', '2' => 'ResourceId', '3' => 'ResourceId', '5' => 'MResourceId'
                        , '4' => 'ServiceId', '6' => 'ExpenseId', '7' => 'PositionId', '8' => 'MResourceId');
                        $arr_rfctype_fields = array('1' => 'RFCItemTransId', '2' => 'RFCMaterialTransId', '3' => 'RFCLabourTransId', '5' => 'RFCMachineryTransId'
                        , '4' => 'RFCServiceTransId', '6' => 'RFCExpenseTransId', '7' => 'RFCSalaryTransId', '8' => 'RFCFuelTransId');

                        $refno = $this->bsf->isNullCheck($postData['refno'], 'number');
                        $refdate = $this->bsf->isNullCheck($postData['refdate'], 'date');
                        $proj_id = $this->bsf->isNullCheck($postData['project_id'], 'number');
                        $sproj_type = $this->bsf->isNullCheck($postData['project_typename'], 'string');
                        $proj_type ='B';
                        if ($sproj_type == 'Plan') $proj_type ='P';

                        $connection->beginTransaction();

                        $irevrequired=0;
                        if ($postData['revrequired'] =='Y') $irevrequired=1;

                        $update = $sql->update();
                        $update->table('Proj_RFCRegister');
                        $update->set(array('RefNo' => $refno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($refdate)),
                            'ProjectId' => $proj_id, 'ProjectType' => $proj_type,
                            'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'OtherCost','RevRequired'=>$irevrequired));
                        $update->where(array('RFCRegisterId' => $rfcid));
                        $statement = $sql->getSqlStringForSqlObject( $update );
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $identity = $rfcid;

                        // insert new oh(s)
                        $NewOtherCostRowId = $this->bsf->isNullCheck($postData['NewOtherCostRowId'],'number');
                        $NewOhIds = array();
                        for ($v = 1; $v <= $NewOtherCostRowId; $v++) {
                            $ohId = $this->bsf->isNullCheck($postData['NewOtherCostId_' . $v], 'string');
                            $ohName = $this->bsf->isNullCheck($postData['NewOtherCostName_' . $v], 'string');
                            $ohTypeId = $this->bsf->isNullCheck($postData['NewOtherCostType_' . $v], 'string');

                            $insert = $sql->insert();
                            $insert->into('Proj_OHMaster')
                                ->Values(array('OHName' => $ohName, 'OHTypeId' => $ohTypeId));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $generatedOhId = $dbAdapter->getDriver()->getLastGeneratedValue();
                            $NewOhIds[$ohId] = $generatedOhId;
                        }

                        // delete rfc other cost
                        $deleteids = trim($postData[ 'rowdeleteids'], ",");
                        if($deleteids !== '' && $deleteids !== '0') {
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCOHTrans')
                                ->where("RFCTransId IN ($deleteids)");
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            // delete machinery trans details
                            $subquery = $sql->select();
                            $subquery -> from("Proj_RFCOHMachineryTrans")
                                ->columns(array('RFCMachineryTransId'))
                                ->where("RFCTransId IN ($deleteids)");
                            $delete = $sql->delete();
                            $delete->from('Proj_RFCOHMachineryDetails')
                                ->where->expression('RFCMachineryTransId IN ?', array($subquery));
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            // delete type trans
                            foreach($arr_type_tables as $tables) {
                                $delete = $sql->delete();
                                $delete->from($tables)
                                    ->where("RFCTransId IN ($deleteids)");
                                $statement = $sql->getSqlStringForSqlObject($delete);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        }

                        $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                        for ($i = 1; $i <= $iRowId; $i++) {
                            $transid = $this->bsf->isNullCheck($postData['TransId_' . $i], 'number');
                            $updaterow = $this->bsf->isNullCheck($postData['UpdateRow_' . $i], 'number');

                            $ohTypeId = $this->bsf->isNullCheck($postData['ohtypeid_' . $i], 'number');
                            $amt = $this->bsf->isNullCheck($postData['amount_' . $i], 'number');

                            // check for vendorId
                            $ohId = $postData['ohid_' . $i];
                            if(substr($ohId, 0, 3) == 'New')
                                $ohId = $NewOhIds[ $ohId ];
                            else
                                $ohId = $this->bsf->isNullCheck($ohId,'number');

                            if ($ohId == 0)
                                continue;

                            if($transid == 0 && $updaterow == 0) {
                                $insert = $sql->insert();
                                $insert->into( 'Proj_RFCOHTrans' );
                                $insert->Values( array( 'RFCRegisterId' => $identity, 'OHId' => $ohId, 'Amount' => $amt ) );
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                $transid = $dbAdapter->getDriver()->getLastGeneratedValue();
                            } else if($transid != 0 && $updaterow == 1){
                                $update = $sql->update();
                                $update->table('Proj_RFCOHTrans');
                                $update->set(array( 'RFCRegisterId' => $identity, 'OHId' => $ohId, 'Amount' => $amt ));
                                $update->where(array('RFCTransId' => $transid));
                                $statement = $sql->getSqlStringForSqlObject($update);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                            }

                            if(!array_key_exists($ohTypeId, $arr_type_tables))
                                continue;

                            $typedeleteids = trim($postData[ 'type_' . $i . '_rowdeleteids'], ",");
                            if($typedeleteids !== '' && $typedeleteids !== '0') {
                                $delete = $sql->delete();
                                $delete->from($arr_type_tables[ $ohTypeId ])
                                    ->where($arr_rfctype_fields[$ohTypeId] . " IN (" .$typedeleteids . ")");
                                $statement = $sql->getSqlStringForSqlObject($delete);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }

                            $typeRowid = $this->bsf->isNullCheck($postData['type_'.$i.'_rowid'],'number');
                            for ( $j = 1; $j <= $typeRowid; $j++ ) {
                                $typetransid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_TransId_' . $j ], 'number' );
                                $typeupdaterow = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_UpdateRow_' . $j ], 'number' );

                                $desctypeid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_desctypeid_' . $j ], 'number' );
                                $amt = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_amount_' . $j ], 'number' );
                                if($desctypeid == 0)
                                    continue;

                                $insertFields = array( 'RFCTransId' => $transid, $arr_type_fields[ $ohTypeId ] => $desctypeid, 'Amount' => $amt);

                                if($ohTypeId == '8') { // fuel
                                    $fuelid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_fuelid_' . $j ], 'number' );
                                    $qty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_qty_' . $j ], 'number' );
                                    $rate = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_rate_' . $j ], 'number' );

                                    if ($fuelid == 0 || $qty == 0 )
                                        continue;

                                    $insertFields = array_merge(array('FResourceId' => $fuelid, 'Qty' => $qty, 'Rate' => $rate),$insertFields);
                                } else if($ohTypeId == '7') { // salary
                                    $nos = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_nos_' . $j ], 'number' );
                                    $wmonths = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_workingmonths_' . $j ], 'number' );
                                    $salpermonth = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_salpermonth_' . $j ], 'number' );

                                    if ($nos == 0 || $salpermonth == 0 || $wmonths == 0)
                                        continue;

                                    $insertFields = array_merge(array('Nos' => $nos, 'cMonths' => $wmonths, 'Salary' => $salpermonth),$insertFields);
                                } else if($ohTypeId == '5') { // machinery
                                    $nos = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_nos_' . $j ], 'number' );
                                    $wQty = floatval($this->bsf->isNullCheck( $postData[ 'type_' . $i . '_wqty_' . $j ], 'number' ));
                                    if ($wQty==0) $wQty=1;
                                    $tQty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_tqty_' . $j ], 'number' );
                                    $rate = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_rate_' . $j ], 'number' );

                                    if ($nos == 0 || $wQty == 0 || $tQty == 0 || $rate == 0)
                                        continue;

                                    $insertFields = array_merge(array('Nos' => $nos, 'WorkingQty' => $wQty, 'TotalQty' => $tQty, 'Rate' => $rate),$insertFields);
                                } else if($ohTypeId != '6') { //item, material, labour, service
                                    $unitid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_unitid_' . $j ], 'number' );
                                    $qty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_qty_' . $j ], 'number' );
                                    $rate = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_rate_' . $j ], 'number' );

                                    if ($unitid == 0 || $qty == 0 )
                                        continue;

                                    $insertFields = array_merge(array('Qty' => $qty, 'Rate' => $rate),$insertFields);
                                }
                                if($typetransid == 0 && $typeupdaterow == 0) {
                                    $insert = $sql->insert();
                                    $insert->into( $arr_type_tables[ $ohTypeId ] );
                                    $insert->Values( $insertFields );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    $typetransid = $dbAdapter->getDriver()->getLastGeneratedValue();
                                } else if($typetransid != 0 && $typeupdaterow == 1){
                                    $update = $sql->update();
                                    $update->table($arr_type_tables[ $ohTypeId ]);
                                    $update->set($insertFields);
                                    $update->where(array($arr_rfctype_fields[$ohTypeId] => $typetransid));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                }

                                if($ohTypeId != '5')
                                    continue;

                                // machinery projectiows
                                $machinerydeleteids = trim($postData['type_'.$i.'_m_'.$j.'_rowdeleteids'], ",");
                                if($machinerydeleteids !== '' && $machinerydeleteids !== '0') {
                                    $delete = $sql->delete();
                                    $delete->from('Proj_RFCOHMachineryDetails')
                                        ->where('RFCMachineryDetailId IN (' .$machinerydeleteids .')');
                                    $statement = $sql->getSqlStringForSqlObject($delete);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }

                                $typeRowid = $this->bsf->isNullCheck($postData['type_'.$i.'_m_'.$j.'_rowid'],'number');
                                for ( $k = 1; $k <= $typeRowid; $k++ ) {
                                    $mdetailtransid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_TransId_' . $k ], 'number' );
                                    $mdetailupdaterow = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_UpdateRow_' . $k ], 'number' );

                                    $desctypeid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_desctypeid_' . $k ], 'number' );
                                    $percent = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_per_' . $k ], 'number' );
                                    $amt = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_amount_' . $k ], 'number' );

                                    if($desctypeid == 0 || $percent == 0 || $amt == 0)
                                        continue;

                                    if($mdetailtransid == 0 && $mdetailupdaterow == 0) {
                                        $insert = $sql->insert();
                                        $insert->into( 'Proj_RFCOHMachineryDetails' );
                                        $insert->Values( array( 'RFCMachineryTransId' => $typetransid, 'ProjectIOWId' => $desctypeid, 'Percentage' => $percent, 'Amount' => $amt ) );
                                        $statement = $sql->getSqlStringForSqlObject( $insert );
                                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    } else if($mdetailtransid != 0 && $mdetailupdaterow == 1){
                                        $update = $sql->update();
                                        $update->table('Proj_RFCOHMachineryDetails');
                                        $update->set(array( 'RFCMachineryTransId' => $typetransid, 'ProjectIOWId' => $desctypeid, 'Percentage' => $percent, 'Amount' => $amt ) );
                                        $update->where(array('RFCMachineryDetailId' => $mdetailtransid));
                                        $statement = $sql->getSqlStringForSqlObject($update);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    }
                                }
                            }
                        }
                        $connection->commit();
                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                        //$this->_approveFromOtherCostRFC($rfcid);
                        $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfcregister' ) );
                    } catch(PDOException $e){
                        $connection->rollback();
                    }
                } else {
                    try {
                        $mode = $postData['rfcmode'];
                        if ($mode == 'edit') {
                            $rfctype = 'OtherCost-Edit';
                        } else {
                            $rfctype = 'OtherCost-Add';
                        }

                        $arr_type_tables = array('1' => 'Proj_RFCOHItemTrans', '2' => 'Proj_RFCOHMaterialTrans'
                        , '3' => 'Proj_RFCOHLabourTrans', '4' => 'Proj_RFCOHServiceTrans', '5' => 'Proj_RFCOHMachineryTrans'
                        , '6' => 'Proj_RFCOHAdminExpenseTrans' , '7' => 'Proj_RFCOHSalaryTrans', '8' => 'Proj_RFCOHFuelTrans');
                        $arr_type_fields = array('1' => 'ProjectIOWId', '2' => 'ResourceId', '3' => 'ResourceId', '5' => 'MResourceId'
                        , '4' => 'ServiceId', '6' => 'ExpenseId', '7' => 'PositionId', '8' => 'MResourceId');

                        //$refno = $this->bsf->isNullCheck($postData['refno'], 'number');
                        $refdate = $this->bsf->isNullCheck($postData['refdate'], 'date');
                        $proj_id = $this->bsf->isNullCheck($postData['project_id'], 'number');

                        $sproj_type = $this->bsf->isNullCheck($postData['project_typename'], 'string');
                        $proj_type ='B';
                        if ($sproj_type == 'Plan') $proj_type ='P';



                        $connection->beginTransaction();


                        $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                        if ($aVNo["genType"] == true)
                            $sVno = $aVNo["voucherNo"];
                        else
                            $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                        $irevrequired=0;
                        if ($postData['revrequired'] =='Y') $irevrequired=1;

                        $insert = $sql->insert();
                        $insert->into('Proj_RFCRegister');
                        $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($refdate)),
                            'ProjectId' => $proj_id, 'ProjectType' => $proj_type,
                            'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'OtherCost','RevRequired'=>$irevrequired));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                        // insert new oh(s)
                        $NewOtherCostRowId = $this->bsf->isNullCheck($postData['NewOtherCostRowId'],'number');
                        $NewOhIds = array();
                        for ($v = 1; $v <= $NewOtherCostRowId; $v++) {
                            $ohId = $this->bsf->isNullCheck($postData['NewOtherCostId_' . $v], 'string');
                            $ohName = $this->bsf->isNullCheck($postData['NewOtherCostName_' . $v], 'string');
                            $ohTypeId = $this->bsf->isNullCheck($postData['NewOtherCostType_' . $v], 'string');

                            $insert = $sql->insert();
                            $insert->into('Proj_OHMaster')
                                ->Values(array('OHName' => $ohName, 'OHTypeId' => $ohTypeId));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $generatedOhId = $dbAdapter->getDriver()->getLastGeneratedValue();
                            $NewOhIds[$ohId] = $generatedOhId;
                        }

                        $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                        for ($i = 1; $i <= $iRowId; $i++) {
                            $ohTypeId = $this->bsf->isNullCheck($postData['ohtypeid_' . $i], 'number');
                            $amt = $this->bsf->isNullCheck($postData['amount_' . $i], 'number');

                            // check for vendorId
                            $ohId = $postData['ohid_' . $i];
                            if(substr($ohId, 0, 3) == 'New')
                                $ohId = $NewOhIds[ $ohId ];
                            else
                                $ohId = $this->bsf->isNullCheck($ohId,'number');

                            if ($ohId == 0)
                                continue;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCOHTrans');
                            $insert->Values(array('RFCRegisterId' => $identity, 'OHId' => $ohId, 'Amount' => $amt));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $itransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                            if(!array_key_exists($ohTypeId, $arr_type_tables))
                                continue;

                            $typeRowid = $this->bsf->isNullCheck($postData['type_'.$i.'_rowid'],'number');
                            for ( $j = 1; $j <= $typeRowid; $j++ ) {
                                $desctypeid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_desctypeid_' . $j ], 'number' );
                                $amt = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_amount_' . $j ], 'number' );
                                if($desctypeid == 0)
                                    continue;

                                $insertFields = array( 'RFCTransId' => $itransid, $arr_type_fields[ $ohTypeId ] => $desctypeid, 'Amount' => $amt);

                                if($ohTypeId == '8') { // fuel
                                    $fuelid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_fuelid_' . $j ], 'number' );
                                    $qty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_qty_' . $j ], 'number' );
                                    $rate = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_rate_' . $j ], 'number' );

                                    if ($fuelid == 0 || $qty == 0 )
                                        continue;

                                    $insertFields = array_merge(array('FResourceId' => $fuelid, 'Qty' => $qty, 'Rate' => $rate),$insertFields);
                                } else if($ohTypeId == '7') { // salary
                                    $nos = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_nos_' . $j ], 'number' );
                                    $wmonths = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_workingmonths_' . $j ], 'number' );
                                    $salpermonth = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_salpermonth_' . $j ], 'number' );

                                    if ($nos == 0 || $salpermonth == 0 || $wmonths == 0)
                                        continue;

                                    $insertFields = array_merge(array('Nos' => $nos, 'cMonths' => $wmonths, 'Salary' => $salpermonth),$insertFields);
                                } else if($ohTypeId == '5') { // machinery
                                    $nos = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_nos_' . $j ], 'number' );
                                    $wQty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_wqty_' . $j ], 'number' );
                                    if ($wQty==0) $wQty=1;
                                    $tQty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_tqty_' . $j ], 'number' );
                                    $rate = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_rate_' . $j ], 'number' );

                                    if ($nos == 0 || $wQty == 0 || $tQty == 0 || $rate == 0)
                                        continue;

                                    $insertFields = array_merge(array('Nos' => $nos, 'WorkingQty' => $wQty, 'TotalQty' => $tQty, 'Rate' => $rate),$insertFields);
                                } else if($ohTypeId != '6') { //item, material, labour, service
                                    $unitid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_unitid_' . $j ], 'number' );
                                    $qty = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_qty_' . $j ], 'number' );
                                    $rate = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_rate_' . $j ], 'number' );

                                    if ($unitid == 0 || $qty == 0 )
                                        continue;

                                    $insertFields = array_merge(array('Qty' => $qty, 'Rate' => $rate),$insertFields);
                                }
                                $insert = $sql->insert();
                                $insert->into( $arr_type_tables[ $ohTypeId ] );
                                $insert->Values($insertFields);
                                $statement = $sql->getSqlStringForSqlObject( $insert );
                                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                $typetransid = $dbAdapter->getDriver()->getLastGeneratedValue();

                                if($ohTypeId != '5')
                                    continue;

                                // machinery projectiows
                                $typeRowid = $this->bsf->isNullCheck($postData['type_'.$i.'_m_'.$j.'_rowid'],'number');
                                for ( $k = 1; $k <= $typeRowid; $k++ ) {
                                    $desctypeid = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_desctypeid_' . $k ], 'number' );
                                    $percent = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_per_' . $k ], 'number' );
                                    $amt = $this->bsf->isNullCheck( $postData[ 'type_' . $i . '_m_'. $j . '_amount_' . $k ], 'number' );

                                    if($desctypeid == 0 || $percent == 0 || $amt == 0)
                                        continue;

                                    $insert = $sql->insert();
                                    $insert->into('Proj_RFCOHMachineryDetails');
                                    $insert->Values(array('RFCMachineryTransId' => $typetransid, 'ProjectIOWId' => $desctypeid, 'Percentage' => $percent, 'Amount' => $amt));
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                }
                            }
                        }
                        $connection->commit();

                        CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                        if ($mode == 'edit') {
                            $this->redirect()->toRoute('project/default', array('controller' => 'main', 'action' => 'othercost'));
                        } else {
                            $this->redirect()->toRoute('project/rfcothercost', array('controller' => 'rfc', 'action' => 'rfcothercost'));
                        }

                        $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
                    } catch(PDOException $e){
                        $connection->rollback();
                    }
                }
            } else {

            }

            if(!$this->getRequest()->isPost() && $rfcid == 0 && $editid == 0) {
                $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
            }

            $smode ='add';
            if ($editid !=0) $smode ='edit';

            $select = $sql->select();
            $select->from('Proj_OHTypeMaster')
                ->columns(array('data' => 'OHTypeId', 'value' =>'OHTypeName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $ohtypes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            $this->_view->ohtypes = $ohtypes;

            if($rfcid != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCRegister'))
                    ->join(array('b' => 'Proj_ProjectMaster'), 'a.ProjectId=b.ProjectId', array('ProjectName'), $select::JOIN_LEFT)
                    ->columns(array('ProjectId', 'ProjectType', 'RefDate' => new Expression( "FORMAT(a.RefDate, 'dd-MM-yyyy')" ), 'RefNo','Approve','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end")))
                    ->where(array('a.RFCRegisterId' => $rfcid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcRegister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $projectId = $rfcRegister['ProjectId'];
                $this->_view->rfcregister = $rfcRegister;

                if (!empty($rfcRegister)) {
                    $this->_view->projecttype = $rfcRegister['ProjectType'];
                    $this->_view->revrequired = $rfcRegister['RevRequired'];
                    if ($rfcRegister['ProjectType'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($rfcRegister['ProjectType'] == 'P')
                        $this->_view->projecttypename = 'Plan';
                }

                $arr_rfcohtrans = array();
//                foreach($ohtypes as $type) {
//                    $OHTypeId = $type['data'];
                // get rfc oh trans
                $select = $sql->select();
                $select->from( array( 'a' => 'Proj_RFCOHTrans' ) )
                    ->join( array( 'b' => 'Proj_OHMaster' ), 'a.OHId=b.OHId', array( 'OHName', 'OHTypeId' ), $select::JOIN_LEFT )
                    ->join( array( 'c' => 'Proj_OHTypeMaster' ), 'b.OHTypeId=c.OHTypeId', array( 'OHTypeName' ), $select::JOIN_LEFT )
                    ->where('a.RFCRegisterId='.$rfcid);
                $statement = $sql->getSqlStringForSqlObject( $select );
                $rfcohtrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();


                // get rfc type trans
                foreach ( $rfcohtrans as &$trans ) {

                    $OHTypeId = $trans['OHTypeId'];

                    if($OHTypeId == '9' || $OHTypeId == '10') {
                        $arr_rfcohtrans = array_merge($arr_rfcohtrans, $rfcohtrans);
                        continue;
                    }


                    switch($OHTypeId) {
                        case '1':
                            //oh item trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHItemTrans' ) )
                                ->join( array( 'b' => 'Proj_ProjectIOWMaster' ), 'a.ProjectIOWId=b.ProjectIOWId', array( 'DescTypeId' => 'ProjectIOWId','Desc' =>new Expression("SerialNo + ' ' + Specification") ), $select::JOIN_LEFT )
                                ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCItemTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                        case '2':
                            //oh material trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHMaterialTrans' ) )
                                ->join( array( 'b' => 'Proj_Resource' ), 'a.ResourceId=b.ResourceId', array( 'DescTypeId' => 'ResourceId','Desc' =>'ResourceName' ), $select::JOIN_LEFT )
                                ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCMaterialTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                        case '3':
                            //oh labour trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHLabourTrans' ) )
                                ->join( array( 'b' => 'Proj_Resource' ), 'a.ResourceId=b.ResourceId', array(  'DescTypeId' => 'ResourceId','Desc' =>'ResourceName'  ), $select::JOIN_LEFT )
                                ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCLabourTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                        case '4':
                            //oh service trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHServiceTrans' ) )
                                ->join( array( 'b' => 'Proj_ServiceMaster' ), 'a.ServiceId=b.ServiceId', array( 'DescTypeId' => 'ServiceId', 'Desc' => 'ServiceName' ), $select::JOIN_LEFT )
                                ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCServiceTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                        case '5':
                            //oh machinery trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHMachineryTrans' ) )
                                ->join( array( 'b' => 'Proj_Resource' ), 'a.MResourceId=b.ResourceId', array( 'ResourceName' ), $select::JOIN_LEFT )
                                ->join( array( 'c' => 'Proj_UOM' ), 'b.WorkUnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCMachineryTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                            // material details trans
                            foreach($rfctypetrans as &$typedetailtrans) {
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_RFCOHMachineryDetails' ) )
                                    ->join( array( 'b' => 'Proj_ProjectIOWMaster' ), 'a.ProjectIOWId=b.ProjectIOWId', array( 'Name' => new Expression("SerialNo + ' ' + Specification") ), $select::JOIN_LEFT )
                                    ->where( 'a.RFCMachineryTransId=' .$typedetailtrans[ 'RFCMachineryTransId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfcmdetailstrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                                $typedetailtrans['details'] = $rfcmdetailstrans;
                            }
                            break;
                        case '6':
                            //oh admin expense trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHAdminExpenseTrans' ) )
                                ->join( array( 'b' => 'Proj_AdminExpenseMaster' ), 'a.ExpenseId=b.ExpenseId', array( 'DescTypeId' => 'ExpenseId', 'Desc' => 'ExpenseName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCExpenseTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                        case '7':
                            //oh salary trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHSalaryTrans' ) )
                                ->join( array( 'b' => 'WF_PositionMaster' ), 'a.PositionId=b.PositionId', array( 'DescTypeId' => 'PositionId', 'Desc' => 'PositionName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCSalaryTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                        case '8':
                            //oh fuel trans
                            $select = $sql->select();
                            $select->from( array( 'a' => 'Proj_RFCOHFuelTrans' ) )
                                ->join( array( 'b' => 'Proj_Resource' ), 'a.MResourceId=b.ResourceId', array( 'DescTypeId' => 'ResourceId', 'Desc' => 'ResourceName' ), $select::JOIN_LEFT )
                                ->join( array( 'c' => 'Proj_Resource' ), 'a.FResourceId=c.ResourceId', array( 'FuelId' => 'ResourceId', 'Fuel' => 'ResourceName' ), $select::JOIN_LEFT )
                                ->join( array( 'd' => 'Proj_UOM' ), 'c.UnitId=d.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                ->columns(array('RFCTypeTransId' => 'RFCFuelTransId', '*'))
                                ->where( 'a.RFCTransId=' .$trans[ 'RFCTransId' ] );
                            $statement = $sql->getSqlStringForSqlObject( $select );
                            $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                            break;
                    }

                    if(count($rfctypetrans))
                        $trans['typeTrans'] = $rfctypetrans;
                }

                $arr_rfcohtrans = array_merge($arr_rfcohtrans, $rfcohtrans);
                //}
                $this->_view->arr_rfcohtrans = array_reverse($arr_rfcohtrans);
            } else if($editid != 0){
                $projectid = $this->bsf->isNullCheck($this->params()->fromRoute('projectid'), 'number');
                $projecttype = $this->bsf->isNullCheck($this->params()->fromRoute('projecttype'), 'string');

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectMaster'))
                    ->columns(array('ProjectName','ProjectId'))
                    ->where(array('a.ProjectId' => $projectid));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $this->_view->projecttype = $projecttype;
                if ($projecttype == 'B')
                    $this->_view->projecttypename = 'Budget';
                else if ($projecttype == 'P')
                    $this->_view->projecttypename = 'Plan';

                $this->_view->projecttype = $projecttype;

                $arr_rfcohtrans = array();
                foreach($ohtypes as $type) {
                    $OHTypeId = $type['data'];
                    // get rfc oh trans
                    $select = $sql->select();
                    $select->from( array( 'a' => 'Proj_OHAbstract' ) )
                        ->join( array( 'b' => 'Proj_OHMaster' ), 'a.OHId=b.OHId', array( 'OHName', 'OHTypeId' ), $select::JOIN_LEFT )
                        ->join( array( 'c' => 'Proj_OHTypeMaster' ), 'b.OHTypeId=c.OHTypeId', array( 'OHTypeName' ), $select::JOIN_LEFT )
                        ->columns(array('OHAbsId','ProjectId','OHId','Amount'))
                        ->where('a.OHAbsId='.$editid.' AND b.OHTypeId='.$OHTypeId);
                    $statement = $sql->getSqlStringForSqlObject( $select );
                    $rfcohtrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                    if($OHTypeId == '9' || $OHTypeId == '10') {
                        $arr_rfcohtrans = array_merge($arr_rfcohtrans, $rfcohtrans);
                        continue;
                    }

                    // get rfc type trans
                    foreach ( $rfcohtrans as &$trans ) {
                        switch($OHTypeId) {
                            case '1':
                                //oh item trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHItem' ) )
                                    ->join( array( 'b' => 'Proj_ProjectIOWMaster' ), 'a.ProjectIOWId=b.ProjectIOWId', array( 'DescTypeId' => 'ProjectIOWId','Desc' =>new Expression("SerialNo + ' ' + Specification") ), $select::JOIN_LEFT )
                                    ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'ProjectIOWId', 'Qty', 'Rate', 'Amount','ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                            case '2':
                                //oh material trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHMaterial' ) )
                                    ->join( array( 'b' => 'Proj_Resource' ), 'a.ResourceId=b.ResourceId', array( 'DescTypeId' => 'ResourceId','Desc' =>'ResourceName' ), $select::JOIN_LEFT )
                                    ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'ResourceId', 'Qty', 'Rate', 'Amount','ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                            case '3':
                                //oh labour trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHLabour' ) )
                                    ->join( array( 'b' => 'Proj_Resource' ), 'a.ResourceId=b.ResourceId', array(  'DescTypeId' => 'ResourceId','Desc' =>'ResourceName'  ), $select::JOIN_LEFT )
                                    ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'ResourceId', 'Qty', 'Rate', 'Amount','ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                            case '4':
                                //oh service trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHService' ) )
                                    ->join( array( 'b' => 'Proj_ServiceMaster' ), 'a.ServiceId=b.ServiceId', array( 'DescTypeId' => 'ServiceId', 'Desc' => 'ServiceName' ), $select::JOIN_LEFT )
                                    ->join( array( 'c' => 'Proj_UOM' ), 'b.UnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'ServiceId', 'Qty', 'Rate', 'Amount','ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                            case '5':
                                //oh machinery trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHMachinery' ) )
                                    ->join( array( 'b' => 'Proj_Resource' ), 'a.MResourceId=b.ResourceId', array( 'ResourceName' ), $select::JOIN_LEFT )
                                    ->join( array( 'c' => 'Proj_UOM' ), 'b.WorkUnitId=c.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                    ->columns(array('MachineryTransId', 'OHAbsId', 'MResourceId', 'Nos', 'WorkingQty', 'TotalQty', 'Rate', 'Amount','ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                                // material details trans
                                foreach($rfctypetrans as &$typedetailtrans) {
                                    $select = $sql->select();
                                    $select->from( array( 'a' => 'Proj_OHMachineryDetails' ) )
                                        ->join( array( 'b' => 'Proj_ProjectIOWMaster' ), 'a.ProjectIOWId=b.ProjectIOWId', array( 'Name' => new Expression("SerialNo + ' ' + Specification") ), $select::JOIN_LEFT )
                                        ->where( 'a.MachineryTransId=' .$typedetailtrans[ 'MachineryTransId' ] );
                                    $statement = $sql->getSqlStringForSqlObject( $select );
                                    $rfcmdetailstrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

                                    $typedetailtrans['details'] = $rfcmdetailstrans;
                                }
                                break;
                            case '6':
                                //oh admin expense trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHAdminExpense' ) )
                                    ->join( array( 'b' => 'Proj_AdminExpenseMaster' ), 'a.ExpenseId=b.ExpenseId', array( 'DescTypeId' => 'ExpenseId', 'Desc' => 'ExpenseName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'ExpenseId', 'Amount','ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                            case '7':
                                //oh salary trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHSalary' ) )
                                    ->join( array( 'b' => 'WF_PositionMaster' ), 'a.PositionId=b.PositionId', array( 'DescTypeId' => 'PositionId', 'Desc' => 'PositionName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'PositionId', 'Nos','cMonths', 'Salary','Amount', 'ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                            case '8':
                                //oh fuel trans
                                $select = $sql->select();
                                $select->from( array( 'a' => 'Proj_OHFuel' ) )
                                    ->join( array( 'b' => 'Proj_Resource' ), 'a.MResourceId=b.ResourceId', array( 'DescTypeId' => 'ResourceId', 'Desc' => 'ResourceName' ), $select::JOIN_LEFT )
                                    ->join( array( 'c' => 'Proj_Resource' ), 'a.FResourceId=c.ResourceId', array( 'FuelId' => 'ResourceId', 'Fuel' => 'ResourceName' ), $select::JOIN_LEFT )
                                    ->join( array( 'd' => 'Proj_UOM' ), 'c.UnitId=d.UnitId', array( 'UnitId', 'UnitName' ), $select::JOIN_LEFT )
                                    ->columns(array('TransId', 'OHAbsId', 'ResourceId', 'FResourceId','Qty', 'Rate','Amount', 'ProjectId'))
                                    ->where( 'a.OHAbsId=' .$trans[ 'OHAbsId' ] );
                                $statement = $sql->getSqlStringForSqlObject( $select );
                                $rfctypetrans = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();
                                break;
                        }

                        if(count($rfctypetrans))
                            $trans['typeTrans'] = $rfctypetrans;
                    }

                    $arr_rfcohtrans = array_merge($arr_rfcohtrans, $rfcohtrans);
                }
                $this->_view->arr_rfcohtrans = array_reverse($arr_rfcohtrans);
            }

            $subQuery = $sql->select();
            $subQuery->from(array('a' => 'Proj_RFCOHTrans'))
                ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select:: JOIN_INNER)
                ->columns(array("OHId"));
            $subQuery->where(array('b.ProjectId' => $projectId));

            $select = $sql->select();
            $select->from(array('a' => 'Proj_OHMaster'))
                ->join(array('b' => 'Proj_OHTypeMaster'), 'a.OHTypeId=b.OHTypeId', array('OHTypeId','OHTypeName'), $select:: JOIN_LEFT)
                ->columns(array('data' => 'OHId', 'value' =>'OHName'))
                ->where->expression('OHId Not IN ?', array($subQuery));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->arr_ohs = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            // type list start
            $select = $sql->select();
            $select->from(array('a' => 'Proj_ServiceMaster'))
                ->join(array('b' => 'Proj_UOM'), 'b.UnitId=a.UnitId', array('UnitId', 'UnitName'), $select::JOIN_LEFT)
                ->columns(array('data' => 'ServiceId', 'value' =>'ServiceName','Rate'=> new Expression("'0'")));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_services = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'b.UnitId=a.UnitId', array('UnitId', 'UnitName'), $select::JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' =>'ResourceName','Rate'))
                -> where('a.TypeId=1');
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_labours = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'b.UnitId=a.UnitId', array('UnitId', 'UnitName'), $select::JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' =>'ResourceName','Rate'))
                -> where('a.TypeId=2');
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_materials = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitId', 'UnitName'), $select::JOIN_LEFT)
                ->join(array('c' => 'Proj_ProjectIOW'), 'a.ProjectIOWId=c.ProjectIOWId', array('Rate'=>'QualRate'), $select::JOIN_LEFT)
                ->columns(array('data' => 'ProjectIOWId', 'value' =>new Expression("SerialNo + ' ' + Specification")))
                -> where("a.ProjectId=$projectId and a.UnitId <>0");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_items = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_AdminExpenseMaster'))
                ->columns(array('data' => 'ExpenseId', 'value' =>'ExpenseName'))
                -> where('a.DeleteFlag=0');
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_adminexpenses = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'WF_PositionMaster'))
                ->columns(array('data' => 'PositionId', 'value' =>'PositionName'))
                -> where('a.DeleteFlag=0');
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_wfpositions = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'b.UnitId=a.UnitId', array('UnitId', 'UnitName'), $select::JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' =>'ResourceName'))
                -> where("a.TypeId=2 AND MaterialType='F'");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_fueltypes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_Resource'))
                ->columns(array('data' => 'ResourceId', 'value' =>'ResourceName'))
                -> where("a.TypeId=3");
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_materialtypes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' =>'Proj_Resource'))
                ->join(array('b' => 'Proj_UOM'), 'b.UnitId=a.WorkUnitId', array('UnitId', 'UnitName'), $select::JOIN_LEFT)
                ->columns(array('data' => 'ResourceId', 'value' =>'ResourceName','Rate'=>'WorkRate'))
                -> where('a.TypeId=3');
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->oh_machineries = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            // type list end

            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
            $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
            $this->_view->genType = $aVNo["genType"];
            $this->_view->mode = $smode;
            $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;

            if (!isset($rfcid) || $rfcid == 0 ) {
                if ($aVNo["genType"] ==false)
                    $this->_view->svNo = "";
                else
                    $this->_view->svNo = $aVNo["voucherNo"];
            }

            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function getrgfielddataAction() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();
                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $file_csv = "public/uploads/rfc/tmp/" . md5(time()) . ".csv";
                $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                $data = array();
                $file = fopen($file_csv, "r");

                $icount = 0;
                $bValid = true;

                while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                    if ($icount == 0) {
                        foreach ($xlData as $j => $value) {
                            $data[] = array('Field' => $value);
                        }
                    } else {
                        break;
                    }
                    $icount = $icount + 1;
                }

                if ($bValid == false) {
                    $data[] = array('Valid' => $bValid);
                }

                // delete csv file
                fclose($file);
                unlink($file_csv);

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }


    public function uploadrgdataAction() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        // csrf validation

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();
                $postData = $request->getPost();
                $RType = $postData['arrHeader'];

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                $bValid = true;
                try {
                    $file_csv = "public/uploads/rfc/tmp/" . md5(time()) . ".csv";
                    $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                    $data = array();
                    $file = fopen($file_csv, "r");

                    $icount = 0;

                    while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                        if ($icount == 0) {
                            foreach ($xlData as $j => $value) {
                                $bFound = false;
                                $sField = "";
                                foreach (json_decode($RType) as $k) {
                                    if (trim($value) == trim($k->efield)) {
                                        $sField = $k->field;
                                        $bFound = true;
                                        break;
                                    }
                                }
                                if ($bFound == true) {
                                    if (trim($sField) == "ResourceGroup")
                                        $col_1 = $j;
                                    if (trim($sField) == "Parent")
                                        $col_2 = $j;
                                    if (trim($sField) == "Type")
                                        $col_3 = $j;
                                }
                            }
                        } else {
                            if (!isset($col_1) || !isset($col_3)) {
                                $bValid = false;
                                break;
                            }

                            // check for null
                            if (is_null($col_1) || is_null($col_3)) {
                                $bValid = false;
                                break;
                            }

                            $sParent ="";
                            $sType ="";
                            $sRG ="";

                            if (isset($col_1) && !is_null($col_1))
                            {if (isset($xlData[$col_1]) && !is_null($xlData[$col_1])) $sRG=$this->bsf->isNullCheck($xlData[$col_1], 'string'); }

                            if (isset($col_2) && !is_null($col_2))
                            { if (isset($xlData[$col_2]) && !is_null($xlData[$col_2])) $sParent=$this->bsf->isNullCheck($xlData[$col_2], 'string'); }

                            if (isset($col_3) && !is_null($col_3))
                            { if (isset($xlData[$col_3]) && !is_null($xlData[$col_3])) $sType=$this->bsf->isNullCheck($xlData[$col_3], 'string'); }

                            if ($sRG == "" ||$sType == "")
                                continue;

                            $iParentId=0;
                            if ($sParent !="") {
                                $select = $sql->select();
                                $select->from('Proj_ResourceGroup')
                                    ->columns(array('ResourceGroupId'))
                                    ->where(array("ResourceGroupName='$sRG'"));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $parent = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (!empty($sRG))
                                    $iParentId = $parent['ResourceGroupId'];
                            }

                            $iTypeId=0;
                            if ($sType !="") {
                                $select = $sql->select();
                                $select->from('Proj_ResourceType')
                                    ->columns(array('TypeId'))
                                    ->where(array("TypeName='$sType'"));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $restype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (!empty($restype))
                                    $iTypeId = $restype['TypeId'];
                            }

                            $data[] = array('Valid' => $bValid, 'Parent' => $sParent, 'Type' => $sType, 'ResourceGroupName' => $sRG, 'ParentId' => $iParentId,
                                'TypeId' => $iTypeId);
                        }
                        $icount = $icount + 1;
                    }

                    if ($bValid == false) {
                        $data[] = array('Valid' => $bValid);
                    }

                    // delete csv file
                    fclose($file);
                    unlink($file_csv);
                } catch (Exception $ex) {
                    $data[] = array('Valid' => $bValid);
                }

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function uploadwgdataAction() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        // csrf validation

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();
                $postData = $request->getPost();
                $RType = $postData['arrHeader'];

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                try {
                    $file_csv = "public/uploads/rfc/tmp/" . md5(time()) . ".csv";
                    $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                    $data = array();
                    $file = fopen($file_csv, "r");

                    $icount = 0;
                    $bValid = true;

                    while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                        if ($icount == 0) {
                            foreach ($xlData as $j => $value) {
                                $bFound = false;
                                $sField = "";
                                foreach (json_decode($RType) as $k) {
                                    if (trim($value) == trim($k->efield)) {
                                        $sField = $k->field;
                                        $bFound = true;
                                        break;
                                    }
                                }
                                if ($bFound == true) {
                                    if (trim($sField) == "WorkType")
                                        $col_1 = $j;
                                    if (trim($sField) == "WorkGroup")
                                        $col_2 = $j;
                                }
                            }
                        } else {
                            if (!isset($col_1) || !isset($col_2)) {
                                $bValid = false;
                                break;
                            }

                            // check for null
                            if (is_null($col_1) || is_null($col_2)) {
                                $bValid = false;
                                break;
                            }

                            $sWorkType="";
                            $sWorkGroup="";

                            if (isset($col_1) && !is_null($col_1))
                            { if (isset($xlData[$col_1]) && !is_null($xlData[$col_1])) $sWorkType=$this->bsf->isNullCheck($xlData[$col_1], 'string'); }

                            if (isset($col_2) && !is_null($col_2))
                            { if (isset($xlData[$col_2]) && !is_null($xlData[$col_2])) $sWorkGroup=$this->bsf->isNullCheck($xlData[$col_2], 'string'); }

                            if ($sWorkGroup=="") continue;

                            $iWorkTypeId=0;
                            if ($sWorkType !="") {
                                $select = $sql->select();
                                $select->from('Proj_WorkTypeMaster')
                                    ->columns(array('WorkTypeId'))
                                    ->where(array("WorkType='$sWorkType'"));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $worktype = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (!empty($worktype))
                                    $iWorkTypeId = $worktype['WorkTypeId'];
                            }

                            $data[] = array('Valid' => $bValid, 'WorkType' => $sWorkType, 'WorkGroup' => $sWorkGroup, 'WorkTypeId' => $iWorkTypeId);
                        }
                        $icount = $icount + 1;
                    }

                    if ($bValid == false) {
                        $data[] = array('Valid' => $bValid);
                    }

                    // delete csv file
                    fclose($file);
                    unlink($file_csv);
                } catch (Exception $ex) {
                    $data[] = array('Valid' => $bValid);
                }

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }


    public function uploadLiowAction() {

        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        // csrf validation

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();
                $postData = $request->getPost();
                $RType = $postData['arrHeader'];

                $select = $sql->select();
                $select->from('Proj_UOM')
                    ->columns(array('UnitId','UnitName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $arrUnit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WorkGroupMaster'))
                    ->join(array('b' => 'Proj_WorkTypeMaster'), 'a.WorkTypeId=b.WorkTypeId', array('WorkType','WorkTypeId'), $select:: JOIN_LEFT)
                    ->columns(array('WorkGroupId','WorkGroupName'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $arrWorkgroup = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_Resource'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.WorkUnitId=c.UnitId', array('WorkUnit'=>new Expression("isnull(c.UnitName,'')")), $select:: JOIN_LEFT)
                    ->columns(array('ResourceId','Code','ResourceName','TypeId','UnitId','WorkUnitId'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $arrResource = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                try {
                    $file_csv = "public/uploads/rfc/tmp/" . md5(time()) . ".csv";
                    $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                    $data = array();
                    $file = fopen($file_csv, "r");

                    $icount = 0;
                    $iowid=0;
                    $bValid=true;
                    $pWGName ="";
                    $pWGId=0;
                    $pWGTypeId=0;

                    while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                        if ($icount == 0) {
                            foreach ($xlData as $j => $value) {
                                $bFound = false;
                                $sField = "";
                                foreach (json_decode($RType) as $k) {
                                    if (trim($value) == trim($k->efield)) {
                                        $sField = $k->field;
                                        $bFound = true;
                                        break;
                                    }
                                }
                                if ($bFound == true) {
                                    if (trim($sField) == "SerialNo")
                                        $col_1 = $j;
                                    if (trim($sField) == "Specification")
                                        $col_2 = $j;
                                    if (trim($sField) == "Unit")
                                        $col_3 = $j;
                                    if (trim($sField) == "Qty")
                                        $col_4 = $j;
                                    if (trim($sField) == "Rate")
                                        $col_5 = $j;
                                    if (trim($sField) == "RowType")
                                        $col_6 = $j;
                                    if (trim($sField) == "QRate")
                                        $col_7 = $j;
                                }
                            }
                        } else {

                            if (!isset($col_1) || !isset($col_2) || !isset($col_3) || !isset($col_4) || !isset($col_5) || !isset($col_6)) {
                                $bValid =false;
                                break;
                            }

                            // check for null
                            if (is_null($col_1) || is_null($col_2) || is_null($col_3)) {
                                $bValid = false;
                                break;
                            }

                            if (!isset($xlData[$col_2])) continue;
                            if ($this->bsf->isNullCheck($xlData[$col_2],'string') =="") continue;

                            $sSlNo="";
                            $sSpec="";
                            $sUnit="";
                            $dQty=0;
                            $dRate=0;
                            $dQRate=0;
                            $sRowType="";
                            $iResid=0;
                            $iResTypeId=0;
                            $parentspec ="";
                            $UnitId=0;
                            $scode ="";
                            $parentspec ="";
                            $iWGId=0;
                            $iowid=0;
                            $parentId=0;
                            $iWTypeId= 0;

                            if (isset($xlData[$col_1])) $sSlNo = $this->bsf->isNullCheck($xlData[$col_1],'string');
                            if (isset($xlData[$col_2])) $sSpec = $this->bsf->isNullCheck($xlData[$col_2],'string');
                            if (isset($xlData[$col_3])) $sUnit = $this->bsf->isNullCheck($xlData[$col_3],'string');
                            if (isset($xlData[$col_4])) $dQty = $this->bsf->isNullCheck($xlData[$col_4],'number');
                            if (isset($xlData[$col_5])) $dRate = $this->bsf->isNullCheck($xlData[$col_5],'number');
                            if (isset($xlData[$col_6])) $sRowType = $this->bsf->isNullCheck($xlData[$col_6],'string');
                            if ($sRowType =="R") {
                                $sUnit="";
                                $resname = $sSpec;
                                $scode = $sSlNo;
                                if ($scode !="") {
                                    $arr = array();
                                    $arr = array_filter($arrResource, function($v) use($scode) { return strtoupper(trim($v['Code'])) == strtoupper(trim($scode)); });
                                    $arrkey = array_keys($arr);
                                    if (!empty($arrkey)) {
                                        $akey = $arrkey[0];
                                        $iResid = $arr[$akey]['ResourceId'];
                                        $resname = $arr[$akey]['ResourceName'];
                                        $iResTypeId = $arr[$akey]['TypeId'];
                                        if ($iResTypeId==3) {
                                            $sUnit = $arr[$akey]['WorkUnit'];
                                            $UnitId = $arr[$akey]['WorkUnitId'];
                                        } else  {
                                            $sUnit = $arr[$akey]['UnitName'];
                                            $UnitId = $arr[$akey]['UnitId'];
                                        }
                                    }
                                }
                                if ($iResid==0 && $resname !="") {
                                    $arr = array();
                                    $arr = array_filter($arrResource, function($v) use($resname) { return strtoupper(trim($v['ResourceName'])) == strtoupper(trim($resname)); });
                                    $arrkey = array_keys($arr);
                                    if (!empty($arrkey)) {
                                        $akey = $arrkey[0];
                                        $iResid = $arr[$akey]['ResourceId'];
                                        $scode = $arr[$akey]['Code'];
                                        $iResTypeId = $arr[$akey]['TypeId'];
                                        if ($iResTypeId==3) {
                                            $sUnit = $arr[$akey]['WorkUnit'];
                                            $UnitId = $arr[$akey]['WorkUnitId'];
                                        } else  {
                                            $sUnit = $arr[$akey]['UnitName'];
                                            $UnitId = $arr[$akey]['UnitId'];
                                        }
                                    }
                                }
                                $sSpec = $resname;
                                $sSlNo = $scode;
                            } else if ($sRowType =="I" || $sRowType =="H") {
                                if ($pWGName !="") {
                                    $parentspec = $pWGName;
                                    $iWGId= $pWGId;
                                    $iWTypeId= $pWGTypeId;
                                }
                                $iowid=0;
                                $parentId=0;
                                if ($sUnit !="" && $sRowType =="I") {
                                    $arr = array();
                                    $arr = array_filter($arrUnit, function($v) use($sUnit) { return $v['UnitName'] == $sUnit; });
                                    $arrkey = array_keys($arr);
                                    if (!empty($arrkey)) {
                                        $akey = $arrkey[0];
                                        $UnitId = $arr[$akey]['UnitId'];
                                    }
                                    if (isset($col_7)) {
                                        if (isset($xlData[$col_7])) $dQRate = $this->bsf->isNullCheck($xlData[$col_7], 'number');
                                    }
                                }else $sRowType='H';
                            } else if ($sRowType =="WG") {
                                if ($sSpec !="") {
                                    $arr = array();
                                    $arr = array_filter($arrWorkgroup, function($v) use($sSpec) { return $v['WorkGroupName'] == $sSpec; });
                                    $arrkey = array_keys($arr);
                                    if (!empty($arrkey)) {
                                        $akey = $arrkey[0];
                                        $iWGId= $arr[$akey]['WorkGroupId'];
                                        $iWTypeId= $arr[$akey]['WorkTypeId'];
                                    }
                                    $pWGId=$iWGId;
                                    $pWGTypeId=$iWTypeId;
                                    $pWGName =$sSpec;
                                }

                            }

                            $data[] = array('Valid'=>$bValid, 'IOWId'=> $iowid, 'SerialNo' => $sSlNo,'Code'=>$scode, 'WGId' => $iWGId, 'ParentId' => $parentId, 'Specification' => $sSpec,'UnitName'=>$sUnit,'UnitId' => $UnitId,'Qty'=>$dQty, 'Rate' => $dRate,'ResourceId'=>$iResid,'RowType'=>$sRowType,'ParentSpec'=>$parentspec,'ResTypeId'=>$iResTypeId,'WorkTypeId'=>$iWTypeId,'QRate'=>$dQRate);

//                            $iResTypeId=0;
//                            $sSlText="";
//                            if (isset($xlData[$col_1])) $sSlText = $this->bsf->isNullCheck($sSlText =$xlData[$col_1],'string');
//                            if ($sSlText !="") {
//                                $SlArray = explode('.', $sSlText);
//                                $iWGId = 0;
//                                $parent = "";
//                                $parentspec="";
//                                $refslNo = "";
//                                $slNo = "";
//                                $parentId = 0;
//
//                                if (count($SlArray) > 1) {
//                                    $iWGId = $SlArray[0];
//                                }
//                                for ($i = 0; $i < count($SlArray) - 1; $i++) {
//                                    $parent = $parent + $SlArray[$i] + ".";
//                                }
//                                if (count($SlArray) > 2) {
//                                    $refslNo = $SlArray[count($SlArray) - 1];
//                                }
//                                $parent = rtrim($parent, '.');
//                                $slNo = $parent + "." + $refslNo;
//                                $spec="";
//                                if (isset($xlData[$col_2])) $spec = $this->bsf->isNullCheck($xlData[$col_2],'string');
//
//                                if ($parent != "") {
//                                    $parentId = $this->_getParentId($parent);
//                                }
//                                if ($parentId !=0) $parentspec =  $this->_getParentSpec($parentId,0);
//                                else $parentspec =  $this->_getParentSpec(0,$iWGId);
//
//                                $iowid= $iowid+1;
//                                $rowtype="I";
//                                $UnitId=0;
//                                $iows=0;
//                                $iResid=0;
//                                $scode="";
//                                $UnitName="";
//                                if (isset($xlData[$col_3])) $UnitName = $this->bsf->isNullCheck($xlData[$col_3],'string');
//                                if ($UnitName !="") {
//                                    $arr = array();
//                                    $arr = array_filter($arrUnit, function($v) use($UnitName) { return $v['UnitName'] == $UnitName; });
//                                    $arrkey = array_keys($arr);
//                                    if (!empty($arrkey)) {
//                                        $akey = $arrkey[0];
//                                        $UnitId = $arr[$akey]['UnitId'];
//                                    }
//                                }
//                                if ($UnitId !=0) {$iows=1;}
//                            }
//                            else
//                            {
//                                $iWGId=0;
//                                $parentId =0;
//                                $parentspec="";
//                                $iResid=0;
//                                $scode ="";
//                                $resname="";
//                                $iResTypeId=0;
//                                if (isset($xlData[$col_6])) $scode =  $this->bsf->isNullCheck($xlData[$col_6],'string');
//                                if (isset($xlData[$col_2])) $resname = $this->bsf->isNullCheck($xlData[$col_2],'string');
//
//                                $UnitName = "";
//                                if ($scode !="") {
//                                    $arr = array();
//                                    $arr = array_filter($arrResource, function($v) use($scode) { return strtoupper(trim($v['Code'])) == strtoupper(trim($scode)); });
//                                    $arrkey = array_keys($arr);
//                                    if (!empty($arrkey)) {
//                                        $akey = $arrkey[0];
//                                        $iResid = $arr[$akey]['ResourceId'];
//                                        $resname = $arr[$akey]['ResourceName'];
//                                        $iResTypeId = $arr[$akey]['TypeId'];
//                                        if ($iResTypeId==3) {
//                                            $UnitName = $arr[$akey]['WorkUnit'];
//                                        } else  {
//                                            $UnitName = $arr[$akey]['UnitName'];
//                                        }
//                                    }
//                                }
//                                if ($iResid==0 && $resname !="") {
//                                    $arr = array();
//                                    $arr = array_filter($arrResource, function($v) use($resname) { return strtoupper(trim($v['ResourceName'])) == strtoupper(trim($resname)); });
//                                    $arrkey = array_keys($arr);
//                                    if (!empty($arrkey)) {
//                                        $akey = $arrkey[0];
//                                        $iResid = $arr[$akey]['ResourceId'];
//                                        $scode = $arr[$akey]['Code'];
//                                        $iResTypeId = $arr[$akey]['TypeId'];
//                                        if ($iResTypeId==3) {
//                                            $UnitName = $arr[$akey]['WorkUnit'];
//                                        } else  {
//                                            $UnitName = $arr[$akey]['UnitName'];
//                                        }
//                                    }
//                                }
//                                $spec = $resname;
//                                if ($iResid !=0) $parentspec = $scode . ' ' . $resname;
//
//                                $rowtype="R";
//
//                                $iows=0;
//                            }
//                            if (is_null($parentId)) {$parentId=0;}

//                            if (isset($xlData[$col_4])) $qty =  $this->bsf->isNullCheck($xlData[$col_4],'number');
//                            if (isset($xlData[$col_5])) $rate =$this->bsf->isNullCheck($xlData[$col_5],'number');

                        }
                        $icount = $icount + 1;
                    }

                    if ($bValid == false) {
                        $data[] = array('Valid' => $bValid);
                    }

                    // delete csv file
                    fclose($file);
                    unlink($file_csv);
                } catch (Exception $ex) {
                    $data[] = array('Valid' => $bValid);
                }

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }
    public function uploadiowAction() {

        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();
                $postData = $request->getPost();
                $RType = $postData['arrHeader'];

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                try {

                    $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                    $sql = new Sql($dbAdapter);

                    $ProjectId = $this->bsf->isNullCheck($postData['ProjectId'], 'number');
                    $requestType = $this->bsf->isNullCheck($postData['requestType'], 'string');

                    $file_csv = "public/uploads/rfc/tmp/" . md5(time()) . ".csv";
                    $sheetName = $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                    $data = array();
                    $file = fopen($file_csv, "r");

                    $icount = 0;
                    $iowid=0;
                    $bValid=true;

                    while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                        if ($icount == 0) {
                            foreach ($xlData as $j => $value) {
                                $bFound = false;
                                $sField = "";
                                foreach (json_decode($RType) as $k) {
                                    if (trim($value) == trim($k->efield)) {
                                        $sField = $k->field;
                                        $bFound = true;
                                        break;
                                    }
                                }
                                if ($bFound == true) {
                                    if (trim($sField) == "SerialNo")
                                        $col_1 = $j;
                                    if (trim($sField) == "Specification")
                                        $col_2 = $j;
                                    if (trim($sField) == "Unit")
                                        $col_3 = $j;
                                    if (trim($sField) == "Qty")
                                        $col_4 = $j;
                                    if (trim($sField) == "Rate")
                                        $col_5 = $j;
                                    if (trim($sField) == "Code")
                                        $col_6 = $j;
                                    if (trim($sField) == "WBS")
                                        $col_7 = $j;
                                }
                            }
                        } else {
                            if (!isset($col_1) || !isset($col_2) || !isset($col_3) || !isset($col_4) || !isset($col_5)) {
                                $bValid =false;
                                break;
                            }

                            // get new wbs list
                            if($requestType == 'getWBS') {
                                if(!isset($col_7) || !isset($xlData[$col_7]) || trim($xlData[$col_7]) == '')
                                    continue;

                                $wbsdetail = array('WBSId' => 0, 'WBSName' => trim($xlData[$col_7]), 'WBS' => '');
                                $wbsFound = $this->_getResWBSIdbyName($wbsdetail['WBSName'], $ProjectId);
                                if(!empty($wbsFound))
                                    continue;

                                $data[] = array('Valid'=>$bValid, 'IOWId'=> $iowid,'WBS' => $wbsdetail['WBS'],
                                    'WBSId' => $wbsdetail['WBSId'], 'WBSName' => $wbsdetail['WBSName'], 'SheetName' => $sheetName);
                            } else {
                                $wbsParentFound = $this->_getResWBSIdbyName($sheetName, $ProjectId);
                                $wbsParentId=0;
                                if (empty($wbsParentFound)) {
                                    $insert = $sql->insert();
                                    $insert->into( 'Proj_WBSMaster' );
                                    $insert->Values( array( 'ProjectId' => $ProjectId, 'SortOrder'=>0,'LastLevel' => 0,'IOWUsed' => 0
                                    ,'ParentId' => 0, 'WBSName' => $sheetName) );
                                    $statement = $sql->getSqlStringForSqlObject( $insert );
                                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                    $wbsParentId = $dbAdapter->getDriver()->getLastGeneratedValue();
                                } else {
                                    $wbsParentId = $wbsParentFound['WBSId'];
                                }

                                $sSlText = "";
                                if (isset($xlData[$col_1]) && !is_null($xlData[$col_1]))
                                    $sSlText = $this->bsf->isNullCheck($sSlText = $xlData[$col_1], 'string');

                                if ($sSlText != "") {
                                    $SlArray = explode('.', $sSlText);
                                    $iWGId = 0;
                                    $parent = "";
                                    $parentspec = "";
                                    $refslNo = "";
                                    $slNo = "";
                                    $parentId = 0;

                                    if (count($SlArray) > 1) {
                                        $iWGId = $SlArray[0];
                                    }
                                    for ($i = 0; $i < count($SlArray) - 1; $i++) {
                                        $parent = $parent + $SlArray[$i] + ".";
                                    }
                                    if (count($SlArray) > 2) {
                                        $refslNo = $SlArray[count($SlArray) - 1];
                                    }
                                    $parent = rtrim($parent, '.');
                                    $slNo = $parent + "." + $refslNo;
                                    $spec = (isset($xlData[$col_2])) ? $xlData[$col_2] : '';

                                    if ($parent != "") {
                                        $parentId = $this->_getParentId($parent);
                                    }
                                    if ($parentId != 0) $parentspec = $this->_getParentSpec($parentId, 0);
                                    else $parentspec = $this->_getParentSpec(0, $iWGId);

                                    $iowid = $iowid + 1;
                                    $rowtype = "I";
                                    $UnitId = 0;
                                    $iows = 0;
                                    $iResid = 0;
                                    $scode = "";
                                    $UnitName = (isset($xlData[$col_3])) ? $xlData[$col_3] : '';
                                    if ($UnitName != "") {
                                        $UnitId = $this->_getUnitId($xlData[$col_3]);
                                    }

                                    if ($UnitId != 0) {
                                        $iows = 1;
                                    }
                                } else {
                                    $iWGId = 0;
                                    $parentId = 0;
                                    $parentspec = "";
                                    $iResid = 0;
                                    $scode = '';
                                    if (!isset($col_6)) $scode = $xlData[$col_6];

                                    $resname = $xlData[$col_2];

                                    //$UnitName = $xlData[$col_3];
                                    $UnitName = "";
                                    if ($scode != "") {
                                        $iResid = $this->_getResIdbyCode($scode);
                                    }
                                    if ($iResid == 0 && $resname != "") {
                                        $iResid = $this->_getResIdbyName($resname);
                                        $scode = $this->_getResCodebyId($iResid);
                                    } else {
                                        $resname = $this->_getResNamebyId($iResid);
                                    }
                                    if ($iResid != 0) $UnitName = $this->_getResUnitNamebyId($iResid);
                                    $spec = $resname;
                                    if ($iResid != 0) $parentspec = $this->_getResNameWithCode($iResid);

                                    $rowtype = "R";

                                    $iows = 0;
                                }
                                if (is_null($parentId)) {
                                    $parentId = 0;
                                }


                                $qty = (isset($xlData[$col_4])) ? $xlData[$col_4] : '';
                                $rate = (isset($xlData[$col_5])) ? $xlData[$col_5] : '';
                                $wbsdetail = array('WBSId' => 0, 'WBSName' => '', 'WBS' => '');
                                if (isset($col_7) && isset($xlData[$col_7]) && $xlData[$col_7] != '') {
                                    $wbsdetail['WBSName'] = trim($xlData[$col_7]);
                                    $wbsFound = $this->_getResWBSIdbyName($wbsdetail['WBSName'], $ProjectId);
                                    if (!empty($wbsFound)) {
                                        $wbsdetail['WBSId'] = $wbsFound['WBSId'];
                                        $wbsdetail['WBS'] = $wbsFound['WBS'];
                                    } else {
                                        $insert = $sql->insert();
                                        $insert->into( 'Proj_WBSMaster' );
                                        $insert->Values( array( 'ProjectId' => $ProjectId, 'SortOrder'=>0,'LastLevel' => 1,'IOWUsed' => 0
                                        ,'ParentId' => $wbsParentId, 'WBSName' => $wbsdetail['WBSName'], 'ParentText' => $sheetName.'->'.$wbsdetail['WBSName']) );
                                        $statement = $sql->getSqlStringForSqlObject( $insert );
                                        $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                                        $wbsdetail['WBSId'] = $dbAdapter->getDriver()->getLastGeneratedValue();
                                        $wbsdetail['WBS'] = $sheetName.'->'.$wbsdetail['WBSName'];
                                    }
                                }

                                $data[] = array('Valid' => $bValid, 'IOWId' => $iowid, 'SerialNo' => $sSlText, 'RefSerialNo' => $refslNo,
                                    'Code' => $scode, 'WGId' => $iWGId, 'ParentId' => $parentId, 'Specification' => $spec, 'UnitName' => $UnitName,
                                    'IOWs' => $iows, 'UnitId' => $UnitId, 'Qty' => $qty, 'Rate' => $rate, 'ResourceId' => $iResid, 'RowType' => $rowtype,
                                    'ParentSpec' => $parentspec, 'WBS' => $wbsdetail['WBS'], 'WBSId' => $wbsdetail['WBSId'], 'WBSName' => $wbsdetail['WBSName'],
                                    'SheetName' => $sheetName);
                            }
                        }
                        $icount = $icount + 1;
                    }

                    if ($bValid == false) {
                        $data[] = array('Valid' => $bValid);
                    }

                    // delete csv file
                    fclose($file);
                    unlink($file_csv);
                } catch (Exception $ex) {
                    $data[] = array('Valid' => $bValid);
                }

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function uploadresdataAction() {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        // csrf validation

        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if ($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            $response = $this->getResponse();
            if ($request->isPost()) {
                $uploadedFile = $request->getFiles();
                $postData = $request->getPost();
                $RType = $postData['arrHeader'];

                if ($this->_validateUploadFile($uploadedFile) === FALSE) {
                    $response->setContent('Invalid File Format');
                    $response->setStatusCode(400);
                    return $response;
                }

                try {
                    $file_csv = "public/uploads/rfc/tmp/" . md5(time()) . ".csv";
                    $this->_convertXLStoCSV($uploadedFile['file']['tmp_name'], $file_csv);

                    $data = array();
                    $file = fopen($file_csv, "r");

                    $icount = 0;
                    $bValid = true;

                    while (($xlData = fgetcsv($file, 100, ",")) !== FALSE) {
                        if ($icount == 0) {
                            foreach ($xlData as $j => $value) {
                                $bFound = false;
                                $sField = "";
                                foreach (json_decode($RType) as $k) {
                                    if (trim($value) == trim($k->efield)) {
                                        $sField = $k->field;
                                        $bFound = true;
                                        break;
                                    }
                                }
                                if ($bFound == true) {
                                    if (trim($sField) == "ResourceGroup")
                                        $col_1 = $j;
                                    if (trim($sField) == "ResourceName")
                                        $col_2 = $j;
                                    if (trim($sField) == "Unit")
                                        $col_3 = $j;
                                    if (trim($sField) == "Rate")
                                        $col_4 = $j;
                                    if (trim($sField) == "WorkingUnit")
                                        $col_5 = $j;
                                    if (trim($sField) == "WorkingRate")
                                        $col_6 = $j;
                                    if (trim($sField) == "MaterialType")
                                        $col_7 = $j;
                                    if (trim($sField) == "LeadTime")
                                        $col_8 = $j;
                                }
                            }
                        } else {
                            if (!isset($col_1) || !isset($col_2) || !isset($col_3)) {
                                $bValid = false;
                                break;
                            }

                            // check for null
                            if (is_null($col_1) || is_null($col_2) || is_null($col_3)) {
                                $bValid = false;
                                break;
                            }

                            $dRate=0;
                            $sWUnit="";
                            $dWRate=0;
                            $sResGroup ="";
                            $sRes="";
                            $sUnit="";
                            $mType="";
                            $leadTime="";

                            if (isset($col_1) && !is_null($col_1))
                            { if (isset($xlData[$col_1]) && !is_null($xlData[$col_1])) $sResGroup=$this->bsf->isNullCheck($xlData[$col_1], 'string'); }

                            if (isset($col_2) && !is_null($col_2))
                            { if (isset($xlData[$col_2]) && !is_null($xlData[$col_2])) $sRes=$this->bsf->isNullCheck($xlData[$col_2], 'string'); }

                            if (isset($col_3) && !is_null($col_3))
                            { if (isset($xlData[$col_3]) && !is_null($xlData[$col_3])) $sUnit=$this->bsf->isNullCheck($xlData[$col_3], 'string'); }

                            if (isset($col_4) && !is_null($col_4))
                            { if (isset($xlData[$col_4]) && !is_null($xlData[$col_4])) $dRate=$this->bsf->isNullCheck($xlData[$col_4], 'number'); }

                            if (isset($col_5) && !is_null($col_5))
                            { if (isset($xlData[$col_5]) && !is_null($xlData[$col_5])) $sWUnit=$this->bsf->isNullCheck($xlData[$col_5], 'string'); }

                            if (isset($col_6) && !is_null($col_6))
                            { if (isset($xlData[$col_6]) && !is_null($xlData[$col_6])) $dWRate=$this->bsf->isNullCheck($xlData[$col_6], 'number'); }

                            if (isset($col_7) && !is_null($col_7))
                            { if (isset($xlData[$col_7]) && !is_null($xlData[$col_7])) $mType=$this->bsf->isNullCheck($xlData[$col_7], 'string'); }

                            if (isset($col_8) && !is_null($col_8))
                            { if (isset($xlData[$col_8]) && !is_null($xlData[$col_8])) $leadTime=$this->bsf->isNullCheck($xlData[$col_8], 'number'); }

                            if ($sResGroup =="" || $sRes =="" || $sUnit=="") continue;

                            $iResGroupId=0;
                            $iTypeId=0;;
                            $sType ="";
                            if ($sResGroup !="") {
                                $select = $sql->select();
                                $select->from(array('a' => 'Proj_ResourceGroup'))
                                    ->join(array('b' => 'Proj_ResourceType'), 'a.TypeId=b.TypeId', array('TypeId','TypeName'), $select:: JOIN_LEFT)
                                    ->columns(array('ResourceGroupId'))
                                    ->where(array("ResourceGroupName='$sResGroup'"));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (!empty($unit)) {
                                    $iResGroupId = $unit['ResourceGroupId'];
                                    $iTypeId = $unit['TypeId'];
                                    $sType = $unit['TypeName'];
                                }
                            }

                            $iUnitId=0;
                            if ($sUnit !="") {
                                $select = $sql->select();
                                $select->from('Proj_UOM')
                                    ->columns(array('UnitId'))
                                    ->where(array("UnitName='$sUnit'"));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (!empty($unit))
                                    $iUnitId = $unit['UnitId'];
                            }
                            $iWUnitId=0;
                            if ($sWUnit !="") {
                                $select = $sql->select();
                                $select->from('Proj_UOM')
                                    ->columns(array('UnitId'))
                                    ->where(array("UnitName='$sWUnit'"));
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $unit = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                                if (!empty($unit))
                                    $iWUnitId = $unit['UnitId'];
                            }

                            $data[] = array('Valid' => $bValid, 'ResourceGroup' => $sResGroup, 'ResourceName' => $sRes, 'Unit' => $sUnit, 'Rate' => $dRate, 'WUnit' => $sWUnit,
                                'WRate' => $dWRate,'TypeName' => $sType ,'TypeId'=> $iTypeId,  'ResourceGroupId' => $iResGroupId,'UnitId'=> $iUnitId,'WUnitId'=>$iWUnitId,
                                'MaterialType' => $mType,'LeadTime' => $leadTime );
                        }
                        $icount = $icount + 1;
                    }

                    if ($bValid == false) {
                        $data[] = array('Valid' => $bValid);
                    }

                    // delete csv file
                    fclose($file);
                    unlink($file_csv);
                } catch (Exception $ex) {
                    $data[] = array('Valid' => $bValid);
                }

                $response->setContent(json_encode($data));
                return $response;
            }
        }
    }

    public function reminderAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $projectId =0;

        //Load Project Name
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->where(array('DeleteFlag'=> '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->ProjectName = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();

        //WorkFlow Users//
        $select = $sql->select();
        $select->from('WF_Users')
            ->columns(array('UserId','UserName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->users = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();



        //Select b.UserName,a.ReminderId,a.ReminderUserId From Proj_RemindUsers a INNER JOIN WF_Users b on a.ReminderUserId = b.UserId

        $select = $sql->select();
        $select->from(array('a' => 'Proj_RemindUsers'),array('ReminderId','ReminderUserId'))
            ->join(array('b' => 'WF_Users'), 'a.ReminderUserId=b.UserId', array('UserName'),$select::JOIN_INNER)
            ->join(array('c' => 'Proj_Reminder'), 'a.ReminderId=c.ReminderId', array(),$select::JOIN_LEFT)
            ->where(array('c.DeleteFlag' => 0));
        $statement = $sql->getSqlStringForSqlObject( $select );
        $this->_view->remindersTrans =$resContractMeeting = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();


        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $postParams = $request->getPost();
                $type = $this->bsf->isNullCheck($this->params()->fromPost('type'),'string');
                $ReminderId = $this->bsf->isNullCheck($this->params()->fromPost('ReminderId'),'number');
                $Project_IdAjax = $this->bsf->isNullCheck($this->params()->fromPost('Projectid'),'number');
                if($type == "Edit") {
                    $select = $sql->select();
                    $select->from('Proj_Reminder')
                        ->where(array('ReminderId'=> $ReminderId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                    $select = $sql->select();
                    $select->from('Proj_RemindUsers')
                        ->where(array('ReminderId'=> $ReminderId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $resultsUser = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    $results = json_encode($results);
                    $resultsUser = json_encode($resultsUser);
                    $arrresult = array($results,$resultsUser);
                    $arrresult = json_encode($arrresult);
                    $response = $this->getResponse()->setStatusCode(200)->setContent($arrresult);
                    return $response;

                } else  if($type == "Project") {
                    //load project
//                    $select = $sql->select();
//                    $select->from('Proj_Reminder')
//                        ->columns(array('*','DateFormat'=>new Expression("Format(RDate, 'dd-MM-yyyy')")))
//                        ->where(array('DeleteFlag' => 0,'ProjectId'=>$Project_IdAjax));
//                    $statement = $sql->getSqlStringForSqlObject($select);
//                    $result = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//                    $result =json_encode($result);
//                    $response = $this->getResponse()->setStatusCode(200)->setContent($result);
//                    return $response;

                } else {
                    //update on/off//
                    $update = $sql->update();
                    $update->table('Proj_Reminder');
                    $update->set(array(
                        'Type'  => $this->bsf->isNullCheck($postParams['rCheck'],'number'),
                    ));
                    $update->where(array('ReminderId'=>$this->bsf->isNullCheck($postParams['remindId'],'number')));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $result =  "";
                    $this->_view->setTerminal(true);
                    $response = $this->getResponse()->setContent($result);
                    return $response;
                }
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postParams = $request->getPost();
                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                $tag = $this->bsf->isNullCheck($postParams['tag'],'string');
                $pro = $this->bsf->isNullCheck($postParams['ProjectSelect'],'number');
                //Register values//
                $projectId = $this->bsf->isNullCheck($postParams['project_id'], 'number');
                if($projectId != 0) {
                    //Project Selected in rfc-what
                    $select = $sql->select();
                    $select->from('Proj_Reminder')
                        ->columns(array('*','DateFormat'=>new Expression("Format(RDate, 'dd-MM-yyyy')")))
                        ->where(array('DeleteFlag' => 0,'ProjectId'=>$projectId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->reminders = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->proj_id = $projectId;
                } else if($pro !=0){
                    //Load projet for onchange
                    $select = $sql->select();
                    $select->from('Proj_Reminder')
                        ->columns(array('*','DateFormat'=>new Expression("Format(RDate, 'dd-MM-yyyy')")))
                        ->where(array('DeleteFlag' => 0,'ProjectId'=>$pro));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->reminders = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->pro_id = $pro;

                } else {
                    try {
                        if($tag == "Add") {
                            //Insert
                            //add reminders//
                            $insert  = $sql->insert('Proj_Reminder');
                            $newData = array(
                                'Type'   => $this->bsf->isNullCheck($postParams['r_check'],'number'),
                                'RDescription'  => $this->bsf->isNullCheck($postParams['r_description'],'string'),
                                'RDate' =>date('Y-m-d',strtotime($postParams['r_date'])),
                                'ProjectId'  => $this->bsf->isNullCheck($postParams['ProjectId'],'number'),
                                //'Users'  => $this->bsf->isNullCheck($postParams['r_users'],'number'),
                                'CreatedDate'=>date('Y-m-d H:i:s')
                            );
                            $insert->values($newData);
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            $reminderId = $dbAdapter->getDriver()->getLastGeneratedValue();
                            foreach ($postParams['r_users'] as $value){
                                $select = $sql->insert('Proj_RemindUsers');
                                $newData = array(
                                    'ReminderId' => $reminderId,
                                    'ReminderUserId'=> $value,
                                    'CreatedDate'=>date('Y-m-d H:i:s')
                                );
                                $select->values($newData);
                                $statement = $sql->getSqlStringForSqlObject($select);
                                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            }
                        } else if($tag == "Edit") {
                            //Update
                            //select count(*) count from Proj_Reminder where DeleteFlag =0
                            $subquery = $sql->select();
                            $subquery -> from("Proj_Reminder")
                                ->columns(array('Count'=> new Expression("count(*)")))
                                ->where(array('DeleteFlag' =>'0'));
                            $statement = $sql->getSqlStringForSqlObject( $subquery );
                            $count = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->current();
                            $count =$count['Count'];

                            for ($i = 1; $i <= $count; $i++) {
//                            $m = $i-1;
                                if ($this->bsf->isNullCheck($postParams['rowid'], 'number') == $i) {

                                    $update = $sql->update();
                                    $update->table('Proj_Reminder');
                                    $update->set(array('Type' => $this->bsf->isNullCheck($postParams['checkEdit_' . $i], 'number')
                                    , 'RDescription' => $this->bsf->isNullCheck($postParams['descriptionEdit_' . $i], 'string')
                                    , 'RDate' =>date('Y-m-d',strtotime($postParams['dateEdit_' . $i]))
                                    , 'CreatedDate' => date('Y-m-d H:i:s')))
                                        ->where(array('ReminderId' => $this->bsf->isNullCheck($postParams['RemindId_' . $i], 'number') ));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    //delete from Proj_RemindUsers where ReminderId =
                                    $delete = $sql->delete('Proj_RemindUsers')
                                        ->where(array('ReminderId'=>$this->bsf->isNullCheck($postParams['RemindId_' . $i], 'number')));
                                    $statement = $sql->getSqlStringForSqlObject($delete);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                                    foreach ($postParams['usersEdit_'.$i] as $value){
                                        $select = $sql->insert('Proj_RemindUsers');
                                        $newData = array(
                                            'ReminderId' =>  $this->bsf->isNullCheck($postParams['RemindId_' . $i], 'number'),
                                            'ReminderUserId'=> $value,
                                            'CreatedDate'=>date('Y-m-d H:i:s')
                                        );
                                        $select->values($newData);
                                        $statement = $sql->getSqlStringForSqlObject($select);
                                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                    }
                                }

                            }
                        }

                        $connection->commit();
//                        $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'reminder'));
                    } catch(PDOException $e){
                        $connection->rollback();
                    }

                }
            }

            $this->_view->proj_id = $projectId;
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function reminderDeleteAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $status = "failed";
                $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
                $connection = $dbAdapter->getDriver()->getConnection();
                try {
                    $RegisterId = $this->bsf->isNullCheck($this->params()->fromPost('RegisterId'),'number');
                    $Remarks = $this->bsf->isNullCheck($this->params()->fromPost('Remarks'),'string');

                    $sql = new Sql($dbAdapter);
                    $response = $this->getResponse();
                    $connection = $dbAdapter->getDriver()->getConnection();
                    $connection->beginTransaction();
                    $update = $sql->update();
                    $update->table('Proj_Reminder')
                        ->set(array('DeleteFlag' => '1','DeletedDate' => date('Y/m/d H:i:s'), 'DeleteRemarks' => $Remarks))
                        ->where(array('ReminderId' => $RegisterId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $connection->commit();
                    $status = 'deleted';

                }

                catch (PDOException $e) {
                    $connection->rollback();
                    $response->setStatusCode(400)->setContent($status);
                }

                $response->setContent($status);
                return $response;
            }
        }
    }

    public function highlightsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        //Load Project Name
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->where(array('DeleteFlag'=> '0'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->ProjectName = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE )->toArray();


        //Auto-complete Type
        //SELECT DISTINCT Type FROM Proj_Note
        //->columns(array('data' => 'TenderEnquiryId', 'value' => 'NameOfWork'));
        $select = $sql->select();
        $select->from('Proj_Note')
            ->columns(array('value'=>new Expression('DISTINCT Type')))
            ->where(array('DeleteFlag' => 0));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->Type = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        //Register values For Highlights//
//        $select = $sql->select();
//        $select->from('Proj_Note')
//            ->columns(array('*','DateFormat'=>new Expression("Format(Date, 'dd-MM-yyyy')")))
//            ->where(array('DeleteFlag' => 0));
//        $statement = $sql->getSqlStringForSqlObject($select);
//        $this->_view->note = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $Type = $this->bsf->isNullCheck($this->params()->fromPost('type'),'string');
                $NoteTransId = $this->bsf->isNullCheck($this->params()->fromPost('id'),'number');
                if($Type == "Delete") {
                    $result =  "";

                    $update = $sql->update();
                    $update->table('Proj_Note');
                    $update->set(array('DeleteFlag' =>'1'))
                        ->where(array('NoteTransId'=>$NoteTransId));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $this->_view->setTerminal(true);
                    $response = $this->getResponse()->setContent($result);
                    return $response;
                }
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Normal form post code here
                $postData = $request->getPost();

                $connection = $dbAdapter->getDriver()->getConnection();
                $connection->beginTransaction();
                $tag = $this->bsf->isNullCheck($postData['tag'], 'string');
                $pro = $this->bsf->isNullCheck($postData['ProjectSelect'],'number');
                //Register values//
                $projectId = $this->bsf->isNullCheck($postData['project_id'], 'number');
                if($projectId != 0) {
                    $select = $sql->select();
                    $select->from('Proj_Note')
                        ->columns(array('*','DateFormat'=>new Expression("Format(Date, 'dd-MM-yyyy')")))
                        ->where(array('DeleteFlag' => 0,'ProjectId'=>$projectId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->note = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->proj_id = $projectId;
                } else if($pro !=0){
                    //Load projet for onchange
                    $select = $sql->select();
                    $select->from('Proj_Note')
                        ->columns(array('*','DateFormat'=>new Expression("Format(Date, 'dd-MM-yyyy')")))
                        ->where(array('DeleteFlag' => 0,'ProjectId'=>$pro));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->note = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                    $this->_view->pro_id = $pro;

                } else {
                    try{
                        if($tag == "Add") {
                            //Insert on Submit
                            $insert = $sql->insert();
                            $insert->into('Proj_Note');
                            $insert->Values(array('ProjectId' => $this->bsf->isNullCheck($postData['ProjectId'], 'number')
                            , 'Date' => date('Y-m-d',strtotime($postData['date']))
                            , 'Type' => $this->bsf->isNullCheck($postData['Type'], 'string')
                            , 'Note' => $this->bsf->isNullCheck($postData['Note'], 'string')));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                            //                $enquiryFollowupId = $dbAdapter->getDriver()->getLastGeneratedValue();
                        } else if($tag == "Edit") {
                            //Update
                            $subquery = $sql->select();
                            $subquery -> from("Proj_Note")
                                ->columns(array('Count'=> new Expression("count(*)")))
                                ->where(array('DeleteFlag' =>'0'));
                            $statement = $sql->getSqlStringForSqlObject( $subquery );
                            $count = $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE )->current();
                            $count =$count['Count'];
                            for ($i = 1; $i <= $count; $i++) {
                                if ($this->bsf->isNullCheck($postData['rowid'], 'number') == $i) {
                                    $update = $sql->update();
                                    $update->table('Proj_Note');
                                    $update->set(array('Type' => $this->bsf->isNullCheck($postData['TypeEdit_' . $i], 'string')
                                    , 'Date' =>date('Y-m-d',strtotime($postData['dateEdit_' . $i]))
                                    , 'Note' => $this->bsf->isNullCheck($postData['descNoteEdit_' . $i], 'string')))
                                        ->where(array('NoteTransId' => $this->bsf->isNullCheck($postData['NoteTransId_' . $i], 'number') ));
                                    $statement = $sql->getSqlStringForSqlObject($update);
                                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                                }
                            }
                        }
                        $connection->commit();
                        $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'highlights'));
                    } catch(PDOException $e){
                        $connection->rollback();
                    }
                }
            }
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
            return $this->_view;
        }
    }

    public function projboqPrintAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast || Project BOQ");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $projectId = $this->params()->fromRoute('projectId');
        $this->_view->type = $this->params()->fromRoute('type');
        $this->_view->gpage = $this->params()->fromRoute('page');

        if($projectId == '' && $this->_view->type == '') {
            $this->redirect()->toRoute('project/projboq', array('controller' => 'rfc', 'action' => 'projectboq'));
        }
        $this->_view->projectId = $projectId;

        $sessionProjBoqSearch = new Container('sessionProjBoqSearch');

        if($this->_view->gpage == '') {
            $sessionProjBoqSearch->search = array();
        }

        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();
            $sessionProjBoqSearch->search = $postData;

            $select = $sql->select();
            $select->from('Proj_ProjectWorkGroup')
                ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
                ->where('ProjectId = ' . $postData['projectId'])
                ->order(array('SortId ASC','PworkGroupId ASC'));

            $statement = $sql->getSqlStringForSqlObject($select);
            $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $projboq = array();
            foreach($projWGRes as $pwg) {
                if($postData['serialNo'] != '' || $postData['specification'] != '') {
                    if($postData['serialNo'] == $pwg['SerialNo'] || stristr($postData['specification'],$pwg['WorkGroupName'])) {
                        $projboq['Type'][] = '1';
                        $projboq['SerialNo'][] = $pwg['SerialNo'];
                        $projboq['Name'][] = $pwg['WorkGroupName'];
                        $projboq['Unit'][] = '';
                        $projboq['Quanity'][] = '';
                        $projboq['Rate'][] = '';
                        $projboq['Amount'][] = '';
                        $projboq['QualRate'][] = '';
                        $projboq['QualAmount'][] = '';
                        $projboq['IOWTransId'][] = '';
                        $projboq['Header'][] = '1';
                    }
                }

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                    ->columns(array('RefSerialNo', 'Specification','ProjectIOWId','Header'))
                    ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']));
                if($postData['serialNo'] != '') {
                    $select->where->like('a.SerialNo', "%".$postData['serialNo']."%");
                }
                if($postData['specification'] != '') {
                    $select->where->like('a.Specification', "%".$postData['specification']."%");
                }
                if($postData['amount'] != '') {
                    $select->where(array('b.Amount' => $postData['amount']));
                }
                $select->order(array('a.SortId ASC','a.ParentId ASC','a.ProjectIOWId ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                foreach($projIowPRes as $piowp) {
                    $projboq['Type'][] = '2';
                    $projboq['SerialNo'][] = $piowp['RefSerialNo'];
                    $projboq['Name'][] = $piowp['Specification'];
                    $projboq['Unit'][] = $piowp['UnitName'];
                    $projboq['Quanity'][] = $piowp['Qty'];
                    $projboq['Rate'][] = $piowp['Rate'];
                    $projboq['Amount'][] = $piowp['Amount'];
                    $projboq['QualRate'][] = $piowp['QualRate'];
                    $projboq['QualAmount'][] = $piowp['QualAmount'];
                    $projboq['IOWTransId'][] = $piowp['IOWTransId'];
                    $projboq['Header'][] = $piowp['Header'];
                }
            }
            $this->_view->projboq = $projboq;
        } else {
            if(count($sessionProjBoqSearch->search) > 0) {
                $select = $sql->select();
                $select->from('Proj_ProjectWorkGroup')
                    ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
                    ->where('ProjectId = ' . $sessionProjBoqSearch->search['projectId'])
                    ->order(array('SortId ASC','PworkGroupId ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $projboq = array();
                foreach($projWGRes as $pwg) {
                    if($sessionProjBoqSearch->search['serialNo'] != '' || $sessionProjBoqSearch->search['specification'] != '') {
                        if($sessionProjBoqSearch->search['serialNo'] == $pwg['SerialNo'] || stristr($sessionProjBoqSearch->search['specification'],$pwg['WorkGroupName'])) {
                            $projboq['Type'][] = '1';
                            $projboq['SerialNo'][] = $pwg['SerialNo'];
                            $projboq['Name'][] = $pwg['WorkGroupName'];
                            $projboq['Unit'][] = '';
                            $projboq['Quanity'][] = '';
                            $projboq['Rate'][] = '';
                            $projboq['Amount'][] = '';
                            $projboq['QualRate'][] = '';
                            $projboq['QualAmount'][] = '';
                            $projboq['IOWTransId'][] = '';
                            $projboq['Header'][] = '1';
                        }
                    }

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                        ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->columns(array('RefSerialNo', 'Specification','ProjectIOWId','Header'))
                        ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']));
                    if($sessionProjBoqSearch->search['serialNo'] != '') {
                        $select->where->like('a.SerialNo', "%".$sessionProjBoqSearch->search['serialNo']."%");
                    }
                    if($sessionProjBoqSearch->search['specification'] != '') {
                        $select->where->like('a.Specification', "%".$sessionProjBoqSearch->search['specification']."%");
                    }
                    if($sessionProjBoqSearch->search['amount'] != '') {
                        $select->where(array('b.Amount' => $sessionProjBoqSearch->search['amount']));
                    }
                    $select->order(array('a.SortId ASC','a.ParentId ASC','a.ProjectIOWId ASC'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    foreach($projIowPRes as $piowp) {
                        $projboq['Type'][] = '2';
                        $projboq['SerialNo'][] = $piowp['RefSerialNo'];
                        $projboq['Name'][] = $piowp['Specification'];
                        $projboq['Unit'][] = $piowp['UnitName'];
                        $projboq['Quanity'][] = $piowp['Qty'];
                        $projboq['Rate'][] = $piowp['Rate'];
                        $projboq['Amount'][] = $piowp['Amount'];
                        $projboq['QualRate'][] = $piowp['QualRate'];
                        $projboq['QualAmount'][] = $piowp['QualAmount'];
                        $projboq['IOWTransId'][] = $piowp['IOWTransId'];
                        $projboq['Header'][] = $piowp['Header'];
                    }
                }
                $this->_view->projboq = $projboq;
            } else {
                $sessionProjBoqSearch->search = array();
                // General
                $select = $sql->select();
                $select->from('Proj_ProjectWorkGroup')
                    ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
                    ->where('ProjectId = ' . $projectId)
                    ->order(array('SortId ASC','PworkGroupId ASC'));

                $statement = $sql->getSqlStringForSqlObject($select);
                $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $projboq = array();
                foreach($projWGRes as $pwg) {
                    $projboq['Type'][] = '1';
                    $projboq['SerialNo'][] = $pwg['SerialNo'];
                    $projboq['Name'][] = $pwg['WorkGroupName'];
                    $projboq['Unit'][] = '';
                    $projboq['Quanity'][] = '';
                    $projboq['Rate'][] = '';
                    $projboq['Amount'][] = '';
                    $projboq['QualRate'][] = '';
                    $projboq['QualAmount'][] = '';
                    $projboq['IOWTransId'][] = '';
                    $projboq['Header'][] = '1';

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                        ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
                        ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
                        ->columns(array('RefSerialNo', 'Specification','ProjectIOWId','Header'))
                        ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']))
                        ->order(array('a.SortId ASC','a.ParentId ASC','a.ProjectIOWId ASC'));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                    foreach($projIowPRes as $piowp) {
                        $projboq['Type'][] = '2';
                        $projboq['SerialNo'][] = $piowp['RefSerialNo'];
                        $projboq['Name'][] = $piowp['Specification'];
                        $projboq['Unit'][] = $piowp['UnitName'];
                        $projboq['Quanity'][] = $piowp['Qty'];
                        $projboq['Rate'][] = $piowp['Rate'];
                        $projboq['Amount'][] = $piowp['Amount'];
                        $projboq['QualRate'][] = $piowp['QualRate'];
                        $projboq['QualAmount'][] = $piowp['QualAmount'];
                        $projboq['IOWTransId'][] = $piowp['IOWTransId'];
                        $projboq['Header'][] = $piowp['Header'];

//                        $select = $sql->select();
//                        $select->from(array('a' => 'Proj_ProjectIOWMaster'))
//                            ->join(array('b' => 'Proj_ProjectIOW'), 'a.ProjectIOWId = b.ProjectIOWId', array('IOWTransId', 'Qty', 'Rate', 'Amount', 'QualRate', 'QualAmount'), $select::JOIN_LEFT)
//                            ->join(array('c' => 'Proj_UOM'), 'a.UnitId = c.UnitId', array('UnitName'), $select::JOIN_LEFT)
//                            ->where(array('a.WorkGroupId' => $pwg['PWorkGroupId'], 'a.ParentId' => $piowp['ProjectIOWId']));
//                        $statement = $sql->getSqlStringForSqlObject($select);
//                        $projIowCRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
//
//                        foreach($projIowCRes as $piowc) {
//                            $projboq['Type'][] = '3';
//                            $projboq['SerialNo'][] = $piowc['SerialNo'];
//                            $projboq['Name'][] = $piowc['Specification'];
//                            $projboq['Unit'][] = $piowc['UnitName'];
//                            $projboq['Quanity'][] = $piowc['Qty'];
//                            $projboq['Rate'][] = $piowc['Rate'];
//                            $projboq['Amount'][] = $piowc['Amount'];
//                            $projboq['QualRate'][] = $piowc['QualRate'];
//                            $projboq['QualAmount'][] = $piowc['QualAmount'];
//                            $projboq['IOWTransId'][] = $piowc['IOWTransId'];
//                        }
                    }
                }
                $this->_view->projboq = $projboq;
            }
        }

        // For Search
        $select = $sql->select();
        $select->from('Proj_ProjectWorkGroup')
            ->columns(array('SerialNo', 'WorkGroupName','PWorkGroupId'))
            ->where('ProjectId = ' . $projectId);
        $statement = $sql->getSqlStringForSqlObject($select);
        $projWGRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $searchboq = array();
        foreach($projWGRes as $pwg) {
            $searchboq['SerialNo'][] = $pwg['SerialNo'];
            $searchboq['Name'][] = $pwg['WorkGroupName'];

            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                ->columns(array('RefSerialNo', 'Specification'))
                ->where(array('a.PWorkGroupId' => $pwg['PWorkGroupId']));
            $statement = $sql->getSqlStringForSqlObject($select);
            $projIowPRes = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            foreach($projIowPRes as $piowp) {
                $searchboq['SerialNo'][] = $piowp['RefSerialNo'];
                $searchboq['Name'][] = $piowp['Specification'];
            }
        }

        $arrSerialNos = array();
        $arrSpecifications = array();
        if(!empty($searchboq)) {
            for($i=0;$i<count($searchboq['SerialNo']);$i++) {
                $arrSerialNos[] = $searchboq['SerialNo'][$i];
                $arrSpecifications[] = $searchboq['Name'][$i];
            }
        }
        $this->_view->serialNos = $arrSerialNos;
        $this->_view->specifications = $arrSpecifications;
        $this->_view->search = $sessionProjBoqSearch->search;
        // For Search

        //Project Name
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectId', 'ProjectName'));
        $statement = $sql->getSqlStringForSqlObject($select);
        $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function wbsbudgetAction()
    {
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        //$this->layout("layout/layout");
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                //Write your Ajax post code here
                $result =  "";
                $this->_view->setTerminal(true);
                $response = $this->getResponse()->setContent($result);
                return $response;
            }
        } else {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $postData = $request->getPost();

                $projId = $this->bsf->isNullCheck($postData['projId'],'number');
                $projType = $this->bsf->isNullCheck($postData['projType'],'string');
                $totRows = $this->bsf->isNullCheck($postData['totRows'],'number');

                $inTable = '';
                if($projType == 'B')
                    $inTable = 'Proj_WBSBudget';
                else if($projType == 'P')
                    $inTable = 'Proj_WBSBudgetPlan';

                $delete = $sql->delete();
                $delete->from($inTable)
                    ->where("ProjectId = $projId");
                $statement = $sql->getSqlStringForSqlObject($delete);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                for ($i=1;$i<=$totRows;$i++) {
                    $wbsId = $this->bsf->isNullCheck($postData['wbsId_' . $i],'number');
                    $amount = $this->bsf->isNullCheck($postData['amount_' . $i],'number');

                    $insert = $sql->insert();
                    $insert->into($inTable);
                    $insert->Values(array('WBSId' => $wbsId, 'Amount' => $amount, 'ProjectId' => $projId));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                }
            }

            $select = $sql->select();
            $select->from('Proj_ProjectMaster')
                ->columns(array('ProjectId', 'ProjectName'));
            $statement = $sql->getSqlStringForSqlObject($select);
            $this->_view->projectlists = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $iProjectId =  $this->bsf->isNullCheck($this->params()->fromRoute('projectId'),'number');
            $iType =  $this->bsf->isNullCheck($this->params()->fromRoute('type'),'string');

            $bTable = 'Proj_WBSBudget';
            if($iType == 'B')
                $bTable = 'Proj_WBSBudget';
            else if($iType == 'P')
                $bTable = 'Proj_WBSBudgetPlan';

            if($iProjectId != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSMaster'))
                    ->join(array('b' => $bTable), 'a.WBSId = b.WBSId', array('Amount'), $select::JOIN_LEFT)
                    ->where(array('a.ProjectId' => $iProjectId, 'a.ParentId' => 0));
                $statement = $sql->getSqlStringForSqlObject($select);
                $wbsWise = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if(empty($wbsWise)) {
                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WBSMaster'))
                        ->columns(array("WBSId" => 'WBSId', "WBSName" => 'WBSName', "Amount" => new Expression("''")))
                        ->where(array('a.ProjectId' => $iProjectId, 'a.ParentId' => 0));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $wbsWise = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                }
                $this->_view->wbsWise = $wbsWise;
            }
            $this->_view->projectId = $iProjectId;
            $this->_view->type = $iType;

            //Common function
            $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);

            return $this->_view;
        }
    }

    public function rfcwbseditAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" WBS Edit");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);
        $connection = $dbAdapter->getDriver()->getConnection();

        $wbsid = $this->bsf->isNullCheck($this->params()->fromRoute('wbsid'), 'number');
        $projectid = $this->bsf->isNullCheck($this->params()->fromRoute('projectid'), 'number');
        $projecttype = $this->bsf->isNullCheck($this->params()->fromRoute('projecttype'), 'string');

        $request = $this->getRequest();
        if ($request->isPost()) {
            $postData = $request->getPost();
            try {
                $connection->beginTransaction();
                $refDate = $this->bsf->isNullCheck($postData['refdate'],'date');
                $refNo = $this->bsf->isNullCheck($postData['refno'],'string');
                $projectId = $this->bsf->isNullCheck($postData['projectid'],'number');
                $projectType = $this->bsf->isNullCheck($postData['projecttype'],'string');

                $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");
                if ($aVNo["genType"] == true)
                    $sVno = $aVNo["voucherNo"];
                else
                    $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                $insert = $sql->insert();
                $insert->into('Proj_RFCRegister');
                $insert->values(array('RefNo' => $sVno, 'RefDate' => date('Y-m-d', strtotime($refDate))
                , 'RFCFrom' => 'Project', 'RFCType' => 'WBS-Edit', 'Approve' => 'N'
                , 'Type' => 'WBS', 'ProjectId' => $projectId, 'ProjectType' => $projectType));
                $statement = $sql->getSqlStringForSqlObject($insert);
                $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                $rfcid = $dbAdapter->getDriver()->getLastGeneratedValue();

                $rowid = $this->bsf->isNullCheck($postData['rowid'], 'number');
                for ($i = 1; $i <= $rowid; $i++) {
                    $insert = $sql->insert();
                    $insert->into( 'Proj_RFCWBSIOWTrans' );
                    $insert->values( array( 'RFCRegisterId' => $rfcid, 'WBSId' => $this->bsf->isNullCheck( $postData[ 'WBSId_' . $i ], 'number' )
                    , 'ProjectIOWId' => $this->bsf->isNullCheck( $postData[ 'ProjectIOWId_' . $i ], 'number' )
                    , 'Qty' => $this->bsf->isNullCheck( $postData[ 'qty_' . $i ], 'number' ) ) );
                    $statement = $sql->getSqlStringForSqlObject( $insert );
                    $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                }

                $connection->commit();
                CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E','WBS-Edit',$rfcid,0, 0, 'Project',$sVno,$userId, 0 ,0);
                $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfc-what'));
            } catch(PDOException $e){
                $connection->rollback();
            }
        } else {
            if($wbsid != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSMaster'))
                    ->columns(array('WBSId','ParentText', 'WBSName'))
                    ->where(array('a.WBSId'=>$wbsid));
                $statement = $sql->getSqlStringForSqlObject($select);;
                $this->_view->wbsMaster = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('c' => 'Proj_ProjectIOWMaster'), "a.ProjectIOWId=c.ProjectIOWId", array('ProjectIOWId', 'RefSerialNo', 'Specification'), $select::JOIN_LEFT)
                    ->join(array('e' => 'Proj_ProjectIOW'), "a.ProjectIOWId=e.ProjectIOWId", array('Rate'), $select::JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), "c.UnitId=d.UnitId", array('UnitName'), $select::JOIN_LEFT)
                    ->columns(array('WBSId','Qty'))
                    ->where(array('a.WBSId'=>$wbsid));
                $statement = $sql->getSqlStringForSqlObject($select);;
                $this->_view->wbsTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            }
        }

        $sProjectName = "";
        $select = $sql->select();
        $select->from('Proj_ProjectMaster')
            ->columns(array('ProjectName'))
            ->where(array('ProjectId' => $projectid));
        $statement = $sql->getSqlStringForSqlObject($select);
        $projinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
        if (!empty($projinfo)) $sProjectName = $projinfo['ProjectName'];

        $this->_view->projectname = $sProjectName;
        $this->_view->projecttype = $projecttype;
        $this->_view->projectid = $projectid;

        if ($projecttype == 'B')
            $this->_view->projecttypename = 'Budget';
        else if ($projecttype == 'P')
            $this->_view->projecttypename = 'Plan';

        $this->_view->rfcid = (isset($rfcid) && $rfcid!=0 ) ? $rfcid : 0;
        $this->_view->editid = (isset($editid) && $editid != 0) ? $editid : 0;

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
        $this->_view->genType = $aVNo["genType"];

        if (!isset($rfcid) || $rfcid == 0 ) {
            if ($aVNo["genType"] ==false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }

    public function rfcprojectiowdeleteAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" RFC Project IOW Delete");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');

            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;

                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $this->bsf->isNullCheck($postData['refno'], 'string'),
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCProjectIOWDeleteTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCProjectIOWDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $iRFCId, 'ProjectIOWId' => $this->bsf->isNullCheck($postData['ProjectIOWId_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);

                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {
                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $rfctype = 'Project-IOW-Delete';

                    $iProjId = $this->bsf->isNullCheck($postData['projectId'], 'number');
                    $sProjType = $this->bsf->isNullCheck($postData['projectType'], 'string');

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Project', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N','ProjectId'=>$iProjId,'ProjectType'=>$sProjType,'Type' => 'Project IOW'));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCProjectIOWDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $this->bsf->isNullCheck($postData['ProjectIOWId_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                }
            } catch (PDOException $e) {
                $connection->rollback();
            }
        } else {
            $iRFCId = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
            $id = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');
            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");
            $projectType = $this->bsf->isNullCheck($this->params()->fromRoute('projecttype'), 'string');

            $iProjectId=0;

            if ($iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration','Approve','ProjectId'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $this->_view->rfcregister = $rfcreg;

                if (!(empty($rfcreg))) $iProjectId= $rfcreg['ProjectId'];

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCProjectIOWDeleteTrans'))
                    ->join(array('g' => 'Proj_ProjectIOWMaster'), 'a.ProjectIOWId=g.ProjectIOWId', array('ProjectIOWId','ProjectId','RefSerialNo','SerialNo', 'ShortSpec', 'Specification'), $select:: JOIN_LEFT)
                    ->join(array('b' => 'Proj_UOM'), 'g.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectIOWTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            } else if ($id != 0) {

                $select = $sql->select();
                $select->from('Proj_ProjectIOWMaster')
                    ->columns(array('ProjectId'))
                    ->where(array("ProjectIOWId" => $id));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                if (!(empty($rfcreg))) $iProjectId= $rfcreg['ProjectId'];

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName'), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId','ProjectId','RefSerialNo', 'SerialNo', 'ShortSpec', 'Specification'))
                    ->where(array("a.ProjectIOWId" => $id));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->projectIOWTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toarray();
            }
            $this->_view->projectId = $iProjectId;
            $this->_view->projectType = $projectType;
        }

        $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
        $this->_view->editid = (isset($id) && $id != 0) ? $id : 0;
        $this->_view->genType = $aVNo["genType"];

        if (!isset($iRFCId) || $iRFCId == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function getwbsmasterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $sql = new Sql($dbAdapter);
                $iProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number');

                $subQuery = $sql->select();
                $subQuery->from("Proj_WBSTrans")
                    ->columns(array("WBSId"));
                $subQuery->where(array('ProjectId' => $iProjectId));

                $update = $sql->update();
                $update->table('Proj_WBSMaster');
                $update->set(array(
                    'IOWUsed' => 1));
                $update->where->expression('WBSId IN ?', array($subQuery));
                $statement = $sql->getSqlStringForSqlObject($update);
                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSMaster'))
                    ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => 'WBSName','LastLevel','IOWUsed'))
                    ->where(array('ProjectId' => $iProjectId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (empty($arr_wbslist)) {

                    $insert = $sql->insert();
                    $insert->into('Proj_WBSMaster');
                    $insert->Values(array('ProjectId' => $iProjectId, 'WBSName' => 'WBSName','LastLevel'=>1,'IOWUsed'=>0));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WBSMaster'))
                        ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => 'WBSName','LastLevel','IOWUsed'))
                        ->where(array('ProjectId' => $iProjectId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                }

                $response = $this->getResponse();
                $response->setContent(json_encode($arr_wbslist));
                return $response;
            }
        }
    }

    public function getwbsmasterlistAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $sql = new Sql($dbAdapter);
                $iProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number');


                $select = $sql->select();
                $select->from('Proj_WBSMaster')
                    ->columns(array('data' => 'WBSId', 'value' => new Expression("ParentText + '->' + WBSName"),'ParentId'))
                    ->where(array('ProjectId' => $iProjectId,'LastLevel'=>1));
                $statement = $sql->getSqlStringForSqlObject($select);
                $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
                $response = $this->getResponse();
                $response->setContent(json_encode($arr_wbslist));
                return $response;
            }
        }
    }

    public function getiowMasterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $sql = new Sql($dbAdapter);
                $iProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number');

                $subQuery = $sql->select();
                $subQuery->from("Proj_ProjectIOWMaster")
                    ->columns(array("IOWId"))
                    ->where(array('ProjectId'=>$iProjectId));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_IOWMaster'))
                    ->join(array('b' => 'Proj_WorkGroupMaster'), 'a.WorkGroupId=b.WorkGroupId', array('WorkGroupId','WorkGroupName','WorkTypeId'), $select::JOIN_INNER)
                    ->join(array('c' => 'Proj_WorkTypeMaster'), 'b.WorkTypeId=c.WorkTypeId', array('WorkTypeName'=>new Expression('WorkType')), $select::JOIN_INNER)
                    ->columns(array('IOWId', 'SerialNo','Specification','Header','Select'=>new Expression("'0'")))
                    ->where->expression('a.DeleteFlag=0 and a.IOWId Not IN ?', array($subQuery));
                $select->order(array('SlNo ASC'));
                $statement = $sql->getSqlStringForSqlObject($select);
                $parentdata = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $response = $this->getResponse();
                $response->setContent(json_encode($parentdata));
                return $response;
            }
        }
    }

    public function updatewbsmasterAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest()) {
            $request = $this->getRequest();
            if ($request->isPost()) {
                $sql = new Sql($dbAdapter);
                $iProjectId = $this->bsf->isNullCheck($this->params()->fromPost('ProjectId'), 'number');
                $data= $this->params()->fromPost('treePostData');
                $wbsdata= $this->params()->fromPost('masterdata');
                $tempTransIds = array();
                if (!empty($wbsdata)) {
                    foreach ($wbsdata as $wdata) {
                        $wbsId = $this->bsf->isNullCheck($wdata['id'], 'string');
                        $name = $this->bsf->isNullCheck($wdata['name'], 'string');
                        $parentid = $this->bsf->isNullCheck($wdata['parentid'], 'string');
                        $sortId = $this->bsf->isNullCheck($wdata['sortId'], 'number');
                        $lastLevel = $this->bsf->isNullCheck($wdata['lastLevel'], 'number');

                        if (strpos($parentid, 'jqxWidget') !== false) {
                            $iparentid  =$tempTransIds[$parentid];
                        } else {
                            $iparentid = $parentid;
                        }

                        if (strpos($wbsId, 'jqxWidget') === false) {
                            $update = $sql->update();
                            $update->table('Proj_WBSMaster');
                            $update->set(array(
                                'WBSName' => $name,'SortOrder'=>$sortId,'LastLevel'=>$lastLevel));
                            $update->where(array('WBSId' => $wbsId));
                            $statement = $sql->getSqlStringForSqlObject($update);
                            $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                        } else {
                            $insert = $sql->insert();
                            $insert->into( 'Proj_WBSMaster' );
                            $insert->Values( array( 'ProjectId' => $iProjectId, 'SortOrder'=>$sortId,'LastLevel' => $lastLevel,'IOWUsed' =>0
                            ,'ParentId' => $iparentid, 'WBSName' => $name) );
                            $statement = $sql->getSqlStringForSqlObject( $insert );
                            $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );
                            $tempTransIds[$wbsId] = $dbAdapter->getDriver()->getLastGeneratedValue();
                        }
                    }
                    ProjectHelper::_updateWBSParent($iProjectId,$dbAdapter);
                }

                if (!empty($data)) {
                    foreach ($data as $request) {
                        $wbsId = $this->bsf->isNullCheck($request['id'], 'number');
                        $wbsName = $this->bsf->isNullCheck($request['name'], 'string');
                        $action = $this->bsf->isNullCheck($request['action'], 'string');

                        if ($action == 'delete') {
                            $delete = $sql->delete();
                            $delete->from('Proj_WBSMaster')
                                ->where(array("WBSId" => $wbsId));
                            $statement = $sql->getSqlStringForSqlObject($delete);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                }

                $subQuery = $sql->select();
                $subQuery->from("Proj_WBSTrans")
                    ->columns(array("WBSId"));
                $subQuery->where(array('ProjectId' => $iProjectId));

                $update = $sql->update();
                $update->table('Proj_WBSMaster');
                $update->set(array(
                    'IOWUsed' => 1));
                $update->where->expression('WBSId IN ?', array($subQuery));
                $statement = $sql->getSqlStringForSqlObject($update);
                $dbAdapter->query( $statement, $dbAdapter::QUERY_MODE_EXECUTE );

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSMaster'))
                    ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => 'WBSName','LastLevel','IOWUsed'))
                    ->where(array('ProjectId' => $iProjectId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                if (empty($arr_wbslist)) {
                    $insert = $sql->insert();
                    $insert->into('Proj_WBSMaster');
                    $insert->Values(array('ProjectId' => $iProjectId, 'WBSName' => 'WBSName','LastLevel'=>1,'IOWUsed'=>0));
                    $statement = $sql->getSqlStringForSqlObject($insert);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $select = $sql->select();
                    $select->from(array('a' => 'Proj_WBSMaster'))
                        ->columns(array('id' => 'WBSId', 'parentid' => 'ParentId', 'text' => 'WBSName','LastLevel','IOWUsed'))
                        ->where('a.ProjectId=' . $projectInfo['ProjectId']);
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $arr_wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                }

                $response = $this->getResponse();
                $response->setContent(json_encode($arr_wbslist));
                return $response;
            }
        }
    }

    public function getresourcemasterAction()
    {
        if (!$this->auth->hasIdentity()) {
            if ($this->getRequest()->isXmlHttpRequest()) {
                echo "session-expired";
                exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index", "action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if ($this->getRequest()->isXmlHttpRequest()) {
            $sql = new Sql($dbAdapter);
            $select = $sql->select();
            $select->from('Proj_Resource')
                ->columns(array('ResourceName'))
                ->where(array("DeleteFlag" => 0));
            $select1 = $sql->select();
            $select1->from(array('a' => 'Proj_RFCResourceTrans'))
                ->join(array('b' => 'Proj_RFCRegister'), 'a.RFCRegisterId=b.RFCRegisterId', array(), $select1::JOIN_INNER)
                ->columns(array('ResourceName'))
                ->where(array("Approve !='Y'"));
            $select->combine($select1, 'Union ALL');

            $statement = $sql->getSqlStringForSqlObject($select);
            $results = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $response = $this->getResponse();
            $response->setContent(json_encode($results));
            return $response;
        }
    }
    public function rfcwbsdeleteAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set(" RFC WBS Delete");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $sql = new Sql($dbAdapter);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();

            $postData = $request->getPost();
            $iRFCId = $this->bsf->isNullCheck($postData['rfcUId'], 'number');

            try {
                if ($iRFCId != 0) {
                    $identity = $iRFCId;
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $this->bsf->isNullCheck($postData['refno'], 'string'),
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'),
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCWBSDeleteTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWBSDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'WBSId' => $this->bsf->isNullCheck($postData['WBSId_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {
                    $aVNo = CommonHelper::getVoucherNo(101, date('Y-m-d', strtotime($postData['refdate'])), 0, 0, $dbAdapter, "I");

                    if ($aVNo["genType"] == true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $rfctype = 'WBS-Delete';
                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RFCFrom' => 'Library', 'RefDate' => date('Y-m-d', strtotime($postData['refdate'])), 'RFCType' => $rfctype, 'Narration' => $this->bsf->isNullCheck($postData['narration'], 'string'), 'Approve' => 'N', 'Type' => 'Project IOW'));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $this->bsf->isNullCheck($postData['rowid'], 'number');
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCWBSDeleteTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'WBSId' => $this->bsf->isNullCheck($postData['WBSId_' . $i], 'number')));
                        $statement = $sql->getSqlStringForSqlObject($insert);

                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    }

                    $connection->commit();
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                }
            } catch (PDOException $e) {
                $connection->rollback();
            }
        } else {
            $iRFCId = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'), 'number');
            $id = $this->bsf->isNullCheck($this->params()->fromRoute('id'), 'number');
            $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

            if ($iRFCId != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'Narration'))
                    ->where(array("RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_RFCWBSDeleteTrans'))
                    ->join(array('f' => 'Proj_WBSTrans'), "a.WBSId=f.WBSId", array('TransId','Qty','Rate','Amount'), $select::JOIN_LEFT)
                    ->join(array('b' => 'Proj_WBSMaster'), "f.WBSId=b.WBSId", array('WBSId','ParentText', 'WBSName'), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectIOWMaster'), "f.ProjectIOWId=c.ProjectIOWId", array('ProjectIOWId', 'SerialNo', 'Specification'), $select::JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), "c.UnitId=d.UnitId", array('UnitName'), $select::JOIN_LEFT)
                    ->join(array('e' => 'Proj_ProjectMaster'), "e.ProjectId=f.ProjectId", array('ProjectId','ProjectName'), $select::JOIN_LEFT)
                    ->columns(array())
                    ->where(array("a.RFCRegisterId" => $iRFCId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->wbsTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            } else if ($id != 0) {
                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), "a.WBSId=b.WBSId", array('WBSId','ParentText', 'WBSName'), $select::JOIN_LEFT)
                    ->join(array('c' => 'Proj_ProjectIOWMaster'), "a.ProjectIOWId=c.ProjectIOWId", array('ProjectIOWId', 'SerialNo', 'Specification'), $select::JOIN_LEFT)
                    ->join(array('d' => 'Proj_UOM'), "c.UnitId=d.UnitId", array('UnitName'), $select::JOIN_LEFT)
                    ->join(array('e' => 'Proj_ProjectMaster'), "e.ProjectId=a.ProjectId", array('ProjectId','ProjectName'), $select::JOIN_LEFT)
                    ->columns(array('TransId','Qty','Rate','Amount'))
                    ->where(array("a.TransId=$id"));
                $statement = $sql->getSqlStringForSqlObject($select);;
                $this->_view->wbsTrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
            }
        }

        $this->_view->rfcid = (isset($iRFCId) && $iRFCId != 0) ? $iRFCId : 0;
        $this->_view->resourceid = (isset($id) && $id != 0) ? $id : 0;
        $this->_view->genType = $aVNo["genType"];

        if (!isset($iRFCId) || $iRFCId == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function getprojectboqwbsdetailsAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }

        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");

        if($this->getRequest()->isXmlHttpRequest())	{
            $request = $this->getRequest();
            if ($request->isPost()) {
                $TransId = $this->bsf->isNullCheck($request->getPost('TransId'), 'number');
                $sql = new Sql($dbAdapter);

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOW'))
                    ->columns(array('IOWTransId','ProjectIOWId'))
                    ->where(array("a.IOWTransId=$TransId"));
                $statement = $sql->getSqlStringForSqlObject($select);
                $this->_view->details = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), "a.WBSId=b.WBSId", array('ParentText', 'WBSName'), $select::JOIN_LEFT)
                    ->columns(array('Qty','Rate','Amount'))
                    ->where(array("a.ProjectIOWId=".$this->_view->details['ProjectIOWId']));
                $statement = $sql->getSqlStringForSqlObject($select);;
                $this->_view->wbsabstract = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $this->_view->setTerminal(true);
                $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
                return $this->_view;
            }
        }
    }

    public function rfcboqqtyAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);


        $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'),'number');
        $iprojectId=0;

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            $identity = 0;
            $postData = $request->getPost();
            $iRFCId = $postData['rfcUId'];
            try {
                if (!is_null($postData['frm_what'])) {
                    // get project list
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $iprojectId = $this->bsf->isNullCheck($postData['project_id'],'number');
                    $iprojectId;

                    $this->_view->frmwhat = $postData['frm_what'];
                    $this->_view->projecttype = $postData['type_name'];
                    $this->_view->revrequired= $postData['revrequired'];

                    if ($postData['type_name'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($postData['type_name'] == 'P')
                        $this->_view->projecttypename = 'Plan';
                } else if ($iRFCId != 0) {
                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo=$this->bsf->isNullCheck($postData['refno'],'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $identity = $iRFCId;
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'RevRequired'=>$irevrequired
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $subQuery = $sql->select();
                    $subQuery->from("Proj_RFCIOWTrans")
                        ->columns(array("RFCTransId"));
                    $subQuery->where(array('RFCRegisterId' => $identity));

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWWBSTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $postData['rowid'];
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $qty = $this->bsf->isNullCheck($postData['revqty_' . $i],'number');
                        $prevqty = $this->bsf->isNullCheck($postData['curqty_' . $i],'number');
                        $rate = $this->bsf->isNullCheck($postData['rate_' . $i],'number');
                        $amount = $this->bsf->isNullCheck($postData['revamt_' . $i],'number');
                        $prevamount = $this->bsf->isNullCheck($postData['curamt_' . $i],'number');
                        $iProjIOWId = $this->bsf->isNullCheck($postData['piowid_' . $i],'number');

                        if ($qty == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $iProjIOWId, 'Qty' => $qty,'Rate'=>$rate,'Amount'=>$amount,'PrevQty'=>$prevqty,'PrevAmount'=>$prevamount));

                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dprevqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_curqty_' . $n],'number'));
                            $dqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_revqty_' . $n],'number'));

                            if ($dqty == 0) continue;
                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWWBSTrans');
                            $insert->Values(array('RFCTransId' => $iTransId, 'WBSId' => $iwbsId, 'Qty' => $dqty,'PrevQty' => $dprevqty));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {

                    $rfctype='ProjectIOW-Qty';

                    $aVNo = CommonHelper::getVoucherNo(101,date('Y-m-d', strtotime($postData['refdate'])) ,0,0, $dbAdapter,"I");
                    if ($aVNo["genType"] ==true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RefDate' => date('Y-m-d', strtotime($this->bsf->isNullCheck($postData['refdate'], 'string'))), 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'Project-IOW', 'ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number'),'ProjectType'=>'B','RevRequired'=>$irevrequired));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $postData['rowid'];
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $qty = $this->bsf->isNullCheck($postData['revqty_' . $i],'number');
                        $prevqty = $this->bsf->isNullCheck($postData['curqty_' . $i],'number');
                        $rate = $this->bsf->isNullCheck($postData['rate_' . $i],'number');
                        $amount = $this->bsf->isNullCheck($postData['revamt_' . $i],'number');
                        $prevamount = $this->bsf->isNullCheck($postData['curamt_' . $i],'number');
                        $iProjIOWId = $this->bsf->isNullCheck($postData['piowid_' . $i],'number');
                        if ($qty == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $iProjIOWId, 'Qty' => $qty,'Rate'=>$rate,'Amount'=>$amount,'PrevQty'=>$prevqty,'PrevAmount'=>$prevamount));

                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dprevqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_curqty_' . $n],'number'));
                            $dqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_revqty_' . $n],'number'));

                            if ($dqty == 0) continue;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWWBSTrans');
                            $insert->Values(array('RFCTransId' => $iTransId, 'WBSId' => $iwbsId, 'Qty' => $dqty,'PrevQty' => $dprevqty));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                        }

                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                }
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            if (!$this->getRequest()->isPost() && $rfcid == 0) {
                $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfc-what'));
            }

            if ($rfcid != 0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate', 'ProjectId','Approve','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end")))
                    ->where(array("RFCRegisterId" => $rfcid));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $projId = 0;
                if (!empty($rfcregister)) {
                    $this->_view->revrequired = $rfcregister['RevRequired'];
                    $projId = $this->bsf->isNullCheck($rfcregister['ProjectId'], 'number');
                }
                $this->_view->rfcregister = $rfcregister;

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName' => new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_RFCIOWTrans'), new Expression("a.ProjectIOWId=c.ProjectIOWId and c.RFCRegisterId=$rfcid"), array('CurQty' => new Expression("isnull(c.PrevQty,0)"), 'Rate' => new Expression("isnull(c.Rate,0)"), 'CurAmount' => new Expression("isnull(c.PrevAmount,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)"), 'RevAmount' => new Expression("isnull(c.Amount,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId', 'RefSerialNo', 'Specification'))
                    ->where(array("a.ProjectId" => $projId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $subQuery = $sql->select();
                $subQuery->from(array('a' => 'Proj_RFCIOWWBSTrans'))
                    ->join(array('b' => 'Proj_RFCIOWTrans'), 'a.RFCTransId=b.RFCTransId', array('ProjectIOWId'), $select:: JOIN_INNER)
                    ->columns(array('WBSId', 'Qty', 'PrevQty'))
                    ->where(array('b.RFCRegisterId'=>$rfcid));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                    ->join(array('c' => $subQuery), new Expression("a.WBSId=c.WBSId and a.ProjectIOWId=c.ProjectIOWId"), array('CurQty' => new Expression("isnull(c.PrevQty,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId', 'WBSId'))
                    ->where(array("a.ProjectId" => $projId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
            }
        }

        if ($rfcid ==0) {
            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName' => new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                ->join(array('c' => 'Proj_ProjectIOW'), 'a.ProjectIOWId=c.ProjectIOWId', array('CurQty' => new Expression("isnull(c.Qty,0)"), 'Rate' => new Expression("isnull(c.Rate,0)"), 'CurAmount' => new Expression("isnull(c.Amount,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)"), 'RevAmount' => new Expression("isnull(c.Amount,0)")), $select:: JOIN_LEFT)
                ->columns(array('ProjectIOWId', 'RefSerialNo', 'Specification'))
                ->where(array("a.ProjectId" => $iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                ->join(array('c' => 'Proj_WBSTrans'), new Expression("a.WBSId=c.WBSId and a.ProjectIOWId=c.ProjectIOWId"), array('CurQty' => new Expression("isnull(c.Qty,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                ->columns(array('ProjectIOWId', 'WBSId'))
                ->where(array("a.ProjectId" => $iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }

        $select = $sql->select();
        $select->from(array('a' => 'Proj_WBSTrans'))
            ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('value' => 'WBSName'), $select:: JOIN_INNER)
            ->columns(array('data' => new Expression('DISTINCT(a.WBSId)')))
            ->where(array("a.ProjectId" => $iprojectId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $this->_view->rfctrans = $rfctrans;
        $this->_view->wbsList = $wbslist;
        $this->_view->wbstrans = $wbstrans;

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

        $this->_view->genType = $aVNo["genType"];
        $this->_view->rfcid = $rfcid;

        if ($rfcid == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false, $shareArray = false, $requestArray = false, $reminderArray = false, $askArray = false, $feedArray = false, $activityStreamArray = false, $geoLocationArray = false, $approveArray = false);
        return $this->_view;
    }

    public function rfcplanqtyAction(){
        if(!$this->auth->hasIdentity()) {
            if($this->getRequest()->isXmlHttpRequest())	{
                echo "session-expired"; exit();
            } else {
                $this->redirect()->toRoute("application/default", array("controller" => "index","action" => "index"));
            }
        }
        $this->getServiceLocator()->get("ViewHelperManager")->get("HeadTitle")->set("Buildsuperfast");
        $viewRenderer = $this->serviceLocator->get("Zend\View\Renderer\RendererInterface");
        $dbAdapter = $this->serviceLocator->get("Zend\Db\Adapter\Adapter");
        $userId = $this->auth->getIdentity()->UserId;
        $sql = new Sql($dbAdapter);


        $rfcid = $this->bsf->isNullCheck($this->params()->fromRoute('rfcId'),'number');
        $iprojectId=0;

        $request = $this->getRequest();
        if ($request->isPost()) {
            $connection = $dbAdapter->getDriver()->getConnection();
            $connection->beginTransaction();
            $identity = 0;
            $postData = $request->getPost();
            $iRFCId = $postData['rfcUId'];
            try {
                if (!is_null($postData['frm_what'])) {
                    // get project list
                    $select = $sql->select();
                    $select->from('Proj_ProjectMaster')
                        ->columns(array('ProjectId', 'ProjectName'))
                        ->where(array('ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number')));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $this->_view->projectinfo = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    $iprojectId = $this->bsf->isNullCheck($postData['project_id'],'number');

                    $this->_view->frmwhat = $postData['frm_what'];
                    $this->_view->projecttype = $postData['type_name'];
                    $this->_view->revrequired= $postData['revrequired'];

                    if ($postData['type_name'] == 'B')
                        $this->_view->projecttypename = 'Budget';
                    else if ($postData['type_name'] == 'P')
                        $this->_view->projecttypename = 'Plan';
                } else if ($iRFCId != 0) {


                    $rfctype='';
                    $select = $sql->select();
                    $select->from('Proj_RFCRegister')
                        ->columns(array('RFCType'))
                        ->where(array("RFCRegisterId" => $iRFCId));
                    $statement = $sql->getSqlStringForSqlObject($select);
                    $rfcreg = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                    if (!empty($rfcreg)) $rfctype =$this->bsf->isNullCheck($rfcreg['RFCType'],'string');
                    $sRefNo=$this->bsf->isNullCheck($postData['refno'],'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $identity = $iRFCId;
                    $update = $sql->update();
                    $update->table('Proj_RFCRegister');
                    $update->set(array(
                        'RefNo' => $sRefNo,
                        'RefDate' => date('Y-m-d', strtotime($postData['refdate'])),
                        'RevRequired'=>$irevrequired
                    ));
                    $update->where(array('RFCRegisterId' => $identity));
                    $statement = $sql->getSqlStringForSqlObject($update);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWTrans')
                        ->where(array("RFCRegisterId" => $identity));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $subQuery = $sql->select();
                    $subQuery->from("Proj_RFCIOWTrans")
                        ->columns(array("RFCTransId"));
                    $subQuery->where(array('RFCRegisterId' => $identity));

                    $delete = $sql->delete();
                    $delete->from('Proj_RFCIOWWBSTrans')
                        ->where->expression('RFCTransId IN ?', array($subQuery));
                    $statement = $sql->getSqlStringForSqlObject($delete);
                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);

                    $iRowId = $postData['rowid'];
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $qty = $this->bsf->isNullCheck($postData['revqty_' . $i],'number');
                        $prevqty = $this->bsf->isNullCheck($postData['curqty_' . $i],'number');
                        $rate = $this->bsf->isNullCheck($postData['rate_' . $i],'number');
                        $amount = $this->bsf->isNullCheck($postData['revamt_' . $i],'number');
                        $prevamount = $this->bsf->isNullCheck($postData['curamt_' . $i],'number');
                        $iProjIOWId = $this->bsf->isNullCheck($postData['piowid_' . $i],'number');
                        if ($qty == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $iProjIOWId, 'Qty' => $qty,'Rate'=>$rate,'Amount'=>$amount,'PrevQty'=>$prevqty,'PrevAmount'=>$prevamount));

                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dprevqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_curqty_' . $n],'number'));
                            $dqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_revqty_' . $n],'number'));

                            if ($dqty == 0) continue;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWWBSTrans');
                            $insert->Values(array('RFCTransId' => $iTransId, 'WBSId' => $iwbsId, 'Qty' => $dqty,'PrevQty' => $dprevqty));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }
                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Edit','E',$rfctype,$identity,0, 0, 'Project',$sRefNo,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                } else {
                    $rfctype='IOWPlan-Qty';

                    $aVNo = CommonHelper::getVoucherNo(101,date('Y-m-d', strtotime($postData['refdate'])) ,0,0, $dbAdapter,"I");
                    if ($aVNo["genType"] ==true)
                        $sVno = $aVNo["voucherNo"];
                    else
                        $sVno = $this->bsf->isNullCheck($postData['refno'], 'string');

                    $irevrequired=0;
                    if ($postData['revrequired'] =='Y') $irevrequired=1;

                    $insert = $sql->insert();
                    $insert->into('Proj_RFCRegister');
                    $insert->Values(array('RefNo' => $sVno, 'RefDate' => date('Y-m-d', strtotime($this->bsf->isNullCheck($postData['refdate'], 'string'))), 'RFCFrom' => 'Project', 'RFCType' => $rfctype, 'Approve' => 'N', 'Type' => 'IOW Plan', 'ProjectId' => $this->bsf->isNullCheck($postData['project_id'], 'number'),'ProjectType'=>'P','RevRequired'=>$irevrequired));
                    $statement = $sql->getSqlStringForSqlObject($insert);

                    $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                    $identity = $dbAdapter->getDriver()->getLastGeneratedValue();

                    $iRowId = $postData['rowid'];
                    for ($i = 1; $i <= $iRowId; $i++) {
                        $qty = $this->bsf->isNullCheck($postData['revqty_' . $i],'number');
                        $prevqty = $this->bsf->isNullCheck($postData['curqty_' . $i],'number');
                        $rate = $this->bsf->isNullCheck($postData['rate_' . $i],'number');
                        $amount = $this->bsf->isNullCheck($postData['revamt_' . $i],'number');
                        $prevamount = $this->bsf->isNullCheck($postData['curamt_' . $i],'number');
                        $iProjIOWId = $this->bsf->isNullCheck($postData['piowid_' . $i],'number');
                        if ($qty == 0) continue;
                        $insert = $sql->insert();
                        $insert->into('Proj_RFCIOWTrans');
                        $insert->Values(array('RFCRegisterId' => $identity, 'ProjectIOWId' => $iProjIOWId, 'Qty' => $qty,'Rate'=>$rate,'Amount'=>$amount,'PrevQty'=>$prevqty,'PrevAmount'=>$prevamount));

                        $statement = $sql->getSqlStringForSqlObject($insert);
                        $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        $iTransId = $dbAdapter->getDriver()->getLastGeneratedValue();

                        $iwbsRowId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_rows'],'number');
                        for ($n = 1; $n <= $iwbsRowId; $n++) {
                            $iwbsId = $this->bsf->isNullCheck($postData['wbstable_' . $i .'_wbsid_' . $n],'number');
                            $dprevqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_curqty_' . $n],'number'));
                            $dqty = floatval($this->bsf->isNullCheck($postData['wbstable_' . $i .'_revqty_' . $n],'number'));

                            if ($dqty == 0) continue;

                            $insert = $sql->insert();
                            $insert->into('Proj_RFCIOWWBSTrans');
                            $insert->Values(array('RFCTransId' => $iTransId, 'WBSId' => $iwbsId, 'Qty' => $dqty,'PrevQty' => $dprevqty));
                            $statement = $sql->getSqlStringForSqlObject($insert);
                            $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE);
                        }
                    }

                    $connection->commit();
                    CommonHelper::insertLog(date('Y-m-d H:i:s'),'Request-For-Creation-Add','N',$rfctype,$identity,0, 0, 'Project',$sVno,$userId, 0 ,0);
                    $this->redirect()->toRoute('project/default', array('controller' => 'rfc', 'action' => 'rfcregister'));
                }
            } catch(PDOException $e){
                $connection->rollback();
                print "Error!: " . $e->getMessage() . "</br>";
            }
        } else {
            if(!$this->getRequest()->isPost() && $rfcid == 0) {
                $this->redirect()->toRoute( 'project/default', array( 'controller' => 'rfc', 'action' => 'rfc-what' ) );
            }

            if ($rfcid !=0) {
                $select = $sql->select();
                $select->from('Proj_RFCRegister')
                    ->columns(array('RefNo', 'RefDate','ProjectId','Approve','RevRequired'=>new Expression("Case When RevRequired=1 then 'Y' else 'N' end")))
                    ->where(array("RFCRegisterId" => $rfcid));

                $statement = $sql->getSqlStringForSqlObject($select);
                $rfcregister = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->current();
                $projId=0;
                if (!empty($rfcregister)) {
                    $this->_view->revrequired =$rfcregister['RevRequired'];
                    $projId =$this->bsf->isNullCheck($rfcregister['ProjectId'],'number');
                }
                $this->_view->rfcregister =$rfcregister;

                $select = $sql->select();
                $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                    ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName' => new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                    ->join(array('c' => 'Proj_RFCIOWTrans'), new Expression("a.ProjectIOWId=c.ProjectIOWId and c.RFCRegisterId=$rfcid"), array('CurQty' => new Expression("isnull(c.PrevQty,0)"), 'Rate' => new Expression("isnull(c.Rate,0)"), 'CurAmount' => new Expression("isnull(c.PrevAmount,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)"), 'RevAmount' => new Expression("isnull(c.Amount,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId', 'RefSerialNo', 'Specification'))
                    ->where(array("a.ProjectId" => $projId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

                $subQuery = $sql->select();
                $subQuery->from(array('a' => 'Proj_RFCIOWWBSTrans'))
                    ->join(array('b' => 'Proj_RFCIOWTrans'), 'a.RFCTransId=b.RFCTransId', array('ProjectIOWId'), $select:: JOIN_INNER)
                    ->columns(array('WBSId', 'Qty', 'PrevQty'))
                    ->where(array('a.RFCREgisterId'=>$rfcid));

                $select = $sql->select();
                $select->from(array('a' => 'Proj_WBSTrans'))
                    ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                    ->join(array('c' => $subQuery), new Expression("a.WBSId=c.WBSId and a.ProjectIOWId=c.ProjectIOWId"), array('CurQty' => new Expression("isnull(c.PrevQty,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                    ->columns(array('ProjectIOWId', 'WBSId'))
                    ->where(array("a.ProjectId" => $projId));
                $statement = $sql->getSqlStringForSqlObject($select);
                $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            }
        }

        if($rfcid==0) {
            $select = $sql->select();
            $select->from(array('a' => 'Proj_ProjectIOWMaster'))
                ->join(array('b' => 'Proj_UOM'), 'a.UnitId=b.UnitId', array('UnitName' => new Expression("isnull(b.UnitName,'')")), $select:: JOIN_LEFT)
                ->join(array('d' => 'Proj_ProjectIOWPlan'), 'a.ProjectIOWId=d.ProjectIOWId', array('Rate' => new Expression("isnull(d.Rate,0)"),'CurQty' => new Expression("isnull(d.Qty,0)"),'CurAmount' => new Expression("isnull(d.Amount,0)"),'RevQty' => new Expression("isnull(d.Qty,0)"),'RevAmount' => new Expression("isnull(d.Amount,0)")), $select:: JOIN_LEFT)
                ->columns(array('ProjectIOWId', 'RefSerialNo', 'Specification'))
                ->where(array("a.ProjectId"=>$iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $rfctrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

            $select = $sql->select();
            $select->from(array('a' => 'Proj_WBSTrans'))
                ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('WBSName' => new Expression("B.ParentText+ '->' + B.WBSName")), $select:: JOIN_INNER)
                ->join(array('c' => 'Proj_WBSTransPlan'), new Expression("a.WBSId=c.WBSId and a.ProjectIOWId=c.ProjectIOWId"), array('CurQty' => new Expression("isnull(c.Qty,0)"), 'RevQty' => new Expression("isnull(c.Qty,0)")), $select:: JOIN_LEFT)
                ->columns(array('ProjectIOWId', 'WBSId'))
                ->where(array("a.ProjectId"=>$iprojectId));
            $statement = $sql->getSqlStringForSqlObject($select);
            $wbstrans = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();
        }

        $select = $sql->select();
        $select->from(array('a' => 'Proj_WBSTrans'))
            ->join(array('b' => 'Proj_WBSMaster'), 'a.WBSId=b.WBSId', array('value' => 'WBSName'), $select:: JOIN_INNER)
            ->columns(array('data' => new Expression('DISTINCT(a.WBSId)')))
            ->where(array("a.ProjectId" => $iprojectId));
        $statement = $sql->getSqlStringForSqlObject($select);
        $wbslist = $dbAdapter->query($statement, $dbAdapter::QUERY_MODE_EXECUTE)->toArray();

        $this->_view->rfctrans = $rfctrans;
        $this->_view->wbsList = $wbslist;
        $this->_view->wbstrans = $wbstrans;

        $aVNo = CommonHelper::getVoucherNo(101, date('Y/m/d'), 0, 0, $dbAdapter, "");

        $this->_view->genType = $aVNo["genType"];
        $this->_view->rfcid = $rfcid;

        if ($rfcid == 0) {
            if ($aVNo["genType"] == false)
                $this->_view->svNo = "";
            else
                $this->_view->svNo = $aVNo["voucherNo"];
        }

        $viewRenderer->commonHelper()->commonFunctionality($logArray = false,$shareArray = false,$requestArray = false,$reminderArray = false,$askArray = false,$feedArray = false,$activityStreamArray = false,$geoLocationArray = false,$approveArray = false);
        return $this->_view;
    }
}