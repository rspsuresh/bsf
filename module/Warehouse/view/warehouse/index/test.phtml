<html>
<head>
    <title id='Description'>Create, Remove and Update commands in jqxTreeGrid.</title>
    <meta name="description" content="Create, Remove and Update commands - JavaScript Tree Grid Demo | jQWidgets">     
    <!--<link rel="stylesheet" href="../../library/jqwidgets/styles/jqx.base.css" type="text/css" />
    <script type="text/javascript" src="http://www.jqwidgets.com/jquery-widgets-demo/scripts/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="../../library/jqwidgets/jqxcore.js"></script>
    <script type="text/javascript" src="../../library/jqwidgets/jqxbuttons.js"></script>
    <script type="text/javascript" src="../../library/jqwidgets/jqxscrollbar.js"></script>
    <script type="text/javascript" src="../../library/jqwidgets/jqxdatatable.js"></script> 
    <script type="text/javascript" src="../../library/jqwidgets/jqxtreegrid.js"></script> 
    <script type="text/javascript" src="../../library/jqwidgets/jqxlistbox.js"></script> 
    <script type="text/javascript" src="../../library/jqwidgets/jqxdropdownlist.js"></script> 
    <script type="text/javascript" src="../../library/jqwidgets/jqxdata.js"></script> 
    <script type="text/javascript" src="../../library/jqwidgets/jqxtooltip.js"></script> 
    <script type="text/javascript" src="../../library/jqwidgets/jqxinput.js"></script> 
    <script type="text/javascript" src="http://www.jqwidgets.com/jquery-widgets-demo/scripts/demos.js"></script>-->
   
    <link rel="stylesheet" href="<?php echo $this->basePath(); ?>/library/jqwidgets/styles/jqx.base.css" type="text/css" />
    <!--<script type="text/javascript" src="http://www.jqwidgets.com/jquery-widgets-demo/scripts/jquery-1.10.2.min.js"></script>-->
	<script type="text/javascript" src="http://www.jqwidgets.com/jquery-widgets-demo/scripts/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxcore.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxbuttons.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxscrollbar.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxdatatable.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxtreegrid.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxlistbox.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxdropdownlist.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxdata.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxtooltip.js"></script>
    <script type="text/javascript" src="<?php echo $this->basePath(); ?>/library/jqwidgets/jqxinput.js"></script>
    <script type="text/javascript" src="http://www.jqwidgets.com/jquery-widgets-demo/scripts/demos.js"></script>
	
	<script type="text/javascript">

	 var data = [
              {
                  "Id": "1", "Name": "Warehouse", "TypeId": "0", "Type": "", "ParentID": "0", "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2",
                  "children":
                   [
                       {
                           "Id": "2", "Name": "Section1", "TypeId": "1", "Type": "Section", "ParentID": "1", "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2",
                           "children":
                           [
                               { "Id": "4", "Name": "Rack1", "TypeId": "2", "Type": "Rack", "ParentID": "2" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2" },
                               {
                                   "Id": "5", "Name": "Bin", "TypeId": "5", "Type": "Bin", "ParentID": "4" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2"
                                  // children:
                                  // [
                                  //     { "id": "5", "name": "Banking Office", "budget": "240000", "location": "San Antonio" },
                                   //    { "id": "6", "name": "Bonds Office", "budget": "70000", "location": "San Antonio" },
                                   //]
                               }
                           ]
                       },
                       {
                           "Id": 3, "Name": "Section2", "TypeId": "1", "Type": "Section", "ParentID": "1", "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2",
                           "children":
                           [
                               { "Id": "6", "Name": "Rack1", "TypeId": "2", "Type": "Rack", "ParentID": "3" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2" },
							   { "Id": "7", "Name": "Rack2", "TypeId": "2", "Type": "Rack", "ParentID": "3" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2" }
                           ]
                       },
                       { "Id": 8, "Name": "Section3", "TypeId": "1", "Type": "Section", "ParentID": "1", "Length" : "0", "Breadth" : "0", "Height" : "0", "Capacity" : "0" }
                   ]
              }
            ];
			
	var source =
{
dataType: "json",
dataFields: [
{name: 'Id', type: 'number'},
{name: 'Name', type: 'string'},
{name: "children", type: "array"},
{name: "TypeId", type: "number"},
{name: "Type", type: "string"}

],
hierarchy:
{
root: "children"
},
id: 'fpcId',
localdata: data,
addRow: function(rowID, rowData, position, parentID, commit) {
// synchronize with the server – send insert command
// call commit with parameter true if the synchronization with the server is successful
// and with parameter false if the synchronization failed.
// you can pass additional argument to the commit callback which represents the new ID if it is generated from a DB.
commit(true);
newRowID = rowID;
}

};

var bucketPrgId=4;

for (var i = 0; i < bucketPrgId.length; i++) {
if (bucketPrgId[i] !== undefined) {
var finalrows = $("#treeGrid").jqxTreeGrid('getRows');
for (var j = 0; j < finalrows.length; j++) {
var finalPrgId = $("#treeGrid").jqxTreeGrid('getKey', finalrows[j]);
alert(bucketPrgId[i] + "===" + finalPrgId);
if (bucketPrgId[i] === finalPrgId) {
var rec = finalrows[j].records;
for (var k = 0; k < rec.length; k++) {
var childKey = $("#treeGrid").jqxTreeGrid('getKey', rec[k]);

// $(“#finalizationGrid”).jqxTreeGrid(‘expandRow’, childKey);
$("#treeGrid").jqxTreeGrid('addRow', null, {}, 'first', childKey);
// $(“#finalizationGrid”).jqxTreeGrid(‘clearSelection’);
// $(“#finalizationGrid”).jqxTreeGrid(‘selectRow’, childKey);
// edit the new row.
// $(“#finalizationGrid”).jqxTreeGrid(‘beginRowEdit’, childKey);
// $(“#finalizationGrid”).jqxTreeGrid(‘endRowEdit’, childKey, false);
//

}

}

}
}
}


			[
			//{ "Id": 1, "Name": "tests", "TypeId": 0, "Type": "", "ParentID": 0, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  },
			{ "Id": 1, "Name": "<?php if($warehouseResult){ echo $warehouseResult['WareHouseName'];} else { echo ""; } ?>", "TypeId": 0, "Type": "", "ParentID": 0, "Length" : <?php if($warehouseResult){ echo $warehouseResult['Length'];} else { echo "0"; } ?>, "Breadth" : <?php if($warehouseResult){ echo $warehouseResult['Breadth'];} else { echo "0"; } ?>, "Height" : <?php if($warehouseResult){ echo $warehouseResult['Depth'];} else { echo "0"; } ?>, "Capacity" : <?php if($warehouseResult){ echo $warehouseResult['Weight'];} else { echo "0"; } ?> },
			
			{ "Id": 2, "Name": "Section1", "TypeId": 1, "Type": "Section", "ParentID": 1, "Length" : 0, "Breadth" : 0, "Height" : 0, "Capacity" : 0  }, 
			{ "Id": 3, "Name": "Section2", "TypeId": 1, "Type": "Section", "ParentID": 1, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  }, 
			{ "Id": 4, "Name": "Rack1", "TypeId": 2, "Type": "Rack", "ParentID": 2, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  }, 
			{ "Id": 5, "Name": "Rack2", "TypeId": 2, "Type": "Rack", "ParentID": 2, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  }, 
			{ "Id": 6, "Name": "Rack3", "TypeId": 2, "Type": "Rack", "ParentID": 2, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  }, 
			{ "Id": 7, "Name": "Bulk1", "TypeId": 3, "Type": "Bulk", "ParentID": 2, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  }, 
			{ "Id": 8, "Name": "Rack1", "TypeId": 2, "Type": "Rack", "ParentID": 3, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  }, 
			{ "Id": 9, "Name": "Rack1", "TypeId": 2, "Type": "Rack", "ParentID": 3, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2 },
			{ "Id": 10, "Name": "Bulk1", "TypeId": 3, "Type": "Bulk", "ParentID": 3 , "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2 },
			{ "Id": 11, "Name": "bin1", "TypeId": 5, "Type": "bin", "ParentID": 4, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  },
			{ "Id": 12, "Name": "bin2", "TypeId": 5, "Type": "bin", "ParentID": 4, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  },
			{ "Id": 13, "Name": "bin1", "TypeId": 5, "Type": "bin", "ParentID": 5, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  },
			{ "Id": 14, "Name": "bin2", "TypeId": 5, "Type": "bin", "ParentID": 5, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  },
			{ "Id": 15, "Name": "bin1", "TypeId": 5, "Type": "bin", "ParentID": 6, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  },
			{ "Id": 16, "Name": "bin2", "TypeId": 5, "Type": "bin", "ParentID": 6, "Length" : 2, "Breadth" : 2, "Height" : 2, "Capacity" : 2  } 
			];*/
			
			
			/*
		var that = this;
		 var arr_employees = [
              {
                  "Id": "1", "Name": "Warehouse", "TypeId": "0", "Type": "", "ParentID": "0", "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2",
                  "children":
                   [
                       {
                           "Id": "2", "Name": "Section1", "TypeId": "1", "Type": "Section", "ParentID": "1", "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2",
                           "children":
                           [
                               { "Id": "4", "Name": "Rack1", "TypeId": "2", "Type": "Rack", "ParentID": "2" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2" },
                               {
                                   "Id": "5", "Name": "Bin", "TypeId": "5", "Type": "Bin", "ParentID": "4" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2"
                                  // children:
                                  // [
                                  //     { "id": "5", "name": "Banking Office", "budget": "240000", "location": "San Antonio" },
                                   //    { "id": "6", "name": "Bonds Office", "budget": "70000", "location": "San Antonio" },
                                   //]
                               }
                           ]
                       },
                       {
                           "Id": 3, "Name": "Section2", "TypeId": "1", "Type": "Section", "ParentID": "1", "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2",
                           "children":
                           [
                               { "Id": "6", "Name": "Rack1", "TypeId": "2", "Type": "Rack", "ParentID": "3" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2" },
							   { "Id": "7", "Name": "Rack2", "TypeId": "2", "Type": "Rack", "ParentID": "3" , "Length" : "2", "Breadth" : "2", "Height" : "2", "Capacity" : "2" }
                           ]
                       },
                       { "Id": 8, "Name": "Section3", "TypeId": "1", "Type": "Section", "ParentID": "1", "Length" : "0", "Breadth" : "0", "Height" : "0", "Capacity" : "0" }
                   ]
              }
            ];
			
	
            var newRowID = null; 
		// prepare the data
            var source =
            {
                dataType: "json",  //"json",
                dataFields: [
                    { name: "Id", type: "number" },
                    { name: "Name", type: "string" },
					{ name: "Type", type: "string" },
					{ name: "children", type: "array" },
                    //{ name: "ParentID", type: "number" },
					{ name: "TypeId", type: "number" },
                    { name: "Length", type: "number" },
					{ name: "Breadth", type: "number" },
					{ name: "Height", type: "number" },
					{ name: "Capacity", type: "number" }
                ],
                hierarchy:
                {
                    //keyDataField: { name: 'Id' },
                    //parentDataField: { name: 'ParentID' }
					 root: "children"
                },
                id: 'Id',
                //url: 'E:/xampp/htdocs/jqxgrid/jqwidgets/demos/sampledata/locations.tsv',
				localData: arr_employees
                 addRow: function (rowID, rowData, position, parentID, commit) {
                     // synchronize with the server - send insert command
                     // call commit with parameter true if the synchronization with the server is successful 
                     // and with parameter false if the synchronization failed.
                     // you can pass additional argument to the commit callback which represents the new ID if it is generated from a DB.
                     commit(true);
                     newRowID = rowID;
                 },
                 updateRow: function (rowID, rowData, commit) {
                     // synchronize with the server - send update command
                     // call commit with parameter true if the synchronization with the server is successful 
                     // and with parameter false if the synchronization failed.
                     commit(true);
                 },
                 deleteRow: function (rowID, commit) {
                     // synchronize with the server - send delete command
                     // call commit with parameter true if the synchronization with the server is successful 
                     // and with parameter false if the synchronization failed.
                     commit(true);
                 }
             };

            var dataAdapter = new $.jqx.dataAdapter(source, {
                loadComplete: function () {
                    // data is loaded.
                }
            });
	
            $("#treeGrid").jqxTreeGrid(
            {
                width: 1000,
                source: dataAdapter, 
                pageable: true,
                editable: true,
                showToolbar: true,
                altRows: true,
                ready: function()
                {
                    // called when the DatatreeGrid is loaded.
					//$("#treeGrid").jqxTreeGrid('lockRow', 1);					
                },
                pagerButtonsCount: 8,
                toolbarHeight: 35,
                renderToolbar: function(toolBar)
                {
                     var toTheme = function (className) {
                        if (theme == "") return className;
                        return className + " " + className + "-" + theme;
                    } 

                    // appends buttons to the status bar.
                    var container = $("<div style='overflow: hidden; position: relative; height: 100%; width: 100%;'></div>");
                    var buttonTemplate = "<div style='float: left; padding: 3px; margin: 2px;'><div style='margin: 4px; width: 16px; height: 16px;'></div></div>";
                    var addButton = $(buttonTemplate);
                    var editButton = $(buttonTemplate);
                    var deleteButton = $(buttonTemplate);
                    var cancelButton = $(buttonTemplate);
                    var updateButton = $(buttonTemplate);
                    container.append(addButton);
                    container.append(editButton);
                    container.append(deleteButton);
                    container.append(cancelButton);
                    container.append(updateButton);

                    toolBar.append(container);
                    addButton.jqxButton({cursor: "pointer", enableDefault: false, disabled: true, height: 25, width: 25 });
                    addButton.find('div:first').addClass(toTheme('jqx-icon-plus'));
                    addButton.jqxTooltip({ position: 'bottom', content: "Add"});

                    editButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
                    editButton.find('div:first').addClass(toTheme('jqx-icon-edit'));
                    editButton.jqxTooltip({ position: 'bottom', content: "Edit"});

                    deleteButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
					deleteButton.find('div:first').addClass(toTheme('jqx-icon-delete'));
                    deleteButton.jqxTooltip({ position: 'bottom', content: "Delete"});

                    updateButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
                    updateButton.find('div:first').addClass(toTheme('jqx-icon-save'));
                    updateButton.jqxTooltip({ position: 'bottom', content: "Save Changes"});

                    cancelButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
                    cancelButton.find('div:first').addClass(toTheme('jqx-icon-cancel'));
                    cancelButton.jqxTooltip({ position: 'bottom', content: "Cancel"});

                    var updateButtons = function (action) {
                        switch (action) {
                            case "Select":
                                addButton.jqxButton({ disabled: false });
                                deleteButton.jqxButton({ disabled: false });
                                editButton.jqxButton({ disabled: false });
                                cancelButton.jqxButton({ disabled: true });
                                updateButton.jqxButton({ disabled: true });
                                break;
                            case "Unselect":
                                addButton.jqxButton({ disabled: true });
                                deleteButton.jqxButton({ disabled: true });
                                editButton.jqxButton({ disabled: true });
                                cancelButton.jqxButton({ disabled: true });
                                updateButton.jqxButton({ disabled: true });
                                break;
                            case "Edit":
                                addButton.jqxButton({ disabled: true });
                                deleteButton.jqxButton({ disabled: true });
                                editButton.jqxButton({ disabled: true });
                                cancelButton.jqxButton({ disabled: false });
                                updateButton.jqxButton({ disabled: false });
                                break;
                            case "End Edit":
                                addButton.jqxButton({ disabled: false });
                                deleteButton.jqxButton({ disabled: false });
                                editButton.jqxButton({ disabled: false });
                                cancelButton.jqxButton({ disabled: true });
                                updateButton.jqxButton({ disabled: true });
                                break;

                        }
                    }

                    var rowKey = null;
                    $("#treeGrid").on('rowSelect', function (event) {
                        var args = event.args;
                        rowKey = args.key;
                        updateButtons('Select');
                    });
                    $("#treeGrid").on('rowUnselect', function (event) {
                        updateButtons('Unselect');
                    });
                    $("#treeGrid").on('rowEndEdit', function (event) {
                        updateButtons('End Edit');
                    });
                    $("#treeGrid").on('rowBeginEdit', function (event) {
                        updateButtons('Edit');
                    });
	
					var iCurrTypeId=0;
					var sCurrName="";
					var sCurrType="";
					var iPrevRowId=0;
					var iPrevTypeId=0;
					$('#treeGrid').on('rowSelect', function (event) {
						  var args = event.args;
						  var row = args.row;
						  iPrevRowId = row.Id;
						  iPrevTypeId=row.TypeId;
						  console.log(row.TypeId);
					});
                    addButton.click(function (event) {
						if(iPrevTypeId == "0") {
							iCurrTypeId=1;
							sCurrName="Section Demo";
							sCurrType="Section";
						}
						else if(iPrevTypeId == "1") {
							iCurrTypeId=2;
							sCurrName="Rack Demo";
							sCurrType="Rack";
						}
						else if(iPrevTypeId == "2" || iPrevTypeId=="3"){
							iCurrTypeId = 5;
							sCurrName="Bin Demo";
							sCurrType="Bin";
						}
			
                        if (!addButton.jqxButton('disabled')) {
                            $("#treeGrid").jqxTreeGrid('expandRow', rowKey);
                            // add new empty row.
							//"Name": sCurrName, "TypeId": iCurrTypeId, "Type": sCurrType, "ParentID" : iPrevRowId, "Length" : 0, "Breadth" : 0, "Height" : 0, "Capacity" : 0
                            $("#treeGrid").jqxTreeGrid('addRow', null, {  }, 'last', rowKey);
                            // select the first row and clear the selection.
                            $("#treeGrid").jqxTreeGrid('clearSelection');
                            $("#treeGrid").jqxTreeGrid('selectRow', newRowID);
                            // edit the new row.
                            $("#treeGrid").jqxTreeGrid('beginRowEdit', newRowID);
                            updateButtons('add');
                        }
                    });

                    cancelButton.click(function (event) {
                        if (!cancelButton.jqxButton('disabled')) {
                            // cancel changes.
                            $("#treeGrid").jqxTreeGrid('endRowEdit', rowKey, true);
                        }
                    });

                    updateButton.click(function (event) {
                        if (!updateButton.jqxButton('disabled')) {
                            // save changes.
                            $("#treeGrid").jqxTreeGrid('endRowEdit', rowKey, false);
                        }
                    });

                    editButton.click(function () {
                        if (!editButton.jqxButton('disabled')) {
                            $("#treeGrid").jqxTreeGrid('beginRowEdit', rowKey);
                            updateButtons('edit');

                        }
                    });
                    deleteButton.click(function () {
                        if (!deleteButton.jqxButton('disabled')) {
                            var selection = $("#treeGrid").jqxTreeGrid('getSelection');
                            if (selection.length > 1) {
                                var keys = new Array();
                                for (var i = 0; i < selection.length; i++) {
                                    keys.push($("#treeGrid").jqxTreeGrid('getKey', selection[i]));
                                }
                                $("#treeGrid").jqxTreeGrid('deleteRow', keys);
                            }
                            else {
                                $("#treeGrid").jqxTreeGrid('deleteRow', rowKey);
                            }
                            updateButtons('delete');

                        }
                    });
                },
                columns: [
				{ text: 'Name', dataField: "Name", align: 'center', width: '40%' },
				{
                   text: 'Type', dataField: 'Type', width: 250, columnType: "template",
                   createEditor: function (row, cellvalue, editor, cellText, width, height) {
                       // construct the editor. 
                       var source = ["Section", "Rack", "Bulk", "Open", "Bin"];
                       editor.jqxDropDownList({autoDropDownHeight: true, source: source, width: '100%', height: '100%',selectedIndex: 0 });
                   },
                   initEditor: function (row, cellvalue, editor, celltext, width, height) {
                       // set the editor's current value. The callback is called each time the editor is displayed.
                       editor.jqxDropDownList('selectItem', cellvalue);
                   },
                   getEditorValue: function (row, cellvalue, editor) {
                       // return the editor's value.
					   //alert(editor.val());
                       return editor.val();
                   }
				},
				{ text: 'Id', dataField: "Id", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '5%' },
				{ text: 'ParentID', dataField: "ParentID", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '5%' },
				{ text: 'TypeId', dataField: "TypeId", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '5%' },
				{ text: 'Length', dataField: "Length", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' },
				{ text: 'Breadth', dataField: "Breadth", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' },
				{ text: 'Height', dataField: "Height", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' },
				{ text: 'Capacity', dataField: "Capacity", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' }
				  
                ]
            });
			
</script>
</head>
<body >
    <div id="treeGrid">
    </div>
</body>
</html>