<style>
#dataTable tbody tr.mainTr td{
	text-align: center;
}
</style>
<div class="content_wrapper padlr0">
	<div class="container-fluid">
		<div class="col-lg-12 clear">
			<form class="form-horizontal" method="post" id="sampleForm">
				<input type="hidden" name="warehouseId" id="warehouseId" value="<?php  echo $warehouseId; ?>">
				<h1 class="txt_center form_main_h1 frmwrk_h1"><strong>WareHouse Plan</strong></h1>
				<div class="form-group">
					<div class="row">
						<div class="form-group req_flds col-lg-12">
							<div id="treeGrid">
							</div>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>	
</div>		

<div class="col-lg-12 savebtn_area">
    <ul>
        <li id="continueButton" class="dropdown save_btn float_r">
            <a href="javascript:void(0);" class="ripple">Save & Exit</a>
        </li>
		<li class="cancel_btn cancel_btn_bluecolor float_l"><a id="cancelbutton" class="ripple" onclick="alert confirm();">cancel</a></li>
    </ul>
</div>
<?php 
	echo $this->inlineScript()->appendFile($this->basePath('/js/warehouse.js'));
?>
<script>
var counter = 1;
var btreeFound=0;
var arr_employees = <?php echo json_encode($warehouseResult); ?>;

var json = [];
var displayView = function (records) {
	for (var i = 0; i < records.length; i++) {
		var o = {};
		for(var tot in records[i]){
			if(tot != 'level' && tot != 'records' && tot != 'parent' && tot != '_visible'){
				o[tot] = records[i][tot];
			}
		}
		json.push(o);
		if(records[i].records){
			displayView(records[i].records);
		}
	}
};


$("#continueButton").click(function(){
	var view = $("#treeGrid").jqxTreeGrid('getView');
	json = [];
	displayView(view); 
	$frmPost = $('#sampleForm');
	$frmPost.on('submit', function () {
		$frmPost.append("<input type='hidden' name='warehouseJson' value='"+JSON.stringify(json)+"'>");
	});
	
	$("#sampleForm").submit();
    window.location = "<?php echo $this->basePath();?>/warehouse/index/warehouse-register";
    //$("#continueButton").attr("href", "<?php echo $this->basePath();?>/warehouse/index/warehouse-register");
});
		
	var newRowID = null; 
	// prepare the data
	var source =
	{
		dataType: "json",  //"json",
		dataFields: [
			{ name: "Id", type: "number" },
			{ name: "Name", type: "string" },
			{ name: "Type", type: "string" },
			{ name: "ParentID", type: "number" },
			{ name: "TypeId", type: "number" },
			{ name: "Length", type: "number" },
			{ name: "Breadth", type: "number" },
			{ name: "Height", type: "number" },
			{ name: "Capacity", type: "number" }
		],
		hierarchy:
		{
			keyDataField: { name: 'Id' },
			parentDataField: { name: 'ParentID' }
		},
		id: 'Id',
		//url: 'E:/xampp/htdocs/jqxgrid/jqwidgets/demos/sampledata/locations.tsv',
		localData: arr_employees,
		 addRow: function (rowID, rowData, position, parentID, commit) {
			 // synchronize with the server - send insert command
			 // call commit with parameter true if the synchronization with the server is successful 
			 // and with parameter false if the synchronization failed.
			 // you can pass additional argument to the commit callback which represents the new ID if it is generated from a DB.
			 commit(true);
			 newRowID = rowID;
		 },
		 updateRow: function (rowID, rowData, commit) {
			 // synchronize with the server - send update command
			 // call commit with parameter true if the synchronization with the server is successful 
			 // and with parameter false if the synchronization failed.
			 commit(true);
		 },
		 deleteRow: function (rowID, commit) {
			 // synchronize with the server - send delete command
			 // call commit with parameter true if the synchronization with the server is successful 
			 // and with parameter false if the synchronization failed.
			 commit(true);
		 }
	 };

	var dataAdapter = new $.jqx.dataAdapter(source, {
		loadComplete: function () {
			// data is loaded.
		}
	});

	$("#treeGrid").jqxTreeGrid({
		width: 1100,
		source: dataAdapter, 
		pageable: true,
		editable: true,
		showToolbar: true,
		altRows: true,
		ready: function()
		{
			// called when the DatatreeGrid is loaded.
			//$("#treeGrid").jqxTreeGrid('lockRow', 1);	
			$("#treeGrid").jqxTreeGrid('expandRow',1);
			$("#treeGrid").jqxTreeGrid('hideColumn', 'Id');
			$("#treeGrid").jqxTreeGrid('hideColumn', 'ParentID');
			$("#treeGrid").jqxTreeGrid('hideColumn', 'TypeId');
		},
		pagerButtonsCount: 8,
		toolbarHeight: 35,
		renderToolbar: function(toolBar)
		{
			 var toTheme = function (className) {
				if (theme == "") return className;
				return className + " " + className + "-" + theme;
			} 

			// appends buttons to the status bar.
			var container = $("<div style='overflow: hidden; position: relative; height: 100%; width: 100%;'></div>");
			var buttonTemplate = "<div style='float: left; padding: 3px; margin: 2px;'><div style='margin: 4px; width: 16px; height: 16px;'></div></div>";
			var addButton = $(buttonTemplate);
			var editButton = $(buttonTemplate);
			var deleteButton = $(buttonTemplate);
			var cancelButton = $(buttonTemplate);
			var updateButton = $(buttonTemplate);
			container.append(addButton);
			container.append(editButton);
			container.append(deleteButton);
			container.append(cancelButton);
			container.append(updateButton);

			toolBar.append(container);
			addButton.jqxButton({cursor: "pointer", enableDefault: false, disabled: true, height: 25, width: 25 });
			addButton.find('div:first').addClass(toTheme('jqx-icon-plus'));
			addButton.jqxTooltip({ position: 'bottom', content: "Add"});

			editButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
			editButton.find('div:first').addClass(toTheme('jqx-icon-edit'));
			editButton.jqxTooltip({ position: 'bottom', content: "Edit"});

			deleteButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
			deleteButton.find('div:first').addClass(toTheme('jqx-icon-delete'));
			deleteButton.jqxTooltip({ position: 'bottom', content: "Delete"});

			updateButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
			updateButton.find('div:first').addClass(toTheme('jqx-icon-save'));
			updateButton.jqxTooltip({ position: 'bottom', content: "Save Changes"});

			cancelButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false,  height: 25, width: 25 });
			cancelButton.find('div:first').addClass(toTheme('jqx-icon-cancel'));
			cancelButton.jqxTooltip({ position: 'bottom', content: "Cancel"});

			var updateButtons = function (action) {
				switch (action) {
					case "Select":
						addButton.jqxButton({ disabled: false });
						deleteButton.jqxButton({ disabled: false });
						editButton.jqxButton({ disabled: false });
						cancelButton.jqxButton({ disabled: true });
						updateButton.jqxButton({ disabled: true });
						break;
					case "Unselect":
						addButton.jqxButton({ disabled: true });
						deleteButton.jqxButton({ disabled: true });
						editButton.jqxButton({ disabled: true });
						cancelButton.jqxButton({ disabled: true });
						updateButton.jqxButton({ disabled: true });
						break;
					case "Edit":
						addButton.jqxButton({ disabled: true });
						deleteButton.jqxButton({ disabled: true });
						editButton.jqxButton({ disabled: true });
						cancelButton.jqxButton({ disabled: false });
						updateButton.jqxButton({ disabled: false });
						break;
					case "End Edit":
						addButton.jqxButton({ disabled: false });
						deleteButton.jqxButton({ disabled: false });
						editButton.jqxButton({ disabled: false });
						cancelButton.jqxButton({ disabled: true });
						updateButton.jqxButton({ disabled: true });
						break;

				}
			}

			var rowKey = null;
			$("#treeGrid").on('rowSelect', function (event) {
				var args = event.args;
				rowKey = args.key;
				updateButtons('Select');
			});
			$("#treeGrid").on('rowUnselect', function (event) {
				updateButtons('Unselect');
			});
			$("#treeGrid").on('rowEndEdit', function (event) {
				/*
				var args = event.args;
				rowKey = args.key;
				var row = args.row;
				var icurRowId = row.Id;
				var icurTypeId = row.TypeId;
				var icurName = row.Name;
				var icurParentId = row.ParentID;
				var icurLength = row.Length;
				var icurBreadth = row.Breadth;
				var icurHeight = row.Height;
				var icurCapacity = row.Capacity;
				$.ajax({
					url:getBaseURL()+"warehouse/index/warehouse-plan",
					type:"post",
					data:"warehouseId="+$("#warehouseId").val()+"&icurRowId="+icurRowId+"&icurTypeId="+icurTypeId+"&icurName="+icurName+"&icurParentId="+icurParentId+"&mode=UpdatewarehouseDet",
					//dataType:"json",
					success:function(data, textStatus, jqXHR){	
						//$("#dataTable").jqxGrid("deleterow", dataRecord.uid);
						
					},
					error:function(jqXHR, textStatus, errorThrown){
						alert(textStatus+"-----"+errorThrown);
					}
				});
				*/				
						
				updateButtons('End Edit');
			});
			$("#treeGrid").on('rowBeginEdit', function (event) {
				updateButtons('Edit');
			});

			var iCurrTypeId=0;
			var sCurrName="";
			var sCurrType="";
			var iPrevRowId=0;
			var iPrevTypeId=0;
			$('#treeGrid').on('rowSelect', function (event) {
				  var args = event.args;
				  var row = args.row;
				  iPrevRowId = row.Id;
				  iPrevTypeId=row.TypeId;
				  //console.log(row.TypeId);
			});
			addButton.click(function (event) {
				if(iPrevTypeId == "0") {
					iCurrTypeId=1;
					sCurrName="Section Demo";
					sCurrType="Section";
				}
				else if(iPrevTypeId == "1") {
					iCurrTypeId=2;
					sCurrName="Rack Demo";
					sCurrType="Rack";
				}
				else if(iPrevTypeId == "2" || iPrevTypeId=="3"){
					iCurrTypeId = 5;
					sCurrName="Bin Demo";
					sCurrType="Bin";
				}
	
				if (!addButton.jqxButton('disabled')) {
				
					var icurrParentId = iPrevRowId;
					$("#treeGrid").jqxTreeGrid('expandRow', rowKey);
					// add new empty row.
					$("#treeGrid").jqxTreeGrid('addRow', null, { "Name": sCurrName, "TypeId": iCurrTypeId, "Type": sCurrType, "ParentID" : iPrevRowId, "Length" : 0, "Breadth" : 0, "Height" : 0, "Capacity" : 0 }, 'last', rowKey);
					// select the first row and clear the selection.
					$("#treeGrid").jqxTreeGrid('clearSelection');
					$("#treeGrid").jqxTreeGrid('selectRow', newRowID);
					// edit the new row.
					$("#treeGrid").jqxTreeGrid('beginRowEdit', newRowID);
					
					/*$.ajax({
						url:getBaseURL()+"warehouse/index/warehouse-plan",
						type:"post",
						data:"warehouseId="+$("#warehouseId").val()+"&icurRowId="+rowKey+"&icurTypeId="+iCurrTypeId+"&icurName="+sCurrName+"&icurParentId="+icurrParentId+"&mode=UpdatewarehouseDet",
						//dataType:"json",
						success:function(data, textStatus, jqXHR){	
							//$("#dataTable").jqxGrid("deleterow", dataRecord.uid);
							
						},
						error:function(jqXHR, textStatus, errorThrown){
							alert(textStatus+"-----"+errorThrown);
						}
					});*/
							
					updateButtons('add');
				}
			});

			cancelButton.click(function (event) {
				if (!cancelButton.jqxButton('disabled')) {
					// cancel changes.
					$("#treeGrid").jqxTreeGrid('endRowEdit', rowKey, true);
				}
			});

			updateButton.click(function (event) {
				if (!updateButton.jqxButton('disabled')) {
					// save changes.
					$("#treeGrid").jqxTreeGrid('endRowEdit', rowKey, false);
				}
			});

			editButton.click(function () {
				if (!editButton.jqxButton('disabled')) {
					$("#treeGrid").jqxTreeGrid('beginRowEdit', rowKey);
					updateButtons('edit');

				}
			});
			deleteButton.click(function () {
			var delRowIds = new Array();
				if (!deleteButton.jqxButton('disabled')) {
					var selection = $("#treeGrid").jqxTreeGrid('getSelection');
					if (selection.length > 1) {
						var keys = new Array();
						for (var i = 0; i < selection.length; i++) {
							keys.push($("#treeGrid").jqxTreeGrid('getKey', selection[i]));
							delRowIds.push(selection[i].Id);
							
							$.ajax({
								url:getBaseURL()+"warehouse/index/warehouse-planedit",
								type:"post",
								data:"warehouseId="+$("#warehouseId").val()+"&icurRowId="+selection[i].Id+"&mode=DeletewarehouseDet",
								dataType:"json",
								success:function(data, textStatus, jqXHR){	
									//$("#dataTable").jqxGrid("deleterow", dataRecord.uid);	
								},
								error:function(jqXHR, textStatus, errorThrown){
									alert(textStatus+"-----"+errorThrown);
								}
							});
							
						}
						$("#treeGrid").jqxTreeGrid('deleteRow', keys);
					}
					else {
						$("#treeGrid").jqxTreeGrid('deleteRow', rowKey);
						delRowIds.push(rowKey);
						
						$.ajax({
							url:getBaseURL()+"warehouse/index/warehouse-planedit",
							type:"post",
							data:"warehouseId="+$("#warehouseId").val()+"&icurRowId="+rowKey+"&mode=DeletewarehouseDet",
							dataType:"json",
							success:function(data, textStatus, jqXHR){	
								//$("#dataTable").jqxGrid("deleterow", dataRecord.uid);	
							},
							error:function(jqXHR, textStatus, errorThrown){
								alert(textStatus+"-----"+errorThrown);
							}
						});			
					}

					updateButtons('delete');
				}
			});
		},
		columns: [
		{ text: 'Name', dataField: "Name", align: 'center', width: '40%' },
		{
		   text: 'Type', dataField: 'Type', width: '20%', columnType: "template",
		   createEditor: function (row, cellvalue, editor, cellText, width, height) {
			   // construct the editor. 
			   var source = ["Section", "Rack", "Bulk", "Open", "Bin"];
			   editor.jqxDropDownList({autoDropDownHeight: true, source: source, width: '100%', height: '100%',selectedIndex: 0 });
		   },
		   initEditor: function (row, cellvalue, editor, celltext, width, height) {
			   // set the editor's current value. The callback is called each time the editor is displayed.
			   editor.jqxDropDownList('selectItem', cellvalue);
		   },
		   getEditorValue: function (row, cellvalue, editor) {
			   // return the editor's value.
			   //alert(editor.val());
			   return editor.val();
		   }
		},
		{ text: 'Id', dataField: "Id", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '5%' },
		{ text: 'ParentID', dataField: "ParentID", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '5%' },
		{ text: 'TypeId', dataField: "TypeId", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '5%' },
		{ text: 'Length', dataField: "Length", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' },
		{ text: 'Breadth', dataField: "Breadth", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' },
		{ text: 'Height', dataField: "Height", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' },
		{ text: 'Capacity', dataField: "Capacity", align: 'right', cellsAlign: 'right' , cellsFormat: 'd2', width: '10%' }
		  
		]
	});
	/*$('#treeGrid').on('rowSelect', function (event) {
		  var args = event.args;
		  var row = args.row;
		  alert("The row you selected is: " + row.Name + " " + row.Type);
	});*/
$("#cancelbutton").click(function(){
    if(confirm("Would you Like to cancel")){
        $("#cancelbutton").attr("href", "<?php echo $this->basePath();?>/warehouse/index/warehouse-register");
    }
    else{
        return false;
    }

});

</script>
	